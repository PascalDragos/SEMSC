
xmc4800_optiga_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000df44  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000028  0800df44  0c00df44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0800df6c  0c00df6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00005000  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  4 .data         0000075c  1ffed000  0c00df74  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000030ac  1ffed75c  0c00e6d0  0001d75c  2**2
                  ALLOC
  6 USB_RAM       00000e00  20000000  20000000  00020000  2**2
                  ALLOC
  7 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  8 .debug_aranges 00001e38  00000000  00000000  0001d760  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00078580  00000000  00000000  0001f598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e308  00000000  00000000  00097b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001cb6d  00000000  00000000  000a5e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000061bc  00000000  00000000  000c2990  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000162b6  00000000  00000000  000c8b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00034e8b  00000000  00000000  000dee02  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004dc8  00000000  00000000  00113c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000165a  00000000  00000000  00118a55  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 d0 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 f5 50 00 08 99 02 00 08     .........P......
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 8d 50 00 08 99 02 00 08     .........P......
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	8d ce 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 e9 47 00 08 99 02 00 08     .........G......
 800019c:	f5 47 00 08 65 39 00 08 71 39 00 08 99 02 00 08     .G..e9..q9......
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	11 36 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .6..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00df74 	.word	0x0c00df74
 800024c:	1ffed000 	.word	0x1ffed000
 8000250:	0000075c 	.word	0x0000075c
 8000254:	0c00df74 	.word	0x0c00df74
 8000258:	1ffed000 	.word	0x1ffed000
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffed75c 	.word	0x1ffed75c
 8000264:	000030ac 	.word	0x000030ac
 8000268:	20000000 	.word	0x20000000
 800026c:	00000e00 	.word	0x00000e00
 8000270:	20000e00 	.word	0x20000e00
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffed000 	.word	0x1ffed000

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	080022b9 	.word	0x080022b9
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800d521 	.word	0x0800d521
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800cf41 	.word	0x0800cf41

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800029c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80002a0:	4403      	add	r3, r0
 80002a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80002a4:	f001 0503 	and.w	r5, r1, #3
 80002a8:	691e      	ldr	r6, [r3, #16]
  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80002aa:	4f1d      	ldr	r7, [pc, #116]	; (8000320 <XMC_GPIO_Init+0x84>)
{
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80002ac:	00ed      	lsls	r5, r5, #3
 80002ae:	24f8      	movs	r4, #248	; 0xf8
 80002b0:	40ac      	lsls	r4, r5
 80002b2:	ea26 0404 	bic.w	r4, r6, r4
 80002b6:	611c      	str	r4, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80002b8:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80002ba:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 80002be:	2403      	movs	r4, #3
 80002c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80002c4:	ea26 0404 	bic.w	r4, r6, r4


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80002c8:	42b8      	cmp	r0, r7
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80002ca:	6744      	str	r4, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80002cc:	d01f      	beq.n	800030e <XMC_GPIO_Init+0x72>
 80002ce:	4c15      	ldr	r4, [pc, #84]	; (8000324 <XMC_GPIO_Init+0x88>)
 80002d0:	42a0      	cmp	r0, r4
 80002d2:	d01c      	beq.n	800030e <XMC_GPIO_Init+0x72>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80002d4:	7814      	ldrb	r4, [r2, #0]
 80002d6:	0626      	lsls	r6, r4, #24
 80002d8:	d514      	bpl.n	8000304 <XMC_GPIO_Init+0x68>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80002da:	6857      	ldr	r7, [r2, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80002dc:	7a16      	ldrb	r6, [r2, #8]
 80002de:	08ca      	lsrs	r2, r1, #3
 80002e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80002e4:	408f      	lsls	r7, r1
 80002e6:	6047      	str	r7, [r0, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80002e8:	f001 0107 	and.w	r1, r1, #7
 80002ec:	6c17      	ldr	r7, [r2, #64]	; 0x40
 80002ee:	0089      	lsls	r1, r1, #2
 80002f0:	2007      	movs	r0, #7
 80002f2:	4088      	lsls	r0, r1
 80002f4:	ea27 0000 	bic.w	r0, r7, r0
 80002f8:	6410      	str	r0, [r2, #64]	; 0x40
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80002fa:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80002fc:	fa06 f101 	lsl.w	r1, r6, r1
 8000300:	4301      	orrs	r1, r0
 8000302:	6411      	str	r1, [r2, #64]	; 0x40
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000304:	691a      	ldr	r2, [r3, #16]
 8000306:	40ac      	lsls	r4, r5
 8000308:	4314      	orrs	r4, r2
 800030a:	611c      	str	r4, [r3, #16]
 800030c:	bdf0      	pop	{r4, r5, r6, r7, pc}


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800030e:	6e06      	ldr	r6, [r0, #96]	; 0x60
 8000310:	7814      	ldrb	r4, [r2, #0]
 8000312:	2701      	movs	r7, #1
 8000314:	fa07 f201 	lsl.w	r2, r7, r1
 8000318:	ea26 0202 	bic.w	r2, r6, r2
 800031c:	6602      	str	r2, [r0, #96]	; 0x60
 800031e:	e7f1      	b.n	8000304 <XMC_GPIO_Init+0x68>
 8000320:	48028e00 	.word	0x48028e00
 8000324:	48028f00 	.word	0x48028f00

08000328 <XMC_SCU_RESET_AssertPeripheralReset>:
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000328:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800032a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800032e:	4a03      	ldr	r2, [pc, #12]	; (800033c <XMC_SCU_RESET_AssertPeripheralReset+0x14>)

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000330:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8000334:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	50004410 	.word	0x50004410

08000340 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000340:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000342:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000346:	4a03      	ldr	r2, [pc, #12]	; (8000354 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000348:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800034c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	50004414 	.word	0x50004414

08000358 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
  return SystemCoreClock;
 800035a:	4a04      	ldr	r2, [pc, #16]	; (800036c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 800035c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800035e:	6810      	ldr	r0, [r2, #0]
 8000360:	f003 0301 	and.w	r3, r3, #1
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000364:	40d8      	lsrs	r0, r3
 8000366:	4770      	bx	lr
 8000368:	50004600 	.word	0x50004600
 800036c:	2003ffc0 	.word	0x2003ffc0

08000370 <XMC_SCU_CLOCK_SetUsbClockSource>:
}

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000370:	4a03      	ldr	r2, [pc, #12]	; (8000380 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 8000372:	6993      	ldr	r3, [r2, #24]
 8000374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000378:	4318      	orrs	r0, r3
 800037a:	6190      	str	r0, [r2, #24]
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600

08000384 <XMC_SCU_CLOCK_SetWdtClockSource>:
}

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 8000386:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000388:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800038c:	4318      	orrs	r0, r3
 800038e:	6250      	str	r0, [r2, #36]	; 0x24
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	50004600 	.word	0x50004600

08000398 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 800039a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800039e:	071b      	lsls	r3, r3, #28
 80003a0:	d4fb      	bmi.n	800039a <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80003a2:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 80003a4:	68d3      	ldr	r3, [r2, #12]
 80003a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003aa:	4318      	orrs	r0, r3
 80003ac:	60d0      	str	r0, [r2, #12]
 80003ae:	4770      	bx	lr
 80003b0:	50004000 	.word	0x50004000
 80003b4:	50004300 	.word	0x50004300

080003b8 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 80003ba:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80003bc:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80003be:	f023 0307 	bic.w	r3, r3, #7
 80003c2:	4303      	orrs	r3, r0
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4770      	bx	lr
 80003c8:	50004600 	.word	0x50004600

080003cc <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80003cc:	4a03      	ldr	r2, [pc, #12]	; (80003dc <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 80003ce:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80003d0:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80003d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003d6:	4303      	orrs	r3, r0
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4770      	bx	lr
 80003dc:	50004600 	.word	0x50004600

080003e0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 80003e2:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80003e4:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80003e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80003ea:	4303      	orrs	r3, r0
 80003ec:	6253      	str	r3, [r2, #36]	; 0x24
 80003ee:	4770      	bx	lr
 80003f0:	50004600 	.word	0x50004600

080003f4 <XMC_SCU_CLOCK_SetECATClockDivider>:

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <XMC_SCU_CLOCK_SetECATClockDivider+0x10>)
 80003f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 80003f8:	3801      	subs	r0, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 80003fa:	f023 0303 	bic.w	r3, r3, #3
 80003fe:	4303      	orrs	r3, r0
 8000400:	6393      	str	r3, [r2, #56]	; 0x38
 8000402:	4770      	bx	lr
 8000404:	50004600 	.word	0x50004600

08000408 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000408:	4b01      	ldr	r3, [pc, #4]	; (8000410 <XMC_SCU_CLOCK_EnableClock+0x8>)
 800040a:	6058      	str	r0, [r3, #4]
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	50004600 	.word	0x50004600

08000414 <XMC_SCU_CLOCK_GatePeripheralClock>:

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 8000414:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 8000416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800041a:	4a03      	ldr	r2, [pc, #12]	; (8000428 <XMC_SCU_CLOCK_GatePeripheralClock+0x14>)
#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800041c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 8000420:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	50004644 	.word	0x50004644

0800042c <XMC_SCU_CLOCK_UngatePeripheralClock>:
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800042c:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800042e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000432:	4a03      	ldr	r2, [pc, #12]	; (8000440 <XMC_SCU_CLOCK_UngatePeripheralClock+0x14>)

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000434:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000438:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	50004648 	.word	0x50004648

08000444 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	f042 0201 	orr.w	r2, r2, #1
 800044c:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800044e:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000450:	3801      	subs	r0, #1
 8000452:	0600      	lsls	r0, r0, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000454:	3901      	subs	r1, #1
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000456:	f042 0210 	orr.w	r2, r2, #16

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800045a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800045e:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000460:	6158      	str	r0, [r3, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000468:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	f022 0210 	bic.w	r2, r2, #16
 8000470:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000478:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800047a:	691a      	ldr	r2, [r3, #16]
 800047c:	0752      	lsls	r2, r2, #29
 800047e:	d5fc      	bpl.n	800047a <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	50004710 	.word	0x50004710

08000488 <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000488:	4b02      	ldr	r3, [pc, #8]	; (8000494 <XMC_SCU_POWER_EnableUsb+0xc>)
 800048a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	50004200 	.word	0x50004200

08000498 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000498:	4b02      	ldr	r3, [pc, #8]	; (80004a4 <XMC_SCU_POWER_DisableUsb+0xc>)
 800049a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	50004200 	.word	0x50004200

080004a8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b083      	sub	sp, #12
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004ac:	4c64      	ldr	r4, [pc, #400]	; (8000640 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80004ae:	9e08      	ldr	r6, [sp, #32]

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80004b0:	b1c0      	cbz	r0, 80004e4 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004b2:	68e0      	ldr	r0, [r4, #12]
 80004b4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80004b8:	f040 0001 	orr.w	r0, r0, #1
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80004bc:	2901      	cmp	r1, #1
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004be:	60e0      	str	r0, [r4, #12]
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80004c0:	f000 8086 	beq.w	80005d0 <XMC_SCU_CLOCK_StartSystemPll+0x128>

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80004c4:	4a5e      	ldr	r2, [pc, #376]	; (8000640 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80004c6:	6893      	ldr	r3, [r2, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 80004c8:	3e01      	subs	r6, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80004ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80004ce:	431e      	orrs	r6, r3
 80004d0:	6096      	str	r6, [r2, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80004d2:	6853      	ldr	r3, [r2, #4]
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 80004da:	6813      	ldr	r3, [r2, #0]
 80004dc:	07db      	lsls	r3, r3, #31
 80004de:	d5fc      	bpl.n	80004da <XMC_SCU_CLOCK_StartSystemPll+0x32>
    {
      /* wait for prescaler mode */
    }
  }
}
 80004e0:	b003      	add	sp, #12
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004e4:	68e0      	ldr	r0, [r4, #12]
 80004e6:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80004ea:	f020 0001 	bic.w	r0, r0, #1
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80004ee:	2901      	cmp	r1, #1
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004f0:	60e0      	str	r0, [r4, #12]
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80004f2:	d1e7      	bne.n	80004c4 <XMC_SCU_CLOCK_StartSystemPll+0x1c>
 80004f4:	e88d 000c 	stmia.w	sp, {r2, r3}
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80004f8:	f004 f9f6 	bl	80048e8 <OSCHP_GetFrequency>
 80004fc:	4d51      	ldr	r5, [pc, #324]	; (8000644 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 80004fe:	fba5 3500 	umull	r3, r5, r5, r0
 8000502:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8000506:	0cad      	lsrs	r5, r5, #18
 8000508:	05ad      	lsls	r5, r5, #22
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800050a:	494d      	ldr	r1, [pc, #308]	; (8000640 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800050c:	4c4e      	ldr	r4, [pc, #312]	; (8000648 <XMC_SCU_CLOCK_StartSystemPll+0x1a0>)

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800050e:	684f      	ldr	r7, [r1, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000510:	484e      	ldr	r0, [pc, #312]	; (800064c <XMC_SCU_CLOCK_StartSystemPll+0x1a4>)
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000512:	f047 0701 	orr.w	r7, r7, #1
 8000516:	604f      	str	r7, [r1, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000518:	684f      	ldr	r7, [r1, #4]
 800051a:	f047 0710 	orr.w	r7, r7, #16
 800051e:	604f      	str	r7, [r1, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000520:	f8d1 e008 	ldr.w	lr, [r1, #8]
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000524:	fb03 f505 	mul.w	r5, r3, r5

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000528:	1e57      	subs	r7, r2, #1
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800052a:	fbb5 f5f2 	udiv	r5, r5, r2

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800052e:	ea0e 0000 	and.w	r0, lr, r0
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000532:	fba4 4205 	umull	r4, r2, r4, r5
 8000536:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800053a:	1e5c      	subs	r4, r3, #1
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800053c:	0e93      	lsrs	r3, r2, #26
 800053e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000542:	3b01      	subs	r3, #1

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000544:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000548:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800054a:	684b      	ldr	r3, [r1, #4]
 800054c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000550:	604b      	str	r3, [r1, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000552:	684b      	ldr	r3, [r1, #4]
 8000554:	f023 0310 	bic.w	r3, r3, #16
 8000558:	604b      	str	r3, [r1, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 800055a:	684b      	ldr	r3, [r1, #4]
 800055c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000560:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000562:	6808      	ldr	r0, [r1, #0]
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000566:	0742      	lsls	r2, r0, #29
 8000568:	d5fb      	bpl.n	8000562 <XMC_SCU_CLOCK_StartSystemPll+0xba>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	f022 0201 	bic.w	r2, r2, #1
 8000570:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000572:	4619      	mov	r1, r3
 8000574:	680b      	ldr	r3, [r1, #0]
 8000576:	4a32      	ldr	r2, [pc, #200]	; (8000640 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000578:	f013 0401 	ands.w	r4, r3, #1
 800057c:	d1fa      	bne.n	8000574 <XMC_SCU_CLOCK_StartSystemPll+0xcc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 800057e:	4b34      	ldr	r3, [pc, #208]	; (8000650 <XMC_SCU_CLOCK_StartSystemPll+0x1a8>)
 8000580:	fba3 1305 	umull	r1, r3, r3, r5
 8000584:	0edb      	lsrs	r3, r3, #27
    if (kdiv < kdiv_temp)
 8000586:	429e      	cmp	r6, r3
 8000588:	d33f      	bcc.n	800060a <XMC_SCU_CLOCK_StartSystemPll+0x162>
 800058a:	4f32      	ldr	r7, [pc, #200]	; (8000654 <XMC_SCU_CLOCK_StartSystemPll+0x1ac>)
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 800058c:	4b32      	ldr	r3, [pc, #200]	; (8000658 <XMC_SCU_CLOCK_StartSystemPll+0x1b0>)
 800058e:	086d      	lsrs	r5, r5, #1
 8000590:	fba3 2305 	umull	r2, r3, r3, r5
 8000594:	0edb      	lsrs	r3, r3, #27
    if (kdiv < kdiv_temp)
 8000596:	429e      	cmp	r6, r3
 8000598:	d31d      	bcc.n	80005d6 <XMC_SCU_CLOCK_StartSystemPll+0x12e>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800059a:	4a29      	ldr	r2, [pc, #164]	; (8000640 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 800059c:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 800059e:	3e01      	subs	r6, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80005a0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005a4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80005a8:	6096      	str	r6, [r2, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 80005aa:	f001 fe43 	bl	8002234 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	4a24      	ldr	r2, [pc, #144]	; (8000644 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 80005b2:	fba2 3203 	umull	r3, r2, r2, r3
 80005b6:	0c92      	lsrs	r2, r2, #18
 80005b8:	2332      	movs	r3, #50	; 0x32
 80005ba:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 80005be:	2300      	movs	r3, #0
 80005c0:	2a00      	cmp	r2, #0
 80005c2:	d08d      	beq.n	80004e0 <XMC_SCU_CLOCK_StartSystemPll+0x38>
  {
    __NOP();
 80005c4:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005c6:	3301      	adds	r3, #1
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d1fb      	bne.n	80005c4 <XMC_SCU_CLOCK_StartSystemPll+0x11c>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 80005cc:	b003      	add	sp, #12
 80005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80005d0:	f04f 65c0 	mov.w	r5, #100663296	; 0x6000000
 80005d4:	e799      	b.n	800050a <XMC_SCU_CLOCK_StartSystemPll+0x62>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80005d6:	491a      	ldr	r1, [pc, #104]	; (8000640 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80005d8:	688a      	ldr	r2, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80005da:	3b01      	subs	r3, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80005dc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005e0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80005e4:	608b      	str	r3, [r1, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 80005e6:	f001 fe25 	bl	8002234 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	4a15      	ldr	r2, [pc, #84]	; (8000644 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 80005ee:	fba2 3203 	umull	r3, r2, r2, r3
 80005f2:	0c92      	lsrs	r2, r2, #18
 80005f4:	2332      	movs	r3, #50	; 0x32
 80005f6:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d0cd      	beq.n	800059a <XMC_SCU_CLOCK_StartSystemPll+0xf2>
 80005fe:	2300      	movs	r3, #0
  {
    __NOP();
 8000600:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000602:	3301      	adds	r3, #1
 8000604:	4293      	cmp	r3, r2
 8000606:	d1fb      	bne.n	8000600 <XMC_SCU_CLOCK_StartSystemPll+0x158>
 8000608:	e7c7      	b.n	800059a <XMC_SCU_CLOCK_StartSystemPll+0xf2>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800060a:	6891      	ldr	r1, [r2, #8]
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800060c:	4f11      	ldr	r7, [pc, #68]	; (8000654 <XMC_SCU_CLOCK_StartSystemPll+0x1ac>)
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800060e:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000612:	3b01      	subs	r3, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000614:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000618:	6093      	str	r3, [r2, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 800061a:	f001 fe0b 	bl	8002234 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000622:	fba2 3203 	umull	r3, r2, r2, r3
 8000626:	0c92      	lsrs	r2, r2, #18
 8000628:	2332      	movs	r3, #50	; 0x32
 800062a:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 800062e:	2a00      	cmp	r2, #0
 8000630:	d0ac      	beq.n	800058c <XMC_SCU_CLOCK_StartSystemPll+0xe4>
 8000632:	4623      	mov	r3, r4
  {
    __NOP();
 8000634:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000636:	3301      	adds	r3, #1
 8000638:	4293      	cmp	r3, r2
 800063a:	d1fb      	bne.n	8000634 <XMC_SCU_CLOCK_StartSystemPll+0x18c>
 800063c:	e7a6      	b.n	800058c <XMC_SCU_CLOCK_StartSystemPll+0xe4>
 800063e:	bf00      	nop
 8000640:	50004710 	.word	0x50004710
 8000644:	431bde83 	.word	0x431bde83
 8000648:	aaaaaaab 	.word	0xaaaaaaab
 800064c:	f08080ff 	.word	0xf08080ff
 8000650:	88888889 	.word	0x88888889
 8000654:	2003ffc0 	.word	0x2003ffc0
 8000658:	b60b60b7 	.word	0xb60b60b7

0800065c <XMC_SCU_CLOCK_Init>:
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800065c:	4978      	ldr	r1, [pc, #480]	; (8000840 <XMC_SCU_CLOCK_Init+0x1e4>)

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800065e:	4a79      	ldr	r2, [pc, #484]	; (8000844 <XMC_SCU_CLOCK_Init+0x1e8>)
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000660:	68cb      	ldr	r3, [r1, #12]
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000662:	b5f0      	push	{r4, r5, r6, r7, lr}
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000668:	60cb      	str	r3, [r1, #12]

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800066a:	6813      	ldr	r3, [r2, #0]
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800066c:	4605      	mov	r5, r0

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800066e:	07d8      	lsls	r0, r3, #31
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000670:	b083      	sub	sp, #12

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000672:	d404      	bmi.n	800067e <XMC_SCU_CLOCK_Init+0x22>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000674:	2301      	movs	r3, #1
 8000676:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000678:	6813      	ldr	r3, [r2, #0]
 800067a:	07db      	lsls	r3, r3, #31
 800067c:	d5fc      	bpl.n	8000678 <XMC_SCU_CLOCK_Init+0x1c>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800067e:	4a72      	ldr	r2, [pc, #456]	; (8000848 <XMC_SCU_CLOCK_Init+0x1ec>)
 8000680:	6813      	ldr	r3, [r2, #0]
 8000682:	0599      	lsls	r1, r3, #22
 8000684:	d505      	bpl.n	8000692 <XMC_SCU_CLOCK_Init+0x36>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068a:	6093      	str	r3, [r2, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	059f      	lsls	r7, r3, #22
 8000690:	d4fc      	bmi.n	800068c <XMC_SCU_CLOCK_Init+0x30>

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);

  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
 8000692:	79eb      	ldrb	r3, [r5, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	f040 8091 	bne.w	80007bc <XMC_SCU_CLOCK_Init+0x160>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800069a:	7a68      	ldrb	r0, [r5, #9]
}

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800069c:	4a6b      	ldr	r2, [pc, #428]	; (800084c <XMC_SCU_CLOCK_Init+0x1f0>)
 800069e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80006a2:	071b      	lsls	r3, r3, #28
 80006a4:	d4fb      	bmi.n	800069e <XMC_SCU_CLOCK_Init+0x42>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80006a6:	496a      	ldr	r1, [pc, #424]	; (8000850 <XMC_SCU_CLOCK_Init+0x1f4>)
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 80006a8:	4b68      	ldr	r3, [pc, #416]	; (800084c <XMC_SCU_CLOCK_Init+0x1f0>)
 80006aa:	68ca      	ldr	r2, [r1, #12]
 80006ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006b0:	4302      	orrs	r2, r0
 80006b2:	60ca      	str	r2, [r1, #12]
 80006b4:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
  while (XMC_SCU_GetMirrorStatus() != 0)
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d1fb      	bne.n	80006b4 <XMC_SCU_CLOCK_Init+0x58>

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80006bc:	4a65      	ldr	r2, [pc, #404]	; (8000854 <XMC_SCU_CLOCK_Init+0x1f8>)
  while (XMC_SCU_GetMirrorStatus() != 0)
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80006be:	7a29      	ldrb	r1, [r5, #8]

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80006c0:	6853      	ldr	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80006c2:	2901      	cmp	r1, #1

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80006c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80006ca:	f000 809f 	beq.w	800080c <XMC_SCU_CLOCK_Init+0x1b0>
 80006ce:	4e62      	ldr	r6, [pc, #392]	; (8000858 <XMC_SCU_CLOCK_Init+0x1fc>)
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 80006d0:	f001 fdb0 	bl	8002234 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80006d4:	6833      	ldr	r3, [r6, #0]
 80006d6:	4a61      	ldr	r2, [pc, #388]	; (800085c <XMC_SCU_CLOCK_Init+0x200>)
 80006d8:	fba2 3203 	umull	r3, r2, r2, r3
 80006dc:	0c92      	lsrs	r2, r2, #18
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 80006e4:	b122      	cbz	r2, 80006f0 <XMC_SCU_CLOCK_Init+0x94>
 80006e6:	2300      	movs	r3, #0
  {
    __NOP();
 80006e8:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80006ea:	3301      	adds	r3, #1
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d1fb      	bne.n	80006e8 <XMC_SCU_CLOCK_Init+0x8c>
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80006f0:	4b53      	ldr	r3, [pc, #332]	; (8000840 <XMC_SCU_CLOCK_Init+0x1e4>)
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80006f2:	7c2c      	ldrb	r4, [r5, #16]
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80006f4:	68da      	ldr	r2, [r3, #12]
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
 80006f6:	79a8      	ldrb	r0, [r5, #6]
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80006f8:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80006fc:	1e62      	subs	r2, r4, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80006fe:	430a      	orrs	r2, r1
 8000700:	60da      	str	r2, [r3, #12]
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000702:	691a      	ldr	r2, [r3, #16]
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000704:	7c6c      	ldrb	r4, [r5, #17]
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000706:	f022 0101 	bic.w	r1, r2, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800070a:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800070c:	430a      	orrs	r2, r1
 800070e:	611a      	str	r2, [r3, #16]
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000710:	6a1a      	ldr	r2, [r3, #32]

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000712:	7cac      	ldrb	r4, [r5, #18]
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000714:	f022 0101 	bic.w	r1, r2, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000718:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800071a:	430a      	orrs	r2, r1
 800071c:	621a      	str	r2, [r3, #32]
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800071e:	695a      	ldr	r2, [r3, #20]
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000720:	7cec      	ldrb	r4, [r5, #19]
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000722:	f022 0101 	bic.w	r1, r2, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000726:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
 800072c:	bb28      	cbnz	r0, 800077a <XMC_SCU_CLOCK_Init+0x11e>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800072e:	78e9      	ldrb	r1, [r5, #3]
 8000730:	b9a1      	cbnz	r1, 800075c <XMC_SCU_CLOCK_Init+0x100>
}

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000732:	4a48      	ldr	r2, [pc, #288]	; (8000854 <XMC_SCU_CLOCK_Init+0x1f8>)
 8000734:	6853      	ldr	r3, [r2, #4]
 8000736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	6053      	str	r3, [r2, #4]
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000740:	68eb      	ldr	r3, [r5, #12]
 8000742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000746:	d104      	bne.n	8000752 <XMC_SCU_CLOCK_Init+0xf6>
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000748:	4a3d      	ldr	r2, [pc, #244]	; (8000840 <XMC_SCU_CLOCK_Init+0x1e4>)
 800074a:	68d3      	ldr	r3, [r2, #12]
 800074c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000750:	60d3      	str	r3, [r2, #12]
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
}
 8000752:	b003      	add	sp, #12
 8000754:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
 8000758:	f001 bd6c 	b.w	8002234 <SystemCoreClockUpdate>
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800075c:	4a3d      	ldr	r2, [pc, #244]	; (8000854 <XMC_SCU_CLOCK_Init+0x1f8>)
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800075e:	88a8      	ldrh	r0, [r5, #4]
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000760:	6853      	ldr	r3, [r2, #4]
 8000762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000766:	f023 0302 	bic.w	r3, r3, #2
 800076a:	6053      	str	r3, [r2, #4]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800076c:	78ac      	ldrb	r4, [r5, #2]
 800076e:	786a      	ldrb	r2, [r5, #1]
 8000770:	782b      	ldrb	r3, [r5, #0]
 8000772:	9400      	str	r4, [sp, #0]
 8000774:	f7ff fe98 	bl	80004a8 <XMC_SCU_CLOCK_StartSystemPll>
 8000778:	e7e2      	b.n	8000740 <XMC_SCU_CLOCK_Init+0xe4>
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800077a:	4c36      	ldr	r4, [pc, #216]	; (8000854 <XMC_SCU_CLOCK_Init+0x1f8>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800077c:	4f38      	ldr	r7, [pc, #224]	; (8000860 <XMC_SCU_CLOCK_Init+0x204>)
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800077e:	6863      	ldr	r3, [r4, #4]
 8000780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000784:	6063      	str	r3, [r4, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000786:	687e      	ldr	r6, [r7, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000788:	f004 f8ae 	bl	80048e8 <OSCHP_GetFrequency>
 800078c:	4a35      	ldr	r2, [pc, #212]	; (8000864 <XMC_SCU_CLOCK_Init+0x208>)
 800078e:	fba2 3200 	umull	r3, r2, r2, r0
 8000792:	0d12      	lsrs	r2, r2, #20
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000794:	f426 2370 	bic.w	r3, r6, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000798:	3a01      	subs	r2, #1
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800079a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800079e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007a2:	607b      	str	r3, [r7, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80007a4:	6863      	ldr	r3, [r4, #4]
 80007a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007aa:	6063      	str	r3, [r4, #4]
}

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80007ac:	4622      	mov	r2, r4
 80007ae:	6813      	ldr	r3, [r2, #0]
 80007b0:	f403 7360 	and.w	r3, r3, #896	; 0x380
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80007b4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80007b8:	d1f9      	bne.n	80007ae <XMC_SCU_CLOCK_Init+0x152>
 80007ba:	e7b8      	b.n	800072e <XMC_SCU_CLOCK_Init+0xd2>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80007bc:	492a      	ldr	r1, [pc, #168]	; (8000868 <XMC_SCU_CLOCK_Init+0x20c>)
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80007be:	4a24      	ldr	r2, [pc, #144]	; (8000850 <XMC_SCU_CLOCK_Init+0x1f4>)
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80007c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007c4:	60cb      	str	r3, [r1, #12]
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80007c6:	69d3      	ldr	r3, [r2, #28]
 80007c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007cc:	61d3      	str	r3, [r2, #28]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 80007ce:	684a      	ldr	r2, [r1, #4]
 80007d0:	4b25      	ldr	r3, [pc, #148]	; (8000868 <XMC_SCU_CLOCK_Init+0x20c>)
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80007d2:	0216      	lsls	r6, r2, #8
 80007d4:	d5fb      	bpl.n	80007ce <XMC_SCU_CLOCK_Init+0x172>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80007d6:	491e      	ldr	r1, [pc, #120]	; (8000850 <XMC_SCU_CLOCK_Init+0x1f4>)
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80007d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80007dc:	2008      	movs	r0, #8
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80007de:	60da      	str	r2, [r3, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 80007e0:	461a      	mov	r2, r3
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80007e2:	6048      	str	r0, [r1, #4]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 80007e4:	6851      	ldr	r1, [r2, #4]
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <XMC_SCU_CLOCK_Init+0x20c>)
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80007e8:	038c      	lsls	r4, r1, #14
 80007ea:	d5fb      	bpl.n	80007e4 <XMC_SCU_CLOCK_Init+0x188>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80007ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80007f0:	4917      	ldr	r1, [pc, #92]	; (8000850 <XMC_SCU_CLOCK_Init+0x1f4>)
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80007f2:	60da      	str	r2, [r3, #12]
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80007f4:	68ca      	ldr	r2, [r1, #12]
 80007f6:	f042 0208 	orr.w	r2, r2, #8
 80007fa:	60ca      	str	r2, [r1, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 80007fc:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 80007fe:	0310      	lsls	r0, r2, #12
 8000800:	d5fc      	bpl.n	80007fc <XMC_SCU_CLOCK_Init+0x1a0>

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <XMC_SCU_CLOCK_Init+0x1f4>)
 8000804:	6813      	ldr	r3, [r2, #0]
  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000806:	0719      	lsls	r1, r3, #28
 8000808:	d4fc      	bmi.n	8000804 <XMC_SCU_CLOCK_Init+0x1a8>
 800080a:	e746      	b.n	800069a <XMC_SCU_CLOCK_Init+0x3e>
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 800080c:	6853      	ldr	r3, [r2, #4]
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800080e:	4e12      	ldr	r6, [pc, #72]	; (8000858 <XMC_SCU_CLOCK_Init+0x1fc>)
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000810:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000814:	6053      	str	r3, [r2, #4]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 8000816:	f001 fd0d 	bl	8002234 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <XMC_SCU_CLOCK_Init+0x200>)
 800081c:	6833      	ldr	r3, [r6, #0]
 800081e:	fba2 2303 	umull	r2, r3, r2, r3
 8000822:	0c9a      	lsrs	r2, r3, #18
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	fb03 f302 	mul.w	r3, r3, r2

  for (i = 0U; i < delay; ++i)
 800082a:	b11b      	cbz	r3, 8000834 <XMC_SCU_CLOCK_Init+0x1d8>
  {
    __NOP();
 800082c:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800082e:	3401      	adds	r4, #1
 8000830:	429c      	cmp	r4, r3
 8000832:	d1fb      	bne.n	800082c <XMC_SCU_CLOCK_Init+0x1d0>
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
    XMC_SCU_lDelay(100UL);

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <XMC_SCU_CLOCK_Init+0x1f8>)
 8000836:	6853      	ldr	r3, [r2, #4]
 8000838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800083c:	6053      	str	r3, [r2, #4]
 800083e:	e747      	b.n	80006d0 <XMC_SCU_CLOCK_Init+0x74>
 8000840:	50004600 	.word	0x50004600
 8000844:	50004200 	.word	0x50004200
 8000848:	50004400 	.word	0x50004400
 800084c:	50004000 	.word	0x50004000
 8000850:	50004300 	.word	0x50004300
 8000854:	50004710 	.word	0x50004710
 8000858:	2003ffc0 	.word	0x2003ffc0
 800085c:	431bde83 	.word	0x431bde83
 8000860:	50004700 	.word	0x50004700
 8000864:	6b5fca6b 	.word	0x6b5fca6b
 8000868:	50004074 	.word	0x50004074

0800086c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800086c:	b538      	push	{r3, r4, r5, lr}
 800086e:	4604      	mov	r4, r0
{
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000870:	2010      	movs	r0, #16
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000872:	460d      	mov	r5, r1
{
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000874:	f7ff fdc8 	bl	8000408 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <XMC_CCU4_Init+0x74>)
 800087a:	429c      	cmp	r4, r3
 800087c:	d01a      	beq.n	80008b4 <XMC_CCU4_Init+0x48>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <XMC_CCU4_Init+0x78>)
 8000880:	429c      	cmp	r4, r3
 8000882:	d01e      	beq.n	80008c2 <XMC_CCU4_Init+0x56>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <XMC_CCU4_Init+0x7c>)
 8000886:	429c      	cmp	r4, r3
 8000888:	d022      	beq.n	80008d0 <XMC_CCU4_Init+0x64>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <XMC_CCU4_Init+0x80>)
 800088c:	429c      	cmp	r4, r3
 800088e:	d00a      	beq.n	80008a6 <XMC_CCU4_Init+0x3a>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000890:	68e3      	ldr	r3, [r4, #12]
 8000892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000896:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 8000898:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800089a:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800089e:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
  
  module->GCTRL = gctrl;
 80008a2:	6021      	str	r1, [r4, #0]
 80008a4:	bd38      	pop	{r3, r4, r5, pc}
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 80008a6:	4812      	ldr	r0, [pc, #72]	; (80008f0 <XMC_CCU4_Init+0x84>)
 80008a8:	f7ff fdc0 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <XMC_CCU4_Init+0x84>)
 80008ae:	f7ff fd47 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80008b2:	e7ed      	b.n	8000890 <XMC_CCU4_Init+0x24>

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80008b4:	2004      	movs	r0, #4
 80008b6:	f7ff fdb9 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff fd40 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80008c0:	e7e6      	b.n	8000890 <XMC_CCU4_Init+0x24>
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f7ff fdb2 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80008c8:	2008      	movs	r0, #8
 80008ca:	f7ff fd39 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80008ce:	e7df      	b.n	8000890 <XMC_CCU4_Init+0x24>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 80008d0:	2010      	movs	r0, #16
 80008d2:	f7ff fdab 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80008d6:	2010      	movs	r0, #16
 80008d8:	f7ff fd32 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80008dc:	e7d8      	b.n	8000890 <XMC_CCU4_Init+0x24>
 80008de:	bf00      	nop
 80008e0:	4000c000 	.word	0x4000c000
 80008e4:	40010000 	.word	0x40010000
 80008e8:	40014000 	.word	0x40014000
 80008ec:	48004000 	.word	0x48004000
 80008f0:	10000001 	.word	0x10000001

080008f4 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80008f4:	b470      	push	{r4, r5, r6}
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80008f6:	794b      	ldrb	r3, [r1, #5]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80008f8:	790e      	ldrb	r6, [r1, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80008fa:	6809      	ldr	r1, [r1, #0]
 80008fc:	6141      	str	r1, [r0, #20]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80008fe:	461c      	mov	r4, r3
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000900:	461d      	mov	r5, r3
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000902:	4632      	mov	r2, r6
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000904:	f3c3 1340 	ubfx	r3, r3, #5, #1
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000908:	f006 060f 	and.w	r6, r6, #15
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800090c:	f005 050f 	and.w	r5, r5, #15
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000910:	f3c4 1100 	ubfx	r1, r4, #4, #1
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000914:	051b      	lsls	r3, r3, #20
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000916:	0912      	lsrs	r2, r2, #4
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000918:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800091a:	6246      	str	r6, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800091c:	6205      	str	r5, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800091e:	6181      	str	r1, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
}
 8000920:	bc70      	pop	{r4, r5, r6}
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000922:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8000928:	6a83      	ldr	r3, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 800092a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 800092e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  slice->FPC = fpc;
 8000932:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000934:	6241      	str	r1, [r0, #36]	; 0x24
 8000936:	4770      	bx	lr

08000938 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000938:	2909      	cmp	r1, #9
 800093a:	b430      	push	{r4, r5}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800093c:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 8000940:	d80d      	bhi.n	800095e <XMC_CCU4_SLICE_SetInterruptNode+0x26>
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)
 8000944:	4d09      	ldr	r5, [pc, #36]	; (800096c <XMC_CCU4_SLICE_SetInterruptNode+0x34>)
 8000946:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800094a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800094e:	43db      	mvns	r3, r3
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
 8000950:	4023      	ands	r3, r4
  srs |= (uint32_t)sr << pos;
 8000952:	408a      	lsls	r2, r1
 8000954:	431a      	orrs	r2, r3
  slice->SRS = srs;
 8000956:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 800095a:	bc30      	pop	{r4, r5}
 800095c:	4770      	bx	lr

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800095e:	210c      	movs	r1, #12
 8000960:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8000964:	e7f4      	b.n	8000950 <XMC_CCU4_SLICE_SetInterruptNode+0x18>
 8000966:	bf00      	nop
 8000968:	0800d770 	.word	0x0800d770
 800096c:	0800d748 	.word	0x0800d748

08000970 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4604      	mov	r4, r0
{
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000974:	2010      	movs	r0, #16
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000976:	460d      	mov	r5, r1
{
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000978:	f7ff fd46 	bl	8000408 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <XMC_CCU8_Init+0x50>)
 800097e:	429c      	cmp	r4, r3
 8000980:	d016      	beq.n	80009b0 <XMC_CCU8_Init+0x40>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <XMC_CCU8_Init+0x54>)
 8000984:	429c      	cmp	r4, r3
 8000986:	d00a      	beq.n	800099e <XMC_CCU8_Init+0x2e>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000988:	68e3      	ldr	r3, [r4, #12]
 800098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098e:	60e3      	str	r3, [r4, #12]
  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 8000990:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000992:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8000996:	ea43 3185 	orr.w	r1, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 800099a:	6021      	str	r1, [r4, #0]
 800099c:	bd38      	pop	{r3, r4, r5, pc}
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 800099e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009a2:	f7ff fd43 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 80009a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009aa:	f7ff fcc9 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80009ae:	e7eb      	b.n	8000988 <XMC_CCU8_Init+0x18>

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 80009b0:	2080      	movs	r0, #128	; 0x80
 80009b2:	f7ff fd3b 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 80009b6:	2080      	movs	r0, #128	; 0x80
 80009b8:	f7ff fcc2 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80009bc:	e7e4      	b.n	8000988 <XMC_CCU8_Init+0x18>
 80009be:	bf00      	nop
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40024000 	.word	0x40024000

080009c8 <XMC_CCU8_SLICE_CompareInit>:
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80009c8:	7b4b      	ldrb	r3, [r1, #13]
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80009ca:	b470      	push	{r4, r5, r6}
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80009cc:	7b0d      	ldrb	r5, [r1, #12]
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80009ce:	2601      	movs	r6, #1
 80009d0:	6106      	str	r6, [r0, #16]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80009d2:	462c      	mov	r4, r5
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80009d4:	461a      	mov	r2, r3
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80009d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80009da:	680e      	ldr	r6, [r1, #0]
 80009dc:	6146      	str	r6, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80009de:	051b      	lsls	r3, r3, #20
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80009e0:	f005 050f 	and.w	r5, r5, #15
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80009e4:	0924      	lsrs	r4, r4, #4
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80009e6:	f002 020f 	and.w	r2, r2, #15
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80009ea:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80009ec:	6245      	str	r5, [r0, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80009ee:	62c4      	str	r4, [r0, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80009f0:	6202      	str	r2, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 80009f2:	684b      	ldr	r3, [r1, #4]
 80009f4:	6183      	str	r3, [r0, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 80009f6:	688b      	ldr	r3, [r1, #8]
 80009f8:	f083 0314 	eor.w	r3, r3, #20
 80009fc:	6483      	str	r3, [r0, #72]	; 0x48
#endif
}
 80009fe:	bc70      	pop	{r4, r5, r6}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000a04:	6341      	str	r1, [r0, #52]	; 0x34
 8000a06:	4770      	bx	lr

08000a08 <XMC_CCU8_SLICE_SetPrescaler>:
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* If the prescaler is not running, update directly the divider*/
  fpc = slice->FPC;
 8000a08:	6a83      	ldr	r3, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 8000a0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 8000a0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  slice->FPC = fpc;
 8000a12:	6283      	str	r3, [r0, #40]	; 0x28

  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000a14:	6241      	str	r1, [r0, #36]	; 0x24
 8000a16:	4770      	bx	lr

08000a18 <XMC_CCU8_SLICE_SetTimerCompareMatch>:
                                         const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8000a18:	b109      	cbz	r1, 8000a1e <XMC_CCU8_SLICE_SetTimerCompareMatch+0x6>
  {
    slice->CR1S = (uint32_t) compare_val;
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8000a1a:	6442      	str	r2, [r0, #68]	; 0x44
 8000a1c:	4770      	bx	lr
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
  {
    slice->CR1S = (uint32_t) compare_val;
 8000a1e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8000a24:	2909      	cmp	r1, #9
 8000a26:	b430      	push	{r4, r5}

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8000a28:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 8000a2c:	d80d      	bhi.n	8000a4a <XMC_CCU8_SLICE_SetInterruptNode+0x26>
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <XMC_CCU8_SLICE_SetInterruptNode+0x30>)
 8000a30:	4d09      	ldr	r5, [pc, #36]	; (8000a58 <XMC_CCU8_SLICE_SetInterruptNode+0x34>)
 8000a32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a36:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8000a3a:	43db      	mvns	r3, r3
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
      pos  = CCU8_CC8_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask;
 8000a3c:	4023      	ands	r3, r4
  srs |= (uint32_t)sr << pos;
 8000a3e:	408a      	lsls	r2, r1
 8000a40:	431a      	orrs	r2, r3
  
  slice->SRS = srs;
 8000a42:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 8000a46:	bc30      	pop	{r4, r5}
 8000a48:	4770      	bx	lr

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8000a4a:	210c      	movs	r1, #12
 8000a4c:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8000a50:	e7f4      	b.n	8000a3c <XMC_CCU8_SLICE_SetInterruptNode+0x18>
 8000a52:	bf00      	nop
 8000a54:	0800d798 	.word	0x0800d798
 8000a58:	0800d7c0 	.word	0x0800d7c0

08000a5c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000a5c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000a60:	4418      	add	r0, r3
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000a62:	f001 0103 	and.w	r1, r1, #3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000a66:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000a68:	00c9      	lsls	r1, r1, #3
 8000a6a:	6904      	ldr	r4, [r0, #16]
 8000a6c:	23f8      	movs	r3, #248	; 0xf8
 8000a6e:	408b      	lsls	r3, r1
 8000a70:	ea24 0303 	bic.w	r3, r4, r3
 8000a74:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000a76:	6903      	ldr	r3, [r0, #16]
}
 8000a78:	f85d 4b04 	ldr.w	r4, [sp], #4
{
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000a7c:	408a      	lsls	r2, r1
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	6103      	str	r3, [r0, #16]
}
 8000a82:	4770      	bx	lr

08000a84 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000a84:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000a86:	0049      	lsls	r1, r1, #1
 8000a88:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	408b      	lsls	r3, r1
 8000a8e:	ea24 0303 	bic.w	r3, r4, r3
 8000a92:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000a94:	6f43      	ldr	r3, [r0, #116]	; 0x74
}
 8000a96:	f85d 4b04 	ldr.w	r4, [sp], #4
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000a9a:	408a      	lsls	r2, r1
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	460d      	mov	r5, r1
 8000aa8:	4604      	mov	r4, r0
  XMC_USIC_CH_Enable(channel);
 8000aaa:	f001 fad7 	bl	800205c <XMC_USIC_CH_Enable>
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8000aae:	88ab      	ldrh	r3, [r5, #4]
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
  XMC_USIC_CH_Enable(channel);
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8000ab0:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <XMC_I2C_CH_Init+0x70>)
 8000ab2:	6362      	str	r2, [r4, #52]	; 0x34
  channel->CCR = 0x0U;
}
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8000ab4:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 8000ab8:	f5b2 4ff0 	cmp.w	r2, #30720	; 0x7800
 8000abc:	d023      	beq.n	8000b06 <XMC_I2C_CH_Init+0x62>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	63e3      	str	r3, [r4, #60]	; 0x3c
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8000ac2:	6829      	ldr	r1, [r5, #0]
{
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <XMC_I2C_CH_Init+0x74>)
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d914      	bls.n	8000af4 <XMC_I2C_CH_Init+0x50>
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <XMC_I2C_CH_Init+0x78>)
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d908      	bls.n	8000ae2 <XMC_I2C_CH_Init+0x3e>

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8000ad0:	f44f 61a0 	mov.w	r1, #1280	; 0x500

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8000ad8:	2300      	movs	r3, #0

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8000ada:	63a1      	str	r1, [r4, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8000adc:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8000ade:	6423      	str	r3, [r4, #64]	; 0x40
 8000ae0:	bd38      	pop	{r3, r4, r5, pc}
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8000ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8000aea:	4620      	mov	r0, r4
 8000aec:	2219      	movs	r2, #25
 8000aee:	f001 faf7 	bl	80020e0 <XMC_USIC_CH_SetBaudrate>
 8000af2:	e7ed      	b.n	8000ad0 <XMC_I2C_CH_Init+0x2c>
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8000af4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000af6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000afa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8000afc:	4620      	mov	r0, r4
 8000afe:	220a      	movs	r2, #10
 8000b00:	f001 faee 	bl	80020e0 <XMC_USIC_CH_SetBaudrate>
 8000b04:	e7e4      	b.n	8000ad0 <XMC_I2C_CH_Init+0x2c>
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8000b06:	005a      	lsls	r2, r3, #1
 8000b08:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000b12:	e7d6      	b.n	8000ac2 <XMC_I2C_CH_Init+0x1e>
 8000b14:	073f0303 	.word	0x073f0303
 8000b18:	000186a0 	.word	0x000186a0
 8000b1c:	00061a80 	.word	0x00061a80

08000b20 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8000b20:	b510      	push	{r4, lr}
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8000b22:	4c0f      	ldr	r4, [pc, #60]	; (8000b60 <XMC_I2C_CH_SetBaudrate+0x40>)
 8000b24:	42a1      	cmp	r1, r4
 8000b26:	d90f      	bls.n	8000b48 <XMC_I2C_CH_SetBaudrate+0x28>
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8000b28:	4c0e      	ldr	r4, [pc, #56]	; (8000b64 <XMC_I2C_CH_SetBaudrate+0x44>)
 8000b2a:	42a1      	cmp	r1, r4
 8000b2c:	d901      	bls.n	8000b32 <XMC_I2C_CH_SetBaudrate+0x12>
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8000b2e:	2001      	movs	r0, #1
  }
  
  return status;
}
 8000b30:	bd10      	pop	{r4, pc}
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8000b32:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8000b3a:	2219      	movs	r2, #25
 8000b3c:	f001 fad0 	bl	80020e0 <XMC_USIC_CH_SetBaudrate>
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
 8000b40:	3000      	adds	r0, #0
 8000b42:	bf18      	it	ne
 8000b44:	2001      	movne	r0, #1
 8000b46:	bd10      	pop	{r4, pc}
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8000b48:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b4e:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8000b50:	220a      	movs	r2, #10
 8000b52:	f001 fac5 	bl	80020e0 <XMC_USIC_CH_SetBaudrate>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8000b56:	3000      	adds	r0, #0
 8000b58:	bf18      	it	ne
 8000b5a:	2001      	movne	r0, #1
 8000b5c:	bd10      	pop	{r4, pc}
 8000b5e:	bf00      	nop
 8000b60:	000186a0 	.word	0x000186a0
 8000b64:	00061a80 	.word	0x00061a80

08000b68 <XMC_I2C_CH_MasterStart>:
  {
    temp |= 0x1U;
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000b68:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
  if (command == XMC_I2C_CH_CMD_READ)
 8000b6c:	2a01      	cmp	r2, #1
  {
    temp |= 0x1U;
 8000b6e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000b72:	bf08      	it	eq
 8000b74:	f041 0101 	orreq.w	r1, r1, #1
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000b78:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000b7c:	d002      	beq.n	8000b84 <XMC_I2C_CH_MasterStart+0x1c>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8000b7e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000b82:	4770      	bx	lr
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000b84:	6b83      	ldr	r3, [r0, #56]	; 0x38
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000b86:	061b      	lsls	r3, r3, #24
 8000b88:	d4fc      	bmi.n	8000b84 <XMC_I2C_CH_MasterStart+0x1c>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8000b8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b90:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = temp;
 8000b92:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000b96:	4770      	bx	lr

08000b98 <XMC_I2C_CH_MasterRepeatedStart>:
  {
    tmp |= 0x1U;
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000b98:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
  if (command == XMC_I2C_CH_CMD_READ)
 8000b9c:	2a01      	cmp	r2, #1
  {
    tmp |= 0x1U;
 8000b9e:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
 8000ba2:	bf08      	it	eq
 8000ba4:	f041 0101 	orreq.w	r1, r1, #1
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000ba8:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000bac:	d002      	beq.n	8000bb4 <XMC_I2C_CH_MasterRepeatedStart+0x1c>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8000bae:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000bb2:	4770      	bx	lr
 8000bb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000bb6:	061b      	lsls	r3, r3, #24
 8000bb8:	d4fc      	bmi.n	8000bb4 <XMC_I2C_CH_MasterRepeatedStart+0x1c>
 8000bba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc0:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = tmp;
 8000bc2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000bc6:	4770      	bx	lr

08000bc8 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000bc8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000bcc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000bd0:	d004      	beq.n	8000bdc <XMC_I2C_CH_MasterStop+0x14>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8000bd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd6:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000bda:	4770      	bx	lr
 8000bdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000bde:	061b      	lsls	r3, r3, #24
 8000be0:	d4fc      	bmi.n	8000bdc <XMC_I2C_CH_MasterStop+0x14>
 8000be2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8000be4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bec:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000bee:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8000bf2:	4770      	bx	lr

08000bf4 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000bf4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000bf8:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000bfc:	d002      	beq.n	8000c04 <XMC_I2C_CH_MasterTransmit+0x10>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8000bfe:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000c02:	4770      	bx	lr
 8000c04:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000c06:	061b      	lsls	r3, r3, #24
 8000c08:	d4fc      	bmi.n	8000c04 <XMC_I2C_CH_MasterTransmit+0x10>
 8000c0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c10:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8000c12:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000c16:	4770      	bx	lr

08000c18 <XMC_I2C_CH_MasterReceiveAck>:

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000c18:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000c1c:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000c20:	d004      	beq.n	8000c2c <XMC_I2C_CH_MasterReceiveAck+0x14>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8000c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c26:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000c2a:	4770      	bx	lr
 8000c2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000c2e:	061b      	lsls	r3, r3, #24
 8000c30:	d4fc      	bmi.n	8000c2c <XMC_I2C_CH_MasterReceiveAck+0x14>
 8000c32:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8000c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c3c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000c3e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8000c42:	4770      	bx	lr

08000c44 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000c44:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000c48:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000c4c:	d004      	beq.n	8000c58 <XMC_I2C_CH_MasterReceiveNack+0x14>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8000c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c52:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000c56:	4770      	bx	lr
 8000c58:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000c5a:	061b      	lsls	r3, r3, #24
 8000c5c:	d4fc      	bmi.n	8000c58 <XMC_I2C_CH_MasterReceiveNack+0x14>
 8000c5e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8000c60:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c68:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000c6a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8000c6e:	4770      	bx	lr

08000c70 <XMC_I2C_CH_GetReceivedData>:
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000c70:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000c74:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint8_t)channel->RBUF;
 8000c78:	bf0c      	ite	eq
 8000c7a:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8000c7c:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000c80:	b2c0      	uxtb	r0, r0
  }

  return retval;
}
 8000c82:	4770      	bx	lr

08000c84 <XMC_I2C_CH_EnableEvent>:
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
 8000c84:	6c03      	ldr	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8000c86:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <XMC_I2C_CH_EnableEvent+0x1c>)
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000c88:	b410      	push	{r4}
  channel->CCR |= (event&0x1fc00U);
 8000c8a:	f401 34fe 	and.w	r4, r1, #130048	; 0x1fc00
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8000c92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 8000c94:	f85d 4b04 	ldr.w	r4, [sp], #4
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8000c98:	400a      	ands	r2, r1
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 8000c9e:	4770      	bx	lr
 8000ca0:	41fc0000 	.word	0x41fc0000

08000ca4 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8000ca4:	6c03      	ldr	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <XMC_I2C_CH_DisableEvent+0x20>)
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000ca8:	b410      	push	{r4}
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8000caa:	f401 34fe 	and.w	r4, r1, #130048	; 0x1fc00
 8000cae:	ea23 0304 	bic.w	r3, r3, r4
 8000cb2:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8000cb4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 8000cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8000cba:	400a      	ands	r2, r1
 8000cbc:	ea23 0302 	bic.w	r3, r3, r2
 8000cc0:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 8000cc2:	4770      	bx	lr
 8000cc4:	41fc0000 	.word	0x41fc0000

08000cc8 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	460d      	mov	r5, r1
 8000ccc:	4604      	mov	r4, r0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8000cce:	f001 f9c5 	bl	800205c <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8000cd2:	79ea      	ldrb	r2, [r5, #7]
 8000cd4:	b332      	cbz	r2, 8000d24 <XMC_UART_CH_Init+0x5c>
 8000cd6:	0856      	lsrs	r6, r2, #1
 8000cd8:	3601      	adds	r6, #1
 8000cda:	0236      	lsls	r6, r6, #8
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8000cdc:	4620      	mov	r0, r4
 8000cde:	6829      	ldr	r1, [r5, #0]
 8000ce0:	f001 f9fe 	bl	80020e0 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000ce4:	79ab      	ldrb	r3, [r5, #6]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	4333      	orrs	r3, r6
 8000cf4:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8000cf6:	792b      	ldrb	r3, [r5, #4]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	061b      	lsls	r3, r3, #24
 8000cfc:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8000d00:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000d02:	796b      	ldrb	r3, [r5, #5]
 8000d04:	b903      	cbnz	r3, 8000d08 <XMC_UART_CH_Init+0x40>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000d06:	792b      	ldrb	r3, [r5, #4]
 8000d08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d10:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000d12:	f44f 61a0 	mov.w	r1, #1280	; 0x500

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000d16:	892b      	ldrh	r3, [r5, #8]
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000d18:	63a1      	str	r1, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1e:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000d20:	6423      	str	r3, [r4, #64]	; 0x40
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f44f 6610 	mov.w	r6, #2304	; 0x900
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8000d28:	2210      	movs	r2, #16
 8000d2a:	e7d7      	b.n	8000cdc <XMC_UART_CH_Init+0x14>

08000d2c <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000d2c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000d30:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000d34:	d002      	beq.n	8000d3c <XMC_UART_CH_Transmit+0x10>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8000d36:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000d3a:	4770      	bx	lr
 8000d3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000d3e:	061b      	lsls	r3, r3, #24
 8000d40:	d4fc      	bmi.n	8000d3c <XMC_UART_CH_Transmit+0x10>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8000d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d46:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8000d48:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000d50:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000d54:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint16_t)channel->RBUF;
 8000d58:	bf0c      	ite	eq
 8000d5a:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000d5c:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000d60:	b280      	uxth	r0, r0
  }

  return retval;
}
 8000d62:	4770      	bx	lr

08000d64 <XMC_USBD_GetCapabilities>:
  cap.event_remote_wakeup = 1U;
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
 8000d64:	2000      	movs	r0, #0
 8000d66:	f36f 0000 	bfc	r0, #0, #1
 8000d6a:	f36f 0041 	bfc	r0, #1, #1
 8000d6e:	f040 001c 	orr.w	r0, r0, #28
 8000d72:	f36f 1045 	bfc	r0, #5, #1
 8000d76:	f440 70e0 	orr.w	r0, r0, #448	; 0x1c0
}
 8000d7a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000d7e:	4770      	bx	lr

08000d80 <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <XMC_USBD_DeviceConnect+0x14>)
 8000d82:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000d86:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 8000d88:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
 8000d8c:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000d8e:	2000      	movs	r0, #0
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	1fff0178 	.word	0x1fff0178

08000d98 <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <XMC_USBD_DeviceDisconnect+0x14>)
 8000d9a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000d9e:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8000da0:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8000da4:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000da6:	2000      	movs	r0, #0
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	1fff0178 	.word	0x1fff0178

08000db0 <XMC_USBD_DeviceGetState>:
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 8000db0:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000db2:	7b01      	ldrb	r1, [r0, #12]

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8000db4:	b470      	push	{r4, r5, r6}
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 8000db6:	f892 41fe 	ldrb.w	r4, [r2, #510]	; 0x1fe
/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
  XMC_USBD_STATE_t state={0U};
 8000dba:	2000      	movs	r0, #0
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 8000dbc:	f004 0401 	and.w	r4, r4, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d07c      	beq.n	8000ebe <XMC_USBD_DeviceGetState+0x10e>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000dc4:	6853      	ldr	r3, [r2, #4]
 8000dc6:	071e      	lsls	r6, r3, #28
 8000dc8:	bf56      	itet	pl
 8000dca:	6853      	ldrpl	r3, [r2, #4]
    {
      result = 1U;
 8000dcc:	2301      	movmi	r3, #1
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000dce:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000dd2:	2901      	cmp	r1, #1
 8000dd4:	d954      	bls.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000dd6:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8000dd8:	4e3a      	ldr	r6, [pc, #232]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 8000dda:	072d      	lsls	r5, r5, #28
 8000ddc:	d461      	bmi.n	8000ea2 <XMC_USBD_DeviceGetState+0xf2>
 8000dde:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    {
      result = 1U;
 8000de0:	f015 0f10 	tst.w	r5, #16
 8000de4:	bf18      	it	ne
 8000de6:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000de8:	2902      	cmp	r1, #2
 8000dea:	d049      	beq.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000dec:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
 8000dee:	4e35      	ldr	r6, [pc, #212]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 8000df0:	072d      	lsls	r5, r5, #28
 8000df2:	d462      	bmi.n	8000eba <XMC_USBD_DeviceGetState+0x10a>
 8000df4:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
    {
      result = 1U;
 8000df6:	f015 0f10 	tst.w	r5, #16
 8000dfa:	bf18      	it	ne
 8000dfc:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000dfe:	2903      	cmp	r1, #3
 8000e00:	d03e      	beq.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e02:	f8d2 50a0 	ldr.w	r5, [r2, #160]	; 0xa0
 8000e06:	4e2f      	ldr	r6, [pc, #188]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 8000e08:	072d      	lsls	r5, r5, #28
 8000e0a:	d454      	bmi.n	8000eb6 <XMC_USBD_DeviceGetState+0x106>
 8000e0c:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
    {
      result = 1U;
 8000e10:	f015 0f10 	tst.w	r5, #16
 8000e14:	bf18      	it	ne
 8000e16:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e18:	2904      	cmp	r1, #4
 8000e1a:	d031      	beq.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e1c:	f8d2 50d4 	ldr.w	r5, [r2, #212]	; 0xd4
 8000e20:	4e28      	ldr	r6, [pc, #160]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 8000e22:	072d      	lsls	r5, r5, #28
 8000e24:	d445      	bmi.n	8000eb2 <XMC_USBD_DeviceGetState+0x102>
 8000e26:	f8d6 50d4 	ldr.w	r5, [r6, #212]	; 0xd4
    {
      result = 1U;
 8000e2a:	f015 0f10 	tst.w	r5, #16
 8000e2e:	bf18      	it	ne
 8000e30:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e32:	2905      	cmp	r1, #5
 8000e34:	d024      	beq.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e36:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
 8000e3a:	4e22      	ldr	r6, [pc, #136]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 8000e3c:	072d      	lsls	r5, r5, #28
 8000e3e:	d436      	bmi.n	8000eae <XMC_USBD_DeviceGetState+0xfe>
 8000e40:	f8d6 5108 	ldr.w	r5, [r6, #264]	; 0x108
    {
      result = 1U;
 8000e44:	f015 0f10 	tst.w	r5, #16
 8000e48:	bf18      	it	ne
 8000e4a:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e4c:	2906      	cmp	r1, #6
 8000e4e:	d017      	beq.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e50:	f8d2 513c 	ldr.w	r5, [r2, #316]	; 0x13c
 8000e54:	4e1b      	ldr	r6, [pc, #108]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 8000e56:	072d      	lsls	r5, r5, #28
 8000e58:	d427      	bmi.n	8000eaa <XMC_USBD_DeviceGetState+0xfa>
 8000e5a:	f8d6 513c 	ldr.w	r5, [r6, #316]	; 0x13c
    {
      result = 1U;
 8000e5e:	f015 0f10 	tst.w	r5, #16
 8000e62:	bf18      	it	ne
 8000e64:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e66:	2907      	cmp	r1, #7
 8000e68:	d00a      	beq.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e6a:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
 8000e6e:	4d15      	ldr	r5, [pc, #84]	; (8000ec4 <XMC_USBD_DeviceGetState+0x114>)
 8000e70:	0709      	lsls	r1, r1, #28
 8000e72:	d418      	bmi.n	8000ea6 <XMC_USBD_DeviceGetState+0xf6>
 8000e74:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
    {
      result = 1U;
 8000e78:	f011 0f10 	tst.w	r1, #16
 8000e7c:	bf18      	it	ne
 8000e7e:	2301      	movne	r3, #1
 8000e80:	f003 0301 	and.w	r3, r3, #1
{
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
  state.active = XMC_USBD_lDeviceActive(obj);
  state.powered = xmc_device.IsPowered;
 8000e84:	f892 21fe 	ldrb.w	r2, [r2, #510]	; 0x1fe
  return state;
 8000e88:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8000e8c:	f362 0000 	bfi	r0, r2, #0, #1
 8000e90:	f364 0041 	bfi	r0, r4, #1, #1
 8000e94:	f363 0082 	bfi	r0, r3, #2, #1
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f363 00c4 	bfi	r0, r3, #3, #2
}
 8000e9e:	bc70      	pop	{r4, r5, r6}
 8000ea0:	4770      	bx	lr
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e7a0      	b.n	8000de8 <XMC_USBD_DeviceGetState+0x38>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e7ea      	b.n	8000e80 <XMC_USBD_DeviceGetState+0xd0>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e7db      	b.n	8000e66 <XMC_USBD_DeviceGetState+0xb6>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e7cc      	b.n	8000e4c <XMC_USBD_DeviceGetState+0x9c>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e7bd      	b.n	8000e32 <XMC_USBD_DeviceGetState+0x82>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e7ae      	b.n	8000e18 <XMC_USBD_DeviceGetState+0x68>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e79f      	b.n	8000dfe <XMC_USBD_DeviceGetState+0x4e>
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e7e0      	b.n	8000e84 <XMC_USBD_DeviceGetState+0xd4>
 8000ec2:	bf00      	nop
 8000ec4:	1fff0178 	.word	0x1fff0178

08000ec8 <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <XMC_USBD_DeviceSetAddress+0x14>)
 8000eca:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000ece:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8000ed0:	b911      	cbnz	r1, 8000ed8 <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 8000ed2:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 8000ed6:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 8000ed8:	2000      	movs	r0, #0
 8000eda:	4770      	bx	lr
 8000edc:	1fff0178 	.word	0x1fff0178

08000ee0 <XMC_USBD_EndpointStall>:
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8000ee0:	f000 020f 	and.w	r2, r0, #15
  if (stall)
 8000ee4:	b1e9      	cbz	r1, 8000f22 <XMC_USBD_EndpointStall+0x42>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000ee6:	2334      	movs	r3, #52	; 0x34
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000ee8:	f010 0f80 	tst.w	r0, #128	; 0x80
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000eec:	fb03 f302 	mul.w	r3, r3, r2
 8000ef0:	481d      	ldr	r0, [pc, #116]	; (8000f68 <XMC_USBD_EndpointStall+0x88>)
 8000ef2:	5cc3      	ldrb	r3, [r0, r3]
 8000ef4:	f003 030f 	and.w	r3, r3, #15
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000ef8:	bf0b      	itete	eq
 8000efa:	eb00 0383 	addeq.w	r3, r0, r3, lsl #2
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000efe:	336a      	addne	r3, #106	; 0x6a
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f00:	f8d3 11c4 	ldreq.w	r1, [r3, #452]	; 0x1c4
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f04:	f850 1023 	ldrne.w	r1, [r0, r3, lsl #2]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f08:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8000f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f0e:	600b      	str	r3, [r1, #0]
    }
    ep->isStalled = 1U;
 8000f10:	2334      	movs	r3, #52	; 0x34
 8000f12:	fb03 0202 	mla	r2, r3, r2, r0
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 8000f16:	2000      	movs	r0, #0
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
      data.b.stall = 1U;
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
    }
    ep->isStalled = 1U;
 8000f18:	7913      	ldrb	r3, [r2, #4]
 8000f1a:	f043 0320 	orr.w	r3, r3, #32
 8000f1e:	7113      	strb	r3, [r2, #4]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 8000f20:	4770      	bx	lr

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8000f22:	b410      	push	{r4}
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f24:	2334      	movs	r3, #52	; 0x34
    ep->isStalled = 1U;
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000f26:	f010 0f80 	tst.w	r0, #128	; 0x80
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f2a:	fb03 f302 	mul.w	r3, r3, r2
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <XMC_USBD_EndpointStall+0x88>)
 8000f30:	5cc3      	ldrb	r3, [r0, r3]
 8000f32:	f003 030f 	and.w	r3, r3, #15
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f36:	bf0b      	itete	eq
 8000f38:	eb00 0383 	addeq.w	r3, r0, r3, lsl #2
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f3c:	336a      	addne	r3, #106	; 0x6a
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f3e:	f8d3 41c4 	ldreq.w	r4, [r3, #452]	; 0x1c4
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f42:	f850 4023 	ldrne.w	r4, [r0, r3, lsl #2]
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f46:	6823      	ldr	r3, [r4, #0]
			data.b.stall = 0U;
 8000f48:	f361 5355 	bfi	r3, r1, #21, #1
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f50:	6023      	str	r3, [r4, #0]
		}
		ep->isStalled = 0U;
 8000f52:	2334      	movs	r3, #52	; 0x34
 8000f54:	fb03 0202 	mla	r2, r3, r2, r0
	}
	return XMC_USBD_STATUS_OK;
}
 8000f58:	f85d 4b04 	ldr.w	r4, [sp], #4
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
			data.b.stall = 0U;
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
 8000f5c:	7913      	ldrb	r3, [r2, #4]
 8000f5e:	f36f 1345 	bfc	r3, #5, #1
	}
	return XMC_USBD_STATUS_OK;
}
 8000f62:	2000      	movs	r0, #0
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
			data.b.stall = 0U;
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
 8000f64:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
}
 8000f66:	4770      	bx	lr
 8000f68:	1fff0178 	.word	0x1fff0178

08000f6c <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000f6c:	f000 000f 	and.w	r0, r0, #15
  if (ep->address_u.address_st.direction)
 8000f70:	2234      	movs	r2, #52	; 0x34
 8000f72:	fb02 f200 	mul.w	r2, r2, r0
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <XMC_USBD_EndpointAbort+0x40>)
 8000f78:	5c99      	ldrb	r1, [r3, r2]
 8000f7a:	441a      	add	r2, r3
 8000f7c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep->inInUse = 0U;
 8000f80:	6851      	ldr	r1, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
 8000f82:	bf0c      	ite	eq
 8000f84:	f021 0110 	biceq.w	r1, r1, #16
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  if (ep->address_u.address_st.direction)
  {
    ep->inInUse = 0U;
 8000f88:	f021 0108 	bicne.w	r1, r1, #8
 8000f8c:	6051      	str	r1, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 8000f8e:	2234      	movs	r2, #52	; 0x34
 8000f90:	fb02 3300 	mla	r3, r2, r0, r3
  ep->outBytesAvailable = 0U;
 8000f94:	2000      	movs	r0, #0
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 8000f96:	791a      	ldrb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
  ep->outOffset = 0U;
  ep->xferLength = 0U;
  ep->xferCount = 0U;
 8000f98:	62d8      	str	r0, [r3, #44]	; 0x2c
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 8000f9a:	f36f 1245 	bfc	r2, #5, #1
 8000f9e:	711a      	strb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 8000fa0:	6118      	str	r0, [r3, #16]
  ep->outOffset = 0U;
 8000fa2:	6198      	str	r0, [r3, #24]
  ep->xferLength = 0U;
 8000fa4:	6298      	str	r0, [r3, #40]	; 0x28
  ep->xferCount = 0U;
  ep->xferTotal = 0U;
 8000fa6:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	1fff0178 	.word	0x1fff0178

08000fb0 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <XMC_USBD_EndpointUnconfigure+0xf8>)
/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000fb4:	f000 000f 	and.w	r0, r0, #15
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000fb8:	2134      	movs	r1, #52	; 0x34
 8000fba:	fb01 f100 	mul.w	r1, r1, r0
 8000fbe:	185a      	adds	r2, r3, r1
 8000fc0:	f813 e001 	ldrb.w	lr, [r3, r1]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000fc4:	7914      	ldrb	r4, [r2, #4]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fc6:	f8d3 71a4 	ldr.w	r7, [r3, #420]	; 0x1a4
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000fca:	f014 0f04 	tst.w	r4, #4
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000fce:	f00e 060f 	and.w	r6, lr, #15
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fd2:	69fd      	ldr	r5, [r7, #28]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8000fd4:	f04f 0100 	mov.w	r1, #0
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000fd8:	d05a      	beq.n	8001090 <XMC_USBD_EndpointUnconfigure+0xe0>
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
 8000fda:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
 8000fde:	f36f 1445 	bfc	r4, #5, #1
 8000fe2:	7114      	strb	r4, [r2, #4]
    ep->outInUse =  0U;
 8000fe4:	6854      	ldr	r4, [r2, #4]
 8000fe6:	f024 0410 	bic.w	r4, r4, #16
 8000fea:	6054      	str	r4, [r2, #4]
    ep->inInUse =  0U;
 8000fec:	6854      	ldr	r4, [r2, #4]
     result = XMC_USBD_STATUS_ERROR;
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8000fee:	f361 31cf 	bfi	r1, r1, #15, #1
    data.b.epdis =  1U;
    data.b.snak =  1U;
 8000ff2:	f041 4190 	orr.w	r1, r1, #1207959552	; 0x48000000
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
 8000ff6:	f024 0408 	bic.w	r4, r4, #8
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000ffa:	f04f 0c01 	mov.w	ip, #1
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000ffe:	f01e 0f80 	tst.w	lr, #128	; 0x80
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
 8001002:	f36f 5155 	bfc	r1, #21, #1
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
 8001006:	6054      	str	r4, [r2, #4]
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001008:	fa0c fc06 	lsl.w	ip, ip, r6
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800100c:	d02f      	beq.n	800106e <XMC_USBD_EndpointUnconfigure+0xbe>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800100e:	f106 0e6a 	add.w	lr, r6, #106	; 0x6a
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001012:	ea6f 040c 	mvn.w	r4, ip
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8001016:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800101a:	f8ce 1000 	str.w	r1, [lr]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800101e:	7912      	ldrb	r2, [r2, #4]
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001020:	fa1f fe84 	uxth.w	lr, r4
 8001024:	ea0e 0c05 	and.w	ip, lr, r5
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001028:	0792      	lsls	r2, r2, #30
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 800102a:	f36c 050f 	bfi	r5, ip, #0, #16
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800102e:	d10d      	bne.n	800104c <XMC_USBD_EndpointUnconfigure+0x9c>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <XMC_USBD_EndpointUnconfigure+0xfc>)
 8001032:	6812      	ldr	r2, [r2, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8001034:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001038:	7b52      	ldrb	r2, [r2, #13]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800103a:	f8d6 61c4 	ldr.w	r6, [r6, #452]	; 0x1c4
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 800103e:	ea0e 4e15 	and.w	lr, lr, r5, lsr #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001042:	2a01      	cmp	r2, #1
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8001044:	6031      	str	r1, [r6, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8001046:	f36e 451f 	bfi	r5, lr, #16, #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800104a:	d028      	beq.n	800109e <XMC_USBD_EndpointUnconfigure+0xee>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 800104c:	2234      	movs	r2, #52	; 0x34
 800104e:	fb02 3000 	mla	r0, r2, r0, r3
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8001052:	61fd      	str	r5, [r7, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8001054:	8880      	ldrh	r0, [r0, #4]
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001056:	f8b3 11fc 	ldrh.w	r1, [r3, #508]	; 0x1fc
 800105a:	f3c0 1083 	ubfx	r0, r0, #6, #4
 800105e:	2201      	movs	r2, #1
 8001060:	4082      	lsls	r2, r0
 8001062:	ea21 0202 	bic.w	r2, r1, r2
 8001066:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
    result = XMC_USBD_STATUS_OK;
 800106a:	2000      	movs	r0, #0
 800106c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800106e:	7912      	ldrb	r2, [r2, #4]
 8001070:	0794      	lsls	r4, r2, #30
 8001072:	d10f      	bne.n	8001094 <XMC_USBD_EndpointUnconfigure+0xe4>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8001074:	f106 026a 	add.w	r2, r6, #106	; 0x6a
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001078:	ea6f 040c 	mvn.w	r4, ip
 800107c:	fa1f fe84 	uxth.w	lr, r4
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8001080:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001084:	ea0e 0c05 	and.w	ip, lr, r5
 8001088:	f36c 050f 	bfi	r5, ip, #0, #16
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800108c:	6011      	str	r1, [r2, #0]
 800108e:	e7cf      	b.n	8001030 <XMC_USBD_EndpointUnconfigure+0x80>
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
  {
     result = XMC_USBD_STATUS_ERROR;
 8001090:	2001      	movs	r0, #1
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001094:	ea6f 040c 	mvn.w	r4, ip
 8001098:	fa1f fe84 	uxth.w	lr, r4
 800109c:	e7c8      	b.n	8001030 <XMC_USBD_EndpointUnconfigure+0x80>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 800109e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a0:	4014      	ands	r4, r2
 80010a2:	637c      	str	r4, [r7, #52]	; 0x34
 80010a4:	e7d2      	b.n	800104c <XMC_USBD_EndpointUnconfigure+0x9c>
 80010a6:	bf00      	nop
 80010a8:	1fff0178 	.word	0x1fff0178
 80010ac:	1fff0174 	.word	0x1fff0174

080010b0 <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <XMC_USBD_GetFrameNumber+0x10>)
 80010b2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010b6:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 80010b8:	f3c0 200d 	ubfx	r0, r0, #8, #14
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	1fff0178 	.word	0x1fff0178

080010c4 <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <XMC_USBD_IsEnumDone+0x18>)
 80010c6:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 80010ca:	f000 0005 	and.w	r0, r0, #5
}
 80010ce:	f1a0 0005 	sub.w	r0, r0, #5
 80010d2:	fab0 f080 	clz	r0, r0
 80010d6:	0940      	lsrs	r0, r0, #5
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	1fff0178 	.word	0x1fff0178

080010e0 <XMC_USBD_Uninitialize>:
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <XMC_USBD_Uninitialize+0x20>)
 80010e2:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 80010e6:	b508      	push	{r3, lr}
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80010e8:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 80010ea:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 80010ee:	6053      	str	r3, [r2, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 80010f0:	2100      	movs	r1, #0
 80010f2:	f44f 7202 	mov.w	r2, #520	; 0x208
 80010f6:	f00c fa5c 	bl	800d5b2 <memset>
  return XMC_USBD_STATUS_OK;
}
 80010fa:	2000      	movs	r0, #0
 80010fc:	bd08      	pop	{r3, pc}
 80010fe:	bf00      	nop
 8001100:	1fff0178 	.word	0x1fff0178

08001104 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8001104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001108:	4d9a      	ldr	r5, [pc, #616]	; (8001374 <XMC_USBD_EndpointConfigure+0x270>)
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800110a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8001378 <XMC_USBD_EndpointConfigure+0x274>
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800110e:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001112:	f8df a268 	ldr.w	sl, [pc, #616]	; 800137c <XMC_USBD_EndpointConfigure+0x278>
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001116:	f8d3 e01c 	ldr.w	lr, [r3, #28]
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 800111a:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8001380 <XMC_USBD_EndpointConfigure+0x27c>
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800111e:	f000 0c0f 	and.w	ip, r0, #15
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8001122:	2734      	movs	r7, #52	; 0x34
 8001124:	fb07 f70c 	mul.w	r7, r7, ip
 8001128:	19ee      	adds	r6, r5, r7
 800112a:	f106 0308 	add.w	r3, r6, #8
 800112e:	2400      	movs	r4, #0
 8001130:	51ec      	str	r4, [r5, r7]
 8001132:	6074      	str	r4, [r6, #4]
 8001134:	f843 4b04 	str.w	r4, [r3], #4
 8001138:	f843 4b04 	str.w	r4, [r3], #4
 800113c:	f843 4b04 	str.w	r4, [r3], #4
 8001140:	f843 4b04 	str.w	r4, [r3], #4
 8001144:	f843 4b04 	str.w	r4, [r3], #4
 8001148:	f843 4b04 	str.w	r4, [r3], #4
 800114c:	f843 4b04 	str.w	r4, [r3], #4
 8001150:	f843 4b04 	str.w	r4, [r3], #4
 8001154:	f843 4b04 	str.w	r4, [r3], #4
 8001158:	f843 4b04 	str.w	r4, [r3], #4
 800115c:	601c      	str	r4, [r3, #0]
  /* do ep configuration */
  ep->address_u.address = ep_addr;
  ep->isConfigured = 1U;
 800115e:	7933      	ldrb	r3, [r6, #4]
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8001160:	55e8      	strb	r0, [r5, r7]
  ep->isConfigured = 1U;
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	7133      	strb	r3, [r6, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8001168:	6874      	ldr	r4, [r6, #4]
 800116a:	4633      	mov	r3, r6
 800116c:	f362 24d1 	bfi	r4, r2, #11, #7
 8001170:	f843 4f04 	str.w	r4, [r3, #4]!
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8001174:	2800      	cmp	r0, #0
 8001176:	685c      	ldr	r4, [r3, #4]
 8001178:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 800117c:	bf08      	it	eq
 800117e:	2040      	moveq	r0, #64	; 0x40
 8001180:	f360 0412 	bfi	r4, r0, #0, #19
 8001184:	605c      	str	r4, [r3, #4]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001186:	5deb      	ldrb	r3, [r5, r7]
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	0218      	lsls	r0, r3, #8
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800118e:	f508 6be0 	add.w	fp, r8, #1792	; 0x700
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001192:	eb08 0400 	add.w	r4, r8, r0
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001196:	eb00 080b 	add.w	r8, r0, fp
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800119a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800119e:	6230      	str	r0, [r6, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 80011a0:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 80011a4:	6170      	str	r0, [r6, #20]
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80011a6:	61f4      	str	r4, [r6, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80011a8:	f8c6 800c 	str.w	r8, [r6, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80011ac:	5de8      	ldrb	r0, [r5, r7]
 80011ae:	0600      	lsls	r0, r0, #24
 80011b0:	d41f      	bmi.n	80011f2 <XMC_USBD_EndpointConfigure+0xee>
 80011b2:	2900      	cmp	r1, #0
 80011b4:	d07f      	beq.n	80012b6 <XMC_USBD_EndpointConfigure+0x1b2>
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80011b6:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 80011ba:	2001      	movs	r0, #1
 80011bc:	f8d4 61c4 	ldr.w	r6, [r4, #452]	; 0x1c4
 80011c0:	6834      	ldr	r4, [r6, #0]
 80011c2:	4098      	lsls	r0, r3
		/*enable endpoint */
		data.b.usbactep = 1U;
 80011c4:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80011c8:	f361 4493 	bfi	r4, r1, #18, #2
 80011cc:	b280      	uxth	r0, r0
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80011ce:	f362 040a 	bfi	r4, r2, #0, #11
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 80011d2:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 80011d6:	f36f 5455 	bfc	r4, #21, #1
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80011da:	ea40 401e 	orr.w	r0, r0, lr, lsr #16
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80011de:	6034      	str	r4, [r6, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80011e0:	f360 4e1f 	bfi	lr, r0, #16, #16
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80011e4:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
  return XMC_USBD_STATUS_OK;
}
 80011e8:	2000      	movs	r0, #0
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80011ea:	f8c3 e01c 	str.w	lr, [r3, #28]
  return XMC_USBD_STATUS_OK;
}
 80011ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80011f2:	f103 006a 	add.w	r0, r3, #106	; 0x6a
 80011f6:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 80011fa:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 80011fc:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8001200:	f361 4493 	bfi	r4, r1, #18, #2
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001204:	2900      	cmp	r1, #0
 8001206:	d05f      	beq.n	80012c8 <XMC_USBD_EndpointConfigure+0x1c4>
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8001208:	f362 040a 	bfi	r4, r2, #0, #11
 800120c:	f8b5 01fc 	ldrh.w	r0, [r5, #508]	; 0x1fc
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8001210:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001214:	f010 0701 	ands.w	r7, r0, #1
			data.b.mps = ep_max_packet_size;
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
 8001218:	f36f 5455 	bfc	r4, #21, #1
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 800121c:	f000 808e 	beq.w	800133c <XMC_USBD_EndpointConfigure+0x238>
 8001220:	0787      	lsls	r7, r0, #30
 8001222:	f140 808e 	bpl.w	8001342 <XMC_USBD_EndpointConfigure+0x23e>
 8001226:	0747      	lsls	r7, r0, #29
 8001228:	f140 808f 	bpl.w	800134a <XMC_USBD_EndpointConfigure+0x246>
 800122c:	0707      	lsls	r7, r0, #28
 800122e:	f140 8090 	bpl.w	8001352 <XMC_USBD_EndpointConfigure+0x24e>
 8001232:	06c7      	lsls	r7, r0, #27
 8001234:	f140 8091 	bpl.w	800135a <XMC_USBD_EndpointConfigure+0x256>
 8001238:	0687      	lsls	r7, r0, #26
 800123a:	f140 8092 	bpl.w	8001362 <XMC_USBD_EndpointConfigure+0x25e>
 800123e:	0647      	lsls	r7, r0, #25
 8001240:	f140 8093 	bpl.w	800136a <XMC_USBD_EndpointConfigure+0x266>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 8001244:	0607      	lsls	r7, r0, #24
 8001246:	d449      	bmi.n	80012dc <XMC_USBD_EndpointConfigure+0x1d8>
 8001248:	2707      	movs	r7, #7
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 800124a:	f04f 0880 	mov.w	r8, #128	; 0x80
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
  {
    xmc_device.txfifomsk |= mask;
 800124e:	ea48 0000 	orr.w	r0, r8, r0
 8001252:	f8a5 01fc 	strh.w	r0, [r5, #508]	; 0x1fc
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001256:	2034      	movs	r0, #52	; 0x34
 8001258:	fb00 fc0c 	mul.w	ip, r0, ip
 800125c:	eb05 090c 	add.w	r9, r5, ip
		data.b.txfnum = ep->txFifoNum;
 8001260:	f367 5499 	bfi	r4, r7, #22, #4
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001264:	f8b9 a004 	ldrh.w	sl, [r9, #4]
 8001268:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001374 <XMC_USBD_EndpointConfigure+0x270>
 800126c:	f367 1a89 	bfi	sl, r7, #6, #4
 8001270:	f8a9 a004 	strh.w	sl, [r9, #4]
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001274:	2001      	movs	r0, #1
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8001276:	6034      	str	r4, [r6, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001278:	4098      	lsls	r0, r3
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800127a:	f815 400c 	ldrb.w	r4, [r5, ip]
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800127e:	b280      	uxth	r0, r0
 8001280:	ea40 060e 	orr.w	r6, r0, lr
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001284:	0624      	lsls	r4, r4, #24
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001286:	f366 0e0f 	bfi	lr, r6, #0, #16
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800128a:	d529      	bpl.n	80012e0 <XMC_USBD_EndpointConfigure+0x1dc>
 800128c:	2900      	cmp	r1, #0
 800128e:	d1a9      	bne.n	80011e4 <XMC_USBD_EndpointConfigure+0xe0>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001290:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001294:	f8d3 61c4 	ldr.w	r6, [r3, #452]	; 0x1c4
 8001298:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 800129a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800129e:	f361 4493 	bfi	r4, r1, #18, #2
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 80012a2:	2a10      	cmp	r2, #16
 80012a4:	d03c      	beq.n	8001320 <XMC_USBD_EndpointConfigure+0x21c>
 80012a6:	d934      	bls.n	8001312 <XMC_USBD_EndpointConfigure+0x20e>
 80012a8:	2a20      	cmp	r2, #32
 80012aa:	d02e      	beq.n	800130a <XMC_USBD_EndpointConfigure+0x206>
 80012ac:	2a40      	cmp	r2, #64	; 0x40
 80012ae:	d190      	bne.n	80011d2 <XMC_USBD_EndpointConfigure+0xce>
			{
				case (64U):
					data.b.mps = 0x0U;
 80012b0:	f36f 040a 	bfc	r4, #0, #11
					break;
 80012b4:	e78d      	b.n	80011d2 <XMC_USBD_EndpointConfigure+0xce>
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80012b6:	f103 006a 	add.w	r0, r3, #106	; 0x6a
 80012ba:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 80012be:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 80012c0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80012c4:	f361 4493 	bfi	r4, r1, #18, #2
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 80012c8:	2a10      	cmp	r2, #16
 80012ca:	d031      	beq.n	8001330 <XMC_USBD_EndpointConfigure+0x22c>
 80012cc:	d915      	bls.n	80012fa <XMC_USBD_EndpointConfigure+0x1f6>
 80012ce:	2a20      	cmp	r2, #32
 80012d0:	d02a      	beq.n	8001328 <XMC_USBD_EndpointConfigure+0x224>
 80012d2:	2a40      	cmp	r2, #64	; 0x40
 80012d4:	d19a      	bne.n	800120c <XMC_USBD_EndpointConfigure+0x108>
			{
				case (64U):
				data.b.mps = 0x0U;
 80012d6:	f36f 040a 	bfc	r4, #0, #11
				break;
 80012da:	e797      	b.n	800120c <XMC_USBD_EndpointConfigure+0x108>
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80012dc:	2700      	movs	r7, #0
 80012de:	e7ba      	b.n	8001256 <XMC_USBD_EndpointConfigure+0x152>
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80012e0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80012e4:	f8d3 61c4 	ldr.w	r6, [r3, #452]	; 0x1c4
 80012e8:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 80012ea:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80012ee:	f361 4493 	bfi	r4, r1, #18, #2
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80012f2:	2900      	cmp	r1, #0
 80012f4:	f47f af6b 	bne.w	80011ce <XMC_USBD_EndpointConfigure+0xca>
 80012f8:	e7d3      	b.n	80012a2 <XMC_USBD_EndpointConfigure+0x19e>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 80012fa:	2a08      	cmp	r2, #8
 80012fc:	d186      	bne.n	800120c <XMC_USBD_EndpointConfigure+0x108>
				break;
				case (16U):
				data.b.mps = 0x2U;
				break;
				case (8U):
				data.b.mps = 0x3U;
 80012fe:	2703      	movs	r7, #3
 8001300:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 8001304:	f367 040a 	bfi	r4, r7, #0, #11
				break;
 8001308:	e780      	b.n	800120c <XMC_USBD_EndpointConfigure+0x108>
			{
				case (64U):
					data.b.mps = 0x0U;
					break;
				case (32U):
					data.b.mps = 0x1U;
 800130a:	2301      	movs	r3, #1
 800130c:	f363 040a 	bfi	r4, r3, #0, #11
					break;
 8001310:	e75f      	b.n	80011d2 <XMC_USBD_EndpointConfigure+0xce>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 8001312:	2a08      	cmp	r2, #8
 8001314:	f47f af5d 	bne.w	80011d2 <XMC_USBD_EndpointConfigure+0xce>
					break;
				case (16U):
					data.b.mps = 0x2U;
					break;
				case (8U):
					data.b.mps = 0x3U;
 8001318:	2303      	movs	r3, #3
 800131a:	f363 040a 	bfi	r4, r3, #0, #11
					break;
 800131e:	e758      	b.n	80011d2 <XMC_USBD_EndpointConfigure+0xce>
					break;
				case (32U):
					data.b.mps = 0x1U;
					break;
				case (16U):
					data.b.mps = 0x2U;
 8001320:	2302      	movs	r3, #2
 8001322:	f363 040a 	bfi	r4, r3, #0, #11
					break;
 8001326:	e754      	b.n	80011d2 <XMC_USBD_EndpointConfigure+0xce>
			{
				case (64U):
				data.b.mps = 0x0U;
				break;
				case (32U):
				data.b.mps = 0x1U;
 8001328:	2001      	movs	r0, #1
 800132a:	f360 040a 	bfi	r4, r0, #0, #11
				break;
 800132e:	e76d      	b.n	800120c <XMC_USBD_EndpointConfigure+0x108>
				case (16U):
				data.b.mps = 0x2U;
 8001330:	2702      	movs	r7, #2
 8001332:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 8001336:	f367 040a 	bfi	r4, r7, #0, #11
				break;
 800133a:	e767      	b.n	800120c <XMC_USBD_EndpointConfigure+0x108>
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
 800133c:	f04f 0801 	mov.w	r8, #1
 8001340:	e785      	b.n	800124e <XMC_USBD_EndpointConfigure+0x14a>
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
    i++;
 8001342:	2701      	movs	r7, #1
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 8001344:	f04f 0802 	mov.w	r8, #2
 8001348:	e781      	b.n	800124e <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 800134a:	2702      	movs	r7, #2
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 800134c:	f04f 0804 	mov.w	r8, #4
 8001350:	e77d      	b.n	800124e <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 8001352:	2703      	movs	r7, #3
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 8001354:	f04f 0808 	mov.w	r8, #8
 8001358:	e779      	b.n	800124e <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 800135a:	2704      	movs	r7, #4
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 800135c:	f04f 0810 	mov.w	r8, #16
 8001360:	e775      	b.n	800124e <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 8001362:	2705      	movs	r7, #5
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 8001364:	f04f 0820 	mov.w	r8, #32
 8001368:	e771      	b.n	800124e <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 800136a:	2706      	movs	r7, #6
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 800136c:	f04f 0840 	mov.w	r8, #64	; 0x40
 8001370:	e76d      	b.n	800124e <XMC_USBD_EndpointConfigure+0x14a>
 8001372:	bf00      	nop
 8001374:	1fff0178 	.word	0x1fff0178
 8001378:	20000000 	.word	0x20000000
 800137c:	1ffed778 	.word	0x1ffed778
 8001380:	1ffed75c 	.word	0x1ffed75c

08001384 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8001384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
  if (length > ep->outBytesAvailable)
 8001386:	4f0e      	ldr	r7, [pc, #56]	; (80013c0 <XMC_USBD_EndpointRead+0x3c>)
 8001388:	2434      	movs	r4, #52	; 0x34
 800138a:	fb04 7400 	mla	r4, r4, r0, r7

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 800138e:	4606      	mov	r6, r0
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
  if (length > ep->outBytesAvailable)
 8001390:	6925      	ldr	r5, [r4, #16]
  {
    length = ep->outBytesAvailable;
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8001392:	69a3      	ldr	r3, [r4, #24]
 8001394:	4295      	cmp	r5, r2
 8001396:	4608      	mov	r0, r1
 8001398:	68e1      	ldr	r1, [r4, #12]
 800139a:	bf28      	it	cs
 800139c:	4615      	movcs	r5, r2
 800139e:	4419      	add	r1, r3
 80013a0:	462a      	mov	r2, r5
 80013a2:	f00c f8fb 	bl	800d59c <memcpy>
  ep->outBytesAvailable -= length;
 80013a6:	6923      	ldr	r3, [r4, #16]
 80013a8:	1b5b      	subs	r3, r3, r5
 80013aa:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 80013ac:	b10b      	cbz	r3, 80013b2 <XMC_USBD_EndpointRead+0x2e>
  {
    ep->outOffset += length;
 80013ae:	69a3      	ldr	r3, [r4, #24]
 80013b0:	442b      	add	r3, r5
 80013b2:	2234      	movs	r2, #52	; 0x34
 80013b4:	fb02 7606 	mla	r6, r2, r6, r7
  else
  {
    ep->outOffset = 0U;
  }
  return (int32_t)length;
}
 80013b8:	4628      	mov	r0, r5
 80013ba:	61b3      	str	r3, [r6, #24]
 80013bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013be:	bf00      	nop
 80013c0:	1fff0178 	.word	0x1fff0178

080013c4 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 80013c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c8:	4607      	mov	r7, r0
 80013ca:	b083      	sub	sp, #12
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 80013cc:	4869      	ldr	r0, [pc, #420]	; (8001574 <XMC_USBD_Init+0x1b0>)
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80013ce:	4c6a      	ldr	r4, [pc, #424]	; (8001578 <XMC_USBD_Init+0x1b4>)
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80013d0:	4e6a      	ldr	r6, [pc, #424]	; (800157c <XMC_USBD_Init+0x1b8>)
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80013d2:	4d6b      	ldr	r5, [pc, #428]	; (8001580 <XMC_USBD_Init+0x1bc>)
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 80013d4:	f7ff f82a 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80013d8:	4866      	ldr	r0, [pc, #408]	; (8001574 <XMC_USBD_Init+0x1b0>)
 80013da:	f7fe ffb1 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 80013de:	f7ff f853 	bl	8000488 <XMC_SCU_POWER_EnableUsb>
  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
  
  usbd_init = obj;
 80013e2:	4b68      	ldr	r3, [pc, #416]	; (8001584 <XMC_USBD_Init+0x1c0>)
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80013e4:	2100      	movs	r1, #0
  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
  
  usbd_init = obj;
 80013e6:	601f      	str	r7, [r3, #0]
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80013e8:	f44f 7202 	mov.w	r2, #520	; 0x208
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80013ec:	2340      	movs	r3, #64	; 0x40
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80013ee:	4620      	mov	r0, r4
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80013f0:	6033      	str	r3, [r6, #0]
 80013f2:	6073      	str	r3, [r6, #4]
 80013f4:	60b3      	str	r3, [r6, #8]
 80013f6:	60f3      	str	r3, [r6, #12]
 80013f8:	6133      	str	r3, [r6, #16]
 80013fa:	6173      	str	r3, [r6, #20]
 80013fc:	61b3      	str	r3, [r6, #24]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80013fe:	602b      	str	r3, [r5, #0]
 8001400:	606b      	str	r3, [r5, #4]
 8001402:	60ab      	str	r3, [r5, #8]
 8001404:	60eb      	str	r3, [r5, #12]
 8001406:	612b      	str	r3, [r5, #16]
 8001408:	616b      	str	r3, [r5, #20]
 800140a:	61ab      	str	r3, [r5, #24]
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 800140c:	f00c f8d1 	bl	800d5b2 <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8001410:	683b      	ldr	r3, [r7, #0]
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001412:	7b7d      	ldrb	r5, [r7, #13]
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8001414:	689a      	ldr	r2, [r3, #8]

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8001416:	6878      	ldr	r0, [r7, #4]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8001418:	68be      	ldr	r6, [r7, #8]
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800141a:	fab5 f185 	clz	r1, r5
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 800141e:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001422:	0949      	lsrs	r1, r1, #5
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001424:	f503 6910 	add.w	r9, r3, #2304	; 0x900
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8001428:	f042 0281 	orr.w	r2, r2, #129	; 0x81

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 800142c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8001430:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8001434:	f8c4 a1a4 	str.w	sl, [r4, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001438:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
 800143c:	f361 1245 	bfi	r2, r1, #5, #1
 8001440:	f503 6812 	add.w	r8, r3, #2336	; 0x920
 8001444:	f503 6c14 	add.w	ip, r3, #2368	; 0x940
 8001448:	f503 6e16 	add.w	lr, r3, #2400	; 0x960
 800144c:	f503 6718 	add.w	r7, r3, #2432	; 0x980
 8001450:	f503 601a 	add.w	r0, r3, #2464	; 0x9a0
 8001454:	f503 6b1c 	add.w	fp, r3, #2496	; 0x9c0
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8001458:	f503 6130 	add.w	r1, r3, #2816	; 0xb00
 800145c:	f503 6632 	add.w	r6, r3, #2848	; 0xb20
 8001460:	f503 6a34 	add.w	sl, r3, #2880	; 0xb40
 8001464:	f503 6936 	add.w	r9, r3, #2912	; 0xb60
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001468:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
 800146c:	f8c4 c1b0 	str.w	ip, [r4, #432]	; 0x1b0
 8001470:	f8c4 e1b4 	str.w	lr, [r4, #436]	; 0x1b4
 8001474:	f8c4 71b8 	str.w	r7, [r4, #440]	; 0x1b8
 8001478:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
 800147c:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8001480:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
 8001484:	f8c4 61c8 	str.w	r6, [r4, #456]	; 0x1c8
 8001488:	f8c4 a1cc 	str.w	sl, [r4, #460]	; 0x1cc
 800148c:	f8c4 91d0 	str.w	r9, [r4, #464]	; 0x1d0
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8001490:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8001494:	f503 6838 	add.w	r8, r3, #2944	; 0xb80
 8001498:	f503 6c3a 	add.w	ip, r3, #2976	; 0xba0
 800149c:	f503 6e3c 	add.w	lr, r3, #3008	; 0xbc0
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 80014a0:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
 80014a4:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
 80014a8:	f503 5b40 	add.w	fp, r3, #12288	; 0x3000
 80014ac:	f503 46a0 	add.w	r6, r3, #20480	; 0x5000
 80014b0:	f503 4ac0 	add.w	sl, r3, #24576	; 0x6000
 80014b4:	f503 49e0 	add.w	r9, r3, #28672	; 0x7000
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 80014b8:	f8c4 11ec 	str.w	r1, [r4, #492]	; 0x1ec
  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 80014bc:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 80014c0:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
 80014c4:	f8c4 c1d8 	str.w	ip, [r4, #472]	; 0x1d8
 80014c8:	f8c4 e1dc 	str.w	lr, [r4, #476]	; 0x1dc
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 80014cc:	f8c4 71e0 	str.w	r7, [r4, #480]	; 0x1e0
 80014d0:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
 80014d4:	f8c4 b1e8 	str.w	fp, [r4, #488]	; 0x1e8
 80014d8:	f8c4 61f0 	str.w	r6, [r4, #496]	; 0x1f0
 80014dc:	f8c4 a1f4 	str.w	sl, [r4, #500]	; 0x1f4
 80014e0:	f8c4 91f8 	str.w	r9, [r4, #504]	; 0x1f8
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 80014e4:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 80014e6:	68d9      	ldr	r1, [r3, #12]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 80014e8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80014ec:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80014f0:	60d9      	str	r1, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80014f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 80014f6:	f042 0203 	orr.w	r2, r2, #3
  dcfg.b.descdma = 0U;
 80014fa:	f36f 52d7 	bfc	r2, #23, #1
  xmc_device.device_register->dcfg = dcfg.d32;
 80014fe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8001502:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001506:	2100      	movs	r1, #0
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
  dcfg.b.descdma = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8001508:	f042 0202 	orr.w	r2, r2, #2
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 800150c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001510:	9100      	str	r1, [sp, #0]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001512:	9a00      	ldr	r2, [sp, #0]
 8001514:	f042 0220 	orr.w	r2, r2, #32
 8001518:	9200      	str	r2, [sp, #0]
  data.b.txfnum = fifo_num;
 800151a:	9900      	ldr	r1, [sp, #0]
 800151c:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001520:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001524:	9100      	str	r1, [sp, #0]
  xmc_device.global_register->grstctl = data.d32;
 8001526:	9a00      	ldr	r2, [sp, #0]
 8001528:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	9200      	str	r2, [sp, #0]
  } while (data.b.txfflsh);
 800152e:	9a00      	ldr	r2, [sp, #0]
 8001530:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001534:	2a00      	cmp	r2, #0
 8001536:	d1f8      	bne.n	800152a <XMC_USBD_Init+0x166>
static void XMC_USBD_lFlushRXFifo(void) 
{
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001538:	9201      	str	r2, [sp, #4]
  data.b.rxfflsh = 1U;
 800153a:	9a01      	ldr	r2, [sp, #4]
 800153c:	f042 0210 	orr.w	r2, r2, #16
 8001540:	9201      	str	r2, [sp, #4]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001542:	9a01      	ldr	r2, [sp, #4]
 8001544:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	9201      	str	r2, [sp, #4]
  } while (data.b.rxfflsh);
 800154a:	9801      	ldr	r0, [sp, #4]
 800154c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001550:	2800      	cmp	r0, #0
 8001552:	d1f8      	bne.n	8001546 <XMC_USBD_Init+0x182>
  gintmsk.b.usbsuspend = 1U;
  gintmsk.b.wkupintr = 1U;
  gintmsk.b.sofintr = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    gintmsk.b.rxstsqlvl = 1U;
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <XMC_USBD_Init+0x1c4>)
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <XMC_USBD_Init+0x1c8>)
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
  XMC_USBD_lFlushRXFifo();
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001558:	6198      	str	r0, [r3, #24]
  gintmsk.b.usbsuspend = 1U;
  gintmsk.b.wkupintr = 1U;
  gintmsk.b.sofintr = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    gintmsk.b.rxstsqlvl = 1U;
 800155a:	2d01      	cmp	r5, #1
 800155c:	bf18      	it	ne
 800155e:	460a      	movne	r2, r1
  }
  gintmsk.b.outepintr = 1U;
  gintmsk.b.inepintr = 1U;
 8001560:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
  XMC_USBD_lFlushRXFifo();
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	6159      	str	r1, [r3, #20]
  {
    gintmsk.b.rxstsqlvl = 1U;
  }
  gintmsk.b.outepintr = 1U;
  gintmsk.b.inepintr = 1U;
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800156a:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
}
 800156c:	b003      	add	sp, #12
 800156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001572:	bf00      	nop
 8001574:	20000080 	.word	0x20000080
 8001578:	1fff0178 	.word	0x1fff0178
 800157c:	1ffed75c 	.word	0x1ffed75c
 8001580:	1ffed778 	.word	0x1ffed778
 8001584:	1fff0174 	.word	0x1fff0174
 8001588:	c0003c0e 	.word	0xc0003c0e
 800158c:	c0003c1e 	.word	0xc0003c1e

08001590 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8001590:	b4f0      	push	{r4, r5, r6, r7}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001592:	f000 000f 	and.w	r0, r0, #15
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8001596:	2434      	movs	r4, #52	; 0x34
 8001598:	4e33      	ldr	r6, [pc, #204]	; (8001668 <XMC_USBD_EndpointReadStart+0xd8>)
 800159a:	fb04 f400 	mul.w	r4, r4, r0
 800159e:	1932      	adds	r2, r6, r4

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 80015a0:	b082      	sub	sp, #8
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 80015a2:	6853      	ldr	r3, [r2, #4]
 80015a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d136      	bne.n	800161a <XMC_USBD_EndpointReadStart+0x8a>
 80015ac:	7915      	ldrb	r5, [r2, #4]
 80015ae:	076d      	lsls	r5, r5, #29
 80015b0:	d533      	bpl.n	800161a <XMC_USBD_EndpointReadStart+0x8a>
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80015b2:	6895      	ldr	r5, [r2, #8]
 80015b4:	9501      	str	r5, [sp, #4]
 80015b6:	6955      	ldr	r5, [r2, #20]
    }
    /* set ep values */
    ep->xferTotal = size;
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
 80015b8:	68d7      	ldr	r7, [r2, #12]
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
    ep->xferCount = 0U;
 80015ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80015bc:	42a9      	cmp	r1, r5
 80015be:	bf28      	it	cs
 80015c0:	4629      	movcs	r1, r5
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80015c2:	9d01      	ldr	r5, [sp, #4]
    /* set ep values */
    ep->xferTotal = size;
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
    ep->outBytesAvailable = 0U;
 80015c4:	6113      	str	r3, [r2, #16]
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80015c6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80015ca:	428d      	cmp	r5, r1
 80015cc:	bf28      	it	cs
 80015ce:	460d      	movcs	r5, r1
    if (size > ep->outBufferSize)
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
 80015d0:	6311      	str	r1, [r2, #48]	; 0x30
 80015d2:	6295      	str	r5, [r2, #40]	; 0x28
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
 80015d4:	6257      	str	r7, [r2, #36]	; 0x24
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 80015d6:	5d34      	ldrb	r4, [r6, r4]
 80015d8:	0724      	lsls	r4, r4, #28
 80015da:	d022      	beq.n	8001622 <XMC_USBD_EndpointReadStart+0x92>
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 80015dc:	2d00      	cmp	r5, #0
 80015de:	d137      	bne.n	8001650 <XMC_USBD_EndpointReadStart+0xc0>
    {
      data.b.xfersize = 0U;
      data.b.pktcnt = 1U;
 80015e0:	2201      	movs	r2, #1
 80015e2:	f362 43dc 	bfi	r3, r2, #19, #10
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <XMC_USBD_EndpointReadStart+0xdc>)
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	7b52      	ldrb	r2, [r2, #13]
 80015ec:	bb2a      	cbnz	r2, 800163a <XMC_USBD_EndpointReadStart+0xaa>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	fb02 f000 	mul.w	r0, r2, r0
 80015f4:	1831      	adds	r1, r6, r0
 80015f6:	5c32      	ldrb	r2, [r6, r0]
 80015f8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80015fa:	f002 020f 	and.w	r2, r2, #15
 80015fe:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8001602:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 8001606:	6151      	str	r1, [r2, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001608:	6113      	str	r3, [r2, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800160a:	6813      	ldr	r3, [r2, #0]
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
 800160c:	2000      	movs	r0, #0
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 800160e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8001612:	6013      	str	r3, [r2, #0]
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
  }
  return result;
}
 8001614:	b002      	add	sp, #8
 8001616:	bcf0      	pop	{r4, r5, r6, r7}
 8001618:	4770      	bx	lr
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
  {
    result = XMC_USBD_STATUS_ERROR;
 800161a:	2001      	movs	r0, #1
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
  }
  return result;
}
 800161c:	b002      	add	sp, #8
 800161e:	bcf0      	pop	{r4, r5, r6, r7}
 8001620:	4770      	bx	lr
  if (ep->address_u.address_st.number == 0U)
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 8001622:	2201      	movs	r2, #1
 8001624:	f362 43d4 	bfi	r3, r2, #19, #2
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <XMC_USBD_EndpointReadStart+0xdc>)
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	7b52      	ldrb	r2, [r2, #13]
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
    ep0_data->b.supcnt = 0x3U;
 800162e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8001632:	f361 0306 	bfi	r3, r1, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001636:	2a00      	cmp	r2, #0
 8001638:	d0d9      	beq.n	80015ee <XMC_USBD_EndpointReadStart+0x5e>
 800163a:	2234      	movs	r2, #52	; 0x34
 800163c:	fb02 f000 	mul.w	r0, r2, r0
 8001640:	5c32      	ldrb	r2, [r6, r0]
 8001642:	f002 020f 	and.w	r2, r2, #15
 8001646:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800164a:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 800164e:	e7db      	b.n	8001608 <XMC_USBD_EndpointReadStart+0x78>
      data.b.pktcnt = 1U;
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001650:	6852      	ldr	r2, [r2, #4]
 8001652:	f3c2 21c6 	ubfx	r1, r2, #11, #7
 8001656:	1e4a      	subs	r2, r1, #1
 8001658:	442a      	add	r2, r5
 800165a:	fbb2 f2f1 	udiv	r2, r2, r1
 800165e:	f362 43dc 	bfi	r3, r2, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001662:	f365 0312 	bfi	r3, r5, #0, #19
 8001666:	e7be      	b.n	80015e6 <XMC_USBD_EndpointReadStart+0x56>
 8001668:	1fff0178 	.word	0x1fff0178
 800166c:	1fff0174 	.word	0x1fff0174

08001670 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8001670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001674:	f000 070f 	and.w	r7, r0, #15
  int32_t result;
  if (!ep->isConfigured)
 8001678:	2634      	movs	r6, #52	; 0x34
 800167a:	4d39      	ldr	r5, [pc, #228]	; (8001760 <XMC_USBD_EndpointWrite+0xf0>)
 800167c:	fb06 f607 	mul.w	r6, r6, r7
 8001680:	19ac      	adds	r4, r5, r6
 8001682:	7923      	ldrb	r3, [r4, #4]
 8001684:	075b      	lsls	r3, r3, #29
 8001686:	d553      	bpl.n	8001730 <XMC_USBD_EndpointWrite+0xc0>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
  }
  else if (ep->inInUse == 1U)
 8001688:	6863      	ldr	r3, [r4, #4]
 800168a:	0718      	lsls	r0, r3, #28
 800168c:	d457      	bmi.n	800173e <XMC_USBD_EndpointWrite+0xce>
  {
    result=(int32_t)0;
  }
  else
  {
    if (length > ep->inBufferSize)
 800168e:	6a23      	ldr	r3, [r4, #32]
    {
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8001690:	69e0      	ldr	r0, [r4, #28]
 8001692:	429a      	cmp	r2, r3
 8001694:	bf28      	it	cs
 8001696:	461a      	movcs	r2, r3
 8001698:	4691      	mov	r9, r2
 800169a:	f00b ff7f 	bl	800d59c <memcpy>
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
 800169e:	6863      	ldr	r3, [r4, #4]
    {
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
 80016a0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 80016a4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
 80016a8:	f043 0308 	orr.w	r3, r3, #8
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
 80016ac:	2100      	movs	r1, #0
    ep->inInUse = 1U;
 80016ae:	6063      	str	r3, [r4, #4]
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
 80016b0:	62e1      	str	r1, [r4, #44]	; 0x2c
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
 80016b2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80016b6:	5da8      	ldrb	r0, [r5, r6]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 80016b8:	68a3      	ldr	r3, [r4, #8]
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80016ba:	f000 000f 	and.w	r0, r0, #15
 80016be:	f100 0e6a 	add.w	lr, r0, #106	; 0x6a

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 80016c2:	f3c3 0212 	ubfx	r2, r3, #0, #19
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80016c6:	f855 802e 	ldr.w	r8, [r5, lr, lsl #2]
 80016ca:	454a      	cmp	r2, r9
 80016cc:	bf28      	it	cs
 80016ce:	464a      	movcs	r2, r9
 80016d0:	f8d8 e000 	ldr.w	lr, [r8]
 80016d4:	62a2      	str	r2, [r4, #40]	; 0x28
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
 80016d6:	b3aa      	cbz	r2, 8001744 <XMC_USBD_EndpointWrite+0xd4>
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 80016d8:	5dab      	ldrb	r3, [r5, r6]
 80016da:	071b      	lsls	r3, r3, #28
 80016dc:	d02b      	beq.n	8001736 <XMC_USBD_EndpointWrite+0xc6>
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80016de:	6863      	ldr	r3, [r4, #4]
 80016e0:	f3c3 24c6 	ubfx	r4, r3, #11, #7
 80016e4:	1e63      	subs	r3, r4, #1
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	fa13 f382 	uxtah	r3, r3, r2
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80016ec:	f3c2 0212 	ubfx	r2, r2, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80016f0:	fb93 f3f4 	sdiv	r3, r3, r4
 80016f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016f8:	4c1a      	ldr	r4, [pc, #104]	; (8001764 <XMC_USBD_EndpointWrite+0xf4>)
 80016fa:	6824      	ldr	r4, [r4, #0]
 80016fc:	7b64      	ldrb	r4, [r4, #13]
 80016fe:	f362 0112 	bfi	r1, r2, #0, #19
 8001702:	f363 41dc 	bfi	r1, r3, #19, #10
 8001706:	bb0c      	cbnz	r4, 800174c <XMC_USBD_EndpointWrite+0xdc>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8001708:	f8c8 c014 	str.w	ip, [r8, #20]
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 800170c:	2334      	movs	r3, #52	; 0x34
 800170e:	fb03 f707 	mul.w	r7, r3, r7
 8001712:	19ea      	adds	r2, r5, r7
 8001714:	5deb      	ldrb	r3, [r5, r7]
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
    result=(int32_t)ep->xferTotal;
 8001716:	6b10      	ldr	r0, [r2, #48]	; 0x30
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	336a      	adds	r3, #106	; 0x6a
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 800171e:	f04e 4e04 	orr.w	lr, lr, #2214592512	; 0x84000000
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001722:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001726:	6119      	str	r1, [r3, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001728:	f8c3 e000 	str.w	lr, [r3]
 800172c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
  int32_t result;
  if (!ep->isConfigured)
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8001730:	2001      	movs	r0, #1
 8001732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001736:	f3c2 0212 	ubfx	r2, r2, #0, #19
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
 800173a:	2301      	movs	r3, #1
 800173c:	e7dc      	b.n	80016f8 <XMC_USBD_EndpointWrite+0x88>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
  }
  else if (ep->inInUse == 1U)
  {
    result=(int32_t)0;
 800173e:	2000      	movs	r0, #0
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
    result=(int32_t)ep->xferTotal;
  }
  return result;
}
 8001740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
  {
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
 8001744:	2301      	movs	r3, #1
 8001746:	f363 41dc 	bfi	r1, r3, #19, #10
 800174a:	e7df      	b.n	800170c <XMC_USBD_EndpointWrite+0x9c>
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800174c:	2c01      	cmp	r4, #1
 800174e:	d1dd      	bne.n	800170c <XMC_USBD_EndpointWrite+0x9c>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001750:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001754:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001756:	4084      	lsls	r4, r0
 8001758:	431c      	orrs	r4, r3
 800175a:	6354      	str	r4, [r2, #52]	; 0x34
 800175c:	e7d6      	b.n	800170c <XMC_USBD_EndpointWrite+0x9c>
 800175e:	bf00      	nop
 8001760:	1fff0178 	.word	0x1fff0178
 8001764:	1fff0174 	.word	0x1fff0174

08001768 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 800176c:	4cb9      	ldr	r4, [pc, #740]	; (8001a54 <XMC_USBD_IRQHandler+0x2ec>)
 800176e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001772:	699d      	ldr	r5, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001774:	695a      	ldr	r2, [r3, #20]
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001776:	b08f      	sub	sp, #60	; 0x3c
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001778:	ea02 0a05 	and.w	sl, r2, r5
	
  if (data.b.sofintr)
 800177c:	fa5f f68a 	uxtb.w	r6, sl
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001780:	9001      	str	r0, [sp, #4]
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
	
  if (data.b.sofintr)
 8001782:	0730      	lsls	r0, r6, #28
 8001784:	f100 82eb 	bmi.w	8001d5e <XMC_USBD_IRQHandler+0x5f6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001788:	9a01      	ldr	r2, [sp, #4]
 800178a:	7b52      	ldrb	r2, [r2, #13]
 800178c:	2a01      	cmp	r2, #1
 800178e:	f000 82f3 	beq.w	8001d78 <XMC_USBD_IRQHandler+0x610>
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
      gintmsk.b.rxstsqlvl = 1U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
    }
  }
  if (data.b.erlysuspend)
 8001792:	f3ca 2507 	ubfx	r5, sl, #8, #8
 8001796:	0769      	lsls	r1, r5, #29
	  break;
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
	  break;
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8001798:	bf44      	itt	mi
 800179a:	f44f 6280 	movmi.w	r2, #1024	; 0x400
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 800179e:	615a      	strmi	r2, [r3, #20]
  }
  if (data.b.erlysuspend)
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
  }
  if (data.b.usbsuspend)
 80017a0:	072a      	lsls	r2, r5, #28
 80017a2:	f100 82d2 	bmi.w	8001d4a <XMC_USBD_IRQHandler+0x5e2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
  }
  if (data.b.wkupintr)
 80017a6:	ea4f 661a 	mov.w	r6, sl, lsr #24
 80017aa:	0637      	lsls	r7, r6, #24
 80017ac:	f100 82c3 	bmi.w	8001d36 <XMC_USBD_IRQHandler+0x5ce>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
  }
  if (data.b.sessreqintr)
 80017b0:	0670      	lsls	r0, r6, #25
 80017b2:	f100 82b0 	bmi.w	8001d16 <XMC_USBD_IRQHandler+0x5ae>
  {
    xmc_device.IsPowered = 1U;
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
  }
  if (data.b.usbreset)
 80017b6:	06e9      	lsls	r1, r5, #27
 80017b8:	f100 81f1 	bmi.w	8001b9e <XMC_USBD_IRQHandler+0x436>
  {
    XMC_USBD_lHandleUSBReset(obj);
  }
  if (data.b.enumdone)
 80017bc:	06aa      	lsls	r2, r5, #26
 80017be:	f100 81d3 	bmi.w	8001b68 <XMC_USBD_IRQHandler+0x400>
  {
    XMC_USBD_lHandleEnumDone();
  }
  if (data.b.inepint)
 80017c2:	f41a 2f80 	tst.w	sl, #262144	; 0x40000
 80017c6:	f040 8105 	bne.w	80019d4 <XMC_USBD_IRQHandler+0x26c>
  {
    XMC_USBD_lHandleIEPInt(obj);
  }
  if (data.b.outepintr)
 80017ca:	f41a 2f00 	tst.w	sl, #524288	; 0x80000
 80017ce:	d118      	bne.n	8001802 <XMC_USBD_IRQHandler+0x9a>
  {
		XMC_USBD_lHandleOEPInt(obj);
  }
	if (data.b.otgintr)
 80017d0:	f01a 0f04 	tst.w	sl, #4
 80017d4:	d102      	bne.n	80017dc <XMC_USBD_IRQHandler+0x74>
  {
	  XMC_USBD_lHandleOTGInt();
  }

}
 80017d6:	b00f      	add	sp, #60	; 0x3c
 80017d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 80017dc:	685d      	ldr	r5, [r3, #4]
  if (data.b.sesenddet)
 80017de:	0768      	lsls	r0, r5, #29
 80017e0:	d50b      	bpl.n	80017fa <XMC_USBD_IRQHandler+0x92>
  {
		xmc_device.IsPowered = 0U;
 80017e2:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80017e6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
{
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
  if (data.b.sesenddet)
  {
		xmc_device.IsPowered = 0U;
 80017ea:	f36f 0382 	bfc	r3, #2, #1
 80017ee:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80017f2:	2001      	movs	r0, #1
 80017f4:	4790      	blx	r2
 80017f6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
  gotgint_data_t clear = { .d32 = 0U};
  clear.d32 = event;
  xmc_device.global_register->gotgint = clear.d32;
 80017fa:	605d      	str	r5, [r3, #4]
	if (data.b.otgintr)
  {
	  XMC_USBD_lHandleOTGInt();
  }

}
 80017fc:	b00f      	add	sp, #60	; 0x3c
 80017fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8001802:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 8001806:	6993      	ldr	r3, [r2, #24]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8001808:	69d7      	ldr	r7, [r2, #28]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 800180a:	6952      	ldr	r2, [r2, #20]
 800180c:	9202      	str	r2, [sp, #8]
  
  mask = daint.ep.out & daintmsk.ep.out;
 800180e:	f3c3 430f 	ubfx	r3, r3, #16, #16
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 8001812:	2200      	movs	r2, #0
 
  while ((uint16_t)mask >> ep_num)
 8001814:	ea13 4717 	ands.w	r7, r3, r7, lsr #16
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 8001818:	9203      	str	r2, [sp, #12]
 
  while ((uint16_t)mask >> ep_num)
 800181a:	f000 8097 	beq.w	800194c <XMC_USBD_IRQHandler+0x1e4>
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800181e:	f8dd b004 	ldr.w	fp, [sp, #4]
 8001822:	f8cd a010 	str.w	sl, [sp, #16]
 8001826:	4616      	mov	r6, r2
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 8001828:	463b      	mov	r3, r7
 800182a:	4615      	mov	r5, r2
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800182c:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8001830:	46b8      	mov	r8, r7
 
  while ((uint16_t)mask >> ep_num)
  {
    temp1 = (mask >> (uint16_t)ep_num);
    temp = temp1 & 0x1U;
    if (temp)
 8001832:	07df      	lsls	r7, r3, #31
 8001834:	f140 8081 	bpl.w	800193a <XMC_USBD_IRQHandler+0x1d2>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001838:	f106 0970 	add.w	r9, r6, #112	; 0x70
 800183c:	eb04 0289 	add.w	r2, r4, r9, lsl #2
 8001840:	9902      	ldr	r1, [sp, #8]
 8001842:	6852      	ldr	r2, [r2, #4]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001844:	f89b 300d 	ldrb.w	r3, [fp, #13]
    temp = temp1 & 0x1U;
    if (temp)
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001848:	6897      	ldr	r7, [r2, #8]
 800184a:	400f      	ands	r7, r1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 800184c:	fa5f fa87 	uxtb.w	sl, r7
    if (temp)
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 8081 	bne.w	8001958 <XMC_USBD_IRQHandler+0x1f0>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8001856:	6911      	ldr	r1, [r2, #16]
 8001858:	9103      	str	r1, [sp, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 800185a:	f01a 0f08 	tst.w	sl, #8
 800185e:	d021      	beq.n	80018a4 <XMC_USBD_IRQHandler+0x13c>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001860:	4a7c      	ldr	r2, [pc, #496]	; (8001a54 <XMC_USBD_IRQHandler+0x2ec>)
 8001862:	fb0c 2006 	mla	r0, ip, r6, r2
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8001866:	9a03      	ldr	r2, [sp, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001868:	7901      	ldrb	r1, [r0, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 800186a:	f3c2 7241 	ubfx	r2, r2, #29, #2
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800186e:	00d2      	lsls	r2, r2, #3
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001870:	f363 1145 	bfi	r1, r3, #5, #1
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8001874:	f1c2 0218 	rsb	r2, r2, #24
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001878:	7101      	strb	r1, [r0, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800187a:	6102      	str	r2, [r0, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
		{
			ep->outBytesAvailable += ep->xferCount;
		}
		ep->outInUse = 0U;
 800187c:	fb0c 4306 	mla	r3, ip, r6, r4
 8001880:	f8cd c004 	str.w	ip, [sp, #4]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	f022 0210 	bic.w	r2, r2, #16
 800188a:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800188c:	2000      	movs	r0, #0
 800188e:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001892:	4601      	mov	r1, r0
 8001894:	4798      	blx	r3
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
  doepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001896:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 800189a:	2108      	movs	r1, #8
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	f8dd c004 	ldr.w	ip, [sp, #4]
 80018a2:	6091      	str	r1, [r2, #8]
		ep->outInUse = 0U;
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
      }
      if (doepint.b.xfercompl)
 80018a4:	f01a 0f01 	tst.w	sl, #1
 80018a8:	d046      	beq.n	8001938 <XMC_USBD_IRQHandler+0x1d0>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80018aa:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d063      	beq.n	800197a <XMC_USBD_IRQHandler+0x212>
 80018b2:	fb0c 4306 	mla	r3, ip, r6, r4
 80018b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
				}
        if (ep->xferTotal == ep->xferLength)
 80018b8:	fb0c 4306 	mla	r3, ip, r6, r4
 80018bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018be:	428a      	cmp	r2, r1
 80018c0:	d072      	beq.n	80019a8 <XMC_USBD_IRQHandler+0x240>
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80018c2:	6898      	ldr	r0, [r3, #8]
 80018c4:	ebc1 0e02 	rsb	lr, r1, r2
 80018c8:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80018cc:	4586      	cmp	lr, r0
 80018ce:	fb0c fe06 	mul.w	lr, ip, r6
  {
    ep->xferLength += ep->maxTransferSize;
 80018d2:	bf88      	it	hi
 80018d4:	1809      	addhi	r1, r1, r0
 80018d6:	eb04 000e 	add.w	r0, r4, lr
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80018da:	bf98      	it	ls
 80018dc:	4611      	movls	r1, r2
 80018de:	6281      	str	r1, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 80018e0:	f814 e00e 	ldrb.w	lr, [r4, lr]
 80018e4:	f01e 0f0f 	tst.w	lr, #15
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	f100 0a28 	add.w	sl, r0, #40	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 80018f0:	f040 82ae 	bne.w	8001e50 <XMC_USBD_IRQHandler+0x6e8>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 80018f4:	2101      	movs	r1, #1
 80018f6:	f361 43d4 	bfi	r3, r1, #19, #2
    ep0_data->b.supcnt = 0x3U;
 80018fa:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80018fe:	f362 0306 	bfi	r3, r2, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001902:	4a55      	ldr	r2, [pc, #340]	; (8001a58 <XMC_USBD_IRQHandler+0x2f0>)
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	7b52      	ldrb	r2, [r2, #13]
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001908:	fb0c f606 	mul.w	r6, ip, r6
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800190c:	2a00      	cmp	r2, #0
 800190e:	f040 82a6 	bne.w	8001e5e <XMC_USBD_IRQHandler+0x6f6>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8001912:	5da2      	ldrb	r2, [r4, r6]
 8001914:	f002 020f 	and.w	r2, r2, #15
 8001918:	19a1      	adds	r1, r4, r6
 800191a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800191e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001920:	f8d2 11c4 	ldr.w	r1, [r2, #452]	; 0x1c4
 8001924:	6148      	str	r0, [r1, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8001926:	610b      	str	r3, [r1, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001928:	680b      	ldr	r3, [r1, #0]
 800192a:	eb04 0989 	add.w	r9, r4, r9, lsl #2
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 800192e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001932:	f8d9 2004 	ldr.w	r2, [r9, #4]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8001936:	600b      	str	r3, [r1, #0]
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
  doepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001938:	6097      	str	r7, [r2, #8]

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
    }
    ep_num++;
 800193a:	3501      	adds	r5, #1
 800193c:	b2ed      	uxtb	r5, r5
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 800193e:	fa58 f305 	asrs.w	r3, r8, r5
 8001942:	462e      	mov	r6, r5
 8001944:	f47f af75 	bne.w	8001832 <XMC_USBD_IRQHandler+0xca>
 8001948:	f8dd a010 	ldr.w	sl, [sp, #16]
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 800194c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
	  break;
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8001950:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	e73b      	b.n	80017d0 <XMC_USBD_IRQHandler+0x68>
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8001958:	f01a 0f08 	tst.w	sl, #8
 800195c:	d0a2      	beq.n	80018a4 <XMC_USBD_IRQHandler+0x13c>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800195e:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <XMC_USBD_IRQHandler+0x2ec>)
 8001960:	fb0c 2106 	mla	r1, ip, r6, r2
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001964:	2b01      	cmp	r3, #1
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001966:	790a      	ldrb	r2, [r1, #4]
 8001968:	f36f 1245 	bfc	r2, #5, #1
 800196c:	710a      	strb	r2, [r1, #4]
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800196e:	d185      	bne.n	800187c <XMC_USBD_IRQHandler+0x114>
		{
			ep->outBytesAvailable += ep->xferCount;
 8001970:	690b      	ldr	r3, [r1, #16]
 8001972:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001974:	4413      	add	r3, r2
 8001976:	610b      	str	r3, [r1, #16]
 8001978:	e780      	b.n	800187c <XMC_USBD_IRQHandler+0x114>
      }
      if (doepint.b.xfercompl)
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 800197a:	fb0c 4006 	mla	r0, ip, r6, r4
 800197e:	9b03      	ldr	r3, [sp, #12]
 8001980:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001982:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	ebc2 0e01 	rsb	lr, r2, r1
 800198c:	ebc3 030e 	rsb	r3, r3, lr
          ep->xferCount += bytes;
 8001990:	eb02 0e03 	add.w	lr, r2, r3
          ep->xferBuffer += bytes;
 8001994:	6a42      	ldr	r2, [r0, #36]	; 0x24
      if (doepint.b.xfercompl)
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
          ep->xferCount += bytes;
 8001996:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
          ep->xferBuffer += bytes;
 800199a:	4413      	add	r3, r2
 800199c:	6243      	str	r3, [r0, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 800199e:	fb0c 4306 	mla	r3, ip, r6, r4
 80019a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a4:	428a      	cmp	r2, r1
 80019a6:	d18c      	bne.n	80018c2 <XMC_USBD_IRQHandler+0x15a>
 80019a8:	f8cd c004 	str.w	ip, [sp, #4]
        {
          ep->outBytesAvailable = ep->xferCount;
          ep->outInUse = 0U;
 80019ac:	685a      	ldr	r2, [r3, #4]
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
				}
        if (ep->xferTotal == ep->xferLength)
        {
          ep->outBytesAvailable = ep->xferCount;
 80019ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b0:	6119      	str	r1, [r3, #16]
          ep->outInUse = 0U;
 80019b2:	f022 0210 	bic.w	r2, r2, #16
 80019b6:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <XMC_USBD_IRQHandler+0x2ec>)
 80019ba:	4628      	mov	r0, r5
 80019bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80019c0:	2101      	movs	r1, #1
 80019c2:	4798      	blx	r3
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <XMC_USBD_IRQHandler+0x2ec>)
 80019c6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80019ca:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80019ce:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80019d2:	e7b1      	b.n	8001938 <XMC_USBD_IRQHandler+0x1d0>
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 80019d4:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 80019d8:	699a      	ldr	r2, [r3, #24]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	9303      	str	r3, [sp, #12]
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 80019de:	b297      	uxth	r7, r2
 80019e0:	2f00      	cmp	r7, #0
 80019e2:	d061      	beq.n	8001aa8 <XMC_USBD_IRQHandler+0x340>
 80019e4:	2600      	movs	r6, #0
 80019e6:	46b6      	mov	lr, r6
 80019e8:	463b      	mov	r3, r7
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 80019ea:	f04f 0b34 	mov.w	fp, #52	; 0x34
 80019ee:	f8cd a010 	str.w	sl, [sp, #16]
 80019f2:	46b9      	mov	r9, r7
  
  while ((uint16_t)mask >> ep_num)
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
 80019f4:	07db      	lsls	r3, r3, #31
 80019f6:	d54f      	bpl.n	8001a98 <XMC_USBD_IRQHandler+0x330>
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 80019f8:	f10e 036a 	add.w	r3, lr, #106	; 0x6a
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 80019fc:	fb0b f00e 	mul.w	r0, fp, lr
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001a00:	9302      	str	r3, [sp, #8]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001a02:	f8d4 a1a4 	ldr.w	sl, [r4, #420]	; 0x1a4
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001a06:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001a0a:	f814 8000 	ldrb.w	r8, [r4, r0]
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001a0e:	689d      	ldr	r5, [r3, #8]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001a10:	f8da 1034 	ldr.w	r1, [sl, #52]	; 0x34
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001a14:	9a01      	ldr	r2, [sp, #4]
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001a16:	9f03      	ldr	r7, [sp, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001a18:	7b52      	ldrb	r2, [r2, #13]
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001a1a:	f008 0c0f 	and.w	ip, r8, #15
 8001a1e:	fa21 f10c 	lsr.w	r1, r1, ip
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001a22:	01c9      	lsls	r1, r1, #7
 8001a24:	b2c9      	uxtb	r1, r1
 8001a26:	4339      	orrs	r1, r7
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001a28:	4420      	add	r0, r4
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 8001a2a:	400d      	ands	r5, r1
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001a2c:	b9b2      	cbnz	r2, 8001a5c <XMC_USBD_IRQHandler+0x2f4>
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
        }
      }
      if (diepint.b.xfercompl)
 8001a2e:	07ef      	lsls	r7, r5, #31
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001a30:	691a      	ldr	r2, [r3, #16]
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
        }
      }
      if (diepint.b.xfercompl)
 8001a32:	d530      	bpl.n	8001a96 <XMC_USBD_IRQHandler+0x32e>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8001a34:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	f000 8218 	beq.w	8001e6e <XMC_USBD_IRQHandler+0x706>
 8001a3e:	6a81      	ldr	r1, [r0, #40]	; 0x28
            uint32_t Bytes = ep->xferLength - ep->xferCount;
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8001a40:	fb0b 420e 	mla	r2, fp, lr, r4
 8001a44:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a46:	428b      	cmp	r3, r1
 8001a48:	d133      	bne.n	8001ab2 <XMC_USBD_IRQHandler+0x34a>
        {
          ep->inInUse = 0U;
 8001a4a:	6853      	ldr	r3, [r2, #4]
 8001a4c:	f023 0308 	bic.w	r3, r3, #8
 8001a50:	6053      	str	r3, [r2, #4]
 8001a52:	e017      	b.n	8001a84 <XMC_USBD_IRQHandler+0x31c>
 8001a54:	1fff0178 	.word	0x1fff0178
 8001a58:	1fff0174 	.word	0x1fff0174
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a5c:	2a01      	cmp	r2, #1
 8001a5e:	d102      	bne.n	8001a66 <XMC_USBD_IRQHandler+0x2fe>
      {
        if (diepint.b.emptyintr)
 8001a60:	0629      	lsls	r1, r5, #24
 8001a62:	f100 822a 	bmi.w	8001eba <XMC_USBD_IRQHandler+0x752>
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
        }
      }
      if (diepint.b.xfercompl)
 8001a66:	07e9      	lsls	r1, r5, #31
 8001a68:	d515      	bpl.n	8001a96 <XMC_USBD_IRQHandler+0x32e>
            uint32_t Bytes = ep->xferLength - ep->xferCount;
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8001a6a:	fb0b 400e 	mla	r0, fp, lr, r4
 8001a6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a70:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a72:	428b      	cmp	r3, r1
 8001a74:	d11d      	bne.n	8001ab2 <XMC_USBD_IRQHandler+0x34a>
        {
          ep->inInUse = 0U;
 8001a76:	6843      	ldr	r3, [r0, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a78:	2a01      	cmp	r2, #1
            ep->xferBuffer += Bytes;
          }
        }
        if (ep->xferTotal==ep->xferLength)
        {
          ep->inInUse = 0U;
 8001a7a:	f023 0308 	bic.w	r3, r3, #8
 8001a7e:	6043      	str	r3, [r0, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a80:	f000 8273 	beq.w	8001f6a <XMC_USBD_IRQHandler+0x802>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8001a84:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001a88:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4798      	blx	r3
 8001a90:	9b02      	ldr	r3, [sp, #8]
 8001a92:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
  diepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001a96:	609d      	str	r5, [r3, #8]

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
 8001a98:	3601      	adds	r6, #1
 8001a9a:	b2f6      	uxtb	r6, r6
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 8001a9c:	fa59 f306 	asrs.w	r3, r9, r6
 8001aa0:	46b6      	mov	lr, r6
 8001aa2:	d1a7      	bne.n	80019f4 <XMC_USBD_IRQHandler+0x28c>
 8001aa4:	f8dd a010 	ldr.w	sl, [sp, #16]
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001aa8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	e68b      	b.n	80017ca <XMC_USBD_IRQHandler+0x62>
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001ab2:	fb0b f20e 	mul.w	r2, fp, lr
 8001ab6:	18a0      	adds	r0, r4, r2
 8001ab8:	5ca2      	ldrb	r2, [r4, r2]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001aba:	6880      	ldr	r0, [r0, #8]
 8001abc:	ebc1 0803 	rsb	r8, r1, r3
 8001ac0:	f3c0 0c12 	ubfx	ip, r0, #0, #19
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001ac4:	f002 020f 	and.w	r2, r2, #15

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001ac8:	45e0      	cmp	r8, ip
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001aca:	9206      	str	r2, [sp, #24]
 8001acc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
  {
    ep->xferLength = ep->xferTotal;
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8001ad0:	bf28      	it	cs
 8001ad2:	eb01 030c 	addcs.w	r3, r1, ip
 8001ad6:	fb0b fc0e 	mul.w	ip, fp, lr
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001ada:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001ade:	9205      	str	r2, [sp, #20]
 8001ae0:	eb04 010c 	add.w	r1, r4, ip
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	628b      	str	r3, [r1, #40]	; 0x28
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f101 0828 	add.w	r8, r1, #40	; 0x28
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 81dd 	beq.w	8001eae <XMC_USBD_IRQHandler+0x746>
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001af4:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001af8:	f01c 0f0f 	tst.w	ip, #15
 8001afc:	f000 81cf 	beq.w	8001e9e <XMC_USBD_IRQHandler+0x736>
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001b00:	6849      	ldr	r1, [r1, #4]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001b02:	f8d8 7004 	ldr.w	r7, [r8, #4]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001b06:	f3c1 2cc6 	ubfx	ip, r1, #11, #7
 8001b0a:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001b0e:	1bd9      	subs	r1, r3, r7
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001b10:	460b      	mov	r3, r1
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001b12:	fa1f f888 	uxth.w	r8, r8
 8001b16:	fa18 f181 	uxtah	r1, r8, r1
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001b1e:	fb91 fcfc 	sdiv	ip, r1, ip
 8001b22:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001b26:	49c2      	ldr	r1, [pc, #776]	; (8001e30 <XMC_USBD_IRQHandler+0x6c8>)
 8001b28:	6809      	ldr	r1, [r1, #0]
 8001b2a:	7b49      	ldrb	r1, [r1, #13]
 8001b2c:	f363 0012 	bfi	r0, r3, #0, #19
 8001b30:	f36c 40dc 	bfi	r0, ip, #19, #10
 8001b34:	2900      	cmp	r1, #0
 8001b36:	f040 820d 	bne.w	8001f54 <XMC_USBD_IRQHandler+0x7ec>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8001b3a:	fb0b 430e 	mla	r3, fp, lr, r4
 8001b3e:	9905      	ldr	r1, [sp, #20]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	614b      	str	r3, [r1, #20]
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001b44:	fb0b fe0e 	mul.w	lr, fp, lr
 8001b48:	9b02      	ldr	r3, [sp, #8]
 8001b4a:	f814 100e 	ldrb.w	r1, [r4, lr]
 8001b4e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001b52:	f001 010f 	and.w	r1, r1, #15
 8001b56:	316a      	adds	r1, #106	; 0x6a
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 8001b58:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001b5c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8001b60:	6108      	str	r0, [r1, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001b62:	600a      	str	r2, [r1, #0]
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
  diepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001b64:	609d      	str	r5, [r3, #8]
 8001b66:	e797      	b.n	8001a98 <XMC_USBD_IRQHandler+0x330>
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001b68:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8001b6c:	f894 21fe 	ldrb.w	r2, [r4, #510]	; 0x1fe
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001b70:	680b      	ldr	r3, [r1, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001b72:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001b76:	f36f 030a 	bfc	r3, #0, #11
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;
 8001b7a:	f042 0205 	orr.w	r2, r2, #5
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001b7e:	600b      	str	r3, [r1, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001b80:	2002      	movs	r0, #2
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;
 8001b82:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001b86:	47a8      	blx	r5

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001b88:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001b8c:	68da      	ldr	r2, [r3, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001b8e:	2109      	movs	r1, #9
 8001b90:	f361 228d 	bfi	r2, r1, #10, #4
	  break;
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
	  break;
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8001b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001b98:	60da      	str	r2, [r3, #12]
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001b9a:	6159      	str	r1, [r3, #20]
 8001b9c:	e611      	b.n	80017c2 <XMC_USBD_IRQHandler+0x5a>
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001b9e:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001ba2:	f8d4 91c4 	ldr.w	r9, [r4, #452]	; 0x1c4
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001ba6:	684a      	ldr	r2, [r1, #4]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001ba8:	f8d4 71d4 	ldr.w	r7, [r4, #468]	; 0x1d4
 8001bac:	f8d4 61d8 	ldr.w	r6, [r4, #472]	; 0x1d8
 8001bb0:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001bb8:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
 8001bbc:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;
 8001bc0:	604a      	str	r2, [r1, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001bc2:	f8d9 2000 	ldr.w	r2, [r9]
		epctl.b.snak = 1U;
 8001bc6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001bca:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001bce:	f8c9 2000 	str.w	r2, [r9]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001bd2:	f8d8 2000 	ldr.w	r2, [r8]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001bd6:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8001e40 <XMC_USBD_IRQHandler+0x6d8>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001bda:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001bde:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001be2:	f8c8 2000 	str.w	r2, [r8]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001be6:	f8dc 2000 	ldr.w	r2, [ip]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001bea:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8001e44 <XMC_USBD_IRQHandler+0x6dc>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001bee:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001bf2:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001bf6:	f8cc 2000 	str.w	r2, [ip]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001bfa:	f8de 2000 	ldr.w	r2, [lr]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001bfe:	f8df c248 	ldr.w	ip, [pc, #584]	; 8001e48 <XMC_USBD_IRQHandler+0x6e0>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001c02:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001c06:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001c0a:	f8ce 2000 	str.w	r2, [lr]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c0e:	683a      	ldr	r2, [r7, #0]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001c10:	f8df e238 	ldr.w	lr, [pc, #568]	; 8001e4c <XMC_USBD_IRQHandler+0x6e4>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001c14:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001c18:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001c1c:	603a      	str	r2, [r7, #0]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c1e:	6832      	ldr	r2, [r6, #0]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001c20:	4f84      	ldr	r7, [pc, #528]	; (8001e34 <XMC_USBD_IRQHandler+0x6cc>)

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001c22:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001c26:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001c2a:	6032      	str	r2, [r6, #0]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c2c:	6802      	ldr	r2, [r0, #0]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001c2e:	4e82      	ldr	r6, [pc, #520]	; (8001e38 <XMC_USBD_IRQHandler+0x6d0>)

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001c30:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001c34:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001c38:	6002      	str	r2, [r0, #0]
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001c3a:	2040      	movs	r0, #64	; 0x40
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
 8001c3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001c40:	6258      	str	r0, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
 8001c42:	f360 020f 	bfi	r2, r0, #0, #16
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001c46:	2000      	movs	r0, #0
  xmc_device.global_register->grxfsiz = 64U;
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001c4a:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
 8001c4e:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
 8001c52:	f8c3 c10c 	str.w	ip, [r3, #268]	; 0x10c
 8001c56:	f8c3 e110 	str.w	lr, [r3, #272]	; 0x110
 8001c5a:	f8c3 7114 	str.w	r7, [r3, #276]	; 0x114
 8001c5e:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001c62:	900d      	str	r0, [sp, #52]	; 0x34
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c66:	f042 0220 	orr.w	r2, r2, #32
 8001c6a:	920d      	str	r2, [sp, #52]	; 0x34
  data.b.txfnum = fifo_num;
 8001c6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c6e:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8001c72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c76:	920d      	str	r2, [sp, #52]	; 0x34
  xmc_device.global_register->grstctl = data.d32;
 8001c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c7a:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	920d      	str	r2, [sp, #52]	; 0x34
  } while (data.b.txfflsh);
 8001c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c82:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d1f8      	bne.n	8001c7c <XMC_USBD_IRQHandler+0x514>
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001c8a:	920c      	str	r2, [sp, #48]	; 0x30
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	920c      	str	r2, [sp, #48]	; 0x30
  data.b.txfnum = fifo_num;
 8001c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c96:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8001c9a:	920c      	str	r2, [sp, #48]	; 0x30
  xmc_device.global_register->grstctl = data.d32;
 8001c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c9e:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	920c      	str	r2, [sp, #48]	; 0x30
  } while (data.b.txfflsh);
 8001ca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ca6:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d1f8      	bne.n	8001ca0 <XMC_USBD_IRQHandler+0x538>
static void XMC_USBD_lFlushRXFifo(void) 
{
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001cae:	920b      	str	r2, [sp, #44]	; 0x2c
  data.b.rxfflsh = 1U;
 8001cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001cb2:	f042 0210 	orr.w	r2, r2, #16
 8001cb6:	920b      	str	r2, [sp, #44]	; 0x2c
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001cba:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	920b      	str	r2, [sp, #44]	; 0x2c
  } while (data.b.rxfflsh);
 8001cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001cc2:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d1f8      	bne.n	8001cbc <XMC_USBD_IRQHandler+0x554>
  XMC_USBD_lFlushRXFifo();
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
  daint.b.inep0 = 1U;
  daint.b.outep0 = 1U;
 8001cca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  xmc_device.device_register->daintmsk = daint.d32;
 8001cce:	61cb      	str	r3, [r1, #28]
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
	doepint_data_t doepint;
	doepint.d32 = event;
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001cd0:	694b      	ldr	r3, [r1, #20]
  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
  dcfg.b.devaddr = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001cd2:	9801      	ldr	r0, [sp, #4]
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
	doepint_data_t doepint;
	doepint.d32 = event;
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001cd4:	f043 030f 	orr.w	r3, r3, #15
  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
  dcfg.b.devaddr = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001cd8:	7b40      	ldrb	r0, [r0, #13]
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
	doepint_data_t doepint;
	doepint.d32 = event;
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001cda:	614b      	str	r3, [r1, #20]
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
	diepint_data_t diepint;
	diepint.d32 = event;
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001cdc:	690b      	ldr	r3, [r1, #16]
 8001cde:	f043 030f 	orr.w	r3, r3, #15
 8001ce2:	610b      	str	r3, [r1, #16]
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001ce4:	680b      	ldr	r3, [r1, #0]
  dcfg.b.devaddr = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001ce6:	2801      	cmp	r0, #1
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
  dcfg.b.devaddr = 0U;
 8001ce8:	f362 130a 	bfi	r3, r2, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 8001cec:	600b      	str	r3, [r1, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001cee:	bf08      	it	eq
 8001cf0:	634a      	streq	r2, [r1, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001cf2:	6863      	ldr	r3, [r4, #4]
  xmc_device.ep[0U].inInUse = 0U;

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001cf4:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001cf8:	f023 0310 	bic.w	r3, r3, #16
 8001cfc:	6063      	str	r3, [r4, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001cfe:	6863      	ldr	r3, [r4, #4]
 8001d00:	f023 0308 	bic.w	r3, r3, #8
 8001d04:	6063      	str	r3, [r4, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001d06:	2004      	movs	r0, #4
 8001d08:	4790      	blx	r2
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d0a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
	  break;
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8001d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	e552      	b.n	80017bc <XMC_USBD_IRQHandler+0x54>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
  }
  if (data.b.sessreqintr)
  {
    xmc_device.IsPowered = 1U;
 8001d16:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001d1a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
  }
  if (data.b.sessreqintr)
  {
    xmc_device.IsPowered = 1U;
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001d26:	2000      	movs	r0, #0
 8001d28:	4790      	blx	r2
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d2a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  gintsts_data_t clear;
  clear.d32 = 0U;
  switch(event)
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8001d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	e53f      	b.n	80017b6 <XMC_USBD_IRQHandler+0x4e>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
  }
  if (data.b.wkupintr)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001d36:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001d3a:	2008      	movs	r0, #8
 8001d3c:	4798      	blx	r3
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d3e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
	  break;
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8001d42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	e532      	b.n	80017b0 <XMC_USBD_IRQHandler+0x48>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
  }
  if (data.b.usbsuspend)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8001d4a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001d4e:	2006      	movs	r0, #6
 8001d50:	4798      	blx	r3
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d52:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
	  break;
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8001d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	e523      	b.n	80017a6 <XMC_USBD_IRQHandler+0x3e>
  gintmsk.d32 = xmc_device.global_register->gintmsk;
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
	
  if (data.b.sofintr)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001d5e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001d62:	2009      	movs	r0, #9
 8001d64:	4798      	blx	r3
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d66:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
	  break;
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8001d6a:	2208      	movs	r2, #8
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001d6c:	615a      	str	r2, [r3, #20]
  if (data.b.sofintr)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001d6e:	9a01      	ldr	r2, [sp, #4]
 8001d70:	7b52      	ldrb	r2, [r2, #13]
 8001d72:	2a01      	cmp	r2, #1
 8001d74:	f47f ad0d 	bne.w	8001792 <XMC_USBD_IRQHandler+0x2a>
  {
    if (data.b.rxstsqlvl)
 8001d78:	06f1      	lsls	r1, r6, #27
 8001d7a:	f57f ad0a 	bpl.w	8001792 <XMC_USBD_IRQHandler+0x2a>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8001d7e:	f36f 1504 	bfc	r5, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001d82:	619d      	str	r5, [r3, #24]
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8001d84:	6a1a      	ldr	r2, [r3, #32]

  switch (data.b.pktsts)
 8001d86:	f3c2 4143 	ubfx	r1, r2, #17, #4
 8001d8a:	2902      	cmp	r1, #2
 8001d8c:	f000 80ff 	beq.w	8001f8e <XMC_USBD_IRQHandler+0x826>
 8001d90:	2906      	cmp	r1, #6
 8001d92:	d149      	bne.n	8001e28 <XMC_USBD_IRQHandler+0x6c0>
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
      break;
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001d94:	f002 070f 	and.w	r7, r2, #15
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001d98:	eb04 0187 	add.w	r1, r4, r7, lsl #2
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
      break;
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001d9c:	f3c2 120a 	ubfx	r2, r2, #4, #11
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001da0:	f8d1 11c4 	ldr.w	r1, [r1, #452]	; 0x1c4
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8001da4:	4825      	ldr	r0, [pc, #148]	; (8001e3c <XMC_USBD_IRQHandler+0x6d4>)
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001da6:	6809      	ldr	r1, [r1, #0]
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8001da8:	f8d4 81e0 	ldr.w	r8, [r4, #480]	; 0x1e0
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001dac:	040e      	lsls	r6, r1, #16
 8001dae:	d53b      	bpl.n	8001e28 <XMC_USBD_IRQHandler+0x6c0>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8001db0:	2134      	movs	r1, #52	; 0x34
 8001db2:	fb01 0e07 	mla	lr, r1, r7, r0
 8001db6:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
 8001dba:	b3a8      	cbz	r0, 8001e28 <XMC_USBD_IRQHandler+0x6c0>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001dbc:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8001dc0:	d00b      	beq.n	8001dda <XMC_USBD_IRQHandler+0x672>
 8001dc2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	e001      	b.n	8001dce <XMC_USBD_IRQHandler+0x666>
 8001dca:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8001dce:	f8d8 6000 	ldr.w	r6, [r8]
 8001dd2:	5046      	str	r6, [r0, r1]
 8001dd4:	3104      	adds	r1, #4
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001dd6:	4561      	cmp	r1, ip
 8001dd8:	d1f7      	bne.n	8001dca <XMC_USBD_IRQHandler+0x662>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8001dda:	4562      	cmp	r2, ip
 8001ddc:	d01b      	beq.n	8001e16 <XMC_USBD_IRQHandler+0x6ae>
    {
      temp_data = *fifo;
 8001dde:	f8d8 8000 	ldr.w	r8, [r8]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001de2:	d918      	bls.n	8001e16 <XMC_USBD_IRQHandler+0x6ae>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001de4:	f04f 0e34 	mov.w	lr, #52	; 0x34
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001de8:	4663      	mov	r3, ip
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001dea:	fb0e 4e07 	mla	lr, lr, r7, r4
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001dee:	2600      	movs	r6, #0
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001df0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8001df4:	fa09 f106 	lsl.w	r1, r9, r6
 8001df8:	ea01 0108 	and.w	r1, r1, r8
 8001dfc:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
 8001e00:	f8df c038 	ldr.w	ip, [pc, #56]	; 8001e3c <XMC_USBD_IRQHandler+0x6d4>
 8001e04:	40f1      	lsrs	r1, r6
 8001e06:	54c1      	strb	r1, [r0, r3]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001e08:	3301      	adds	r3, #1
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	f106 0608 	add.w	r6, r6, #8
 8001e10:	d1f0      	bne.n	8001df4 <XMC_USBD_IRQHandler+0x68c>
 8001e12:	f8dc 31a0 	ldr.w	r3, [ip, #416]	; 0x1a0
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001e16:	2634      	movs	r6, #52	; 0x34
 8001e18:	fb06 4607 	mla	r6, r6, r7, r4
 8001e1c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001e1e:	6a70      	ldr	r0, [r6, #36]	; 0x24
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001e20:	4411      	add	r1, r2
    ep->xferBuffer += byte_count;
 8001e22:	4402      	add	r2, r0
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001e24:	62f1      	str	r1, [r6, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001e26:	6272      	str	r2, [r6, #36]	; 0x24
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
      gintmsk.b.rxstsqlvl = 1U;
 8001e28:	f045 0510 	orr.w	r5, r5, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001e2c:	619d      	str	r5, [r3, #24]
 8001e2e:	e4b0      	b.n	8001792 <XMC_USBD_IRQHandler+0x2a>
 8001e30:	1fff0174 	.word	0x1fff0174
 8001e34:	00100090 	.word	0x00100090
 8001e38:	001000a0 	.word	0x001000a0
 8001e3c:	1fff0178 	.word	0x1fff0178
 8001e40:	00100050 	.word	0x00100050
 8001e44:	00100060 	.word	0x00100060
 8001e48:	00100070 	.word	0x00100070
 8001e4c:	00100080 	.word	0x00100080
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8001e50:	b9a9      	cbnz	r1, 8001e7e <XMC_USBD_IRQHandler+0x716>
    {
      data.b.xfersize = 0U;
 8001e52:	f361 0312 	bfi	r3, r1, #0, #19
      data.b.pktcnt = 1U;
 8001e56:	2201      	movs	r2, #1
 8001e58:	f362 43dc 	bfi	r3, r2, #19, #10
 8001e5c:	e551      	b.n	8001902 <XMC_USBD_IRQHandler+0x19a>
 8001e5e:	5da2      	ldrb	r2, [r4, r6]
 8001e60:	f002 020f 	and.w	r2, r2, #15
 8001e64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e68:	f8d2 11c4 	ldr.w	r1, [r2, #452]	; 0x1c4
 8001e6c:	e55b      	b.n	8001926 <XMC_USBD_IRQHandler+0x1be>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001e6e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001e70:	6a81      	ldr	r1, [r0, #40]	; 0x28
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
 8001e72:	6a43      	ldr	r3, [r0, #36]	; 0x24
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
            ep->xferCount += Bytes;
 8001e74:	62c1      	str	r1, [r0, #44]	; 0x2c
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001e76:	1a8a      	subs	r2, r1, r2
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
 8001e78:	441a      	add	r2, r3
 8001e7a:	6242      	str	r2, [r0, #36]	; 0x24
 8001e7c:	e5e0      	b.n	8001a40 <XMC_USBD_IRQHandler+0x2d8>
      data.b.pktcnt = 1U;
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001e7e:	6842      	ldr	r2, [r0, #4]
 8001e80:	f8da 0004 	ldr.w	r0, [sl, #4]
 8001e84:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001e88:	1a09      	subs	r1, r1, r0
 8001e8a:	f102 3eff 	add.w	lr, r2, #4294967295
 8001e8e:	448e      	add	lr, r1
 8001e90:	fbbe f2f2 	udiv	r2, lr, r2
 8001e94:	f362 43dc 	bfi	r3, r2, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001e98:	f361 0312 	bfi	r3, r1, #0, #19
 8001e9c:	e531      	b.n	8001902 <XMC_USBD_IRQHandler+0x19a>
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001e9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001ea2:	1a5b      	subs	r3, r3, r1
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
 8001ea8:	f04f 0c01 	mov.w	ip, #1
 8001eac:	e63b      	b.n	8001b26 <XMC_USBD_IRQHandler+0x3be>
  {
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
  {
    size.b.xfersize = 0U;
 8001eae:	f363 0012 	bfi	r0, r3, #0, #19
    size.b.pktcnt = 1U;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f363 40dc 	bfi	r0, r3, #19, #10
 8001eb8:	e644      	b.n	8001b44 <XMC_USBD_IRQHandler+0x3dc>
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001eba:	f008 080f 	and.w	r8, r8, #15
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001ebe:	f108 016a 	add.w	r1, r8, #106	; 0x6a
 8001ec2:	4f5e      	ldr	r7, [pc, #376]	; (800203c <XMC_USBD_IRQHandler+0x8d4>)
 8001ec4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8001ec8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001eca:	f8d1 c018 	ldr.w	ip, [r1, #24]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001ece:	495b      	ldr	r1, [pc, #364]	; (800203c <XMC_USBD_IRQHandler+0x8d4>)
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8001ed0:	9706      	str	r7, [sp, #24]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001ed2:	f108 0878 	add.w	r8, r8, #120	; 0x78
 8001ed6:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
 8001eda:	9107      	str	r1, [sp, #28]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
  if (!byte_count)
 8001edc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001ede:	1bc9      	subs	r1, r1, r7
 8001ee0:	9105      	str	r1, [sp, #20]
 8001ee2:	d051      	beq.n	8001f88 <XMC_USBD_IRQHandler+0x820>
    result = 0U;
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001ee4:	f101 0803 	add.w	r8, r1, #3
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8001ee8:	fa1f fc8c 	uxth.w	ip, ip
    result = 0U;
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001eec:	ea4f 0898 	mov.w	r8, r8, lsr #2
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8001ef0:	45e0      	cmp	r8, ip
 8001ef2:	d844      	bhi.n	8001f7e <XMC_USBD_IRQHandler+0x816>
 8001ef4:	fb0b 410e 	mla	r1, fp, lr, r4
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001ef8:	f1b8 0f00 	cmp.w	r8, #0
 8001efc:	f000 809b 	beq.w	8002036 <XMC_USBD_IRQHandler+0x8ce>
 8001f00:	9106      	str	r1, [sp, #24]
 8001f02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001f06:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001f08:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001f0c:	9f02      	ldr	r7, [sp, #8]
 8001f0e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001f12:	f8cd e020 	str.w	lr, [sp, #32]
 8001f16:	2000      	movs	r0, #0
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001f18:	6809      	ldr	r1, [r1, #0]
 8001f1a:	f8cc 1000 	str.w	r1, [ip]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001f1e:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
      i++;
 8001f22:	3001      	adds	r0, #1
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001f24:	3104      	adds	r1, #4
 8001f26:	4540      	cmp	r0, r8
 8001f28:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
 8001f2c:	d1f4      	bne.n	8001f18 <XMC_USBD_IRQHandler+0x7b0>
 8001f2e:	9806      	ldr	r0, [sp, #24]
 8001f30:	f8dd e020 	ldr.w	lr, [sp, #32]
 8001f34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001f36:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8001f3a:	9702      	str	r7, [sp, #8]
 8001f3c:	9006      	str	r0, [sp, #24]
 8001f3e:	4607      	mov	r7, r0
      {
        if (diepint.b.emptyintr)
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
 8001f40:	46bc      	mov	ip, r7
 8001f42:	9f05      	ldr	r7, [sp, #20]
 8001f44:	fb0b 400e 	mla	r0, fp, lr, r4
 8001f48:	44bc      	add	ip, r7
          ep->xferBuffer += bytes;
 8001f4a:	4439      	add	r1, r7
      {
        if (diepint.b.emptyintr)
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
 8001f4c:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001f50:	6241      	str	r1, [r0, #36]	; 0x24
 8001f52:	e588      	b.n	8001a66 <XMC_USBD_IRQHandler+0x2fe>
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001f54:	2901      	cmp	r1, #1
 8001f56:	f47f adf5 	bne.w	8001b44 <XMC_USBD_IRQHandler+0x3dc>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001f5a:	9f06      	ldr	r7, [sp, #24]
 8001f5c:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8001f60:	40b9      	lsls	r1, r7
 8001f62:	4319      	orrs	r1, r3
 8001f64:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
 8001f68:	e5ec      	b.n	8001b44 <XMC_USBD_IRQHandler+0x3dc>
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <XMC_USBD_IRQHandler+0x8d4>)
 8001f6c:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 8001f70:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001f72:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f76:	ea23 0202 	bic.w	r2, r3, r2
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8001f7a:	634a      	str	r2, [r1, #52]	; 0x34
 8001f7c:	e582      	b.n	8001a84 <XMC_USBD_IRQHandler+0x31c>
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8001f7e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8001f82:	9105      	str	r1, [sp, #20]
 8001f84:	46e0      	mov	r8, ip
 8001f86:	e7b5      	b.n	8001ef4 <XMC_USBD_IRQHandler+0x78c>
 8001f88:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001f8a:	9f06      	ldr	r7, [sp, #24]
 8001f8c:	e7d8      	b.n	8001f40 <XMC_USBD_IRQHandler+0x7d8>
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f8e:	f002 070f 	and.w	r7, r2, #15
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001f92:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001f96:	f3c2 100a 	ubfx	r0, r2, #4, #11
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001f9a:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8001f9e:	f8d4 c1e0 	ldr.w	ip, [r4, #480]	; 0x1e0
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001fa2:	6812      	ldr	r2, [r2, #0]
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8001fa4:	4925      	ldr	r1, [pc, #148]	; (800203c <XMC_USBD_IRQHandler+0x8d4>)
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001fa6:	0412      	lsls	r2, r2, #16
 8001fa8:	f57f af3e 	bpl.w	8001e28 <XMC_USBD_IRQHandler+0x6c0>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8001fac:	2234      	movs	r2, #52	; 0x34
 8001fae:	fb02 1e07 	mla	lr, r2, r7, r1
 8001fb2:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
 8001fb6:	2900      	cmp	r1, #0
 8001fb8:	f43f af36 	beq.w	8001e28 <XMC_USBD_IRQHandler+0x6c0>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001fbc:	ea5f 0890 	movs.w	r8, r0, lsr #2
 8001fc0:	d00f      	beq.n	8001fe2 <XMC_USBD_IRQHandler+0x87a>
 8001fc2:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	e001      	b.n	8001fce <XMC_USBD_IRQHandler+0x866>
 8001fca:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8001fce:	f8dc 6000 	ldr.w	r6, [ip]
 8001fd2:	508e      	str	r6, [r1, r2]
 8001fd4:	3204      	adds	r2, #4
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001fd6:	4542      	cmp	r2, r8
 8001fd8:	d1f7      	bne.n	8001fca <XMC_USBD_IRQHandler+0x862>
 8001fda:	2234      	movs	r2, #52	; 0x34
 8001fdc:	fb02 4207 	mla	r2, r2, r7, r4
 8001fe0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8001fe2:	4540      	cmp	r0, r8
 8001fe4:	d01e      	beq.n	8002024 <XMC_USBD_IRQHandler+0x8bc>
    {
      temp_data = *fifo;
 8001fe6:	f8dc c000 	ldr.w	ip, [ip]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001fea:	d91b      	bls.n	8002024 <XMC_USBD_IRQHandler+0x8bc>
 8001fec:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8001ff0:	4643      	mov	r3, r8
 8001ff2:	fb0e 4e07 	mla	lr, lr, r7, r4
 8001ff6:	2600      	movs	r6, #0
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001ff8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8001ffc:	e001      	b.n	8002002 <XMC_USBD_IRQHandler+0x89a>
 8001ffe:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
 8002002:	fa08 f206 	lsl.w	r2, r8, r6
 8002006:	ea02 020c 	and.w	r2, r2, ip
 800200a:	40f2      	lsrs	r2, r6
 800200c:	54ca      	strb	r2, [r1, r3]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800200e:	3301      	adds	r3, #1
 8002010:	4298      	cmp	r0, r3
 8002012:	f106 0608 	add.w	r6, r6, #8
 8002016:	d1f2      	bne.n	8001ffe <XMC_USBD_IRQHandler+0x896>
 8002018:	2234      	movs	r2, #52	; 0x34
 800201a:	fb02 4207 	mla	r2, r2, r7, r4
 800201e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8002022:	6a51      	ldr	r1, [r2, #36]	; 0x24
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8002024:	2234      	movs	r2, #52	; 0x34
 8002026:	fb02 4707 	mla	r7, r2, r7, r4
    ep->xferBuffer += byte_count;
 800202a:	4401      	add	r1, r0
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 800202c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 800202e:	6279      	str	r1, [r7, #36]	; 0x24
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8002030:	4402      	add	r2, r0
 8002032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002034:	e6f8      	b.n	8001e28 <XMC_USBD_IRQHandler+0x6c0>
 8002036:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002038:	9f06      	ldr	r7, [sp, #24]
 800203a:	e781      	b.n	8001f40 <XMC_USBD_IRQHandler+0x7d8>
 800203c:	1fff0178 	.word	0x1fff0178

08002040 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 8002040:	b510      	push	{r4, lr}
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8002042:	4c05      	ldr	r4, [pc, #20]	; (8002058 <XMC_USBD_Disable+0x18>)
 8002044:	4620      	mov	r0, r4
 8002046:	f7fe f96f 	bl	8000328 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 800204a:	4620      	mov	r0, r4
 800204c:	f7fe f9e2 	bl	8000414 <XMC_SCU_CLOCK_GatePeripheralClock>
#endif
  XMC_SCU_POWER_DisableUsb();
}
 8002050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8002054:	f7fe ba20 	b.w	8000498 <XMC_SCU_POWER_DisableUsb>
 8002058:	20000080 	.word	0x20000080

0800205c <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <XMC_USIC_CH_Enable+0x70>)
 800205e:	4298      	cmp	r0, r3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002060:	b510      	push	{r4, lr}
 8002062:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002064:	d01b      	beq.n	800209e <XMC_USIC_CH_Enable+0x42>
 8002066:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800206a:	4298      	cmp	r0, r3
 800206c:	d017      	beq.n	800209e <XMC_USIC_CH_Enable+0x42>
  {
    XMC_USIC_Enable(XMC_USIC0);
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <XMC_USIC_CH_Enable+0x74>)
 8002070:	4298      	cmp	r0, r3
 8002072:	d024      	beq.n	80020be <XMC_USIC_CH_Enable+0x62>
 8002074:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002078:	4298      	cmp	r0, r3
 800207a:	d020      	beq.n	80020be <XMC_USIC_CH_Enable+0x62>
  {
    XMC_USIC_Enable(XMC_USIC1);
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <XMC_USIC_CH_Enable+0x78>)
 800207e:	4298      	cmp	r0, r3
 8002080:	d016      	beq.n	80020b0 <XMC_USIC_CH_Enable+0x54>
 8002082:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002086:	4298      	cmp	r0, r3
 8002088:	d012      	beq.n	80020b0 <XMC_USIC_CH_Enable+0x54>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800208a:	2303      	movs	r3, #3
 800208c:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800208e:	68e3      	ldr	r3, [r4, #12]
 8002090:	07db      	lsls	r3, r3, #31
 8002092:	d5fc      	bpl.n	800208e <XMC_USIC_CH_Enable+0x32>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002096:	f023 030f 	bic.w	r3, r3, #15
 800209a:	6423      	str	r3, [r4, #64]	; 0x40
 800209c:	bd10      	pop	{r4, pc}
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
  if (usic == USIC0)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 800209e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020a2:	f7fe f9c3 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80020a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020aa:	f7fe f949 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80020ae:	e7ec      	b.n	800208a <XMC_USIC_CH_Enable+0x2e>
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <XMC_USIC_CH_Enable+0x7c>)
 80020b2:	f7fe f9bb 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80020b6:	4808      	ldr	r0, [pc, #32]	; (80020d8 <XMC_USIC_CH_Enable+0x7c>)
 80020b8:	f7fe f942 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80020bc:	e7e5      	b.n	800208a <XMC_USIC_CH_Enable+0x2e>
  }
#if defined(USIC1)  
  else if (usic == USIC1)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <XMC_USIC_CH_Enable+0x80>)
 80020c0:	f7fe f9b4 	bl	800042c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <XMC_USIC_CH_Enable+0x80>)
 80020c6:	f7fe f93b 	bl	8000340 <XMC_SCU_RESET_DeassertPeripheralReset>
 80020ca:	e7de      	b.n	800208a <XMC_USIC_CH_Enable+0x2e>
 80020cc:	40030000 	.word	0x40030000
 80020d0:	48020000 	.word	0x48020000
 80020d4:	48024000 	.word	0x48024000
 80020d8:	10000100 	.word	0x10000100
 80020dc:	10000080 	.word	0x10000080

080020e0 <XMC_USIC_CH_SetBaudrate>:
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80020e0:	2963      	cmp	r1, #99	; 0x63
 80020e2:	d900      	bls.n	80020e6 <XMC_USIC_CH_SetBaudrate+0x6>
 80020e4:	b90a      	cbnz	r2, 80020ea <XMC_USIC_CH_SetBaudrate+0xa>
                    
    status = XMC_USIC_CH_STATUS_OK;
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	4770      	bx	lr
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80020ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ee:	4617      	mov	r7, r2
 80020f0:	460c      	mov	r4, r1
 80020f2:	4606      	mov	r6, r0
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80020f4:	f7fe f930 	bl	8000358 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80020f8:	4d18      	ldr	r5, [pc, #96]	; (800215c <XMC_USIC_CH_SetBaudrate+0x7c>)
 80020fa:	fba5 3200 	umull	r3, r2, r5, r0
    rate = rate / 100U;
 80020fe:	fba5 3504 	umull	r3, r5, r5, r4
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8002102:	0952      	lsrs	r2, r2, #5
    rate = rate / 100U;
 8002104:	096d      	lsrs	r5, r5, #5

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
 8002106:	f240 3eff 	movw	lr, #1023	; 0x3ff
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
 800210a:	f04f 0c01 	mov.w	ip, #1
 800210e:	fb07 f505 	mul.w	r5, r7, r5
 8002112:	ebc2 2182 	rsb	r1, r2, r2, lsl #10
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002116:	4670      	mov	r0, lr
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
 8002118:	46e0      	mov	r8, ip
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800211a:	fbb1 f3f5 	udiv	r3, r1, r5
      pdiv_int = pdiv >> 10U;
 800211e:	0a9c      	lsrs	r4, r3, #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8002120:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	eba1 0102 	sub.w	r1, r1, r2

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800212c:	d204      	bcs.n	8002138 <XMC_USIC_CH_SetBaudrate+0x58>
 800212e:	4573      	cmp	r3, lr
 8002130:	d202      	bcs.n	8002138 <XMC_USIC_CH_SetBaudrate+0x58>
 8002132:	469e      	mov	lr, r3
 8002134:	46a4      	mov	ip, r4
 8002136:	4680      	mov	r8, r0

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002138:	3801      	subs	r0, #1
 800213a:	d1ee      	bne.n	800211a <XMC_USIC_CH_SetBaudrate+0x3a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800213c:	f448 4300 	orr.w	r3, r8, #32768	; 0x8000
 8002140:	6133      	str	r3, [r6, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002142:	6972      	ldr	r2, [r6, #20]
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <XMC_USIC_CH_SetBaudrate+0x80>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002146:	3f01      	subs	r7, #1
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002148:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800214a:	f10c 3cff 	add.w	ip, ip, #4294967295
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800214e:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002152:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002156:	6173      	str	r3, [r6, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8002158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800215c:	51eb851f 	.word	0x51eb851f
 8002160:	fc0080ef 	.word	0xfc0080ef

08002164 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002164:	b430      	push	{r4, r5}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8002166:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800216a:	4c08      	ldr	r4, [pc, #32]	; (800218c <XMC_USIC_CH_TXFIFO_Configure+0x28>)
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800216c:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 8002170:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002174:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8002178:	402c      	ands	r4, r5
 800217a:	4321      	orrs	r1, r4
 800217c:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8002180:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002184:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8002188:	bc30      	pop	{r4, r5}
 800218a:	4770      	bx	lr
 800218c:	f8ffc0c0 	.word	0xf8ffc0c0

08002190 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002190:	b430      	push	{r4, r5}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002192:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002196:	4c09      	ldr	r4, [pc, #36]	; (80021bc <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002198:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 800219c:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80021a0:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 80021a4:	402c      	ands	r4, r5
 80021a6:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80021aa:	4321      	orrs	r1, r4
 80021ac:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 80021b0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80021b4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80021b8:	bc30      	pop	{r4, r5}
 80021ba:	4770      	bx	lr
 80021bc:	efffc0c0 	.word	0xefffc0c0

080021c0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80021c0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80021c4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021c8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80021cc:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 80021d0:	0609      	lsls	r1, r1, #24
 80021d2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80021d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 80021e4:	b410      	push	{r4}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80021e6:	6983      	ldr	r3, [r0, #24]
 80021e8:	2407      	movs	r4, #7
 80021ea:	408c      	lsls	r4, r1
 80021ec:	ea23 0304 	bic.w	r3, r3, r4
                  (service_request << (uint32_t)interrupt_node));
 80021f0:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80021f2:	431a      	orrs	r2, r3
 80021f4:	6182      	str	r2, [r0, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 80021f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80021fc:	b410      	push	{r4}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80021fe:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8002202:	2407      	movs	r4, #7
 8002204:	408c      	lsls	r4, r1
 8002206:	ea23 0304 	bic.w	r3, r3, r4
                   (service_request << (uint32_t)interrupt_node));
 800220a:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800220c:	431a      	orrs	r2, r3
 800220e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8002212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002216:	4770      	bx	lr

08002218 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002218:	b410      	push	{r4}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800221a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800221e:	2407      	movs	r4, #7
 8002220:	408c      	lsls	r4, r1
 8002222:	ea23 0304 	bic.w	r3, r3, r4
                   (service_request << (uint32_t)interrupt_node));
 8002226:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002228:	431a      	orrs	r2, r3
 800222a:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 800222e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002232:	4770      	bx	lr

08002234 <SystemCoreClockUpdate>:
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <SystemCoreClockUpdate+0x74>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	03d9      	lsls	r1, r3, #15

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800223a:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800223c:	d51d      	bpl.n	800227a <SystemCoreClockUpdate+0x46>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <SystemCoreClockUpdate+0x78>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	07da      	lsls	r2, r3, #31
 8002244:	d52c      	bpl.n	80022a0 <SystemCoreClockUpdate+0x6c>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8002246:	481a      	ldr	r0, [pc, #104]	; (80022b0 <SystemCoreClockUpdate+0x7c>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8002248:	4a18      	ldr	r2, [pc, #96]	; (80022ac <SystemCoreClockUpdate+0x78>)
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	075b      	lsls	r3, r3, #29
 800224e:	d416      	bmi.n	800227e <SystemCoreClockUpdate+0x4a>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002250:	6893      	ldr	r3, [r2, #8]
 8002252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002256:	3301      	adds	r3, #1

      temp = (temp / kdiv);
 8002258:	fbb0 f3f3 	udiv	r3, r0, r3
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800225c:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <SystemCoreClockUpdate+0x74>)
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);

  SystemCoreClock = temp;
 800225e:	4915      	ldr	r1, [pc, #84]	; (80022b4 <SystemCoreClockUpdate+0x80>)
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002260:	68d0      	ldr	r0, [r2, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002262:	6912      	ldr	r2, [r2, #16]
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002264:	b2c0      	uxtb	r0, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002266:	f002 0201 	and.w	r2, r2, #1
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800226a:	3001      	adds	r0, #1
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800226c:	3201      	adds	r2, #1
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800226e:	fbb3 f0f0 	udiv	r0, r3, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002272:	fbb0 f0f2 	udiv	r0, r0, r2

  SystemCoreClock = temp;
 8002276:	6008      	str	r0, [r1, #0]
 8002278:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <SystemCoreClockUpdate+0x7c>)
 800227c:	e7ee      	b.n	800225c <SystemCoreClockUpdate+0x28>
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800227e:	6891      	ldr	r1, [r2, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8002280:	6893      	ldr	r3, [r2, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8002282:	6894      	ldr	r4, [r2, #8]
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8002284:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8002288:	3201      	adds	r2, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800228a:	f3c4 4106 	ubfx	r1, r4, #16, #7
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800228e:	f3c3 2306 	ubfx	r3, r3, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002292:	fb01 2202 	mla	r2, r1, r2, r2
 8002296:	fbb0 f0f2 	udiv	r0, r0, r2
 800229a:	fb03 0300 	mla	r3, r3, r0, r0
 800229e:	e7dd      	b.n	800225c <SystemCoreClockUpdate+0x28>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80022a0:	f002 fb22 	bl	80048e8 <OSCHP_GetFrequency>
 80022a4:	e7d0      	b.n	8002248 <SystemCoreClockUpdate+0x14>
 80022a6:	bf00      	nop
 80022a8:	50004600 	.word	0x50004600
 80022ac:	50004710 	.word	0x50004710
 80022b0:	016e3600 	.word	0x016e3600
 80022b4:	2003ffc0 	.word	0x2003ffc0

080022b8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80022b8:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 80022ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c0:	4c03      	ldr	r4, [pc, #12]	; (80022d0 <SystemInit+0x18>)
 80022c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80022c6:	f002 fad1 	bl	800486c <SystemCoreSetup>
  SystemCoreClockSetup();
 80022ca:	f002 fb11 	bl	80048f0 <SystemCoreClockSetup>
 80022ce:	bd10      	pop	{r4, pc}
 80022d0:	2003ffc4 	.word	0x2003ffc4

080022d4 <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80022d4:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <_sbrk+0x34>)

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80022d6:	b508      	push	{r3, lr}
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80022d8:	6813      	ldr	r3, [r2, #0]
 80022da:	b18b      	cbz	r3, 8002300 <_sbrk+0x2c>
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80022dc:	3003      	adds	r0, #3
 80022de:	f020 0003 	bic.w	r0, r0, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <_sbrk+0x38>)
 80022e4:	4418      	add	r0, r3
 80022e6:	4288      	cmp	r0, r1
 80022e8:	d202      	bcs.n	80022f0 <_sbrk+0x1c>
  {
    heap_ptr += nbytes;
 80022ea:	6010      	str	r0, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd08      	pop	{r3, pc}
    return (base);
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80022f0:	f00b f910 	bl	800d514 <__errno>
 80022f4:	230c      	movs	r3, #12
 80022f6:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	bd08      	pop	{r3, pc}
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <_sbrk+0x3c>)
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e7ea      	b.n	80022dc <_sbrk+0x8>
 8002306:	bf00      	nop
 8002308:	1ffed794 	.word	0x1ffed794
 800230c:	2003ffc0 	.word	0x2003ffc0
 8002310:	20000e00 	.word	0x20000e00

08002314 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop

08002318 <USBD_VCOM_Event_GetDescriptor>:
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
	const void* address = NULL;
	uint16_t    size    = NO_DESCRIPTOR;

	switch (descriptor_type)
 8002318:	0a03      	lsrs	r3, r0, #8
 800231a:	2b02      	cmp	r3, #2
 800231c:	d016      	beq.n	800234c <USBD_VCOM_Event_GetDescriptor+0x34>
 800231e:	2b03      	cmp	r3, #3
 8002320:	d009      	beq.n	8002336 <USBD_VCOM_Event_GetDescriptor+0x1e>
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <USBD_VCOM_Event_GetDescriptor+0x16>
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
 8002326:	2000      	movs	r0, #0
 8002328:	4603      	mov	r3, r0
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 800232a:	6013      	str	r3, [r2, #0]
	return size;
}
 800232c:	4770      	bx	lr
	uint16_t    size    = NO_DESCRIPTOR;

	switch (descriptor_type)
	{
		case DTYPE_Device:
			address = &device_descriptor;
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <USBD_VCOM_Event_GetDescriptor+0x3c>)
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 8002330:	6013      	str	r3, [r2, #0]

	switch (descriptor_type)
	{
		case DTYPE_Device:
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
 8002332:	2012      	movs	r0, #18
	}

	(void)w_index;
	*descriptor_address = address;
	return size;
}
 8002334:	4770      	bx	lr
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
 8002336:	b2c0      	uxtb	r0, r0
 8002338:	2802      	cmp	r0, #2
 800233a:	d8f4      	bhi.n	8002326 <USBD_VCOM_Event_GetDescriptor+0xe>
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <USBD_VCOM_Event_GetDescriptor+0x40>)
 800233e:	4907      	ldr	r1, [pc, #28]	; (800235c <USBD_VCOM_Event_GetDescriptor+0x44>)
 8002340:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
	return size;
}
 800234a:	4770      	bx	lr
		case DTYPE_Device:
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <USBD_VCOM_Event_GetDescriptor+0x48>)
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 800234e:	6013      	str	r3, [r2, #0]
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			address = &configuration_descriptor;
			size    = sizeof(USB_Descriptor_Configuration_t);
 8002350:	203e      	movs	r0, #62	; 0x3e
	}

	(void)w_index;
	*descriptor_address = address;
	return size;
}
 8002352:	4770      	bx	lr
 8002354:	0800d890 	.word	0x0800d890
 8002358:	0800d974 	.word	0x0800d974
 800235c:	0800d980 	.word	0x0800d980
 8002360:	0800d988 	.word	0x0800d988

08002364 <CDC_Device_ProcessControlRequest>:
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8002364:	4a45      	ldr	r2, [pc, #276]	; (800247c <CDC_Device_ProcessControlRequest+0x118>)
 8002366:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 800236a:	079b      	lsls	r3, r3, #30
 800236c:	d510      	bpl.n	8002390 <CDC_Device_ProcessControlRequest+0x2c>
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800236e:	b570      	push	{r4, r5, r6, lr}
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8002370:	4943      	ldr	r1, [pc, #268]	; (8002480 <CDC_Device_ProcessControlRequest+0x11c>)
 8002372:	7c84      	ldrb	r4, [r0, #18]
 8002374:	888b      	ldrh	r3, [r1, #4]
 8002376:	b29b      	uxth	r3, r3
 8002378:	429c      	cmp	r4, r3
 800237a:	d000      	beq.n	800237e <CDC_Device_ProcessControlRequest+0x1a>
 800237c:	bd70      	pop	{r4, r5, r6, pc}
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 800237e:	784b      	ldrb	r3, [r1, #1]
 8002380:	3b20      	subs	r3, #32
 8002382:	4604      	mov	r4, r0
 8002384:	2b03      	cmp	r3, #3
 8002386:	d8f9      	bhi.n	800237c <CDC_Device_ProcessControlRequest+0x18>
 8002388:	e8df f003 	tbb	[pc, r3]
 800238c:	03633f18 	.word	0x03633f18
 8002390:	4770      	bx	lr

				}

				break;
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002392:	780b      	ldrb	r3, [r1, #0]
 8002394:	493a      	ldr	r1, [pc, #232]	; (8002480 <CDC_Device_ProcessControlRequest+0x11c>)
 8002396:	2b21      	cmp	r3, #33	; 0x21
 8002398:	d1f0      	bne.n	800237c <CDC_Device_ProcessControlRequest+0x18>
				{
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.Device_BreakSent)
 800239a:	483a      	ldr	r0, [pc, #232]	; (8002484 <CDC_Device_ProcessControlRequest+0x120>)
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 800239c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80023a0:	6885      	ldr	r5, [r0, #8]
 80023a2:	f023 0302 	bic.w	r3, r3, #2
 80023a6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	d0e6      	beq.n	800237c <CDC_Device_ProcessControlRequest+0x18>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 80023ae:	8849      	ldrh	r1, [r1, #2]
 80023b0:	4620      	mov	r0, r4
 80023b2:	462b      	mov	r3, r5
 80023b4:	b2c9      	uxtb	r1, r1
				}

				break;
		}
	}
}
 80023b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.Device_BreakSent)
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 80023ba:	4718      	bx	r3
					Endpoint_ClearStatusStage();
				}

				break;
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 80023bc:	780b      	ldrb	r3, [r1, #0]
 80023be:	2b21      	cmp	r3, #33	; 0x21
 80023c0:	d1dc      	bne.n	800237c <CDC_Device_ProcessControlRequest+0x18>
 80023c2:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
 80023c6:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 80023ca:	492f      	ldr	r1, [pc, #188]	; (8002488 <CDC_Device_ProcessControlRequest+0x124>)
 80023cc:	f020 0002 	bic.w	r0, r0, #2
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 80023d0:	252c      	movs	r5, #44	; 0x2c
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 80023d2:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 80023d6:	fb05 2203 	mla	r2, r5, r3, r2
 80023da:	e002      	b.n	80023e2 <CDC_Device_ProcessControlRequest+0x7e>
 80023dc:	780b      	ldrb	r3, [r1, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0cc      	beq.n	800237c <CDC_Device_ProcessControlRequest+0x18>
 80023e2:	6893      	ldr	r3, [r2, #8]
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 80023e4:	069b      	lsls	r3, r3, #26
 80023e6:	d5f9      	bpl.n	80023dc <CDC_Device_ProcessControlRequest+0x78>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 80023e8:	f000 fbf0 	bl	8002bcc <Endpoint_Read_32_LE>
 80023ec:	61a0      	str	r0, [r4, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 80023ee:	f000 fbc1 	bl	8002b74 <Endpoint_Read_8>
 80023f2:	7720      	strb	r0, [r4, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80023f4:	f000 fbbe 	bl	8002b74 <Endpoint_Read_8>
 80023f8:	7760      	strb	r0, [r4, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80023fa:	f000 fbbb 	bl	8002b74 <Endpoint_Read_8>

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.LineEncodingChanged)
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <CDC_Device_ProcessControlRequest+0x120>)
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8002400:	77a0      	strb	r0, [r4, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.LineEncodingChanged)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d134      	bne.n	8002472 <CDC_Device_ProcessControlRequest+0x10e>
 8002408:	e7b8      	b.n	800237c <CDC_Device_ProcessControlRequest+0x18>
	{

		switch (USB_ControlRequest.bRequest)
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 800240a:	780b      	ldrb	r3, [r1, #0]
 800240c:	2ba1      	cmp	r3, #161	; 0xa1
 800240e:	d1b5      	bne.n	800237c <CDC_Device_ProcessControlRequest+0x18>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8002410:	f892 113e 	ldrb.w	r1, [r2, #318]	; 0x13e
 8002414:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 8002418:	f021 0102 	bic.w	r1, r1, #2
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 800241c:	202c      	movs	r0, #44	; 0x2c
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 800241e:	f882 113e 	strb.w	r1, [r2, #318]	; 0x13e
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 8002422:	fb00 2203 	mla	r2, r0, r3, r2
 8002426:	6893      	ldr	r3, [r2, #8]
 8002428:	06d8      	lsls	r0, r3, #27
 800242a:	d4fc      	bmi.n	8002426 <CDC_Device_ProcessControlRequest+0xc2>
 800242c:	6893      	ldr	r3, [r2, #8]
 800242e:	0799      	lsls	r1, r3, #30
 8002430:	d5f9      	bpl.n	8002426 <CDC_Device_ProcessControlRequest+0xc2>
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsINReady()));

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8002432:	69a0      	ldr	r0, [r4, #24]
 8002434:	f000 fbb4 	bl	8002ba0 <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8002438:	7f20      	ldrb	r0, [r4, #28]
 800243a:	f000 fb85 	bl	8002b48 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 800243e:	7f60      	ldrb	r0, [r4, #29]
 8002440:	f000 fb82 	bl	8002b48 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8002444:	7fa0      	ldrb	r0, [r4, #30]
 8002446:	f000 fb7f 	bl	8002b48 <Endpoint_Write_8>
				}

				break;
		}
	}
}
 800244a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

					Endpoint_ClearIN();
 800244e:	f000 bb2b 	b.w	8002aa8 <Endpoint_ClearIN>

				}

				break;
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002452:	780b      	ldrb	r3, [r1, #0]
 8002454:	490a      	ldr	r1, [pc, #40]	; (8002480 <CDC_Device_ProcessControlRequest+0x11c>)
 8002456:	2b21      	cmp	r3, #33	; 0x21
 8002458:	d190      	bne.n	800237c <CDC_Device_ProcessControlRequest+0x18>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 800245a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

					if(0 != cdc_class_events.ControLineStateChanged)
 800245e:	4809      	ldr	r0, [pc, #36]	; (8002484 <CDC_Device_ProcessControlRequest+0x120>)
 8002460:	f023 0302 	bic.w	r3, r3, #2
 8002464:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 8002468:	6843      	ldr	r3, [r0, #4]
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 800246a:	884a      	ldrh	r2, [r1, #2]
 800246c:	82a2      	strh	r2, [r4, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 800246e:	2b00      	cmp	r3, #0
 8002470:	d084      	beq.n	800237c <CDC_Device_ProcessControlRequest+0x18>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8002472:	4620      	mov	r0, r4
				}

				break;
		}
	}
}
 8002474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

					if(0 != cdc_class_events.ControLineStateChanged)
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8002478:	4718      	bx	r3
 800247a:	bf00      	nop
 800247c:	1fff0670 	.word	0x1fff0670
 8002480:	1fff0468 	.word	0x1fff0468
 8002484:	1ffed000 	.word	0x1ffed000
 8002488:	1fff0465 	.word	0x1fff0465

0800248c <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800248c:	b538      	push	{r3, r4, r5, lr}
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 800248e:	2202      	movs	r2, #2


bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002490:	2300      	movs	r3, #0

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8002492:	2103      	movs	r1, #3


bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002494:	7503      	strb	r3, [r0, #20]
 8002496:	7543      	strb	r3, [r0, #21]
 8002498:	7583      	strb	r3, [r0, #22]
 800249a:	75c3      	strb	r3, [r0, #23]
 800249c:	7603      	strb	r3, [r0, #24]
 800249e:	7643      	strb	r3, [r0, #25]
 80024a0:	7683      	strb	r3, [r0, #26]
 80024a2:	76c3      	strb	r3, [r0, #27]
 80024a4:	7703      	strb	r3, [r0, #28]
 80024a6:	7743      	strb	r3, [r0, #29]
 80024a8:	7783      	strb	r3, [r0, #30]
 80024aa:	77c3      	strb	r3, [r0, #31]

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 80024ac:	7102      	strb	r2, [r0, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 80024ae:	7282      	strb	r2, [r0, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 80024b0:	7401      	strb	r1, [r0, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 80024b2:	2101      	movs	r1, #1




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80024b4:	4604      	mov	r4, r0

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 80024b6:	f000 fb9f 	bl	8002bf8 <Endpoint_ConfigureEndpointTable>
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80024ba:	2101      	movs	r1, #1

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 80024bc:	4605      	mov	r5, r0
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80024be:	1da0      	adds	r0, r4, #6
 80024c0:	f000 fb9a 	bl	8002bf8 <Endpoint_ConfigureEndpointTable>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80024c4:	2101      	movs	r1, #1
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80024c6:	2800      	cmp	r0, #0
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80024c8:	f104 000c 	add.w	r0, r4, #12
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 80024cc:	bf08      	it	eq
 80024ce:	2500      	moveq	r5, #0
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80024d0:	f000 fb92 	bl	8002bf8 <Endpoint_ConfigureEndpointTable>
 80024d4:	2800      	cmp	r0, #0
	{
		status = false;
	}

	return status;
}
 80024d6:	bf14      	ite	ne
 80024d8:	4628      	movne	r0, r5
 80024da:	2000      	moveq	r0, #0
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
 80024de:	bf00      	nop

080024e0 <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <CDC_Device_USBTask+0x74>)
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	2a04      	cmp	r2, #4
 80024e6:	d000      	beq.n	80024ea <CDC_Device_USBTask+0xa>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
		}
		#endif
	}
}
 80024e8:	4770      	bx	lr
	return status;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80024ea:	6982      	ldr	r2, [r0, #24]
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	d0fb      	beq.n	80024e8 <CDC_Device_USBTask+0x8>

	return status;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80024f0:	b470      	push	{r4, r5, r6}
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80024f2:	7802      	ldrb	r2, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80024f4:	4918      	ldr	r1, [pc, #96]	; (8002558 <CDC_Device_USBTask+0x78>)
 80024f6:	f002 040f 	and.w	r4, r2, #15
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 80024fa:	262c      	movs	r6, #44	; 0x2c
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80024fc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 8002500:	fb06 1504 	mla	r5, r6, r4, r1
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002504:	f881 413c 	strb.w	r4, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002508:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 800250c:	68aa      	ldr	r2, [r5, #8]
 800250e:	06d4      	lsls	r4, r2, #27
 8002510:	d405      	bmi.n	800251e <CDC_Device_USBTask+0x3e>
 8002512:	68aa      	ldr	r2, [r5, #8]
 8002514:	0792      	lsls	r2, r2, #30
 8002516:	d502      	bpl.n	800251e <CDC_Device_USBTask+0x3e>
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d001      	beq.n	8002522 <CDC_Device_USBTask+0x42>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
		}
		#endif
	}
}
 800251e:	bc70      	pop	{r4, r5, r6}
 8002520:	4770      	bx	lr
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002522:	6983      	ldr	r3, [r0, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0fa      	beq.n	800251e <CDC_Device_USBTask+0x3e>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002528:	7803      	ldrb	r3, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800252a:	f003 020f 	and.w	r2, r3, #15
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 800252e:	fb06 1602 	mla	r6, r6, r2, r1
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002532:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002536:	f881 213c 	strb.w	r2, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800253a:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 800253e:	7933      	ldrb	r3, [r6, #4]
 8002540:	061b      	lsls	r3, r3, #24
			return (uint16_t)(ep->InBytesAvailable);
 8002542:	bf4c      	ite	mi
 8002544:	8bb3      	ldrhmi	r3, [r6, #28]
		else
			return (uint16_t)(ep->OutBytesAvailable);
 8002546:	89b3      	ldrhpl	r3, [r6, #12]

		if (Endpoint_BytesInEndpoint())
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0e8      	beq.n	800251e <CDC_Device_USBTask+0x3e>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
		}
		#endif
	}
}
 800254c:	bc70      	pop	{r4, r5, r6}
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

		if (Endpoint_BytesInEndpoint())
		{
			Endpoint_ClearIN();
 800254e:	f000 baab 	b.w	8002aa8 <Endpoint_ClearIN>
 8002552:	bf00      	nop
 8002554:	1fff0465 	.word	0x1fff0465
 8002558:	1fff0670 	.word	0x1fff0670

0800255c <CDC_Device_SendData>:
uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <CDC_Device_SendData+0x34>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b04      	cmp	r3, #4
 8002562:	d001      	beq.n	8002568 <CDC_Device_SendData+0xc>
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
	}
	return status;
}
 8002564:	2002      	movs	r0, #2
 8002566:	4770      	bx	lr
uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002568:	6983      	ldr	r3, [r0, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0fa      	beq.n	8002564 <CDC_Device_SendData+0x8>
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 800256e:	b430      	push	{r4, r5}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002570:	7803      	ldrb	r3, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002572:	4c08      	ldr	r4, [pc, #32]	; (8002594 <CDC_Device_SendData+0x38>)
 8002574:	f003 050f 	and.w	r5, r3, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002578:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 800257c:	4608      	mov	r0, r1
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800257e:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
 8002582:	4611      	mov	r1, r2
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002584:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
 8002588:	2200      	movs	r2, #0
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
	}
	return status;
}
 800258a:	bc30      	pop	{r4, r5}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 800258c:	f000 b974 	b.w	8002878 <Endpoint_Write_Stream_LE>
 8002590:	1fff0465 	.word	0x1fff0465
 8002594:	1fff0670 	.word	0x1fff0670

08002598 <CDC_Device_Flush>:
	return status;

}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002598:	b508      	push	{r3, lr}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <CDC_Device_Flush+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d001      	beq.n	80025a6 <CDC_Device_Flush+0xe>

		status = ENDPOINT_READYWAIT_NoError;
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 80025a2:	2002      	movs	r0, #2
	}

	return status;
}
 80025a4:	bd08      	pop	{r3, pc}
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80025a6:	6983      	ldr	r3, [r0, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0fa      	beq.n	80025a2 <CDC_Device_Flush+0xa>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80025ac:	7803      	ldrb	r3, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025ae:	490c      	ldr	r1, [pc, #48]	; (80025e0 <CDC_Device_Flush+0x48>)
 80025b0:	f003 000f 	and.w	r0, r3, #15
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 80025b4:	222c      	movs	r2, #44	; 0x2c
 80025b6:	fb02 1200 	mla	r2, r2, r0, r1
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025be:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025c2:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 80025c6:	7913      	ldrb	r3, [r2, #4]
 80025c8:	061b      	lsls	r3, r3, #24
			return (uint16_t)(ep->InBytesAvailable);
 80025ca:	bf4c      	ite	mi
 80025cc:	8b90      	ldrhmi	r0, [r2, #28]
		else
			return (uint16_t)(ep->OutBytesAvailable);
 80025ce:	8990      	ldrhpl	r0, [r2, #12]

		if (Endpoint_BytesInEndpoint())
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d0e7      	beq.n	80025a4 <CDC_Device_Flush+0xc>
		{
			Endpoint_ClearIN();
 80025d4:	f000 fa68 	bl	8002aa8 <Endpoint_ClearIN>
 80025d8:	2000      	movs	r0, #0
 80025da:	bd08      	pop	{r3, pc}
 80025dc:	1fff0465 	.word	0x1fff0465
 80025e0:	1fff0670 	.word	0x1fff0670

080025e4 <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 80025e4:	4b01      	ldr	r3, [pc, #4]	; (80025ec <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x8>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	4770      	bx	lr
 80025ec:	1fff03c0 	.word	0x1fff03c0

080025f0 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 80025f0:	4b01      	ldr	r3, [pc, #4]	; (80025f8 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x8>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	705a      	strb	r2, [r3, #1]
 80025f6:	4770      	bx	lr
 80025f8:	1fff03c0 	.word	0x1fff03c0

080025fc <USBD_VCOM_CDCClass_Event_BreakSent>:
/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 80025fc:	4b01      	ldr	r3, [pc, #4]	; (8002604 <USBD_VCOM_CDCClass_Event_BreakSent+0x8>)
 80025fe:	2201      	movs	r2, #1
 8002600:	709a      	strb	r2, [r3, #2]
 8002602:	4770      	bx	lr
 8002604:	1fff03c0 	.word	0x1fff03c0

08002608 <USBD_VCOM_Event_ConfigurationChanged>:

}

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 8002608:	b508      	push	{r3, lr}
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 800260a:	2081      	movs	r0, #129	; 0x81
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <USBD_VCOM_Event_ConfigurationChanged+0x40>)
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	f000 ffe4 	bl	80035dc <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8002614:	2082      	movs	r0, #130	; 0x82
 8002616:	490d      	ldr	r1, [pc, #52]	; (800264c <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 8002618:	2240      	movs	r2, #64	; 0x40
 800261a:	f000 ffdf 	bl	80035dc <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 800261e:	2003      	movs	r0, #3
 8002620:	490b      	ldr	r1, [pc, #44]	; (8002650 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	f000 ffda 	bl	80035dc <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 8002628:	480a      	ldr	r0, [pc, #40]	; (8002654 <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 800262a:	f7ff ff2f 	bl	800248c <CDC_Device_ConfigureEndpoints>
 800262e:	b148      	cbz	r0, 8002644 <USBD_VCOM_Event_ConfigurationChanged+0x3c>
  {
    device.IsConfigured = 1U;
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <USBD_VCOM_Event_ConfigurationChanged+0x50>)
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8002632:	490a      	ldr	r1, [pc, #40]	; (800265c <USBD_VCOM_Event_ConfigurationChanged+0x54>)
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
  {
    device.IsConfigured = 1U;
 8002634:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8002638:	2004      	movs	r0, #4
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
  {
    device.IsConfigured = 1U;
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8002642:	7008      	strb	r0, [r1, #0]
 8002644:	bd08      	pop	{r3, pc}
 8002646:	bf00      	nop
 8002648:	1fff03c4 	.word	0x1fff03c4
 800264c:	1fff0380 	.word	0x1fff0380
 8002650:	1fff0404 	.word	0x1fff0404
 8002654:	1fff0444 	.word	0x1fff0444
 8002658:	1fff0670 	.word	0x1fff0670
 800265c:	1fff0465 	.word	0x1fff0465

08002660 <USBD_VCOM_Event_ControlRequest>:
}

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 8002660:	4801      	ldr	r0, [pc, #4]	; (8002668 <USBD_VCOM_Event_ControlRequest+0x8>)
 8002662:	f7ff be7f 	b.w	8002364 <CDC_Device_ProcessControlRequest>
 8002666:	bf00      	nop
 8002668:	1fff0444 	.word	0x1fff0444

0800266c <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 800266c:	492d      	ldr	r1, [pc, #180]	; (8002724 <USBD_VCOM_Event_Reset+0xb8>)
 800266e:	f891 213e 	ldrb.w	r2, [r1, #318]	; 0x13e
 8002672:	07d3      	lsls	r3, r2, #31
 8002674:	d400      	bmi.n	8002678 <USBD_VCOM_Event_Reset+0xc>
 8002676:	4770      	bx	lr

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002678:	482b      	ldr	r0, [pc, #172]	; (8002728 <USBD_VCOM_Event_Reset+0xbc>)
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <USBD_VCOM_Event_Reset+0xc0>)

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 800267c:	6800      	ldr	r0, [r0, #0]
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
}

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 800267e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
  {
    device.IsConfigured = 0U;
 8002682:	f36f 0200 	bfc	r2, #0, #1
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002686:	f04f 0a00 	mov.w	sl, #0
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 800268a:	f04f 0903 	mov.w	r9, #3

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 800268e:	4c28      	ldr	r4, [pc, #160]	; (8002730 <USBD_VCOM_Event_Reset+0xc4>)
void USBD_VCOM_Event_Reset(void)
{
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
  {
    device.IsConfigured = 0U;
 8002690:	f881 213e 	strb.w	r2, [r1, #318]	; 0x13e
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002694:	f883 a012 	strb.w	sl, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 8002698:	f883 a011 	strb.w	sl, [r3, #17]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 800269c:	f883 9010 	strb.w	r9, [r3, #16]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80026a0:	6902      	ldr	r2, [r0, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 80026a2:	6966      	ldr	r6, [r4, #20]
 80026a4:	6156      	str	r6, [r2, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 80026a6:	69e6      	ldr	r6, [r4, #28]
 80026a8:	61d6      	str	r6, [r2, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 80026aa:	69a6      	ldr	r6, [r4, #24]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 80026ac:	f883 a00b 	strb.w	sl, [r3, #11]
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
}

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 80026b0:	b082      	sub	sp, #8
  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 80026b2:	f883 a005 	strb.w	sl, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 80026b6:	f883 9006 	strb.w	r9, [r3, #6]
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 80026ba:	6196      	str	r6, [r2, #24]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 80026bc:	f04f 0a81 	mov.w	sl, #129	; 0x81

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80026c0:	6926      	ldr	r6, [r4, #16]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 80026c2:	f883 a00c 	strb.w	sl, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 80026c6:	f04f 0908 	mov.w	r9, #8
 80026ca:	f8a3 900e 	strh.w	r9, [r3, #14]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 80026ce:	6821      	ldr	r1, [r4, #0]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 80026d0:	68a7      	ldr	r7, [r4, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 80026d2:	68e5      	ldr	r5, [r4, #12]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80026d4:	6116      	str	r6, [r2, #16]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 80026d6:	f04f 0b40 	mov.w	fp, #64	; 0x40
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 80026da:	6a26      	ldr	r6, [r4, #32]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 80026dc:	f8a3 b008 	strh.w	fp, [r3, #8]

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80026e0:	f04f 0a02 	mov.w	sl, #2

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 80026e4:	f04f 0982 	mov.w	r9, #130	; 0x82
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80026e8:	f883 a00a 	strb.w	sl, [r3, #10]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 80026ec:	9101      	str	r1, [sp, #4]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 80026ee:	f8a3 b002 	strh.w	fp, [r3, #2]
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 80026f2:	6861      	ldr	r1, [r4, #4]

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80026f4:	f883 a004 	strb.w	sl, [r3, #4]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 80026f8:	f883 9000 	strb.w	r9, [r3]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 80026fc:	6216      	str	r6, [r2, #32]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 80026fe:	6097      	str	r7, [r2, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 8002700:	60d5      	str	r5, [r2, #12]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 8002702:	9b01      	ldr	r3, [sp, #4]
 8002704:	6013      	str	r3, [r2, #0]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
    USBD_handle->event_cb->reset = event_callback->reset;
 8002706:	6a63      	ldr	r3, [r4, #36]	; 0x24
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 8002708:	6051      	str	r1, [r2, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
    USBD_handle->event_cb->reset = event_callback->reset;
 800270a:	6253      	str	r3, [r2, #36]	; 0x24
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 800270c:	f000 fece 	bl	80034ac <USBD_Init>
 8002710:	b110      	cbz	r0, 8002718 <USBD_VCOM_Event_Reset+0xac>
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
      {
      }
    }
  }
}
 8002712:	b002      	add	sp, #8
 8002714:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
 8002718:	b002      	add	sp, #8
 800271a:	e8bd 4ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
}

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 800271e:	f000 bf51 	b.w	80035c4 <USBD_Connect>
 8002722:	bf00      	nop
 8002724:	1fff0670 	.word	0x1fff0670
 8002728:	1ffed034 	.word	0x1ffed034
 800272c:	1fff0444 	.word	0x1fff0444
 8002730:	1ffed00c 	.word	0x1ffed00c

08002734 <USBD_VCOM_Init>:

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <USBD_VCOM_Init+0x9c>)
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002736:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <USBD_VCOM_Init+0xa0>)

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002738:	6810      	ldr	r0, [r2, #0]
 800273a:	4927      	ldr	r1, [pc, #156]	; (80027d8 <USBD_VCOM_Init+0xa4>)
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 800273c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002740:	f04f 0a00 	mov.w	sl, #0
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 8002744:	f04f 0903 	mov.w	r9, #3
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002748:	f883 a012 	strb.w	sl, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 800274c:	f883 a011 	strb.w	sl, [r3, #17]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 8002750:	f883 9010 	strb.w	r9, [r3, #16]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002754:	6902      	ldr	r2, [r0, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8002756:	694e      	ldr	r6, [r1, #20]
 8002758:	6156      	str	r6, [r2, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 800275a:	69ce      	ldr	r6, [r1, #28]
 800275c:	61d6      	str	r6, [r2, #28]
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 800275e:	b082      	sub	sp, #8
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 8002760:	698e      	ldr	r6, [r1, #24]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 8002762:	680c      	ldr	r4, [r1, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 8002764:	6196      	str	r6, [r2, #24]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 8002766:	f883 a00b 	strb.w	sl, [r3, #11]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 800276a:	690e      	ldr	r6, [r1, #16]
  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 800276c:	f883 a005 	strb.w	sl, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 8002770:	f883 9006 	strb.w	r9, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8002774:	f04f 0a81 	mov.w	sl, #129	; 0x81
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8002778:	f04f 0908 	mov.w	r9, #8
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 800277c:	68cd      	ldr	r5, [r1, #12]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 800277e:	688f      	ldr	r7, [r1, #8]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002780:	6116      	str	r6, [r2, #16]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8002782:	f883 a00c 	strb.w	sl, [r3, #12]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 8002786:	6a0e      	ldr	r6, [r1, #32]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8002788:	f8a3 900e 	strh.w	r9, [r3, #14]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 800278c:	9401      	str	r4, [sp, #4]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 800278e:	f04f 0b40 	mov.w	fp, #64	; 0x40
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8002792:	f04f 0a02 	mov.w	sl, #2

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 8002796:	f04f 0982 	mov.w	r9, #130	; 0x82
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 800279a:	684c      	ldr	r4, [r1, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 800279c:	f8a3 b008 	strh.w	fp, [r3, #8]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 80027a0:	6216      	str	r6, [r2, #32]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80027a2:	f883 a00a 	strb.w	sl, [r3, #10]
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 80027a6:	60d5      	str	r5, [r2, #12]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 80027a8:	6097      	str	r7, [r2, #8]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 80027aa:	f8a3 b002 	strh.w	fp, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80027ae:	f883 a004 	strb.w	sl, [r3, #4]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 80027b2:	f883 9000 	strb.w	r9, [r3]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 80027b6:	9b01      	ldr	r3, [sp, #4]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 80027b8:	e882 0018 	stmia.w	r2, {r3, r4}
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
    USBD_handle->event_cb->reset = event_callback->reset;
 80027bc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80027be:	6253      	str	r3, [r2, #36]	; 0x24
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 80027c0:	f000 fe74 	bl	80034ac <USBD_Init>
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
}
 80027c4:	3000      	adds	r0, #0
 80027c6:	bf18      	it	ne
 80027c8:	2001      	movne	r0, #1
 80027ca:	b002      	add	sp, #8
 80027cc:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
 80027d0:	1ffed034 	.word	0x1ffed034
 80027d4:	1fff0444 	.word	0x1fff0444
 80027d8:	1ffed00c 	.word	0x1ffed00c

080027dc <USBD_VCOM_IsEnumDone>:

/*The function check if the enumeration has been done already. */
uint32_t USBD_VCOM_IsEnumDone(void)
{
 80027dc:	b508      	push	{r3, lr}
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
 80027de:	f000 fef7 	bl	80035d0 <USBD_IsEnumDone>
 80027e2:	b130      	cbz	r0, 80027f2 <USBD_VCOM_IsEnumDone+0x16>
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <USBD_VCOM_IsEnumDone+0x18>)
 80027e6:	7818      	ldrb	r0, [r3, #0]
 80027e8:	f1a0 0004 	sub.w	r0, r0, #4
 80027ec:	fab0 f080 	clz	r0, r0
 80027f0:	0940      	lsrs	r0, r0, #5
}
 80027f2:	bd08      	pop	{r3, pc}
 80027f4:	1fff0465 	.word	0x1fff0465

080027f8 <USBD_VCOM_SendData>:
  return status;
}

/* This function sends multiple bytes to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendData(const int8_t* const data_buffer, const uint16_t length)
{
 80027f8:	b510      	push	{r4, lr}
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  if ((length == 0U) || (data_buffer == NULL))
 80027fa:	b911      	cbnz	r1, 8002802 <USBD_VCOM_SendData+0xa>
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
 80027fc:	2406      	movs	r4, #6
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
  }
  return status;
}
 80027fe:	4620      	mov	r0, r4
 8002800:	bd10      	pop	{r4, pc}
/* This function sends multiple bytes to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendData(const int8_t* const data_buffer, const uint16_t length)
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  if ((length == 0U) || (data_buffer == NULL))
 8002802:	2800      	cmp	r0, #0
 8002804:	d0fa      	beq.n	80027fc <USBD_VCOM_SendData+0x4>
 8002806:	460a      	mov	r2, r1
 8002808:	4601      	mov	r1, r0
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <USBD_VCOM_SendData+0x30>)
 800280c:	f7ff fea6 	bl	800255c <CDC_Device_SendData>
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
 8002810:	2800      	cmp	r0, #0
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <USBD_VCOM_SendData+0x30>)
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8002814:	bf14      	ite	ne
 8002816:	2406      	movne	r4, #6
 8002818:	2400      	moveq	r4, #0
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 800281a:	f7ff febd 	bl	8002598 <CDC_Device_Flush>
 800281e:	2800      	cmp	r0, #0
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8002820:	bf18      	it	ne
 8002822:	2406      	movne	r4, #6
    }
  }
  return status;
}
 8002824:	4620      	mov	r0, r4
 8002826:	bd10      	pop	{r4, pc}
 8002828:	1fff0444 	.word	0x1fff0444

0800282c <USBD_VCOM_ReceiveData>:
  return status;
}

/* This function receives number of bytes from the USB host.*/
USBD_VCOM_STATUS_t USBD_VCOM_ReceiveData(int8_t* data_buffer, uint16_t data_byte)
{
 800282c:	b530      	push	{r4, r5, lr}
 800282e:	b083      	sub	sp, #12
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
  uint16_t bytes_processed = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t ret = 0U;

  if ((data_byte > 0U) && (data_buffer != NULL))
 8002836:	b911      	cbnz	r1, 800283e <USBD_VCOM_ReceiveData+0x12>
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 8002838:	2006      	movs	r0, #6
  }

  return status;
}
 800283a:	b003      	add	sp, #12
 800283c:	bd30      	pop	{r4, r5, pc}
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
  uint16_t bytes_processed = 0U;
  uint8_t ret = 0U;

  if ((data_byte > 0U) && (data_buffer != NULL))
 800283e:	2800      	cmp	r0, #0
 8002840:	d0fa      	beq.n	8002838 <USBD_VCOM_ReceiveData+0xc>
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <USBD_VCOM_ReceiveData+0x44>)
 8002844:	460c      	mov	r4, r1
 8002846:	2103      	movs	r1, #3
 8002848:	4605      	mov	r5, r0
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800284a:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800284e:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
  {
    /* Fix for new read/write */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);
    while ((uint8_t)ENDPOINT_RWSTREAM_IncompleteTransfer == 
 8002852:	4628      	mov	r0, r5
 8002854:	4621      	mov	r1, r4
 8002856:	f10d 0206 	add.w	r2, sp, #6
 800285a:	f000 f85d 	bl	8002918 <Endpoint_Read_Stream_LE>
 800285e:	2805      	cmp	r0, #5
 8002860:	d0f7      	beq.n	8002852 <USBD_VCOM_ReceiveData+0x26>
    (ret = Endpoint_Read_Stream_LE(data_buffer, data_byte,	&bytes_processed)))
    {      
    }      
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError != ret )
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8002862:	2800      	cmp	r0, #0
 8002864:	bf0c      	ite	eq
 8002866:	2000      	moveq	r0, #0
 8002868:	2006      	movne	r0, #6
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
  }

  return status;
}
 800286a:	b003      	add	sp, #12
 800286c:	bd30      	pop	{r4, r5, pc}
 800286e:	bf00      	nop
 8002870:	1fff0670 	.word	0x1fff0670

08002874 <USBD_VCOM_Connect>:
}

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 8002874:	f000 bea6 	b.w	80035c4 <USBD_Connect>

08002878 <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 8002878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <Endpoint_Write_Stream_LE+0x9c>)
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 800287e:	460c      	mov	r4, r1
 8002880:	4680      	mov	r8, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8002882:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 8002886:	4691      	mov	r9, r2
 8002888:	2a00      	cmp	r2, #0
 800288a:	d03b      	beq.n	8002904 <Endpoint_Write_Stream_LE+0x8c>
	{
		Length -= *BytesProcessed;
 800288c:	8817      	ldrh	r7, [r2, #0]
 800288e:	1be4      	subs	r4, r4, r7
 8002890:	b2a4      	uxth	r4, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
	{
		if (ep->InInUse)
 8002892:	262c      	movs	r6, #44	; 0x2c
 8002894:	fb06 3601 	mla	r6, r6, r1, r3
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8002898:	b1f4      	cbz	r4, 80028d8 <Endpoint_Write_Stream_LE+0x60>
	{
		if (ep->InInUse)
 800289a:	68b3      	ldr	r3, [r6, #8]
 800289c:	06db      	lsls	r3, r3, #27
 800289e:	d4fc      	bmi.n	800289a <Endpoint_Write_Stream_LE+0x22>
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
 80028a0:	f000 f93a 	bl	8002b18 <Endpoint_IsReadWriteAllowed>
 80028a4:	b1f8      	cbz	r0, 80028e6 <Endpoint_Write_Stream_LE+0x6e>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 80028a6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80028a8:	69f0      	ldr	r0, [r6, #28]
 80028aa:	1a2d      	subs	r5, r5, r0
 80028ac:	42a5      	cmp	r5, r4
 80028ae:	d816      	bhi.n	80028de <Endpoint_Write_Stream_LE+0x66>
			{
				Bytes = Length;
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 80028b0:	b2ad      	uxth	r5, r5
 80028b2:	1b64      	subs	r4, r4, r5
 80028b4:	fa1f fb84 	uxth.w	fp, r4
 80028b8:	462c      	mov	r4, r5
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 80028ba:	6a33      	ldr	r3, [r6, #32]
 80028bc:	eb08 0107 	add.w	r1, r8, r7
 80028c0:	462a      	mov	r2, r5
 80028c2:	4418      	add	r0, r3
 80028c4:	f00a fe6a 	bl	800d59c <memcpy>
			ep->InBytesAvailable += Bytes;
 80028c8:	69f3      	ldr	r3, [r6, #28]
			BytesTransfered += Bytes;
 80028ca:	4427      	add	r7, r4
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
			ep->InBytesAvailable += Bytes;
 80028cc:	441d      	add	r5, r3
			BytesTransfered += Bytes;
			Length -= Bytes;
 80028ce:	465c      	mov	r4, fp
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
 80028d0:	b2bf      	uxth	r7, r7
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
			ep->InBytesAvailable += Bytes;
 80028d2:	61f5      	str	r5, [r6, #28]
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 80028d4:	2c00      	cmp	r4, #0
 80028d6:	d1e0      	bne.n	800289a <Endpoint_Write_Stream_LE+0x22>
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 80028d8:	4620      	mov	r0, r4
}
 80028da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028de:	4625      	mov	r5, r4
 80028e0:	f04f 0b00 	mov.w	fp, #0
 80028e4:	e7e9      	b.n	80028ba <Endpoint_Write_Stream_LE+0x42>
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else 
		{
			Endpoint_ClearIN();
 80028e6:	f000 f8df 	bl	8002aa8 <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 80028ea:	8933      	ldrh	r3, [r6, #8]
 80028ec:	f3c3 1386 	ubfx	r3, r3, #6, #7
 80028f0:	429c      	cmp	r4, r3
 80028f2:	da02      	bge.n	80028fa <Endpoint_Write_Stream_LE+0x82>
			{
				if (BytesProcessed!=NULL) 
 80028f4:	f1b9 0f00 	cmp.w	r9, #0
 80028f8:	d106      	bne.n	8002908 <Endpoint_Write_Stream_LE+0x90>
					*BytesProcessed = BytesTransfered;
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 80028fa:	f000 f85d 	bl	80029b8 <Endpoint_WaitUntilReady>
			if (ErrorCode) 
 80028fe:	2800      	cmp	r0, #0
 8002900:	d0ca      	beq.n	8002898 <Endpoint_Write_Stream_LE+0x20>
 8002902:	e7ea      	b.n	80028da <Endpoint_Write_Stream_LE+0x62>
uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
 8002904:	4617      	mov	r7, r2
 8002906:	e7c4      	b.n	8002892 <Endpoint_Write_Stream_LE+0x1a>
			Endpoint_ClearIN();
			if(Length < ep->MaxPacketSize)
			{
				if (BytesProcessed!=NULL) 
				{
					*BytesProcessed = BytesTransfered;
 8002908:	f8a9 7000 	strh.w	r7, [r9]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800290c:	2005      	movs	r0, #5
 800290e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002912:	bf00      	nop
 8002914:	1fff0670 	.word	0x1fff0670

08002918 <Endpoint_Read_Stream_LE>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
 8002918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <Endpoint_Read_Stream_LE+0x9c>)
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
 800291e:	460c      	mov	r4, r1
 8002920:	4681      	mov	r9, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8002922:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 8002926:	4692      	mov	sl, r2
 8002928:	2a00      	cmp	r2, #0
 800292a:	d03b      	beq.n	80029a4 <Endpoint_Read_Stream_LE+0x8c>
	{
		Length -= *BytesProcessed;
 800292c:	f8b2 8000 	ldrh.w	r8, [r2]
 8002930:	ebc8 0404 	rsb	r4, r8, r4
 8002934:	b2a4      	uxth	r4, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
	{
		if (ep->OutInUse)
 8002936:	252c      	movs	r5, #44	; 0x2c
 8002938:	fb05 3501 	mla	r5, r5, r1, r3
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 800293c:	b30c      	cbz	r4, 8002982 <Endpoint_Read_Stream_LE+0x6a>
	{
		if (ep->OutInUse)
 800293e:	68ab      	ldr	r3, [r5, #8]
 8002940:	071b      	lsls	r3, r3, #28
 8002942:	d4fc      	bmi.n	800293e <Endpoint_Read_Stream_LE+0x26>
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
 8002944:	f000 f8e8 	bl	8002b18 <Endpoint_IsReadWriteAllowed>
 8002948:	b310      	cbz	r0, 8002990 <Endpoint_Read_Stream_LE+0x78>
		{
			if(ep->OutBytesAvailable  > Length)
 800294a:	68ee      	ldr	r6, [r5, #12]
 800294c:	42a6      	cmp	r6, r4
 800294e:	d81b      	bhi.n	8002988 <Endpoint_Read_Stream_LE+0x70>
			{
				Bytes = Length;
			}
			else
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
 8002950:	b2b3      	uxth	r3, r6
 8002952:	1ae4      	subs	r4, r4, r3
 8002954:	fa1f fb84 	uxth.w	fp, r4
 8002958:	461c      	mov	r4, r3
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
 800295a:	692b      	ldr	r3, [r5, #16]
 800295c:	6969      	ldr	r1, [r5, #20]
			else
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
 800295e:	4632      	mov	r2, r6
 8002960:	eb09 0008 	add.w	r0, r9, r8
 8002964:	4419      	add	r1, r3
 8002966:	f00a fe19 	bl	800d59c <memcpy>
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
 800296a:	68ea      	ldr	r2, [r5, #12]
			ep->OutOffset += Bytes;
 800296c:	692b      	ldr	r3, [r5, #16]
			BytesTransfered += Bytes;
 800296e:	44a0      	add	r8, r4
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
 8002970:	1b92      	subs	r2, r2, r6
			ep->OutOffset += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
 8002972:	465c      	mov	r4, fp
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
			ep->OutOffset += Bytes;
 8002974:	441e      	add	r6, r3
			BytesTransfered += Bytes;
 8002976:	fa1f f888 	uxth.w	r8, r8
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
 800297a:	60ea      	str	r2, [r5, #12]
			ep->OutOffset += Bytes;
 800297c:	612e      	str	r6, [r5, #16]
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 800297e:	2c00      	cmp	r4, #0
 8002980:	d1dd      	bne.n	800293e <Endpoint_Read_Stream_LE+0x26>
			{
				return ErrorCode;
			}
		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8002982:	4620      	mov	r0, r4
}
 8002984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002988:	4626      	mov	r6, r4
 800298a:	f04f 0b00 	mov.w	fp, #0
 800298e:	e7e4      	b.n	800295a <Endpoint_Read_Stream_LE+0x42>
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else 
		{
			Endpoint_ClearOUT();
 8002990:	f000 f85e 	bl	8002a50 <Endpoint_ClearOUT>
			if (BytesProcessed != NULL) 
 8002994:	f1ba 0f00 	cmp.w	sl, #0
 8002998:	d106      	bne.n	80029a8 <Endpoint_Read_Stream_LE+0x90>
			{
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			ErrorCode = Endpoint_WaitUntilReady();
 800299a:	f000 f80d 	bl	80029b8 <Endpoint_WaitUntilReady>
			if (ErrorCode) 
 800299e:	2800      	cmp	r0, #0
 80029a0:	d0cc      	beq.n	800293c <Endpoint_Read_Stream_LE+0x24>
 80029a2:	e7ef      	b.n	8002984 <Endpoint_Read_Stream_LE+0x6c>
uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
 80029a4:	4690      	mov	r8, r2
 80029a6:	e7c6      	b.n	8002936 <Endpoint_Read_Stream_LE+0x1e>
		else 
		{
			Endpoint_ClearOUT();
			if (BytesProcessed != NULL) 
			{
				*BytesProcessed = BytesTransfered;
 80029a8:	f8aa 8000 	strh.w	r8, [sl]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80029ac:	2005      	movs	r0, #5
 80029ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b2:	bf00      	nop
 80029b4:	1fff0670 	.word	0x1fff0670

080029b8 <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 80029b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
	return device.Driver->GetFrameNumber();
 80029bc:	4c22      	ldr	r4, [pc, #136]	; (8002a48 <Endpoint_WaitUntilReady+0x90>)
			{
			  return ENDPOINT_READYWAIT_NoError;
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 80029be:	4d23      	ldr	r5, [pc, #140]	; (8002a4c <Endpoint_WaitUntilReady+0x94>)
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	4798      	blx	r3
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
		bool status = false;
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 80029c6:	46a1      	mov	r9, r4
 80029c8:	4680      	mov	r8, r0


uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 80029ca:	2664      	movs	r6, #100	; 0x64
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->Address & ENDPOINT_DIR_MASK;
 80029cc:	272c      	movs	r7, #44	; 0x2c
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80029ce:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 80029d2:	fb07 4203 	mla	r2, r7, r3, r4
 80029d6:	7911      	ldrb	r1, [r2, #4]

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 80029d8:	0608      	lsls	r0, r1, #24
 80029da:	d41a      	bmi.n	8002a12 <Endpoint_WaitUntilReady+0x5a>
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 80029dc:	6892      	ldr	r2, [r2, #8]
			  return ENDPOINT_READYWAIT_NoError;
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 80029de:	0692      	lsls	r2, r2, #26
 80029e0:	d42b      	bmi.n	8002a3a <Endpoint_WaitUntilReady+0x82>
			{
			  return ENDPOINT_READYWAIT_NoError;
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 80029e2:	782a      	ldrb	r2, [r5, #0]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 80029e4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80029e8:	b322      	cbz	r2, 8002a34 <Endpoint_WaitUntilReady+0x7c>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 80029ea:	2905      	cmp	r1, #5
 80029ec:	d01f      	beq.n	8002a2e <Endpoint_WaitUntilReady+0x76>
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
		bool status = false;
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 80029ee:	fb07 4303 	mla	r3, r7, r3, r4
 80029f2:	6898      	ldr	r0, [r3, #8]
 80029f4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80029f8:	b9a8      	cbnz	r0, 8002a26 <Endpoint_WaitUntilReady+0x6e>
 80029fa:	f8d9 3000 	ldr.w	r3, [r9]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	4798      	blx	r3
		  return ENDPOINT_READYWAIT_EndpointStalled;
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8002a02:	4580      	cmp	r8, r0
 8002a04:	d011      	beq.n	8002a2a <Endpoint_WaitUntilReady+0x72>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8002a06:	1e73      	subs	r3, r6, #1
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	b1ce      	cbz	r6, 8002a40 <Endpoint_WaitUntilReady+0x88>
 8002a0c:	4680      	mov	r8, r0
 8002a0e:	461e      	mov	r6, r3
 8002a10:	e7dd      	b.n	80029ce <Endpoint_WaitUntilReady+0x16>
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 8002a12:	6890      	ldr	r0, [r2, #8]
 8002a14:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d1e2      	bne.n	80029e2 <Endpoint_WaitUntilReady+0x2a>
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	0791      	lsls	r1, r2, #30
 8002a20:	d5df      	bpl.n	80029e2 <Endpoint_WaitUntilReady+0x2a>
			{
			  return ENDPOINT_READYWAIT_Timeout;
			}
		}
	}
}
 8002a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a2a:	4633      	mov	r3, r6
 8002a2c:	e7ee      	b.n	8002a0c <Endpoint_WaitUntilReady+0x54>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 8002a2e:	2003      	movs	r0, #3
 8002a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002a34:	2002      	movs	r0, #2
 8002a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			{
			  return ENDPOINT_READYWAIT_NoError;
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			{
			  return ENDPOINT_READYWAIT_Timeout;
 8002a40:	2004      	movs	r0, #4
 8002a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a46:	bf00      	nop
 8002a48:	1fff0670 	.word	0x1fff0670
 8002a4c:	1fff0465 	.word	0x1fff0465

08002a50 <Endpoint_ClearOUT>:
		}
	}
}

void Endpoint_ClearOUT(void) 
{
 8002a50:	b570      	push	{r4, r5, r6, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002a52:	4d14      	ldr	r5, [pc, #80]	; (8002aa4 <Endpoint_ClearOUT+0x54>)
 8002a54:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to
	 * not override it */
	if (ep->IsEnabled == 0)
 8002a58:	242c      	movs	r4, #44	; 0x2c
 8002a5a:	fb04 5403 	mla	r4, r4, r3, r5
 8002a5e:	68a3      	ldr	r3, [r4, #8]
 8002a60:	079a      	lsls	r2, r3, #30
 8002a62:	d400      	bmi.n	8002a66 <Endpoint_ClearOUT+0x16>
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002a66:	682b      	ldr	r3, [r5, #0]
 8002a68:	6961      	ldr	r1, [r4, #20]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	69a2      	ldr	r2, [r4, #24]
 8002a6e:	7920      	ldrb	r0, [r4, #4]
 8002a70:	4798      	blx	r3
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002a72:	68a3      	ldr	r3, [r4, #8]
	if (ep->IsEnabled == 0)
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002a74:	60e0      	str	r0, [r4, #12]
	ep->OutOffset = 0;
 8002a76:	2100      	movs	r1, #0
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002a78:	071b      	lsls	r3, r3, #28
	if (ep->IsEnabled == 0)
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002a7a:	4602      	mov	r2, r0
	ep->OutOffset = 0;
 8002a7c:	6121      	str	r1, [r4, #16]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002a7e:	d4f1      	bmi.n	8002a64 <Endpoint_ClearOUT+0x14>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1ef      	bne.n	8002a64 <Endpoint_ClearOUT+0x14>
	{
		ep->OutInUse = true;
 8002a84:	8923      	ldrh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002a86:	7920      	ldrb	r0, [r4, #4]
 8002a88:	69a1      	ldr	r1, [r4, #24]
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
	{
		ep->OutInUse = true;
 8002a8a:	f043 0308 	orr.w	r3, r3, #8
 8002a8e:	8123      	strh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
 8002a90:	8923      	ldrh	r3, [r4, #8]
 8002a92:	f362 1345 	bfi	r3, r2, #5, #1
 8002a96:	8123      	strh	r3, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002a98:	682b      	ldr	r3, [r5, #0]
	}
}
 8002a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
	{
		ep->OutInUse = true;
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	4718      	bx	r3
 8002aa2:	bf00      	nop
 8002aa4:	1fff0670 	.word	0x1fff0670

08002aa8 <Endpoint_ClearIN>:
	}
}

void Endpoint_ClearIN(void)
{
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002aaa:	4919      	ldr	r1, [pc, #100]	; (8002b10 <Endpoint_ClearIN+0x68>)
 8002aac:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8002ab0:	222c      	movs	r2, #44	; 0x2c
 8002ab2:	fb02 1303 	mla	r3, r2, r3, r1
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	06d0      	lsls	r0, r2, #27
 8002aba:	d402      	bmi.n	8002ac2 <Endpoint_ClearIN+0x1a>
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	0792      	lsls	r2, r2, #30
 8002ac0:	d400      	bmi.n	8002ac4 <Endpoint_ClearIN+0x1c>
 8002ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return;
	ep->InInUse = true;
 8002ac4:	8918      	ldrh	r0, [r3, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002ac6:	6a1f      	ldr	r7, [r3, #32]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac8:	4e12      	ldr	r6, [pc, #72]	; (8002b14 <Endpoint_ClearIN+0x6c>)
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
 8002aca:	f040 0010 	orr.w	r0, r0, #16
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002ace:	f103 0528 	add.w	r5, r3, #40	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8002ad2:	f103 0420 	add.w	r4, r3, #32
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
 8002ad6:	8118      	strh	r0, [r3, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
 8002ad8:	69d8      	ldr	r0, [r3, #28]
 8002ada:	60a0      	str	r0, [r4, #8]
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002adc:	606f      	str	r7, [r5, #4]
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8002ae4:	61d8      	str	r0, [r3, #28]
 8002ae6:	f8c6 708c 	str.w	r7, [r6, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002aea:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002aee:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002af2:	680a      	ldr	r2, [r1, #0]
 8002af4:	7918      	ldrb	r0, [r3, #4]
 8002af6:	6869      	ldr	r1, [r5, #4]
 8002af8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002afa:	68a2      	ldr	r2, [r4, #8]
 8002afc:	4798      	blx	r3
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002afe:	686a      	ldr	r2, [r5, #4]
	ep->InDataLeft -= data_count;
 8002b00:	68a3      	ldr	r3, [r4, #8]
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002b02:	4402      	add	r2, r0
	ep->InDataLeft -= data_count;
 8002b04:	1a1b      	subs	r3, r3, r0
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002b06:	606a      	str	r2, [r5, #4]
	ep->InDataLeft -= data_count;
 8002b08:	60a3      	str	r3, [r4, #8]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	60f7      	str	r7, [r6, #12]
 8002b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	1fff0670 	.word	0x1fff0670
 8002b14:	e000e100 	.word	0xe000e100

08002b18 <Endpoint_IsReadWriteAllowed>:
	NVIC_EnableIRQ(USB0_0_IRQn);

}

bool Endpoint_IsReadWriteAllowed() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <Endpoint_IsReadWriteAllowed+0x2c>)
 8002b1a:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 3302 	mla	r3, r1, r2, r3
 8002b24:	791a      	ldrb	r2, [r3, #4]
 8002b26:	0612      	lsls	r2, r2, #24
 8002b28:	d404      	bmi.n	8002b34 <Endpoint_IsReadWriteAllowed+0x1c>
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002b2a:	68d8      	ldr	r0, [r3, #12]
 8002b2c:	3000      	adds	r0, #0
 8002b2e:	bf18      	it	ne
 8002b30:	2001      	movne	r0, #1
	}
	return Retval;
}
 8002b32:	4770      	bx	lr
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
	bool Retval = false;

	if(EndPoint->Direction)
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002b34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	4282      	cmp	r2, r0
 8002b3a:	bf2c      	ite	cs
 8002b3c:	2000      	movcs	r0, #0
 8002b3e:	2001      	movcc	r0, #1
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	1fff0670 	.word	0x1fff0670

08002b48 <Endpoint_Write_8>:
	}
	return Retval;
}

void Endpoint_Write_8(const uint8_t Data) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002b48:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <Endpoint_Write_8+0x28>)
 8002b4a:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 2203 	mla	r2, r1, r3, r2
 8002b54:	f102 0318 	add.w	r3, r2, #24
 8002b58:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	428a      	cmp	r2, r1
 8002b5e:	d300      	bcc.n	8002b62 <Endpoint_Write_8+0x1a>
 8002b60:	e7fe      	b.n	8002b60 <Endpoint_Write_8+0x18>

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	5488      	strb	r0, [r1, r2]
	      EndPoint->InBytesAvailable++;
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	3201      	adds	r2, #1
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	1fff0670 	.word	0x1fff0670

08002b74 <Endpoint_Read_8>:
	    }
	  }while(!Success);
}

uint8_t Endpoint_Read_8() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <Endpoint_Read_8+0x28>)
 8002b76:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 3302 	mla	r3, r1, r2, r3
 8002b80:	f103 0208 	add.w	r2, r3, #8
 8002b84:	6851      	ldr	r1, [r2, #4]
 8002b86:	b901      	cbnz	r1, 8002b8a <Endpoint_Read_8+0x16>
 8002b88:	e7fe      	b.n	8002b88 <Endpoint_Read_8+0x14>

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002b8a:	6958      	ldr	r0, [r3, #20]
 8002b8c:	6893      	ldr	r3, [r2, #8]
		  EndPoint->OutOffset++;
		  EndPoint->OutBytesAvailable--;
 8002b8e:	3901      	subs	r1, #1

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002b90:	5cc0      	ldrb	r0, [r0, r3]
		  EndPoint->OutOffset++;
		  EndPoint->OutBytesAvailable--;
 8002b92:	6051      	str	r1, [r2, #4]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
		  EndPoint->OutOffset++;
 8002b94:	3301      	adds	r3, #1
 8002b96:	6093      	str	r3, [r2, #8]

		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	1fff0670 	.word	0x1fff0670

08002ba0 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002ba0:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <Endpoint_Write_32_LE+0x28>)
 8002ba2:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 2203 	mla	r2, r1, r3, r2
 8002bac:	f102 0318 	add.w	r3, r2, #24
 8002bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	3a03      	subs	r2, #3
 8002bb6:	4291      	cmp	r1, r2
 8002bb8:	d300      	bcc.n	8002bbc <Endpoint_Write_32_LE+0x1c>
 8002bba:	e7fe      	b.n	8002bba <Endpoint_Write_32_LE+0x1a>
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	5050      	str	r0, [r2, r1]
																		Data;
			EndPoint->InBytesAvailable+=4;
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	3204      	adds	r2, #4
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	4770      	bx	lr
 8002bc8:	1fff0670 	.word	0x1fff0670

08002bcc <Endpoint_Read_32_LE>:
		}
	}while(!Success);
}

uint32_t Endpoint_Read_32_LE() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <Endpoint_Read_32_LE+0x28>)
 8002bce:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 3302 	mla	r3, r1, r2, r3
 8002bd8:	f103 0208 	add.w	r2, r3, #8
 8002bdc:	6851      	ldr	r1, [r2, #4]
 8002bde:	2903      	cmp	r1, #3
 8002be0:	d800      	bhi.n	8002be4 <Endpoint_Read_32_LE+0x18>
 8002be2:	e7fe      	b.n	8002be2 <Endpoint_Read_32_LE+0x16>
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002be4:	6958      	ldr	r0, [r3, #20]
 8002be6:	6893      	ldr	r3, [r2, #8]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 8002be8:	3904      	subs	r1, #4
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002bea:	58c0      	ldr	r0, [r0, r3]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 8002bec:	6051      	str	r1, [r2, #4]
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
			EndPoint->OutOffset+=4;
 8002bee:	3304      	adds	r3, #4
 8002bf0:	6093      	str	r3, [r2, #8]

			Success = true;
		}
	} while(!Success);
	return data;
}
 8002bf2:	4770      	bx	lr
 8002bf4:	1fff0670 	.word	0x1fff0670

08002bf8 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002bf8:	2900      	cmp	r1, #0
 8002bfa:	d042      	beq.n	8002c82 <Endpoint_ConfigureEndpointTable+0x8a>
	} while(!Success);
	return data;
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8002bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c00:	1e4d      	subs	r5, r1, #1
 8002c02:	b2e9      	uxtb	r1, r5
 8002c04:	4f20      	ldr	r7, [pc, #128]	; (8002c88 <Endpoint_ConfigureEndpointTable+0x90>)
 8002c06:	2506      	movs	r5, #6
 8002c08:	fb05 0501 	mla	r5, r5, r1, r0
 8002c0c:	350a      	adds	r5, #10
 8002c0e:	f100 0904 	add.w	r9, r0, #4
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002c12:	463e      	mov	r6, r7
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002c14:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8002c18:	e01c      	b.n	8002c54 <Endpoint_ConfigureEndpointTable+0x5c>
 8002c1a:	f819 2c04 	ldrb.w	r2, [r9, #-4]
 8002c1e:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002c20:	f839 2c02 	ldrh.w	r2, [r9, #-2]
 8002c24:	8919      	ldrh	r1, [r3, #8]
 8002c26:	f362 118c 	bfi	r1, r2, #6, #7
		device.Endpoints[Number].IsConfigured = 1;
 8002c2a:	b2ca      	uxtb	r2, r1
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002c30:	8119      	strh	r1, [r3, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8002c32:	721a      	strb	r2, [r3, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8002c34:	891a      	ldrh	r2, [r3, #8]
 8002c36:	f042 0202 	orr.w	r2, r2, #2
 8002c3a:	811a      	strh	r2, [r3, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8002c3c:	f819 0c04 	ldrb.w	r0, [r9, #-4]
 8002c40:	0602      	lsls	r2, r0, #24
 8002c42:	f109 0906 	add.w	r9, r9, #6
 8002c46:	d403      	bmi.n	8002c50 <Endpoint_ConfigureEndpointTable+0x58>
			device.Driver->EndpointReadStart(Table[i].Address,
 8002c48:	6832      	ldr	r2, [r6, #0]
 8002c4a:	6999      	ldr	r1, [r3, #24]
 8002c4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002c4e:	4798      	blx	r3

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002c50:	45a9      	cmp	r9, r5
 8002c52:	d013      	beq.n	8002c7c <Endpoint_ConfigureEndpointTable+0x84>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002c54:	f819 3c04 	ldrb.w	r3, [r9, #-4]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	f899 1000 	ldrb.w	r1, [r9]
 8002c5e:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8002c62:	f839 2c02 	ldrh.w	r2, [r9, #-2]
 8002c66:	4618      	mov	r0, r3
bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002c68:	f003 040f 	and.w	r4, r3, #15
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002c6c:	47e0      	blx	ip
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002c6e:	fb08 6304 	mla	r3, r8, r4, r6
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d0d1      	beq.n	8002c1a <Endpoint_ConfigureEndpointTable+0x22>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8002c76:	2000      	movs	r0, #0
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
}
 8002c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c82:	2001      	movs	r0, #1
}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	1fff0670 	.word	0x1fff0670

08002c8c <USBD_SignalDeviceEventHandler>:
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
  uint32_t i;

  switch (event)
 8002c8c:	2809      	cmp	r0, #9
 8002c8e:	d80e      	bhi.n	8002cae <USBD_SignalDeviceEventHandler+0x22>
 8002c90:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002c94:	0019000a 	.word	0x0019000a
 8002c98:	002a0023 	.word	0x002a0023
 8002c9c:	000d0034 	.word	0x000d0034
 8002ca0:	000e00e8 	.word	0x000e00e8
 8002ca4:	00f6000d 	.word	0x00f6000d
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8002ca8:	4bb7      	ldr	r3, [pc, #732]	; (8002f88 <USBD_SignalDeviceEventHandler+0x2fc>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	4770      	bx	lr
      break;
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002cb0:	4bb6      	ldr	r3, [pc, #728]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002cb2:	4ab5      	ldr	r2, [pc, #724]	; (8002f88 <USBD_SignalDeviceEventHandler+0x2fc>)
      if (NULL != device.events->wakeup)
 8002cb4:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
      break;
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002cb8:	f893 113a 	ldrb.w	r1, [r3, #314]	; 0x13a
      if (NULL != device.events->wakeup)
 8002cbc:	6983      	ldr	r3, [r0, #24]
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
      break;
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002cbe:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->wakeup)
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f4      	beq.n	8002cae <USBD_SignalDeviceEventHandler+0x22>
      {
        device.events->wakeup();
 8002cc4:	4718      	bx	r3
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
      if (NULL != device.events->disconnect)
 8002cc6:	4bb1      	ldr	r3, [pc, #708]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8002cc8:	4aaf      	ldr	r2, [pc, #700]	; (8002f88 <USBD_SignalDeviceEventHandler+0x2fc>)
      if (NULL != device.events->disconnect)
 8002cca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002cce:	685b      	ldr	r3, [r3, #4]
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->disconnect)
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f5      	bne.n	8002cc4 <USBD_SignalDeviceEventHandler+0x38>
 8002cd8:	e7e9      	b.n	8002cae <USBD_SignalDeviceEventHandler+0x22>
      {
        device.events->start_of_frame();
      }
      break;
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8002cda:	4bac      	ldr	r3, [pc, #688]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002cdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ee      	bne.n	8002cc4 <USBD_SignalDeviceEventHandler+0x38>
 8002ce6:	e7e2      	b.n	8002cae <USBD_SignalDeviceEventHandler+0x22>
        device.events->connect();
      }
      break;
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
      if (NULL != device.events->disconnect)
 8002ce8:	4ba8      	ldr	r3, [pc, #672]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
      {
        device.events->connect();
      }
      break;
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8002cea:	4aa7      	ldr	r2, [pc, #668]	; (8002f88 <USBD_SignalDeviceEventHandler+0x2fc>)
      if (NULL != device.events->disconnect)
 8002cec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002cf0:	685b      	ldr	r3, [r3, #4]
      {
        device.events->connect();
      }
      break;
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->disconnect)
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e4      	bne.n	8002cc4 <USBD_SignalDeviceEventHandler+0x38>
 8002cfa:	e7d8      	b.n	8002cae <USBD_SignalDeviceEventHandler+0x22>
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8002cfe:	4ba2      	ldr	r3, [pc, #648]	; (8002f88 <USBD_SignalDeviceEventHandler+0x2fc>)
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8002d00:	4ca2      	ldr	r4, [pc, #648]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
  uint32_t i;

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8002d02:	2202      	movs	r2, #2
 8002d04:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002d06:	8922      	ldrh	r2, [r4, #8]
  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
 8002d08:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002d0c:	f36f 1204 	bfc	r2, #4, #1
 8002d10:	8122      	strh	r2, [r4, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002d12:	8922      	ldrh	r2, [r4, #8]
 8002d14:	f36f 02c3 	bfc	r2, #3, #1
 8002d18:	8122      	strh	r2, [r4, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002d1a:	8922      	ldrh	r2, [r4, #8]
 8002d1c:	f36f 0282 	bfc	r2, #2, #1
 8002d20:	8122      	strh	r2, [r4, #8]
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002d22:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8002d24:	f36f 1204 	bfc	r2, #4, #1
 8002d28:	86a2      	strh	r2, [r4, #52]	; 0x34
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002d2a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8002d2c:	f36f 02c3 	bfc	r2, #3, #1
 8002d30:	86a2      	strh	r2, [r4, #52]	; 0x34
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002d32:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8002d34:	f36f 0282 	bfc	r2, #2, #1
 8002d38:	86a2      	strh	r2, [r4, #52]	; 0x34
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002d3a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
 8002d3e:	f36f 0382 	bfc	r3, #2, #1

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8002d42:	2101      	movs	r1, #1
      device.remote_wakeup = (uint8_t)0;
 8002d44:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002d48:	07d3      	lsls	r3, r2, #31

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8002d4a:	f884 113b 	strb.w	r1, [r4, #315]	; 0x13b
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002d4e:	f100 809f 	bmi.w	8002e90 <USBD_SignalDeviceEventHandler+0x204>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002d52:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8002d56:	4d8d      	ldr	r5, [pc, #564]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002d58:	f36f 1304 	bfc	r3, #4, #1
 8002d5c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002d60:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8002d64:	f36f 03c3 	bfc	r3, #3, #1
 8002d68:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002d6c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8002d70:	f36f 0382 	bfc	r3, #2, #1
 8002d74:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002d78:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002d7c:	07de      	lsls	r6, r3, #31
 8002d7e:	f100 80ec 	bmi.w	8002f5a <USBD_SignalDeviceEventHandler+0x2ce>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002d82:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8002d86:	4d81      	ldr	r5, [pc, #516]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002d88:	f36f 1304 	bfc	r3, #4, #1
 8002d8c:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002d90:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8002d94:	f36f 03c3 	bfc	r3, #3, #1
 8002d98:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002d9c:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8002da0:	f36f 0382 	bfc	r3, #2, #1
 8002da4:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002da8:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002dac:	07d8      	lsls	r0, r3, #31
 8002dae:	f100 80bf 	bmi.w	8002f30 <USBD_SignalDeviceEventHandler+0x2a4>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002db2:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8002db6:	4d75      	ldr	r5, [pc, #468]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002db8:	f36f 1304 	bfc	r3, #4, #1
 8002dbc:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002dc0:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8002dc4:	f36f 03c3 	bfc	r3, #3, #1
 8002dc8:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002dcc:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8002dd0:	f36f 0382 	bfc	r3, #2, #1
 8002dd4:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002dd8:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002ddc:	07d9      	lsls	r1, r3, #31
 8002dde:	f100 8092 	bmi.w	8002f06 <USBD_SignalDeviceEventHandler+0x27a>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002de2:	f8b4 30e4 	ldrh.w	r3, [r4, #228]	; 0xe4
 8002de6:	4d69      	ldr	r5, [pc, #420]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002de8:	f36f 1304 	bfc	r3, #4, #1
 8002dec:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002df0:	f8b4 30e4 	ldrh.w	r3, [r4, #228]	; 0xe4
 8002df4:	f36f 03c3 	bfc	r3, #3, #1
 8002df8:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002dfc:	f8b4 30e4 	ldrh.w	r3, [r4, #228]	; 0xe4
 8002e00:	f36f 0382 	bfc	r3, #2, #1
 8002e04:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002e08:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002e0c:	07da      	lsls	r2, r3, #31
 8002e0e:	d466      	bmi.n	8002ede <USBD_SignalDeviceEventHandler+0x252>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002e10:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
 8002e14:	4d5d      	ldr	r5, [pc, #372]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002e16:	f36f 1304 	bfc	r3, #4, #1
 8002e1a:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002e1e:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
 8002e22:	f36f 03c3 	bfc	r3, #3, #1
 8002e26:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002e2a:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
 8002e2e:	f36f 0382 	bfc	r3, #2, #1
 8002e32:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002e36:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002e3a:	07db      	lsls	r3, r3, #31
 8002e3c:	d43b      	bmi.n	8002eb6 <USBD_SignalDeviceEventHandler+0x22a>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 8002e3e:	2300      	movs	r3, #0
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8002e40:	6822      	ldr	r2, [r4, #0]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 8002e42:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 8002e46:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8002e4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002e4c:	7920      	ldrb	r0, [r4, #4]
 8002e4e:	2118      	movs	r1, #24
 8002e50:	4798      	blx	r3
      if (NULL != device.events->reset)
 8002e52:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8093 	beq.w	8002f84 <USBD_SignalDeviceEventHandler+0x2f8>
      }
      break;
    default:
      break;
  }
}
 8002e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
      if (NULL != device.events->reset)
      {
        device.events->reset();
 8002e62:	4718      	bx	r3
      {
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 8002e64:	4a49      	ldr	r2, [pc, #292]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002e66:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <USBD_SignalDeviceEventHandler+0x2fc>)
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
      if (NULL != device.events->suspend)
 8002e68:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
      {
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 8002e6c:	7818      	ldrb	r0, [r3, #0]
 8002e6e:	f882 013a 	strb.w	r0, [r2, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
      if (NULL != device.events->suspend)
 8002e72:	69ca      	ldr	r2, [r1, #28]
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 8002e74:	2105      	movs	r1, #5
 8002e76:	7019      	strb	r1, [r3, #0]
      if (NULL != device.events->suspend)
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	f43f af18 	beq.w	8002cae <USBD_SignalDeviceEventHandler+0x22>
      {
        device.events->suspend();
 8002e7e:	4710      	bx	r2
      {
        device.events->reset();
      }
      break;
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <USBD_SignalDeviceEventHandler+0x300>)
 8002e82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f af1b 	bne.w	8002cc4 <USBD_SignalDeviceEventHandler+0x38>
 8002e8e:	e70e      	b.n	8002cae <USBD_SignalDeviceEventHandler+0x22>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	f47f af59 	bne.w	8002d52 <USBD_SignalDeviceEventHandler+0xc6>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002ea0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002ea4:	f360 0300 	bfi	r3, r0, #0, #1
 8002ea8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002eac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8002eae:	f360 0341 	bfi	r3, r0, #1, #1
 8002eb2:	86a3      	strh	r3, [r4, #52]	; 0x34
 8002eb4:	e74d      	b.n	8002d52 <USBD_SignalDeviceEventHandler+0xc6>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002eb6:	682b      	ldr	r3, [r5, #0]
 8002eb8:	f895 010c 	ldrb.w	r0, [r5, #268]	; 0x10c
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d1bc      	bne.n	8002e3e <USBD_SignalDeviceEventHandler+0x1b2>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002ec4:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
 8002ec8:	f360 0300 	bfi	r3, r0, #0, #1
 8002ecc:	f885 3110 	strb.w	r3, [r5, #272]	; 0x110
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002ed0:	f8b5 3110 	ldrh.w	r3, [r5, #272]	; 0x110
 8002ed4:	f360 0341 	bfi	r3, r0, #1, #1
 8002ed8:	f8a5 3110 	strh.w	r3, [r5, #272]	; 0x110
 8002edc:	e7af      	b.n	8002e3e <USBD_SignalDeviceEventHandler+0x1b2>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002ede:	682b      	ldr	r3, [r5, #0]
 8002ee0:	f895 00e0 	ldrb.w	r0, [r5, #224]	; 0xe0
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d191      	bne.n	8002e10 <USBD_SignalDeviceEventHandler+0x184>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002eec:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
 8002ef0:	f360 0300 	bfi	r3, r0, #0, #1
 8002ef4:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002ef8:	f8b5 30e4 	ldrh.w	r3, [r5, #228]	; 0xe4
 8002efc:	f360 0341 	bfi	r3, r0, #1, #1
 8002f00:	f8a5 30e4 	strh.w	r3, [r5, #228]	; 0xe4
 8002f04:	e784      	b.n	8002e10 <USBD_SignalDeviceEventHandler+0x184>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002f06:	682b      	ldr	r3, [r5, #0]
 8002f08:	f895 00b4 	ldrb.w	r0, [r5, #180]	; 0xb4
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002f10:	2800      	cmp	r0, #0
 8002f12:	f47f af66 	bne.w	8002de2 <USBD_SignalDeviceEventHandler+0x156>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002f16:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
 8002f1a:	f360 0300 	bfi	r3, r0, #0, #1
 8002f1e:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002f22:	f8b5 30b8 	ldrh.w	r3, [r5, #184]	; 0xb8
 8002f26:	f360 0341 	bfi	r3, r0, #1, #1
 8002f2a:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
 8002f2e:	e758      	b.n	8002de2 <USBD_SignalDeviceEventHandler+0x156>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002f30:	682b      	ldr	r3, [r5, #0]
 8002f32:	f895 0088 	ldrb.w	r0, [r5, #136]	; 0x88
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	f47f af39 	bne.w	8002db2 <USBD_SignalDeviceEventHandler+0x126>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002f40:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
 8002f44:	f360 0300 	bfi	r3, r0, #0, #1
 8002f48:	f885 308c 	strb.w	r3, [r5, #140]	; 0x8c
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002f4c:	f8b5 308c 	ldrh.w	r3, [r5, #140]	; 0x8c
 8002f50:	f360 0341 	bfi	r3, r0, #1, #1
 8002f54:	f8a5 308c 	strh.w	r3, [r5, #140]	; 0x8c
 8002f58:	e72b      	b.n	8002db2 <USBD_SignalDeviceEventHandler+0x126>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002f64:	2800      	cmp	r0, #0
 8002f66:	f47f af0c 	bne.w	8002d82 <USBD_SignalDeviceEventHandler+0xf6>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002f6a:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8002f6e:	f360 0300 	bfi	r3, r0, #0, #1
 8002f72:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002f76:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8002f7a:	f360 0341 	bfi	r3, r0, #1, #1
 8002f7e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
 8002f82:	e6fe      	b.n	8002d82 <USBD_SignalDeviceEventHandler+0xf6>
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
 8002f86:	bf00      	nop
 8002f88:	1fff0465 	.word	0x1fff0465
 8002f8c:	1fff0670 	.word	0x1fff0670

08002f90 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 8002f90:	b510      	push	{r4, lr}
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8002f92:	4c08      	ldr	r4, [pc, #32]	; (8002fb4 <USBD_HandleEP0_Stall+0x24>)
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	2080      	movs	r0, #128	; 0x80
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4798      	blx	r3
 8002f9e:	b100      	cbz	r0, 8002fa2 <USBD_HandleEP0_Stall+0x12>
 8002fa0:	bd10      	pop	{r4, pc}
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8002fa2:	6823      	ldr	r3, [r4, #0]
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8002fa4:	2201      	movs	r2, #1
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8002fa8:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8002fac:	2118      	movs	r1, #24
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 8002fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8002fb2:	4718      	bx	r3
 8002fb4:	1fff0670 	.word	0x1fff0670

08002fb8 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8002fba:	4ca2      	ldr	r4, [pc, #648]	; (8003244 <USBD_Handle_DeviceRequest+0x28c>)
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8002fbc:	4ea2      	ldr	r6, [pc, #648]	; (8003248 <USBD_Handle_DeviceRequest+0x290>)

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8002fbe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8002fc2:	8870      	ldrh	r0, [r6, #2]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8002fc4:	68da      	ldr	r2, [r3, #12]
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8002fc6:	b082      	sub	sp, #8
  uint32_t length = 0U;
  uint32_t ret;
  void *buffer = NULL;
 8002fc8:	2300      	movs	r3, #0
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8002fca:	b285      	uxth	r5, r0
 */
static void USBD_Handle_DeviceRequest(void)
{
  uint32_t length = 0U;
  uint32_t ret;
  void *buffer = NULL;
 8002fcc:	9300      	str	r3, [sp, #0]
  uint32_t status = 0U;
 8002fce:	9301      	str	r3, [sp, #4]
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8002fd0:	b102      	cbz	r2, 8002fd4 <USBD_Handle_DeviceRequest+0x1c>
  {
    device.events->control_request();
 8002fd2:	4790      	blx	r2
  }

  if (1U == device.IsSetupRecieved)
 8002fd4:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8002fd8:	079b      	lsls	r3, r3, #30
 8002fda:	d407      	bmi.n	8002fec <USBD_Handle_DeviceRequest+0x34>
      default:
        USBD_HandleEP0_Stall();
        break;
    }
  }
  device.IsSetupRecieved = 0U;
 8002fdc:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (1U == device.IsSetupRecieved)
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 8002fec:	7873      	ldrb	r3, [r6, #1]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8002fee:	b2ed      	uxtb	r5, r5
  }

  if (1U == device.IsSetupRecieved)
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d816      	bhi.n	8003022 <USBD_Handle_DeviceRequest+0x6a>
 8002ff4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ff8:	00be0025 	.word	0x00be0025
 8002ffc:	009d0015 	.word	0x009d0015
 8003000:	00d00015 	.word	0x00d00015
 8003004:	00150056 	.word	0x00150056
 8003008:	008a0083 	.word	0x008a0083
 800300c:	0078000d 	.word	0x0078000d
 8003010:	0015      	.short	0x0015
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8003012:	4b8e      	ldr	r3, [pc, #568]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	2a04      	cmp	r2, #4
 8003018:	f000 8136 	beq.w	8003288 <USBD_Handle_DeviceRequest+0x2d0>
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
          break;
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d1dc      	bne.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
 */
static void USBD_HandleEP0_Stall(void)
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	4d87      	ldr	r5, [pc, #540]	; (8003244 <USBD_Handle_DeviceRequest+0x28c>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2080      	movs	r0, #128	; 0x80
 800302a:	2101      	movs	r1, #1
 800302c:	4798      	blx	r3
 800302e:	2800      	cmp	r0, #0
 8003030:	d1d4      	bne.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8003032:	682b      	ldr	r3, [r5, #0]
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8003034:	2201      	movs	r2, #1
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8003038:	f885 213b 	strb.w	r2, [r5, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 800303c:	2118      	movs	r1, #24
 800303e:	4798      	blx	r3
 8003040:	e7cc      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
          break;
        }
        break;

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8003042:	7830      	ldrb	r0, [r6, #0]
 8003044:	4b80      	ldr	r3, [pc, #512]	; (8003248 <USBD_Handle_DeviceRequest+0x290>)
 8003046:	f010 0003 	ands.w	r0, r0, #3
 800304a:	f000 8103 	beq.w	8003254 <USBD_Handle_DeviceRequest+0x29c>
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b01      	cmp	r3, #1
 8003056:	f000 80e7 	beq.w	8003228 <USBD_Handle_DeviceRequest+0x270>
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 800305a:	7833      	ldrb	r3, [r6, #0]
 800305c:	4a7a      	ldr	r2, [pc, #488]	; (8003248 <USBD_Handle_DeviceRequest+0x290>)
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d1dd      	bne.n	8003022 <USBD_Handle_DeviceRequest+0x6a>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8003066:	4979      	ldr	r1, [pc, #484]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 8003068:	8893      	ldrh	r3, [r2, #4]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800306a:	7809      	ldrb	r1, [r1, #0]
 800306c:	2904      	cmp	r1, #4
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800306e:	b29b      	uxth	r3, r3
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8003070:	d003      	beq.n	800307a <USBD_Handle_DeviceRequest+0xc2>
 8003072:	8892      	ldrh	r2, [r2, #4]
 8003074:	b292      	uxth	r2, r2
 8003076:	2a00      	cmp	r2, #0
 8003078:	d1d3      	bne.n	8003022 <USBD_Handle_DeviceRequest+0x6a>
              (1U == device.Endpoints[index].IsConfigured))
 800307a:	222c      	movs	r2, #44	; 0x2c
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800307c:	f003 030f 	and.w	r3, r3, #15
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
              (1U == device.Endpoints[index].IsConfigured))
 8003080:	fb02 4303 	mla	r3, r2, r3, r4
 8003084:	496f      	ldr	r1, [pc, #444]	; (8003244 <USBD_Handle_DeviceRequest+0x28c>)
 8003086:	7a1a      	ldrb	r2, [r3, #8]
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8003088:	07d0      	lsls	r0, r2, #31
 800308a:	d5ca      	bpl.n	8003022 <USBD_Handle_DeviceRequest+0x6a>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 800308c:	689b      	ldr	r3, [r3, #8]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800308e:	680a      	ldr	r2, [r1, #0]
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 8003090:	a902      	add	r1, sp, #8
 8003092:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003096:	f841 3d04 	str.w	r3, [r1, #-4]!
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800309a:	2000      	movs	r0, #0
 800309c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800309e:	2202      	movs	r2, #2
 80030a0:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 80030a2:	e79b      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 80030a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0b9      	beq.n	8003022 <USBD_Handle_DeviceRequest+0x6a>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80030ae:	8870      	ldrh	r0, [r6, #2]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 80030b0:	88b1      	ldrh	r1, [r6, #4]
        break;

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80030b2:	4e65      	ldr	r6, [pc, #404]	; (8003248 <USBD_Handle_DeviceRequest+0x290>)
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 80030b4:	b280      	uxth	r0, r0
 80030b6:	b289      	uxth	r1, r1
 80030b8:	466a      	mov	r2, sp
 80030ba:	4798      	blx	r3
        }

        if (0U == length)
 80030bc:	4605      	mov	r5, r0
 80030be:	2800      	cmp	r0, #0
 80030c0:	d0af      	beq.n	8003022 <USBD_Handle_DeviceRequest+0x6a>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 80030c2:	88f3      	ldrh	r3, [r6, #6]
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 80030c4:	9900      	ldr	r1, [sp, #0]
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4298      	cmp	r0, r3
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 80030ca:	bf28      	it	cs
 80030cc:	88f5      	ldrhcs	r5, [r6, #6]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 80030ce:	6823      	ldr	r3, [r4, #0]
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 80030d0:	bf28      	it	cs
 80030d2:	b2ad      	uxthcs	r5, r5
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	462a      	mov	r2, r5
 80030d8:	2000      	movs	r0, #0
 80030da:	4798      	blx	r3
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 80030dc:	9b00      	ldr	r3, [sp, #0]
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
 80030de:	1a2d      	subs	r5, r5, r0
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 80030e0:	4418      	add	r0, r3
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
 80030e2:	62a5      	str	r5, [r4, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 80030e4:	62e0      	str	r0, [r4, #44]	; 0x2c
 80030e6:	e779      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
        break;

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80030e8:	4b58      	ldr	r3, [pc, #352]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	2a04      	cmp	r2, #4
 80030ee:	d195      	bne.n	800301c <USBD_Handle_DeviceRequest+0x64>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80030f0:	8872      	ldrh	r2, [r6, #2]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 80030f2:	88b3      	ldrh	r3, [r6, #4]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 80030f4:	fa14 f383 	uxtah	r3, r4, r3
 80030f8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
          break;
 80030fc:	e76e      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
        }
        USBD_HandleEP0_Stall();
        break;

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	4953      	ldr	r1, [pc, #332]	; (8003250 <USBD_Handle_DeviceRequest+0x298>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	2201      	movs	r2, #1
 8003106:	2000      	movs	r0, #0
 8003108:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 800310a:	e767      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
        if (NULL != device.events->config_changed)
 800310c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
        break;

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 8003110:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
        if (NULL != device.events->config_changed)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	b103      	cbz	r3, 800311a <USBD_Handle_DeviceRequest+0x162>
        {
          device.events->config_changed();
 8003118:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 800311a:	2d00      	cmp	r5, #0
 800311c:	d054      	beq.n	80031c8 <USBD_Handle_DeviceRequest+0x210>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
          break;
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 800311e:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8003122:	4d48      	ldr	r5, [pc, #288]	; (8003244 <USBD_Handle_DeviceRequest+0x28c>)
 8003124:	07d9      	lsls	r1, r3, #31
 8003126:	f140 80a6 	bpl.w	8003276 <USBD_Handle_DeviceRequest+0x2be>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 800312a:	4b48      	ldr	r3, [pc, #288]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
 800312c:	2204      	movs	r2, #4
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e754      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
        }
        break;

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 8003132:	2d02      	cmp	r5, #2
 8003134:	f43f af75 	beq.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
        {
          USBD_HandleEP0_Stall();
          break;
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8003138:	4b44      	ldr	r3, [pc, #272]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	2a04      	cmp	r2, #4
 800313e:	d067      	beq.n	8003210 <USBD_Handle_DeviceRequest+0x258>
              break;
          }
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b03      	cmp	r3, #3
 8003144:	f47f af6d 	bne.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 8003148:	2d00      	cmp	r5, #0
 800314a:	f47f af6a 	bne.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800314e:	7833      	ldrb	r3, [r6, #0]
 8003150:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <USBD_Handle_DeviceRequest+0x290>)
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b02      	cmp	r3, #2
 8003158:	f47f af63 	bne.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 800315c:	8893      	ldrh	r3, [r2, #4]
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800315e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003162:	f47f af5e 	bne.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 8003166:	8923      	ldrh	r3, [r4, #8]
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	8123      	strh	r3, [r4, #8]
            USBD_HandleEP0_Stall();
 800316e:	f7ff ff0f 	bl	8002f90 <USBD_HandleEP0_Stall>
            break;
 8003172:	e733      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 8003174:	7833      	ldrb	r3, [r6, #0]
 8003176:	4a34      	ldr	r2, [pc, #208]	; (8003248 <USBD_Handle_DeviceRequest+0x290>)
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d027      	beq.n	80031d0 <USBD_Handle_DeviceRequest+0x218>
          {
            USBD_HandleEP0_Stall();
          }
          break;
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8003180:	7813      	ldrb	r3, [r2, #0]
 8003182:	f013 0303 	ands.w	r3, r3, #3
 8003186:	f47f af4c 	bne.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
        {
          device.remote_wakeup = 0U;
 800318a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
 800318e:	f363 0282 	bfi	r2, r3, #2, #1
 8003192:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
          break;
 8003196:	e721      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
        break;

      case REQ_SetAddress:
        if (0U == value)
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8003198:	4b2c      	ldr	r3, [pc, #176]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
        /* default stall */
        USBD_HandleEP0_Stall();
        break;

      case REQ_SetAddress:
        if (0U == value)
 800319a:	b995      	cbnz	r5, 80031c2 <USBD_Handle_DeviceRequest+0x20a>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 800319c:	2202      	movs	r2, #2
 800319e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	4e28      	ldr	r6, [pc, #160]	; (8003244 <USBD_Handle_DeviceRequest+0x28c>)
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	4628      	mov	r0, r5
 80031a8:	2100      	movs	r1, #0
 80031aa:	4798      	blx	r3
 80031ac:	2800      	cmp	r0, #0
 80031ae:	f47f af15 	bne.w	8002fdc <USBD_Handle_DeviceRequest+0x24>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 80031b2:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f43f af0f 	beq.w	8002fdc <USBD_Handle_DeviceRequest+0x24>
          {
            device.events->set_address();
 80031be:	4798      	blx	r3
 80031c0:	e70c      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 80031c2:	2203      	movs	r2, #3
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e7eb      	b.n	80031a0 <USBD_Handle_DeviceRequest+0x1e8>
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 80031c8:	4b20      	ldr	r3, [pc, #128]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
 80031ca:	2203      	movs	r2, #3
 80031cc:	701a      	strb	r2, [r3, #0]
          break;
 80031ce:	e705      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80031d0:	491e      	ldr	r1, [pc, #120]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 80031d2:	8893      	ldrh	r3, [r2, #4]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80031d4:	7809      	ldrb	r1, [r1, #0]
 80031d6:	2904      	cmp	r1, #4
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 80031d8:	b29b      	uxth	r3, r3
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80031da:	d004      	beq.n	80031e6 <USBD_Handle_DeviceRequest+0x22e>
 80031dc:	8892      	ldrh	r2, [r2, #4]
 80031de:	b292      	uxth	r2, r2
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	f47f af1e 	bne.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
                  (1U == device.Endpoints[index].IsConfigured))
 80031e6:	222c      	movs	r2, #44	; 0x2c
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 80031e8:	f003 030f 	and.w	r3, r3, #15
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
 80031ec:	fb02 4303 	mla	r3, r2, r3, r4
 80031f0:	4914      	ldr	r1, [pc, #80]	; (8003244 <USBD_Handle_DeviceRequest+0x28c>)
 80031f2:	7a1a      	ldrb	r2, [r3, #8]
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80031f4:	07d5      	lsls	r5, r2, #31
 80031f6:	f57f af14 	bpl.w	8003022 <USBD_Handle_DeviceRequest+0x6a>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 80031fa:	891a      	ldrh	r2, [r3, #8]
 80031fc:	f36f 0282 	bfc	r2, #2, #1
 8003200:	811a      	strh	r2, [r3, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 8003202:	88b0      	ldrh	r0, [r6, #4]
 8003204:	680b      	ldr	r3, [r1, #0]
 8003206:	b2c0      	uxtb	r0, r0
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2100      	movs	r1, #0
 800320c:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 800320e:	e6e5      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
          break;
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
 8003210:	2d00      	cmp	r5, #0
 8003212:	d044      	beq.n	800329e <USBD_Handle_DeviceRequest+0x2e6>
 8003214:	2d01      	cmp	r5, #1
 8003216:	f47f aee1 	bne.w	8002fdc <USBD_Handle_DeviceRequest+0x24>
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 800321a:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
              break;
 8003226:	e6d9      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <USBD_Handle_DeviceRequest+0x294>)
 800322a:	781b      	ldrb	r3, [r3, #0]
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800322c:	2b04      	cmp	r3, #4
 800322e:	f47f af14 	bne.w	800305a <USBD_Handle_DeviceRequest+0xa2>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 8003232:	a902      	add	r1, sp, #8
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8003234:	6823      	ldr	r3, [r4, #0]
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 8003236:	2000      	movs	r0, #0
 8003238:	f841 0d04 	str.w	r0, [r1, #-4]!
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	2202      	movs	r2, #2
 8003240:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 8003242:	e6cb      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
 8003244:	1fff0670 	.word	0x1fff0670
 8003248:	1fff0468 	.word	0x1fff0468
 800324c:	1fff0465 	.word	0x1fff0465
 8003250:	1fff07a9 	.word	0x1fff07a9
        break;

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 8003254:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8003258:	6822      	ldr	r2, [r4, #0]
        break;

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 800325a:	f3c3 0580 	ubfx	r5, r3, #2, #1
 800325e:	006d      	lsls	r5, r5, #1
 8003260:	b2ed      	uxtb	r5, r5
 8003262:	a902      	add	r1, sp, #8
 8003264:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003268:	432b      	orrs	r3, r5
 800326a:	f841 3d04 	str.w	r3, [r1, #-4]!
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800326e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003270:	2202      	movs	r2, #2
 8003272:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 8003274:	e6b2      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
 */
static void USBD_HandleEP0_Stall(void)
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8003276:	682b      	ldr	r3, [r5, #0]
 8003278:	2080      	movs	r0, #128	; 0x80
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2101      	movs	r1, #1
 800327e:	4798      	blx	r3
 8003280:	2800      	cmp	r0, #0
 8003282:	f47f aeab 	bne.w	8002fdc <USBD_Handle_DeviceRequest+0x24>
 8003286:	e6d4      	b.n	8003032 <USBD_Handle_DeviceRequest+0x7a>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 8003288:	88b1      	ldrh	r1, [r6, #4]
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 800328a:	6823      	ldr	r3, [r4, #0]
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 800328c:	b289      	uxth	r1, r1
 800328e:	f501 719c 	add.w	r1, r1, #312	; 0x138
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 8003292:	4421      	add	r1, r4
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	2201      	movs	r2, #1
 8003298:	2000      	movs	r0, #0
 800329a:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 800329c:	e69e      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
              break;
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 800329e:	88b3      	ldrh	r3, [r6, #4]
 80032a0:	480a      	ldr	r0, [pc, #40]	; (80032cc <USBD_Handle_DeviceRequest+0x314>)
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 80032a2:	490b      	ldr	r1, [pc, #44]	; (80032d0 <USBD_Handle_DeviceRequest+0x318>)
 80032a4:	222c      	movs	r2, #44	; 0x2c
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
              break;
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 80032a6:	f003 030f 	and.w	r3, r3, #15
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 80032aa:	fb02 4303 	mla	r3, r2, r3, r4
 80032ae:	7a1a      	ldrb	r2, [r3, #8]
 80032b0:	07d2      	lsls	r2, r2, #31
 80032b2:	f57f af5c 	bpl.w	800316e <USBD_Handle_DeviceRequest+0x1b6>
              {
                USBD_HandleEP0_Stall();
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 80032b6:	891a      	ldrh	r2, [r3, #8]
 80032b8:	f042 0204 	orr.w	r2, r2, #4
 80032bc:	811a      	strh	r2, [r3, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 80032be:	680b      	ldr	r3, [r1, #0]
 80032c0:	8880      	ldrh	r0, [r0, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2101      	movs	r1, #1
 80032c6:	b2c0      	uxtb	r0, r0
 80032c8:	4798      	blx	r3
 80032ca:	e687      	b.n	8002fdc <USBD_Handle_DeviceRequest+0x24>
 80032cc:	1fff0468 	.word	0x1fff0468
 80032d0:	1fff0670 	.word	0x1fff0670

080032d4 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 80032d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 80032d8:	4c72      	ldr	r4, [pc, #456]	; (80034a4 <USBD_SignalEndpointEvent_Handler+0x1d0>)
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 80032da:	f000 050f 	and.w	r5, r0, #15
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
 80032de:	2901      	cmp	r1, #1
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 80032e0:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
  temp_dir = (uint32_t)device.CurrentDirection;
 80032e4:	f894 713d 	ldrb.w	r7, [r4, #317]	; 0x13d
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 80032e8:	f894 813c 	ldrb.w	r8, [r4, #316]	; 0x13c
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 80032ec:	f884 013d 	strb.w	r0, [r4, #317]	; 0x13d
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 80032f0:	462e      	mov	r6, r5
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80032f2:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
 80032f6:	d067      	beq.n	80033c8 <USBD_SignalEndpointEvent_Handler+0xf4>
 80032f8:	d33a      	bcc.n	8003370 <USBD_SignalEndpointEvent_Handler+0x9c>
 80032fa:	2902      	cmp	r1, #2
 80032fc:	d132      	bne.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
          break;
      }
      break;
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 80032fe:	232c      	movs	r3, #44	; 0x2c
 8003300:	fb03 4305 	mla	r3, r3, r5, r4
 8003304:	f103 0920 	add.w	r9, r3, #32
 8003308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330a:	2a00      	cmp	r2, #0
 800330c:	f040 8091 	bne.w	8003432 <USBD_SignalEndpointEvent_Handler+0x15e>
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8003310:	7918      	ldrb	r0, [r3, #4]
 8003312:	0702      	lsls	r2, r0, #28
 8003314:	d114      	bne.n	8003340 <USBD_SignalEndpointEvent_Handler+0x6c>
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	b192      	cbz	r2, 8003340 <USBD_SignalEndpointEvent_Handler+0x6c>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 800331a:	4963      	ldr	r1, [pc, #396]	; (80034a8 <USBD_SignalEndpointEvent_Handler+0x1d4>)
 800331c:	88c9      	ldrh	r1, [r1, #6]
 800331e:	b289      	uxth	r1, r1
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8003320:	428a      	cmp	r2, r1
 8003322:	d00d      	beq.n	8003340 <USBD_SignalEndpointEvent_Handler+0x6c>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 8003324:	891b      	ldrh	r3, [r3, #8]
 8003326:	f3c3 1386 	ubfx	r3, r3, #6, #7
 800332a:	fbb2 f1f3 	udiv	r1, r2, r3
 800332e:	fb03 2111 	mls	r1, r3, r1, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8003332:	b929      	cbnz	r1, 8003340 <USBD_SignalEndpointEvent_Handler+0x6c>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	460a      	mov	r2, r1
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4798      	blx	r3
 800333c:	f894 513c 	ldrb.w	r5, [r4, #316]	; 0x13c
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 8003340:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80034a4 <USBD_SignalEndpointEvent_Handler+0x1d0>
 8003344:	232c      	movs	r3, #44	; 0x2c
 8003346:	fb03 4606 	mla	r6, r3, r6, r4
 800334a:	2200      	movs	r2, #0
      ep->InInUse = (uint8_t)0;
 800334c:	8933      	ldrh	r3, [r6, #8]
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 800334e:	61f2      	str	r2, [r6, #28]
      ep->InInUse = (uint8_t)0;
 8003350:	f362 1304 	bfi	r3, r2, #4, #1
 8003354:	8133      	strh	r3, [r6, #8]
      switch (device.CurrentEndpoint)
 8003356:	b92d      	cbnz	r5, 8003364 <USBD_SignalEndpointEvent_Handler+0x90>
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 8003358:	f899 313b 	ldrb.w	r3, [r9, #315]	; 0x13b
 800335c:	2b02      	cmp	r3, #2
 800335e:	d078      	beq.n	8003452 <USBD_SignalEndpointEvent_Handler+0x17e>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 8003360:	2b03      	cmp	r3, #3
 8003362:	d04e      	beq.n	8003402 <USBD_SignalEndpointEvent_Handler+0x12e>
      }
      break;
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 8003364:	f884 813c 	strb.w	r8, [r4, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 8003368:	f884 713d 	strb.w	r7, [r4, #317]	; 0x13d
 800336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 8003370:	232c      	movs	r3, #44	; 0x2c
 8003372:	fb03 4305 	mla	r3, r3, r5, r4
 8003376:	891a      	ldrh	r2, [r3, #8]
 8003378:	f36f 02c3 	bfc	r2, #3, #1
 800337c:	811a      	strh	r2, [r3, #8]
      switch (device.CurrentEndpoint)
 800337e:	2d00      	cmp	r5, #0
 8003380:	d1f0      	bne.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
static void USBD_HandleEP0_SETUP()
{
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	4e48      	ldr	r6, [pc, #288]	; (80034a8 <USBD_SignalEndpointEvent_Handler+0x1d4>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4631      	mov	r1, r6
 800338a:	4628      	mov	r0, r5
 800338c:	2208      	movs	r2, #8
 800338e:	4798      	blx	r3
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8003390:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 8003394:	2808      	cmp	r0, #8
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 800339e:	d1e1      	bne.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 80033a0:	f8b6 9006 	ldrh.w	r9, [r6, #6]
 80033a4:	fa1f f989 	uxth.w	r9, r9
 80033a8:	f1b9 0f00 	cmp.w	r9, #0
 80033ac:	d068      	beq.n	8003480 <USBD_SignalEndpointEvent_Handler+0x1ac>
      USBD_Handle_DeviceRequest();
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 80033ae:	7833      	ldrb	r3, [r6, #0]
 80033b0:	0619      	lsls	r1, r3, #24
 80033b2:	d471      	bmi.n	8003498 <USBD_SignalEndpointEvent_Handler+0x1c4>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 80033b4:	88f1      	ldrh	r1, [r6, #6]
 80033b6:	6823      	ldr	r3, [r4, #0]
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
        USBD_Handle_DeviceRequest();
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 80033b8:	2204      	movs	r2, #4
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
        USBD_Handle_DeviceRequest();
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 80033bc:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 80033c0:	b289      	uxth	r1, r1
 80033c2:	4628      	mov	r0, r5
 80033c4:	4798      	blx	r3
 80033c6:	e7cd      	b.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
        default:
          break;
      }
      break;
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 80033c8:	232c      	movs	r3, #44	; 0x2c
 80033ca:	fb03 4305 	mla	r3, r3, r5, r4
 80033ce:	4699      	mov	r9, r3
 80033d0:	891a      	ldrh	r2, [r3, #8]
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	f829 2f08 	strh.w	r2, [r9, #8]!
      if (ep->OutBytesAvailable == 0U)
 80033da:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80033de:	b1da      	cbz	r2, 8003418 <USBD_SignalEndpointEvent_Handler+0x144>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 80033e0:	232c      	movs	r3, #44	; 0x2c
 80033e2:	fb03 4606 	mla	r6, r3, r6, r4
 80033e6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80034a4 <USBD_SignalEndpointEvent_Handler+0x1d0>
 80033ea:	8933      	ldrh	r3, [r6, #8]
 80033ec:	f36f 03c3 	bfc	r3, #3, #1
 80033f0:	8133      	strh	r3, [r6, #8]
      switch (device.CurrentEndpoint)
 80033f2:	2d00      	cmp	r5, #0
 80033f4:	d1b6      	bne.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 80033f6:	f899 313b 	ldrb.w	r3, [r9, #315]	; 0x13b
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d033      	beq.n	8003466 <USBD_SignalEndpointEvent_Handler+0x192>
    USBD_Handle_DeviceRequest();
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d1b0      	bne.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8003402:	f8d9 3000 	ldr.w	r3, [r9]
 8003406:	f899 0004 	ldrb.w	r0, [r9, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	2118      	movs	r1, #24
 800340e:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8003410:	2301      	movs	r3, #1
 8003412:	f889 313b 	strb.w	r3, [r9, #315]	; 0x13b
 8003416:	e7a5      	b.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
      if (ep->OutBytesAvailable == 0U)
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 8003418:	6821      	ldr	r1, [r4, #0]
      break;
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
      if (ep->OutBytesAvailable == 0U)
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 800341a:	f8c9 2008 	str.w	r2, [r9, #8]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 800341e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8003420:	7918      	ldrb	r0, [r3, #4]
 8003422:	6959      	ldr	r1, [r3, #20]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	47a8      	blx	r5
 8003428:	f894 513c 	ldrb.w	r5, [r4, #316]	; 0x13c
 800342c:	f8c9 0004 	str.w	r0, [r9, #4]
 8003430:	e7d6      	b.n	80033e0 <USBD_SignalEndpointEvent_Handler+0x10c>
      break;
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8003432:	6821      	ldr	r1, [r4, #0]
 8003434:	7918      	ldrb	r0, [r3, #4]
 8003436:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8003438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800343a:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800343e:	47b0      	blx	r6
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
 8003440:	686a      	ldr	r2, [r5, #4]
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
 8003442:	f8d9 3008 	ldr.w	r3, [r9, #8]
        ep->InDataBuffer += (uint32_t)data_count;
 8003446:	4402      	add	r2, r0
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
 8003448:	1a1b      	subs	r3, r3, r0
        ep->InDataBuffer += (uint32_t)data_count;
 800344a:	606a      	str	r2, [r5, #4]
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
 800344c:	f8c9 3008 	str.w	r3, [r9, #8]
        ep->InDataBuffer += (uint32_t)data_count;
        break;
 8003450:	e788      	b.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
static void USBD_HandleEP0_IN()
{
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 8003452:	f8d9 3000 	ldr.w	r3, [r9]
 8003456:	4628      	mov	r0, r5
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	4629      	mov	r1, r5
 800345c:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 800345e:	2305      	movs	r3, #5
 8003460:	f889 313b 	strb.w	r3, [r9, #315]	; 0x13b
 8003464:	e77e      	b.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
static void USBD_HandleEP0_OUT()
{
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 8003466:	f7ff fda7 	bl	8002fb8 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 800346a:	f8d9 3000 	ldr.w	r3, [r9]
 800346e:	4628      	mov	r0, r5
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4629      	mov	r1, r5
 8003474:	462a      	mov	r2, r5
 8003476:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8003478:	2303      	movs	r3, #3
 800347a:	f889 313b 	strb.w	r3, [r9, #315]	; 0x13b
 800347e:	e771      	b.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8003480:	2303      	movs	r3, #3
 8003482:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 8003486:	f7ff fd97 	bl	8002fb8 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	4648      	mov	r0, r9
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4649      	mov	r1, r9
 8003492:	464a      	mov	r2, r9
 8003494:	4798      	blx	r3
 8003496:	e765      	b.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 8003498:	2302      	movs	r3, #2
 800349a:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 800349e:	f7ff fd8b 	bl	8002fb8 <USBD_Handle_DeviceRequest>
 80034a2:	e75f      	b.n	8003364 <USBD_SignalEndpointEvent_Handler+0x90>
 80034a4:	1fff0670 	.word	0x1fff0670
 80034a8:	1fff0468 	.word	0x1fff0468

080034ac <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 80034ac:	b570      	push	{r4, r5, r6, lr}
	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
 80034ae:	4c3c      	ldr	r4, [pc, #240]	; (80035a0 <USBD_Init+0xf4>)
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 80034b0:	4605      	mov	r5, r0


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 80034b2:	f7fe fdc5 	bl	8002040 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 80034b6:	2100      	movs	r1, #0
 80034b8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80034bc:	4620      	mov	r0, r4
 80034be:	f00a f878 	bl	800d5b2 <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <USBD_Init+0xf8>)
	device.Driver = &Driver_USBD0;
 80034c4:	4838      	ldr	r0, [pc, #224]	; (80035a8 <USBD_Init+0xfc>)
 80034c6:	6020      	str	r0, [r4, #0]
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 80034c8:	2601      	movs	r6, #1
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 80034ca:	2000      	movs	r0, #0
 80034cc:	7018      	strb	r0, [r3, #0]
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 80034ce:	7226      	strb	r6, [r4, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 80034d0:	8923      	ldrh	r3, [r4, #8]
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80034d2:	4a36      	ldr	r2, [pc, #216]	; (80035ac <USBD_Init+0x100>)
 80034d4:	6162      	str	r2, [r4, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	8123      	strh	r3, [r4, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 80034dc:	8923      	ldrh	r3, [r4, #8]

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80034de:	4934      	ldr	r1, [pc, #208]	; (80035b0 <USBD_Init+0x104>)
 80034e0:	6221      	str	r1, [r4, #32]
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	f362 138c 	bfi	r3, r2, #6, #7
 80034e8:	8123      	strh	r3, [r4, #8]

	if ((handle->event_cb->control_request == 0) ||
 80034ea:	692b      	ldr	r3, [r5, #16]
 80034ec:	68d9      	ldr	r1, [r3, #12]
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
 80034ee:	f884 613b 	strb.w	r6, [r4, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 80034f2:	f44f 7280 	mov.w	r2, #256	; 0x100
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
 80034f6:	4630      	mov	r0, r6
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 80034f8:	6262      	str	r2, [r4, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 80034fa:	61a2      	str	r2, [r4, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 80034fc:	b321      	cbz	r1, 8003548 <USBD_Init+0x9c>
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	b312      	cbz	r2, 8003548 <USBD_Init+0x9c>
	    (handle->event_cb->get_descriptor == 0) ||
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	b302      	cbz	r2, 8003548 <USBD_Init+0x9c>
	{
	  status = USBD_STATUS_FAILURE;
	}
	else
	{
	  device.events = handle->event_cb;
 8003506:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 800350a:	f7fc ff7d 	bl	8000408 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 800350e:	6823      	ldr	r3, [r4, #0]
	  device.events = handle->event_cb;

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 8003510:	4928      	ldr	r1, [pc, #160]	; (80035b4 <USBD_Init+0x108>)
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8003512:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <USBD_Init+0x10c>)

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 8003514:	685b      	ldr	r3, [r3, #4]
	  device.events = handle->event_cb;

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 8003516:	6069      	str	r1, [r5, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8003518:	60aa      	str	r2, [r5, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 800351a:	4628      	mov	r0, r5
 800351c:	4798      	blx	r3
	  if (USBD_STATUS_SUCCESS == status)
 800351e:	4605      	mov	r5, r0
 8003520:	b1a8      	cbz	r0, 800354e <USBD_Init+0xa2>
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
	  {
	  XMC_USBD_Disable();
 8003522:	f7fe fd8d 	bl	8002040 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4798      	blx	r3
 800352c:	b950      	cbnz	r0, 8003544 <USBD_Init+0x98>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <USBD_Init+0x110>)
 8003530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003534:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800353c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003540:	f3bf 8f6f 	isb	sy
	  }
	}


	return status;
}
 8003544:	4628      	mov	r0, r5
 8003546:	bd70      	pop	{r4, r5, r6, pc}

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8003548:	4605      	mov	r5, r0
	  }
	}


	return status;
}
 800354a:	4628      	mov	r0, r5
 800354c:	bd70      	pop	{r4, r5, r6, pc}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <USBD_Init+0x114>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003556:	f1c3 0107 	rsb	r1, r3, #7
 800355a:	2906      	cmp	r1, #6
 800355c:	bf28      	it	cs
 800355e:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003560:	b1db      	cbz	r3, 800359a <USBD_Init+0xee>
 8003562:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	2301      	movs	r3, #1
 8003566:	408b      	lsls	r3, r1
 8003568:	3b01      	subs	r3, #1
 800356a:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 800356e:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <USBD_Init+0x110>)
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800357a:	6823      	ldr	r3, [r4, #0]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003580:	2000      	movs	r0, #0
 8003582:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
 8003586:	69db      	ldr	r3, [r3, #28]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003588:	60d1      	str	r1, [r2, #12]
 800358a:	4601      	mov	r1, r0
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	4798      	blx	r3
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 8003590:	4605      	mov	r5, r0
 8003592:	2800      	cmp	r0, #0
 8003594:	d1c5      	bne.n	8003522 <USBD_Init+0x76>
	  }
	}


	return status;
}
 8003596:	4628      	mov	r0, r5
 8003598:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	461a      	mov	r2, r3
 800359c:	e7e2      	b.n	8003564 <USBD_Init+0xb8>
 800359e:	bf00      	nop
 80035a0:	1fff0670 	.word	0x1fff0670
 80035a4:	1fff0465 	.word	0x1fff0465
 80035a8:	0800d7e8 	.word	0x0800d7e8
 80035ac:	1fff0570 	.word	0x1fff0570
 80035b0:	1fff0470 	.word	0x1fff0470
 80035b4:	08002c8d 	.word	0x08002c8d
 80035b8:	080032d5 	.word	0x080032d5
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <USBD_Connect>:
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 80035c4:	4b01      	ldr	r3, [pc, #4]	; (80035cc <USBD_Connect+0x8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4718      	bx	r3
 80035cc:	1fff0670 	.word	0x1fff0670

080035d0 <USBD_IsEnumDone>:
 * Check with the USB device controller driver if the enumeration is done.
 * Returns 1 on completion of enumeration.
 */
uint32_t USBD_IsEnumDone(void)
{
  return device.Driver->IsEnumDone();
 80035d0:	4b01      	ldr	r3, [pc, #4]	; (80035d8 <USBD_IsEnumDone+0x8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	4718      	bx	r3
 80035d8:	1fff0670 	.word	0x1fff0670

080035dc <USBD_SetEndpointBuffer>:
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 80035dc:	f010 0f80 	tst.w	r0, #128	; 0x80
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 80035e0:	b410      	push	{r4}
  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
  {
    device.Endpoints[number].InBuffer = buf;
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <USBD_SetEndpointBuffer+0x30>)
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 80035e4:	f000 040f 	and.w	r4, r0, #15
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
  {
    device.Endpoints[number].InBuffer = buf;
 80035e8:	f04f 002c 	mov.w	r0, #44	; 0x2c
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 80035ec:	d106      	bne.n	80035fc <USBD_SetEndpointBuffer+0x20>
    device.Endpoints[number].InBuffer = buf;
    device.Endpoints[number].InBufferLength = len;
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 80035ee:	fb00 3304 	mla	r3, r0, r4, r3
    device.Endpoints[number].OutBufferLength = len;
  }

}
 80035f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    device.Endpoints[number].InBuffer = buf;
    device.Endpoints[number].InBufferLength = len;
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 80035f6:	6159      	str	r1, [r3, #20]
    device.Endpoints[number].OutBufferLength = len;
 80035f8:	619a      	str	r2, [r3, #24]
  }

}
 80035fa:	4770      	bx	lr
  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
  {
    device.Endpoints[number].InBuffer = buf;
 80035fc:	fb00 3404 	mla	r4, r0, r4, r3
 8003600:	6221      	str	r1, [r4, #32]
    device.Endpoints[number].InBufferLength = len;
 8003602:	6262      	str	r2, [r4, #36]	; 0x24
  {
    device.Endpoints[number].OutBuffer = buf;
    device.Endpoints[number].OutBufferLength = len;
  }

}
 8003604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	1fff0670 	.word	0x1fff0670

08003610 <USB0_0_IRQHandler>:
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 8003610:	4b01      	ldr	r3, [pc, #4]	; (8003618 <USB0_0_IRQHandler+0x8>)
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	f7fe b8a8 	b.w	8001768 <XMC_USBD_IRQHandler>
 8003618:	1ffed034 	.word	0x1ffed034

0800361c <UART_Init>:
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 800361c:	6843      	ldr	r3, [r0, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4718      	bx	r3
 8003622:	bf00      	nop

08003624 <UART_Transmit>:
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8003624:	6843      	ldr	r3, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8003626:	b470      	push	{r4, r5, r6}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8003628:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 800362c:	b114      	cbz	r4, 8003634 <UART_Transmit+0x10>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 800362e:	2004      	movs	r0, #4
#endif
  default:
    break;
  }
  return ret_stat;
}
 8003630:	bc70      	pop	{r4, r5, r6}
 8003632:	4770      	bx	lr
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8003634:	6885      	ldr	r5, [r0, #8]
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
 8003636:	7e2c      	ldrb	r4, [r5, #24]
 8003638:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 800363c:	b114      	cbz	r4, 8003644 <UART_Transmit+0x20>
  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 800363e:	2002      	movs	r0, #2
#endif
  default:
    break;
  }
  return ret_stat;
}
 8003640:	bc70      	pop	{r4, r5, r6}
 8003642:	4770      	bx	lr
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8003644:	b101      	cbz	r1, 8003648 <UART_Transmit+0x24>
 8003646:	b90a      	cbnz	r2, 800364c <UART_Transmit+0x28>
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8003648:	2003      	movs	r0, #3
 800364a:	e7f1      	b.n	8003630 <UART_Transmit+0xc>
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800364c:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8003650:	6029      	str	r1, [r5, #0]
        ptr_runtime->tx_data_count = count;
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;
 8003652:	2101      	movs	r1, #1
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
        ptr_runtime->tx_data_count = count;
 8003654:	60aa      	str	r2, [r5, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8003656:	60ee      	str	r6, [r5, #12]
        ptr_runtime->tx_busy = true;
 8003658:	7629      	strb	r1, [r5, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 800365a:	6802      	ldr	r2, [r0, #0]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800365c:	b18c      	cbz	r4, 8003682 <UART_Transmit+0x5e>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 800365e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003662:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 8003666:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
 800366a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800366e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8003672:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8003676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800367a:	408b      	lsls	r3, r1
 800367c:	6693      	str	r3, [r2, #104]	; 0x68
 800367e:	2000      	movs	r0, #0
 8003680:	e7d6      	b.n	8003630 <UART_Transmit+0xc>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8003682:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003684:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8003688:	6411      	str	r1, [r2, #64]	; 0x40
 800368a:	e7f2      	b.n	8003672 <UART_Transmit+0x4e>

0800368c <UART_Receive>:
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 800368c:	6843      	ldr	r3, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800368e:	b570      	push	{r4, r5, r6, lr}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 8003690:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 8003694:	b10c      	cbz	r4, 800369a <UART_Receive+0xe>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8003696:	2004      	movs	r0, #4
 8003698:	bd70      	pop	{r4, r5, r6, pc}
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 800369a:	6885      	ldr	r5, [r0, #8]
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
 800369c:	7e6c      	ldrb	r4, [r5, #25]
 800369e:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 80036a2:	b10c      	cbz	r4, 80036a8 <UART_Receive+0x1c>
  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 80036a4:	2002      	movs	r0, #2
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
    if (ptr_runtime->rx_busy == false)
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 80036a8:	b101      	cbz	r1, 80036ac <UART_Receive+0x20>
 80036aa:	b90a      	cbnz	r2, 80036b0 <UART_Receive+0x24>
        }
        ret_stat = UART_STATUS_SUCCESS;
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 80036ac:	2003      	movs	r0, #3
#endif
  default:
    break;
  }
  return ret_stat;
}
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
        ptr_runtime->rx_data_index = 0U;

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80036b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 80036b4:	6069      	str	r1, [r5, #4]
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
 80036b6:	2101      	movs	r1, #1
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
 80036b8:	612a      	str	r2, [r5, #16]
        ptr_runtime->rx_busy = true;
        ptr_runtime->rx_data_index = 0U;
 80036ba:	616e      	str	r6, [r5, #20]
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
 80036bc:	7669      	strb	r1, [r5, #25]
        ptr_runtime->rx_data_index = 0U;

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80036be:	b933      	cbnz	r3, 80036ce <UART_Receive+0x42>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 80036c0:	6801      	ldr	r1, [r0, #0]
 80036c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80036c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80036c8:	4618      	mov	r0, r3
 80036ca:	640a      	str	r2, [r1, #64]	; 0x40
 80036cc:	bd70      	pop	{r4, r5, r6, pc}

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 80036ce:	6804      	ldr	r4, [r0, #0]
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 80036d0:	4099      	lsls	r1, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80036d2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 80036d6:	428a      	cmp	r2, r1
 80036d8:	4625      	mov	r5, r4
 80036da:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
 80036de:	4604      	mov	r4, r0
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 80036e0:	bf2c      	ite	cs
 80036e2:	f101 32ff 	addcs.w	r2, r1, #4294967295
  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 80036e6:	f102 32ff 	addcc.w	r2, r2, #4294967295
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 80036ea:	4628      	mov	r0, r5
 80036ec:	4619      	mov	r1, r3
 80036ee:	f7fe fd67 	bl	80021c0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 80036f2:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 80036f4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80036f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80036fc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8003700:	2000      	movs	r0, #0
 8003702:	bd70      	pop	{r4, r5, r6, pc}

08003704 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8003704:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8003706:	6884      	ldr	r4, [r0, #8]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	68a2      	ldr	r2, [r4, #8]
 800370c:	4293      	cmp	r3, r2
 800370e:	d21b      	bcs.n	8003748 <UART_lTransmitHandler+0x44>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8003710:	6842      	ldr	r2, [r0, #4]
 8003712:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8003716:	4605      	mov	r5, r0
 8003718:	2a00      	cmp	r2, #0
 800371a:	d035      	beq.n	8003788 <UART_lTransmitHandler+0x84>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 800371c:	6800      	ldr	r0, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800371e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8003722:	04d2      	lsls	r2, r2, #19
 8003724:	d503      	bpl.n	800372e <UART_lTransmitHandler+0x2a>
 8003726:	e038      	b.n	800379a <UART_lTransmitHandler+0x96>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003728:	68a2      	ldr	r2, [r4, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	d924      	bls.n	8003778 <UART_lTransmitHandler+0x74>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	5cd1      	ldrb	r1, [r2, r3]
 8003732:	f7fd fafb 	bl	8000d2c <XMC_UART_CH_Transmit>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003736:	6828      	ldr	r0, [r5, #0]
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
          (ptr_runtime->tx_data_index)++;
 8003738:	68e3      	ldr	r3, [r4, #12]
 800373a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 800373e:	3301      	adds	r3, #1
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003740:	04d6      	lsls	r6, r2, #19
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
          (ptr_runtime->tx_data_index)++;
 8003742:	60e3      	str	r3, [r4, #12]
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003744:	d5f0      	bpl.n	8003728 <UART_lTransmitHandler+0x24>
 8003746:	bd70      	pop	{r4, r5, r6, pc}
      (ptr_runtime->tx_data_index)++;
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8003748:	6802      	ldr	r2, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 800374a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 800374e:	0519      	lsls	r1, r3, #20
 8003750:	d512      	bpl.n	8003778 <UART_lTransmitHandler+0x74>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8003752:	6841      	ldr	r1, [r0, #4]
 8003754:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8003758:	b97b      	cbnz	r3, 800377a <UART_lTransmitHandler+0x76>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 800375a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800375c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8003762:	6b93      	ldr	r3, [r2, #56]	; 0x38
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	d4fc      	bmi.n	8003762 <UART_lTransmitHandler+0x5e>
      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
      ptr_runtime->tx_data = NULL;

      if (handle->config->tx_cbhandler != NULL)
 8003768:	688a      	ldr	r2, [r1, #8]
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 800376a:	2300      	movs	r3, #0
 800376c:	7623      	strb	r3, [r4, #24]
      ptr_runtime->tx_data = NULL;
 800376e:	6023      	str	r3, [r4, #0]

      if (handle->config->tx_cbhandler != NULL)
 8003770:	b112      	cbz	r2, 8003778 <UART_lTransmitHandler+0x74>
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
      }
    }
  }
}
 8003772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ptr_runtime->tx_data = NULL;

      if (handle->config->tx_cbhandler != NULL)
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8003776:	4710      	bx	r2
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 800377a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800377e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003782:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8003786:	e7ec      	b.n	8003762 <UART_lTransmitHandler+0x5e>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8003788:	6822      	ldr	r2, [r4, #0]
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	5cd1      	ldrb	r1, [r2, r3]
 800378e:	f7fd facd 	bl	8000d2c <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8003792:	68e3      	ldr	r3, [r4, #12]
 8003794:	3301      	adds	r3, #1
 8003796:	60e3      	str	r3, [r4, #12]
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	bd70      	pop	{r4, r5, r6, pc}

0800379c <UART_lReceiveHandler>:
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800379c:	6843      	ldr	r3, [r0, #4]
 800379e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 80037a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a6:	4606      	mov	r6, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80037a8:	6885      	ldr	r5, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80037aa:	b343      	cbz	r3, 80037fe <UART_lReceiveHandler+0x62>
 80037ac:	696c      	ldr	r4, [r5, #20]
 80037ae:	692b      	ldr	r3, [r5, #16]
 80037b0:	6800      	ldr	r0, [r0, #0]
 80037b2:	e001      	b.n	80037b8 <UART_lReceiveHandler+0x1c>
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
        (ptr_runtime->rx_data_index)++;
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80037b4:	429c      	cmp	r4, r3
 80037b6:	d010      	beq.n	80037da <UART_lReceiveHandler+0x3e>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80037b8:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 80037bc:	0712      	lsls	r2, r2, #28
 80037be:	d41a      	bmi.n	80037f6 <UART_lReceiveHandler+0x5a>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80037c0:	42a3      	cmp	r3, r4
 80037c2:	d9f7      	bls.n	80037b4 <UART_lReceiveHandler+0x18>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 80037c4:	686f      	ldr	r7, [r5, #4]
 80037c6:	f7fd fac3 	bl	8000d50 <XMC_UART_CH_GetReceivedData>
 80037ca:	5538      	strb	r0, [r7, r4]
        (ptr_runtime->rx_data_index)++;
 80037cc:	696c      	ldr	r4, [r5, #20]
 80037ce:	692b      	ldr	r3, [r5, #16]
 80037d0:	6830      	ldr	r0, [r6, #0]
 80037d2:	3401      	adds	r4, #1
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80037d4:	429c      	cmp	r4, r3
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
        (ptr_runtime->rx_data_index)++;
 80037d6:	616c      	str	r4, [r5, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80037d8:	d1ee      	bne.n	80037b8 <UART_lReceiveHandler+0x1c>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 80037da:	2300      	movs	r3, #0
 80037dc:	766b      	strb	r3, [r5, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 80037de:	6872      	ldr	r2, [r6, #4]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 80037e0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037ea:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80037ee:	b122      	cbz	r2, 80037fa <UART_lReceiveHandler+0x5e>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 80037f0:	4790      	blx	r2
 80037f2:	696c      	ldr	r4, [r5, #20]
 80037f4:	692b      	ldr	r3, [r5, #16]
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80037f6:	429c      	cmp	r4, r3
 80037f8:	d315      	bcc.n	8003826 <UART_lReceiveHandler+0x8a>
 80037fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80037fe:	696c      	ldr	r4, [r5, #20]
 8003800:	692b      	ldr	r3, [r5, #16]
 8003802:	429c      	cmp	r4, r3
 8003804:	d321      	bcc.n	800384a <UART_lReceiveHandler+0xae>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      (ptr_runtime->rx_data_index)++;
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8003806:	429c      	cmp	r4, r3
 8003808:	d1f7      	bne.n	80037fa <UART_lReceiveHandler+0x5e>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 800380a:	6832      	ldr	r2, [r6, #0]
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 800380c:	6871      	ldr	r1, [r6, #4]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 800380e:	2300      	movs	r3, #0
 8003810:	766b      	strb	r3, [r5, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8003812:	6c13      	ldr	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8003814:	68c9      	ldr	r1, [r1, #12]
 8003816:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800381a:	6413      	str	r3, [r2, #64]	; 0x40
 800381c:	2900      	cmp	r1, #0
 800381e:	d0ec      	beq.n	80037fa <UART_lReceiveHandler+0x5e>
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 8003820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8003824:	4708      	bx	r1
 8003826:	e896 0005 	ldmia.w	r6, {r0, r2}
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 800382a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800382e:	2201      	movs	r2, #1
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8003830:	1b1c      	subs	r4, r3, r4
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8003832:	fa02 f301 	lsl.w	r3, r2, r1
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8003836:	429c      	cmp	r4, r3
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8003838:	bf34      	ite	cc
 800383a:	f104 32ff 	addcc.w	r2, r4, #4294967295
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 800383e:	f103 32ff 	addcs.w	r2, r3, #4294967295
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 8003842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8003846:	f7fe bcbb 	b.w	80021c0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	686f      	ldr	r7, [r5, #4]
 800384e:	f7fd fa7f 	bl	8000d50 <XMC_UART_CH_GetReceivedData>
 8003852:	5538      	strb	r0, [r7, r4]
      (ptr_runtime->rx_data_index)++;
 8003854:	696c      	ldr	r4, [r5, #20]
 8003856:	692b      	ldr	r3, [r5, #16]
 8003858:	3401      	adds	r4, #1
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800385a:	429c      	cmp	r4, r3
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      (ptr_runtime->rx_data_index)++;
 800385c:	616c      	str	r4, [r5, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800385e:	d1cc      	bne.n	80037fa <UART_lReceiveHandler+0x5e>
 8003860:	e7d3      	b.n	800380a <UART_lReceiveHandler+0x6e>
 8003862:	bf00      	nop

08003864 <cunit_logger_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
 8003864:	b510      	push	{r4, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 2U, &cunit_logger_rx_pin_config);
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
 8003866:	4c38      	ldr	r4, [pc, #224]	; (8003948 <cunit_logger_init+0xe4>)
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 2U, &cunit_logger_rx_pin_config);
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <cunit_logger_init+0xe8>)
 800386a:	4839      	ldr	r0, [pc, #228]	; (8003950 <cunit_logger_init+0xec>)
 800386c:	2102      	movs	r1, #2
 800386e:	f7fc fd15 	bl	800029c <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
 8003872:	4620      	mov	r0, r4
 8003874:	4937      	ldr	r1, [pc, #220]	; (8003954 <cunit_logger_init+0xf0>)
 8003876:	f7fd fa27 	bl	8000cc8 <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800387a:	69e3      	ldr	r3, [r4, #28]
 800387c:	f023 0307 	bic.w	r3, r3, #7
 8003880:	61e3      	str	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 0U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
 8003882:	4620      	mov	r0, r4
 8003884:	2110      	movs	r1, #16
 8003886:	2204      	movs	r2, #4
 8003888:	2301      	movs	r3, #1
 800388a:	f7fe fc6b 	bl	8002164 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
 800388e:	2100      	movs	r1, #0
 8003890:	460b      	mov	r3, r1
 8003892:	4620      	mov	r0, r4
 8003894:	2204      	movs	r2, #4
 8003896:	f7fe fc7b 	bl	8002190 <XMC_USIC_CH_RXFIFO_Configure>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 800389a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 5U, &cunit_logger_tx_pin_config);
 800389c:	482c      	ldr	r0, [pc, #176]	; (8003950 <cunit_logger_init+0xec>)
 800389e:	4a2e      	ldr	r2, [pc, #184]	; (8003958 <cunit_logger_init+0xf4>)
 80038a0:	f023 030f 	bic.w	r3, r3, #15
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	6423      	str	r3, [r4, #64]	; 0x40
 80038aa:	2105      	movs	r1, #5
 80038ac:	f7fc fcf6 	bl	800029c <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 80038b0:	4620      	mov	r0, r4
 80038b2:	2110      	movs	r1, #16
 80038b4:	2200      	movs	r2, #0
 80038b6:	f7fe fc95 	bl	80021e4 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 80038ba:	4620      	mov	r0, r4
 80038bc:	2110      	movs	r1, #16
 80038be:	2204      	movs	r2, #4
 80038c0:	f7fe fc9c 	bl	80021fc <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      4U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 80038c4:	4620      	mov	r0, r4
 80038c6:	2110      	movs	r1, #16
 80038c8:	2205      	movs	r2, #5
 80038ca:	f7fe fca5 	bl	8002218 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 80038ce:	2113      	movs	r1, #19
 80038d0:	4620      	mov	r0, r4
 80038d2:	2205      	movs	r2, #5
 80038d4:	f7fe fca0 	bl	8002218 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <cunit_logger_init+0xf8>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e0:	f1c3 0107 	rsb	r1, r3, #7
 80038e4:	2906      	cmp	r1, #6
 80038e6:	bf28      	it	cs
 80038e8:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	b34b      	cbz	r3, 8003940 <cunit_logger_init+0xdc>
 80038ec:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ee:	2301      	movs	r3, #1
 80038f0:	408b      	lsls	r3, r1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80038f8:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4a18      	ldr	r2, [pc, #96]	; (8003960 <cunit_logger_init+0xfc>)
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038fe:	4917      	ldr	r1, [pc, #92]	; (800395c <cunit_logger_init+0xf8>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003906:	f882 3358 	strb.w	r3, [r2, #856]	; 0x358
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390a:	6090      	str	r0, [r2, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800390c:	68cb      	ldr	r3, [r1, #12]
 800390e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003912:	f1c3 0107 	rsb	r1, r3, #7
 8003916:	2906      	cmp	r1, #6
 8003918:	bf28      	it	cs
 800391a:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391c:	b193      	cbz	r3, 8003944 <cunit_logger_init+0xe0>
 800391e:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	2301      	movs	r3, #1
 8003922:	408b      	lsls	r3, r1
 8003924:	3b01      	subs	r3, #1
 8003926:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800392a:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <cunit_logger_init+0xfc>)
 8003930:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	f882 3359 	strb.w	r3, [r2, #857]	; 0x359
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                      62U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
  return status;
}
 800393a:	2000      	movs	r0, #0
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393c:	6091      	str	r1, [r2, #8]
 800393e:	bd10      	pop	{r4, pc}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003940:	461a      	mov	r2, r3
 8003942:	e7d4      	b.n	80038ee <cunit_logger_init+0x8a>
 8003944:	461a      	mov	r2, r3
 8003946:	e7eb      	b.n	8003920 <cunit_logger_init+0xbc>
 8003948:	40030200 	.word	0x40030200
 800394c:	0800da1c 	.word	0x0800da1c
 8003950:	48028200 	.word	0x48028200
 8003954:	0800d9f8 	.word	0x0800d9f8
 8003958:	0800da10 	.word	0x0800da10
 800395c:	e000ed00 	.word	0xe000ed00
 8003960:	e000e100 	.word	0xe000e100

08003964 <USIC0_4_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void cunit_logger_TX_HANDLER()
{
  UART_lTransmitHandler(&cunit_logger);
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <USIC0_4_IRQHandler+0x8>)
 8003966:	f7ff becd 	b.w	8003704 <UART_lTransmitHandler>
 800396a:	bf00      	nop
 800396c:	1ffed04c 	.word	0x1ffed04c

08003970 <USIC0_5_IRQHandler>:
}

/*Receive ISR*/
void cunit_logger_RX_HANDLER()
{
  UART_lReceiveHandler(&cunit_logger);
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <USIC0_5_IRQHandler+0x8>)
 8003972:	f7ff bf13 	b.w	800379c <UART_lReceiveHandler>
 8003976:	bf00      	nop
 8003978:	1ffed04c 	.word	0x1ffed04c

0800397c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 800397e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003982:	b943      	cbnz	r3, 8003996 <TIMER_Init+0x1a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003984:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 8003988:	4604      	mov	r4, r0
 800398a:	b13d      	cbz	r5, 800399c <TIMER_Init+0x20>
      status = TIMER_CCU4_lInit(handle_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800398c:	2d01      	cmp	r5, #1
{
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 800398e:	461e      	mov	r6, r3
      status = TIMER_CCU4_lInit(handle_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003990:	d02f      	beq.n	80039f2 <TIMER_Init+0x76>
    }
#endif
  }

  return (status);
}
 8003992:	4630      	mov	r0, r6
 8003994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8003996:	2600      	movs	r6, #0
    }
#endif
  }

  return (status);
}
 8003998:	4630      	mov	r0, r6
 800399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 800399c:	6900      	ldr	r0, [r0, #16]
 800399e:	f000 ff43 	bl	8004828 <GLOBAL_CCU4_Init>

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80039a2:	6923      	ldr	r3, [r4, #16]
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80039a4:	f894 e018 	ldrb.w	lr, [r4, #24]
 80039a8:	689f      	ldr	r7, [r3, #8]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80039aa:	69e1      	ldr	r1, [r4, #28]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	2301      	movs	r3, #1
 80039b0:	fa03 f30e 	lsl.w	r3, r3, lr
 80039b4:	4313      	orrs	r3, r2
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80039b6:	4606      	mov	r6, r0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80039b8:	6960      	ldr	r0, [r4, #20]
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	f7fc ff9a 	bl	80008f4 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80039c0:	6923      	ldr	r3, [r4, #16]
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80039c2:	6960      	ldr	r0, [r4, #20]
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80039c4:	689a      	ldr	r2, [r3, #8]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80039c6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80039ca:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80039cc:	68e1      	ldr	r1, [r4, #12]
 80039ce:	6347      	str	r7, [r0, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80039d0:	63c5      	str	r5, [r0, #60]	; 0x3c
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80039d2:	6111      	str	r1, [r2, #16]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d138      	bne.n	8003a4a <TIMER_Init+0xce>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80039d8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80039dc:	2102      	movs	r1, #2
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80039de:	2301      	movs	r3, #1
 80039e0:	6101      	str	r1, [r0, #16]
 80039e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80039e6:	b102      	cbz	r2, 80039ea <TIMER_Init+0x6e>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80039e8:	60c3      	str	r3, [r0, #12]
 80039ea:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
      status = TIMER_CCU4_lInit(handle_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80039ee:	2d01      	cmp	r5, #1
 80039f0:	d1cf      	bne.n	8003992 <TIMER_Init+0x16>
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 80039f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80039f4:	f000 ff04 	bl	8004800 <GLOBAL_CCU8_Init>

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 80039f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 80039fa:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
 80039fe:	689a      	ldr	r2, [r3, #8]
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8003a00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a02:	68d3      	ldr	r3, [r2, #12]
 8003a04:	40bd      	lsls	r5, r7
 8003a06:	431d      	orrs	r5, r3
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 8003a08:	4606      	mov	r6, r0

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8003a0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003a0c:	60d5      	str	r5, [r2, #12]
 8003a0e:	f7fc ffdb 	bl	80009c8 <XMC_CCU8_SLICE_CompareInit>
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8003a12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003a14:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003a16:	f7fc fff5 	bl	8000a04 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003a20:	f7fc fffa 	bl	8000a18 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8003a24:	6a62      	ldr	r2, [r4, #36]	; 0x24
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8003a26:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	68e1      	ldr	r1, [r4, #12]
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003a2e:	6111      	str	r1, [r2, #16]
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8003a30:	b9c3      	cbnz	r3, 8003a64 <TIMER_Init+0xe8>
 8003a32:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003a34:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8003a38:	2002      	movs	r0, #2
#endif
  /* Clears the timer register */
  XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	6118      	str	r0, [r3, #16]
 8003a3e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003a42:	2900      	cmp	r1, #0
 8003a44:	d0a5      	beq.n	8003992 <TIMER_Init+0x16>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	e7a3      	b.n	8003992 <TIMER_Init+0x16>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003a50:	f7fc ff72 	bl	8000938 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003a54:	6960      	ldr	r0, [r4, #20]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003a56:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8003a62:	e7b9      	b.n	80039d8 <TIMER_Init+0x5c>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8003a64:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003a68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f7fc ffda 	bl	8000a24 <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8003a70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003a72:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8003a7e:	e7d9      	b.n	8003a34 <TIMER_Init+0xb8>

08003a80 <TIMER_Start>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8003a80:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003a84:	b16b      	cbz	r3, 8003aa2 <TIMER_Start+0x22>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003a86:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003a8a:	b12b      	cbz	r3, 8003a98 <TIMER_Start+0x18>
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10a      	bne.n	8003aa6 <TIMER_Start+0x26>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8003a90:	6a82      	ldr	r2, [r0, #40]	; 0x28
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003a92:	2000      	movs	r0, #0
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8003a94:	60d3      	str	r3, [r2, #12]
 8003a96:	4770      	bx	lr
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8003a98:	6942      	ldr	r2, [r0, #20]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003a9a:	2101      	movs	r1, #1
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	60d1      	str	r1, [r2, #12]
 8003aa0:	4770      	bx	lr
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	4770      	bx	lr
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003aa6:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop

08003aac <TIMER_Stop>:
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003aac:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003ab0:	b972      	cbnz	r2, 8003ad0 <TIMER_Stop+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8003ab2:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8003aba:	b15b      	cbz	r3, 8003ad4 <TIMER_Stop+0x28>
 8003abc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003ac0:	b143      	cbz	r3, 8003ad4 <TIMER_Stop+0x28>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003ac2:	b172      	cbz	r2, 8003ae2 <TIMER_Stop+0x36>
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003ac4:	2a01      	cmp	r2, #1
 8003ac6:	d111      	bne.n	8003aec <TIMER_Stop+0x40>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8003ac8:	6a83      	ldr	r3, [r0, #40]	; 0x28
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003aca:	2000      	movs	r0, #0
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	4770      	bx	lr
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003ad0:	2a01      	cmp	r2, #1
 8003ad2:	d001      	beq.n	8003ad8 <TIMER_Stop+0x2c>
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	4770      	bx	lr

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 8003ad8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	e7eb      	b.n	8003aba <TIMER_Stop+0xe>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8003ae2:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8003ae4:	2101      	movs	r1, #1
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	6119      	str	r1, [r3, #16]
 8003aea:	4770      	bx	lr
 8003aec:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003aee:	4770      	bx	lr

08003af0 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8003af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003af4:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
 8003af8:	2e00      	cmp	r6, #0
 8003afa:	d15f      	bne.n	8003bbc <TIMER_SetTimeInterval+0xcc>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8003afc:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d156      	bne.n	8003bb6 <TIMER_SetTimeInterval+0xc6>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8003b08:	6883      	ldr	r3, [r0, #8]
 8003b0a:	428b      	cmp	r3, r1
 8003b0c:	d853      	bhi.n	8003bb6 <TIMER_SetTimeInterval+0xc6>
 8003b0e:	6845      	ldr	r5, [r0, #4]
 8003b10:	42a9      	cmp	r1, r5
 8003b12:	d850      	bhi.n	8003bb6 <TIMER_SetTimeInterval+0xc6>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003b14:	ebb1 3fd5 	cmp.w	r1, r5, lsr #15
 8003b18:	f240 8091 	bls.w	8003c3e <TIMER_SetTimeInterval+0x14e>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f1c3 020e 	rsb	r2, r3, #14
 8003b22:	fa25 f202 	lsr.w	r2, r5, r2
      {
        lprescaler++;
 8003b26:	1c5c      	adds	r4, r3, #1
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003b28:	4291      	cmp	r1, r2
      {
        lprescaler++;
 8003b2a:	4623      	mov	r3, r4
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003b2c:	d8f7      	bhi.n	8003b1e <TIMER_SetTimeInterval+0x2e>
 8003b2e:	460d      	mov	r5, r1
 8003b30:	4607      	mov	r7, r0
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003b32:	2e00      	cmp	r6, #0
 8003b34:	d04b      	beq.n	8003bce <TIMER_SetTimeInterval+0xde>
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8003b36:	2001      	movs	r0, #1
        status = TIMER_STATUS_SUCCESS;
      }
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003b38:	2e01      	cmp	r6, #1
 8003b3a:	d13d      	bne.n	8003bb8 <TIMER_SetTimeInterval+0xc8>
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003b3e:	f8d7 e030 	ldr.w	lr, [r7, #48]	; 0x30
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8003b42:	681a      	ldr	r2, [r3, #0]
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003b44:	f89e c00c 	ldrb.w	ip, [lr, #12]
 8003b48:	f004 060f 	and.w	r6, r4, #15
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003b4c:	fba5 2302 	umull	r2, r3, r5, r2
 8003b50:	f1c6 0120 	rsb	r1, r6, #32
 8003b54:	fa22 f006 	lsr.w	r0, r2, r6
 8003b58:	fa03 f101 	lsl.w	r1, r3, r1
 8003b5c:	f1a6 0220 	sub.w	r2, r6, #32
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003b60:	f364 0c03 	bfi	ip, r4, #0, #4
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003b64:	4308      	orrs	r0, r1
 8003b66:	fa23 f202 	lsr.w	r2, r3, r2
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003b6a:	f88e c00c 	strb.w	ip, [lr, #12]
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 8003b6e:	fa23 f106 	lsr.w	r1, r3, r6
 8003b72:	4310      	orrs	r0, r2
 8003b74:	a334      	add	r3, pc, #208	; (adr r3, 8003c48 <TIMER_SetTimeInterval+0x158>)
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f009 f9f5 	bl	800cf68 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003b7e:	b280      	uxth	r0, r0
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8003b80:	2801      	cmp	r0, #1
        {
          (handle_ptr->period_value)--;
 8003b82:	bf88      	it	hi
 8003b84:	f100 30ff 	addhi.w	r0, r0, #4294967295
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003b88:	b2e1      	uxtb	r1, r4
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
 8003b8a:	86f8      	strh	r0, [r7, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
 8003b8c:	f001 010f 	and.w	r1, r1, #15
 8003b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b92:	f7fc ff39 	bl	8000a08 <XMC_CCU8_SLICE_SetPrescaler>
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8003b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b98:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003b9a:	f7fc ff33 	bl	8000a04 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba4:	f7fc ff38 	bl	8000a18 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
        /* update period, compare and prescaler values */
        TIMER_CCU8_lShadowTransfer(handle_ptr);
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8003bae:	2000      	movs	r0, #0
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8003bb6:	2001      	movs	r0, #1
      }
#endif
    }
  }
  return (status);
}
 8003bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003bbc:	2e01      	cmp	r6, #1
 8003bbe:	d1a3      	bne.n	8003b08 <TIMER_SetTimeInterval+0x18>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 8003bc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0301 	and.w	r3, r3, #1

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d09d      	beq.n	8003b08 <TIMER_SetTimeInterval+0x18>
 8003bcc:	e7f3      	b.n	8003bb6 <TIMER_SetTimeInterval+0xc6>
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8003bce:	6903      	ldr	r3, [r0, #16]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003bd0:	69c6      	ldr	r6, [r0, #28]
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8003bd2:	681a      	ldr	r2, [r3, #0]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003bd4:	f896 e004 	ldrb.w	lr, [r6, #4]
 8003bd8:	f004 030f 	and.w	r3, r4, #15
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003bdc:	fba1 8902 	umull	r8, r9, r1, r2
 8003be0:	f1c3 0120 	rsb	r1, r3, #32
 8003be4:	fa28 f003 	lsr.w	r0, r8, r3
 8003be8:	fa09 f101 	lsl.w	r1, r9, r1
 8003bec:	f1a3 0220 	sub.w	r2, r3, #32
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003bf0:	f364 0e03 	bfi	lr, r4, #0, #4
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003bf4:	4308      	orrs	r0, r1
 8003bf6:	fa29 f202 	lsr.w	r2, r9, r2
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003bfa:	f886 e004 	strb.w	lr, [r6, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8003bfe:	4310      	orrs	r0, r2
 8003c00:	fa29 f103 	lsr.w	r1, r9, r3
 8003c04:	a310      	add	r3, pc, #64	; (adr r3, 8003c48 <TIMER_SetTimeInterval+0x158>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f009 f9ad 	bl	800cf68 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003c0e:	b280      	uxth	r0, r0
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8003c10:	2801      	cmp	r0, #1
        {
          (handle_ptr->period_value)--;
 8003c12:	bf88      	it	hi
 8003c14:	f100 30ff 	addhi.w	r0, r0, #4294967295
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003c18:	b2e1      	uxtb	r1, r4
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
 8003c1a:	86f8      	strh	r0, [r7, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, (XMC_CCU4_SLICE_PRESCALER_t)handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 8003c1c:	f001 010f 	and.w	r1, r1, #15
 8003c20:	6978      	ldr	r0, [r7, #20]
 8003c22:	f7fc fe81 	bl	8000928 <XMC_CCU4_SLICE_SetPrescaler>
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8003c26:	693a      	ldr	r2, [r7, #16]
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8003c28:	697b      	ldr	r3, [r7, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003c2a:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8003c2c:	6892      	ldr	r2, [r2, #8]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	6358      	str	r0, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8003c32:	2000      	movs	r0, #0
 8003c34:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003c36:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003c3a:	6111      	str	r1, [r2, #16]
 8003c3c:	e77c      	b.n	8003b38 <TIMER_SetTimeInterval+0x48>
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003c3e:	2400      	movs	r4, #0
 8003c40:	e775      	b.n	8003b2e <TIMER_SetTimeInterval+0x3e>
 8003c42:	bf00      	nop
 8003c44:	f3af 8000 	nop.w
 8003c48:	05f5e100 	.word	0x05f5e100
 8003c4c:	00000000 	.word	0x00000000

08003c50 <TIMER_ClearEvent>:
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003c50:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003c54:	b93b      	cbnz	r3, 8003c66 <TIMER_ClearEvent+0x16>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003c56:	6942      	ldr	r2, [r0, #20]
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8003c58:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003c64:	4770      	bx	lr
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d106      	bne.n	8003c78 <TIMER_ClearEvent+0x28>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8003c6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8003c6c:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop

08003c7c <TIMER_Clear>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8003c7c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003c80:	b173      	cbz	r3, 8003ca0 <TIMER_Clear+0x24>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003c82:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003c86:	b133      	cbz	r3, 8003c96 <TIMER_Clear+0x1a>
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10b      	bne.n	8003ca4 <TIMER_Clear+0x28>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 8003c8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8003c8e:	2202      	movs	r2, #2
 8003c90:	611a      	str	r2, [r3, #16]
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003c92:	2000      	movs	r0, #0
 8003c94:	4770      	bx	lr
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8003c96:	6942      	ldr	r2, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8003c98:	2102      	movs	r1, #2
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	6111      	str	r1, [r2, #16]
 8003c9e:	4770      	bx	lr
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	4770      	bx	lr
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003ca4:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003ca6:	4770      	bx	lr

08003ca8 <INTERRUPT_Init>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <INTERRUPT_Init+0x84>)

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8003caa:	b4f0      	push	{r4, r5, r6, r7}
 8003cac:	68db      	ldr	r3, [r3, #12]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003cae:	7804      	ldrb	r4, [r0, #0]
 8003cb0:	7841      	ldrb	r1, [r0, #1]
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8003cb2:	7887      	ldrb	r7, [r0, #2]
 8003cb4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb8:	f1c3 0507 	rsb	r5, r3, #7
 8003cbc:	2d06      	cmp	r5, #6
 8003cbe:	bf28      	it	cs
 8003cc0:	2506      	movcs	r5, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc2:	b34b      	cbz	r3, 8003d18 <INTERRUPT_Init+0x70>
 8003cc4:	1e5e      	subs	r6, r3, #1
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	40b2      	lsls	r2, r6
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	ea02 0307 	and.w	r3, r2, r7

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	40aa      	lsls	r2, r5
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	400a      	ands	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003cd8:	b261      	sxtb	r1, r4

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cda:	40b2      	lsls	r2, r6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003cdc:	2900      	cmp	r1, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003cde:	ea43 0302 	orr.w	r3, r3, r2
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003ce2:	db1b      	blt.n	8003d1c <INTERRUPT_Init+0x74>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce4:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
 8003ce8:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
  if (handler->enable_at_init == true)
 8003cf4:	78c3      	ldrb	r3, [r0, #3]
 8003cf6:	b163      	cbz	r3, 8003d12 <INTERRUPT_Init+0x6a>
 8003cf8:	7802      	ldrb	r2, [r0, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003cfa:	b253      	sxtb	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db08      	blt.n	8003d12 <INTERRUPT_Init+0x6a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d00:	f002 021f 	and.w	r2, r2, #31
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	2101      	movs	r1, #1
 8003d08:	4809      	ldr	r0, [pc, #36]	; (8003d30 <INTERRUPT_Init+0x88>)
 8003d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
 8003d12:	2000      	movs	r0, #0
 8003d14:	bcf0      	pop	{r4, r5, r6, r7}
 8003d16:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d18:	461e      	mov	r6, r3
 8003d1a:	e7d9      	b.n	8003cd0 <INTERRUPT_Init+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1c:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <INTERRUPT_Init+0x8c>)
 8003d1e:	f004 040f 	and.w	r4, r4, #15
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4422      	add	r2, r4
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	7613      	strb	r3, [r2, #24]
 8003d2a:	e7e3      	b.n	8003cf4 <INTERRUPT_Init+0x4c>
 8003d2c:	e000ed00 	.word	0xe000ed00
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ecfc 	.word	0xe000ecfc

08003d38 <I2C_MASTER_Init>:
/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8003d38:	b128      	cbz	r0, 8003d46 <I2C_MASTER_Init+0xe>
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8003d3a:	b508      	push	{r3, lr}
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8003d3c:	6843      	ldr	r3, [r0, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8003d42:	2000      	movs	r0, #0
 8003d44:	bd08      	pop	{r3, pc}
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003d46:	2001      	movs	r0, #1
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop

08003d4c <I2C_MASTER_Transmit>:
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8003d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d50:	460c      	mov	r4, r1
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003d52:	6841      	ldr	r1, [r0, #4]
 8003d54:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8003d58:	4605      	mov	r5, r0
 8003d5a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003d5e:	b111      	cbz	r1, 8003d66 <I2C_MASTER_Transmit+0x1a>
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8003d60:	2002      	movs	r0, #2
 8003d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d66:	4616      	mov	r6, r2
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
 8003d68:	68af      	ldr	r7, [r5, #8]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
 8003d6a:	b914      	cbnz	r4, 8003d72 <I2C_MASTER_Transmit+0x26>
 8003d6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003d70:	b352      	cbz	r2, 8003dc8 <I2C_MASTER_Transmit+0x7c>
 8003d72:	b34b      	cbz	r3, 8003dc8 <I2C_MASTER_Transmit+0x7c>
 8003d74:	9a08      	ldr	r2, [sp, #32]
 8003d76:	b33a      	cbz	r2, 8003dc8 <I2C_MASTER_Transmit+0x7c>
  {
  status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 8003d78:	2200      	movs	r2, #0
 8003d7a:	61ba      	str	r2, [r7, #24]

    if (ptr_runtime->tx_busy == false)
 8003d7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003d80:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	d1eb      	bne.n	8003d60 <I2C_MASTER_Transmit+0x14>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
 8003d88:	603b      	str	r3, [r7, #0]
    ptr_runtime->tx_data_count = size;

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
 8003d8a:	f04f 0901 	mov.w	r9, #1

    if (ptr_runtime->tx_busy == false)
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;
 8003d8e:	9b08      	ldr	r3, [sp, #32]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
 8003d90:	f8c7 800c 	str.w	r8, [r7, #12]
    ptr_runtime->tx_busy = true;
    ptr_runtime->send_stop = send_stop;
 8003d94:	61f8      	str	r0, [r7, #28]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 8003d96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003d9a:	6828      	ldr	r0, [r5, #0]

    if (ptr_runtime->tx_busy == false)
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;
 8003d9c:	60bb      	str	r3, [r7, #8]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
 8003d9e:	f887 9026 	strb.w	r9, [r7, #38]	; 0x26
 8003da2:	f7fc ff6f 	bl	8000c84 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 8003da6:	6828      	ldr	r0, [r5, #0]
 8003da8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003dac:	2110      	movs	r1, #16
 8003dae:	f7fe fa19 	bl	80021e4 <XMC_USIC_CH_SetInterruptNodePointer>

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);

    if (send_start == true)
 8003db2:	b964      	cbnz	r4, 8003dce <I2C_MASTER_Transmit+0x82>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8003db4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 8003db8:	682a      	ldr	r2, [r5, #0]
 8003dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dbe:	408b      	lsls	r3, r1
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	6693      	str	r3, [r2, #104]	; 0x68
 8003dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
  {
  status = I2C_MASTER_STATUS_FAILURE;
 8003dc8:	2001      	movs	r0, #1
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
} /* end of function */
 8003dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
  if (handle->runtime->bus_acquired == true)
 8003dce:	68aa      	ldr	r2, [r5, #8]
 8003dd0:	6828      	ldr	r0, [r5, #0]
 8003dd2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003dd6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8003dda:	b963      	cbnz	r3, 8003df6 <I2C_MASTER_Transmit+0xaa>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8003ddc:	f882 9028 	strb.w	r9, [r2, #40]	; 0x28
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8003de0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8003de8:	b2b1      	uxth	r1, r6
 8003dea:	4622      	mov	r2, r4
 8003dec:	f7fc febc 	bl	8000b68 <XMC_I2C_CH_MasterStart>
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8003df0:	4620      	mov	r0, r4
 8003df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003df8:	f043 0308 	orr.w	r3, r3, #8
 8003dfc:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8003dfe:	b2b1      	uxth	r1, r6
 8003e00:	4642      	mov	r2, r8
 8003e02:	f7fc fec9 	bl	8000b98 <XMC_I2C_CH_MasterRepeatedStart>
 8003e06:	4640      	mov	r0, r8
 8003e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003e0c <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	4606      	mov	r6, r0
/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8003e10:	6800      	ldr	r0, [r0, #0]
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8003e12:	68b4      	ldr	r4, [r6, #8]
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return (channel->PSR_IICMode);
 8003e14:	6c83      	ldr	r3, [r0, #72]	; 0x48
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 8003e16:	f413 7fb1 	tst.w	r3, #354	; 0x162
 8003e1a:	d163      	bne.n	8003ee4 <I2C_MASTER_TransmitHandler+0xd8>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 8003e1c:	69a3      	ldr	r3, [r4, #24]
 8003e1e:	bb4b      	cbnz	r3, 8003e74 <I2C_MASTER_TransmitHandler+0x68>
  {
    if (handle->config->txFIFO_size > 0)
 8003e20:	6873      	ldr	r3, [r6, #4]
 8003e22:	f893 5026 	ldrb.w	r5, [r3, #38]	; 0x26
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	f000 808b 	beq.w	8003f42 <I2C_MASTER_TransmitHandler+0x136>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003e2c:	68e1      	ldr	r1, [r4, #12]
 8003e2e:	68a2      	ldr	r2, [r4, #8]
 8003e30:	4291      	cmp	r1, r2
 8003e32:	f0c0 80c0 	bcc.w	8003fb6 <I2C_MASTER_TransmitHandler+0x1aa>
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 8003e36:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003e3a:	f8d0 1108 	ldr.w	r1, [r0, #264]	; 0x108
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003e3e:	b253      	sxtb	r3, r2
 8003e40:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8003e4a:	db09      	blt.n	8003e60 <I2C_MASTER_TransmitHandler+0x54>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	3360      	adds	r3, #96	; 0x60
 8003e50:	f002 021f 	and.w	r2, r2, #31
 8003e54:	2101      	movs	r1, #1
 8003e56:	4d83      	ldr	r5, [pc, #524]	; (8004064 <I2C_MASTER_TransmitHandler+0x258>)
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8003e60:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8003e64:	051d      	lsls	r5, r3, #20
 8003e66:	d5fb      	bpl.n	8003e60 <I2C_MASTER_TransmitHandler+0x54>

          if (ptr_runtime->bus_acquired == true)
 8003e68:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 80ca 	bne.w	8004006 <I2C_MASTER_TransmitHandler+0x1fa>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8003e74:	6873      	ldr	r3, [r6, #4]
 8003e76:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d07f      	beq.n	8003f7e <I2C_MASTER_TransmitHandler+0x172>
    {
      if ((handle->config->rxFIFO_size > 0))
 8003e7e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8095 	beq.w	8003fb2 <I2C_MASTER_TransmitHandler+0x1a6>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8003e88:	2101      	movs	r1, #1
 8003e8a:	fa01 f502 	lsl.w	r5, r1, r2
 8003e8e:	4099      	lsls	r1, r3
 8003e90:	42a9      	cmp	r1, r5
 8003e92:	bf28      	it	cs
 8003e94:	4629      	movcs	r1, r5
 8003e96:	b2cd      	uxtb	r5, r1
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003e98:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ea0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	e008      	b.n	8003eba <I2C_MASTER_TransmitHandler+0xae>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003ea8:	f7fc feb6 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 8003eac:	68e3      	ldr	r3, [r4, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60e3      	str	r3, [r4, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	42ab      	cmp	r3, r5
 8003eb6:	d26f      	bcs.n	8003f98 <I2C_MASTER_TransmitHandler+0x18c>
 8003eb8:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003eba:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8003ebe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	d168      	bne.n	8003f98 <I2C_MASTER_TransmitHandler+0x18c>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	68a1      	ldr	r1, [r4, #8]
 8003eca:	428b      	cmp	r3, r1
 8003ecc:	d264      	bcs.n	8003f98 <I2C_MASTER_TransmitHandler+0x18c>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	4299      	cmp	r1, r3
 8003ed4:	d1e8      	bne.n	8003ea8 <I2C_MASTER_TransmitHandler+0x9c>
 8003ed6:	6a23      	ldr	r3, [r4, #32]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d1e5      	bne.n	8003ea8 <I2C_MASTER_TransmitHandler+0x9c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003edc:	4610      	mov	r0, r2
 8003ede:	f7fc feb1 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 8003ee2:	e7e3      	b.n	8003eac <I2C_MASTER_TransmitHandler+0xa0>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003ee4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8003ee8:	6873      	ldr	r3, [r6, #4]
 8003eea:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003eee:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8003ef2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003efa:	6402      	str	r2, [r0, #64]	; 0x40
 8003efc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003efe:	b139      	cbz	r1, 8003f10 <I2C_MASTER_TransmitHandler+0x104>
 8003f00:	06a5      	lsls	r5, r4, #26
 8003f02:	d505      	bpl.n	8003f10 <I2C_MASTER_TransmitHandler+0x104>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8003f04:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003f06:	f043 0320 	orr.w	r3, r3, #32
 8003f0a:	64c3      	str	r3, [r0, #76]	; 0x4c
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
    handle->config->nack_cbhandler();
 8003f0c:	4788      	blx	r1
 8003f0e:	6873      	ldr	r3, [r6, #4]
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	b142      	cbz	r2, 8003f26 <I2C_MASTER_TransmitHandler+0x11a>
 8003f14:	0661      	lsls	r1, r4, #25
 8003f16:	d506      	bpl.n	8003f26 <I2C_MASTER_TransmitHandler+0x11a>
}

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8003f18:	6831      	ldr	r1, [r6, #0]
 8003f1a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f20:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
    handle->config->arbitration_cbhandler();
 8003f22:	4790      	blx	r2
 8003f24:	6873      	ldr	r3, [r6, #4]
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0a2      	beq.n	8003e72 <I2C_MASTER_TransmitHandler+0x66>
 8003f2c:	f414 7f81 	tst.w	r4, #258	; 0x102
 8003f30:	d09f      	beq.n	8003e72 <I2C_MASTER_TransmitHandler+0x66>
}

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8003f32:	6831      	ldr	r1, [r6, #0]
 8003f34:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3a:	64ca      	str	r2, [r1, #76]	; 0x4c
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 8003f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
    handle->config->error_cbhandler();
 8003f40:	4718      	bx	r3
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003f42:	68e2      	ldr	r2, [r4, #12]
 8003f44:	68a3      	ldr	r3, [r4, #8]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d369      	bcc.n	800401e <I2C_MASTER_TransmitHandler+0x212>
        ptr_runtime->tx_data_index++;
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8003f4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d08f      	beq.n	8003e72 <I2C_MASTER_TransmitHandler+0x66>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 8003f52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003f56:	f7fc fea5 	bl	8000ca4 <XMC_I2C_CH_DisableEvent>

  ptr_runtime = handle->runtime;

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
 8003f5a:	69e3      	ldr	r3, [r4, #28]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d06a      	beq.n	8004036 <I2C_MASTER_TransmitHandler+0x22a>
 8003f60:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8003f62:	6b93      	ldr	r3, [r2, #56]	; 0x38
  {
    ptr_runtime->bus_acquired = false;
    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	d4fc      	bmi.n	8003f62 <I2C_MASTER_TransmitHandler+0x156>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;

  if (handle->config->tx_cbhandler != NULL)
 8003f68:	6873      	ldr	r3, [r6, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f43f af7d 	beq.w	8003e72 <I2C_MASTER_TransmitHandler+0x66>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 8003f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ptr_runtime->tx_busy = false;

  if (handle->config->tx_cbhandler != NULL)
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8003f7c:	4718      	bx	r3
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	68a2      	ldr	r2, [r4, #8]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d102      	bne.n	8003f8e <I2C_MASTER_TransmitHandler+0x182>
 8003f88:	6a23      	ldr	r3, [r4, #32]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d050      	beq.n	8004030 <I2C_MASTER_TransmitHandler+0x224>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003f8e:	f7fc fe43 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }
      ptr_runtime->tx_data_index++;
 8003f92:	68e3      	ldr	r3, [r4, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60e3      	str	r3, [r4, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8003f98:	68b3      	ldr	r3, [r6, #8]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	f47f af67 	bne.w	8003e72 <I2C_MASTER_TransmitHandler+0x66>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 8003fa4:	6830      	ldr	r0, [r6, #0]
 8003fa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 8003faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003fae:	f7fc be79 	b.w	8000ca4 <XMC_I2C_CH_DisableEvent>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8003fb2:	2502      	movs	r5, #2
 8003fb4:	e770      	b.n	8003e98 <I2C_MASTER_TransmitHandler+0x8c>
 8003fb6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003fba:	f7fc fe73 	bl	8000ca4 <XMC_I2C_CH_DisableEvent>
    if (handle->config->txFIFO_size > 0)
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8003fbe:	6830      	ldr	r0, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 8003fc0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fc8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003fcc:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8003fd0:	04da      	lsls	r2, r3, #19
 8003fd2:	f53f af4e 	bmi.w	8003e72 <I2C_MASTER_TransmitHandler+0x66>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	68a2      	ldr	r2, [r4, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d805      	bhi.n	8003fea <I2C_MASTER_TransmitHandler+0x1de>
 8003fde:	e03f      	b.n	8004060 <I2C_MASTER_TransmitHandler+0x254>
 8003fe0:	68e2      	ldr	r2, [r4, #12]
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	f4bf af44 	bcs.w	8003e72 <I2C_MASTER_TransmitHandler+0x66>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8003fea:	68e3      	ldr	r3, [r4, #12]
 8003fec:	6822      	ldr	r2, [r4, #0]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8003fee:	5cd1      	ldrb	r1, [r2, r3]
 8003ff0:	f7fc fe00 	bl	8000bf4 <XMC_I2C_CH_MasterTransmit>
            ptr_runtime->tx_data_index++;
 8003ff4:	68e3      	ldr	r3, [r4, #12]
 8003ff6:	6830      	ldr	r0, [r6, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60e3      	str	r3, [r4, #12]
 8003ffc:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004000:	04db      	lsls	r3, r3, #19
 8004002:	d5ed      	bpl.n	8003fe0 <I2C_MASTER_TransmitHandler+0x1d4>
 8004004:	bd70      	pop	{r4, r5, r6, pc}
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 8004006:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800400a:	f7fc fe4b 	bl	8000ca4 <XMC_I2C_CH_DisableEvent>

  ptr_runtime = handle->runtime;

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
 800400e:	69e3      	ldr	r3, [r4, #28]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d01a      	beq.n	800404a <I2C_MASTER_TransmitHandler+0x23e>
 8004014:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004016:	6b93      	ldr	r3, [r2, #56]	; 0x38
  {
    ptr_runtime->bus_acquired = false;
    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004018:	0619      	lsls	r1, r3, #24
 800401a:	d4fc      	bmi.n	8004016 <I2C_MASTER_TransmitHandler+0x20a>
 800401c:	e7a4      	b.n	8003f68 <I2C_MASTER_TransmitHandler+0x15c>
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 800401e:	68e3      	ldr	r3, [r4, #12]
 8004020:	6822      	ldr	r2, [r4, #0]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8004022:	5cd1      	ldrb	r1, [r2, r3]
 8004024:	f7fc fde6 	bl	8000bf4 <XMC_I2C_CH_MasterTransmit>
        ptr_runtime->tx_data_index++;
 8004028:	68e3      	ldr	r3, [r4, #12]
 800402a:	3301      	adds	r3, #1
 800402c:	60e3      	str	r3, [r4, #12]
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8004030:	f7fc fe08 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 8004034:	e7ad      	b.n	8003f92 <I2C_MASTER_TransmitHandler+0x186>
 8004036:	6830      	ldr	r0, [r6, #0]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
  {
    ptr_runtime->bus_acquired = false;
 8004038:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800403c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800403e:	f043 0310 	orr.w	r3, r3, #16
 8004042:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
 8004044:	f7fc fdc0 	bl	8000bc8 <XMC_I2C_CH_MasterStop>
 8004048:	e78a      	b.n	8003f60 <I2C_MASTER_TransmitHandler+0x154>
 800404a:	6830      	ldr	r0, [r6, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8004052:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004054:	f043 0310 	orr.w	r3, r3, #16
 8004058:	64c3      	str	r3, [r0, #76]	; 0x4c
 800405a:	f7fc fdb5 	bl	8000bc8 <XMC_I2C_CH_MasterStop>
 800405e:	e7d9      	b.n	8004014 <I2C_MASTER_TransmitHandler+0x208>
 8004060:	bd70      	pop	{r4, r5, r6, pc}
 8004062:	bf00      	nop
 8004064:	e000e100 	.word	0xe000e100

08004068 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8004068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800406c:	6845      	ldr	r5, [r0, #4]
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 800406e:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
 8004072:	460e      	mov	r6, r1
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8004074:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8004078:	4604      	mov	r4, r0
 800407a:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800407e:	b111      	cbz	r1, 8004086 <I2C_MASTER_Receive+0x1e>
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8004080:	2002      	movs	r0, #2
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
}
 8004082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
 8004086:	68a7      	ldr	r7, [r4, #8]
 8004088:	4690      	mov	r8, r2
 800408a:	46b9      	mov	r9, r7

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
 800408c:	b91e      	cbnz	r6, 8004096 <I2C_MASTER_Receive+0x2e>
 800408e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004092:	2a00      	cmp	r2, #0
 8004094:	d055      	beq.n	8004142 <I2C_MASTER_Receive+0xda>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d053      	beq.n	8004142 <I2C_MASTER_Receive+0xda>
 800409a:	9a08      	ldr	r2, [sp, #32]
 800409c:	2a00      	cmp	r2, #0
 800409e:	d050      	beq.n	8004142 <I2C_MASTER_Receive+0xda>
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
 80040a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80040a4:	f002 0cff 	and.w	ip, r2, #255	; 0xff
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	d1e9      	bne.n	8004080 <I2C_MASTER_Receive+0x18>
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
 80040ac:	f895 a027 	ldrb.w	sl, [r5, #39]	; 0x27
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
 80040b0:	9908      	ldr	r1, [sp, #32]
    if (ptr_runtime->rx_busy == false)
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
 80040b2:	607b      	str	r3, [r7, #4]
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 80040b4:	2201      	movs	r2, #1
 80040b6:	61ba      	str	r2, [r7, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
 80040b8:	6139      	str	r1, [r7, #16]
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
 80040ba:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
 80040be:	603b      	str	r3, [r7, #0]
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
 80040c0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
 80040c4:	60b9      	str	r1, [r7, #8]
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
 80040c6:	f8c7 c014 	str.w	ip, [r7, #20]
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
 80040ca:	f8c7 e01c 	str.w	lr, [r7, #28]
    ptr_runtime->send_nack = send_nack;
 80040ce:	6238      	str	r0, [r7, #32]
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;
 80040d0:	f8c7 c00c 	str.w	ip, [r7, #12]

    if (handle->config->rxFIFO_size > 0)
 80040d4:	f1ba 0f00 	cmp.w	sl, #0
 80040d8:	d136      	bne.n	8004148 <I2C_MASTER_Receive+0xe0>
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 80040da:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 80040dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
 80040e4:	2e00      	cmp	r6, #0
 80040e6:	f000 809c 	beq.w	8004222 <I2C_MASTER_Receive+0x1ba>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 80040ea:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 80040ee:	3a01      	subs	r2, #1
 80040f0:	2a01      	cmp	r2, #1
 80040f2:	d90b      	bls.n	800410c <I2C_MASTER_Receive+0xa4>
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 80040f4:	4618      	mov	r0, r3
 80040f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80040fa:	f7fc fdc3 	bl	8000c84 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 80040fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004102:	6820      	ldr	r0, [r4, #0]
 8004104:	2110      	movs	r1, #16
 8004106:	f7fe f86d 	bl	80021e4 <XMC_USIC_CH_SetInterruptNodePointer>
 800410a:	68a7      	ldr	r7, [r4, #8]
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
  if (handle->runtime->bus_acquired == true)
 800410c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 80fa 	bne.w	800430a <I2C_MASTER_Receive+0x2a2>
 8004116:	6820      	ldr	r0, [r4, #0]
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8004118:	2201      	movs	r2, #1
 800411a:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 800411e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004120:	f043 0304 	orr.w	r3, r3, #4
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8004124:	fa1f f188 	uxth.w	r1, r8
 8004128:	64c3      	str	r3, [r0, #76]	; 0x4c
 800412a:	f7fc fd1d 	bl	8000b68 <XMC_I2C_CH_MasterStart>
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004134:	3b01      	subs	r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	f240 80f2 	bls.w	8004320 <I2C_MASTER_Receive+0x2b8>
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
    }
    status = I2C_MASTER_STATUS_SUCCESS;
 800413c:	2000      	movs	r0, #0
 800413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8004142:	2001      	movs	r0, #1
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);

  if ((handle->config->txFIFO_size > 0))
 8004148:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26

  ptr_runtime = handle->runtime;

  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800414c:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 800414e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8004152:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004156:	fa02 f50a 	lsl.w	r5, r2, sl

  if ((handle->config->txFIFO_size > 0))
 800415a:	2b00      	cmp	r3, #0
 800415c:	d074      	beq.n	8004248 <I2C_MASTER_Receive+0x1e0>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 800415e:	409a      	lsls	r2, r3
 8004160:	b2d3      	uxtb	r3, r2
 8004162:	9908      	ldr	r1, [sp, #32]
 8004164:	b2ea      	uxtb	r2, r5
 8004166:	428a      	cmp	r2, r1
 8004168:	bf28      	it	cs
 800416a:	460a      	movcs	r2, r1
 800416c:	429a      	cmp	r2, r3
 800416e:	bf28      	it	cs
 8004170:	461a      	movcs	r2, r3
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8004172:	3a01      	subs	r2, #1
 8004174:	4651      	mov	r1, sl
 8004176:	f7fe f823 	bl	80021c0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 800417a:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 800417c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8004180:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004184:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8004188:	6863      	ldr	r3, [r4, #4]
  I2C_MASTER_lReconfigureRxFIFO(handle, count);

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
 800418a:	2e00      	cmp	r6, #0
 800418c:	d05e      	beq.n	800424c <I2C_MASTER_Receive+0x1e4>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 800418e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004192:	3b01      	subs	r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d90a      	bls.n	80041ae <I2C_MASTER_Receive+0x146>
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 8004198:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800419c:	f7fc fd72 	bl	8000c84 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 80041a0:	6820      	ldr	r0, [r4, #0]
 80041a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041a6:	2110      	movs	r1, #16
 80041a8:	f7fe f81c 	bl	80021e4 <XMC_USIC_CH_SetInterruptNodePointer>
 80041ac:	6820      	ldr	r0, [r4, #0]
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
  if (handle->runtime->bus_acquired == true)
 80041ae:	68a3      	ldr	r3, [r4, #8]
 80041b0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	f040 80dc 	bne.w	8004372 <I2C_MASTER_Receive+0x30a>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 80041c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80041c2:	f043 0304 	orr.w	r3, r3, #4
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 80041c6:	fa1f f188 	uxth.w	r1, r8
 80041ca:	64c3      	str	r3, [r0, #76]	; 0x4c
 80041cc:	f7fc fccc 	bl	8000b68 <XMC_I2C_CH_MasterStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 80041d0:	6863      	ldr	r3, [r4, #4]
 80041d2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80041d6:	2a02      	cmp	r2, #2
 80041d8:	d1b0      	bne.n	800413c <I2C_MASTER_Receive+0xd4>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 80041da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80d1 	beq.w	8004386 <I2C_MASTER_Receive+0x31e>
 80041e4:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80041e6:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80041ea:	04db      	lsls	r3, r3, #19
 80041ec:	d4a6      	bmi.n	800413c <I2C_MASTER_Receive+0xd4>
 80041ee:	e009      	b.n	8004204 <I2C_MASTER_Receive+0x19c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80041f0:	f7fc fd12 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
        }
      ptr_runtime->tx_data_index++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004200:	04de      	lsls	r6, r3, #19
 8004202:	d49b      	bmi.n	800413c <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	428b      	cmp	r3, r1
 800420a:	d297      	bcs.n	800413c <I2C_MASTER_Receive+0xd4>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	4299      	cmp	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	d1ec      	bne.n	80041f0 <I2C_MASTER_Receive+0x188>
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d1e9      	bne.n	80041f0 <I2C_MASTER_Receive+0x188>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 800421c:	f7fc fd12 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 8004220:	e7e8      	b.n	80041f4 <I2C_MASTER_Receive+0x18c>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
 8004222:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 8004226:	2a00      	cmp	r2, #0
 8004228:	d141      	bne.n	80042ae <I2C_MASTER_Receive+0x246>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	9908      	ldr	r1, [sp, #32]
 800422e:	3201      	adds	r2, #1
 8004230:	4291      	cmp	r1, r2
 8004232:	d102      	bne.n	800423a <I2C_MASTER_Receive+0x1d2>
 8004234:	2801      	cmp	r0, #1
 8004236:	f000 80b2 	beq.w	800439e <I2C_MASTER_Receive+0x336>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800423a:	4618      	mov	r0, r3
 800423c:	f7fc fcec 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }

      ptr_runtime->tx_data_index++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e779      	b.n	800413c <I2C_MASTER_Receive+0xd4>
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);

  if ((handle->config->txFIFO_size > 0))
 8004248:	4613      	mov	r3, r2
 800424a:	e78a      	b.n	8004162 <I2C_MASTER_Receive+0xfa>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
 800424c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004250:	2b00      	cmp	r3, #0
 8004252:	d07b      	beq.n	800434c <I2C_MASTER_Receive+0x2e4>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8004254:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800425c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8004260:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004264:	04dd      	lsls	r5, r3, #19
 8004266:	f53f af69 	bmi.w	800413c <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	428b      	cmp	r3, r1
 8004270:	bf38      	it	cc
 8004272:	4602      	movcc	r2, r0
 8004274:	d310      	bcc.n	8004298 <I2C_MASTER_Receive+0x230>
 8004276:	e761      	b.n	800413c <I2C_MASTER_Receive+0xd4>
 8004278:	f7fc fcce 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    if (handle->config->txFIFO_size > 0)
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004288:	04d9      	lsls	r1, r3, #19
 800428a:	f53f af57 	bmi.w	800413c <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	428b      	cmp	r3, r1
 8004294:	f4bf af52 	bcs.w	800413c <I2C_MASTER_Receive+0xd4>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	4299      	cmp	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	d1ea      	bne.n	8004278 <I2C_MASTER_Receive+0x210>
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d1e7      	bne.n	8004278 <I2C_MASTER_Receive+0x210>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80042a8:	f7fc fccc 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 80042ac:	e7e6      	b.n	800427c <I2C_MASTER_Receive+0x214>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 80042ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80042b2:	6821      	ldr	r1, [r4, #0]
 80042b4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80042b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80042bc:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80042c0:	04da      	lsls	r2, r3, #19
 80042c2:	f53f af3b 	bmi.w	800413c <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	9a08      	ldr	r2, [sp, #32]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf88      	it	hi
 80042ce:	4613      	movhi	r3, r2
 80042d0:	d810      	bhi.n	80042f4 <I2C_MASTER_Receive+0x28c>
 80042d2:	e733      	b.n	800413c <I2C_MASTER_Receive+0xd4>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80042d4:	f7fc fca0 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6821      	ldr	r1, [r4, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80042e4:	04db      	lsls	r3, r3, #19
 80042e6:	f53f af29 	bmi.w	800413c <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f4bf af24 	bcs.w	800413c <I2C_MASTER_Receive+0xd4>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	3201      	adds	r2, #1
 80042f8:	4293      	cmp	r3, r2
 80042fa:	4608      	mov	r0, r1
 80042fc:	d1ea      	bne.n	80042d4 <I2C_MASTER_Receive+0x26c>
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d1e7      	bne.n	80042d4 <I2C_MASTER_Receive+0x26c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8004304:	f7fc fc9e 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 8004308:	e7e6      	b.n	80042d8 <I2C_MASTER_Receive+0x270>
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800430e:	f043 0308 	orr.w	r3, r3, #8
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8004312:	fa1f f188 	uxth.w	r1, r8
 8004316:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004318:	2201      	movs	r2, #1
 800431a:	f7fc fc3d 	bl	8000b98 <XMC_I2C_CH_MasterRepeatedStart>
 800431e:	e706      	b.n	800412e <I2C_MASTER_Receive+0xc6>
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004320:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004324:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004328:	3301      	adds	r3, #1
 800432a:	4293      	cmp	r3, r2
 800432c:	d103      	bne.n	8004336 <I2C_MASTER_Receive+0x2ce>
 800432e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d037      	beq.n	80043a6 <I2C_MASTER_Receive+0x33e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	f7fc fc6e 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
    }
    else
    {
    I2C_MASTER_ReceiveACK(handle);
      }
    ptr_runtime->tx_data_index++;
 800433c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	f8c9 300c 	str.w	r3, [r9, #12]
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
    }
    status = I2C_MASTER_STATUS_SUCCESS;
 8004346:	2000      	movs	r0, #0
 8004348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	f4bf aef3 	bcs.w	800413c <I2C_MASTER_Receive+0xd4>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	3201      	adds	r2, #1
 800435a:	4293      	cmp	r3, r2
 800435c:	d102      	bne.n	8004364 <I2C_MASTER_Receive+0x2fc>
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d01d      	beq.n	80043a0 <I2C_MASTER_Receive+0x338>
 8004364:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004366:	f443 4372 	orr.w	r3, r3, #61952	; 0xf200
 800436a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800436c:	f7fc fc54 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
 8004370:	e766      	b.n	8004240 <I2C_MASTER_Receive+0x1d8>
 8004372:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004374:	f043 0308 	orr.w	r3, r3, #8
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8004378:	fa1f f188 	uxth.w	r1, r8
 800437c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800437e:	2201      	movs	r2, #1
 8004380:	f7fc fc0a 	bl	8000b98 <XMC_I2C_CH_MasterRepeatedStart>
 8004384:	e724      	b.n	80041d0 <I2C_MASTER_Receive+0x168>
    } /* end of while */
      }
      else
      {
        /* if it is last byte and send_nack true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	3301      	adds	r3, #1
 800438c:	4293      	cmp	r3, r2
 800438e:	d102      	bne.n	8004396 <I2C_MASTER_Receive+0x32e>
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d00b      	beq.n	80043ae <I2C_MASTER_Receive+0x346>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	f7fc fc3e 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
 800439c:	e750      	b.n	8004240 <I2C_MASTER_Receive+0x1d8>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc fc50 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 80043a4:	e74c      	b.n	8004240 <I2C_MASTER_Receive+0x1d8>
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	f7fc fc4c 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 80043ac:	e7c6      	b.n	800433c <I2C_MASTER_Receive+0x2d4>
 80043ae:	6820      	ldr	r0, [r4, #0]
 80043b0:	f7fc fc48 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 80043b4:	e744      	b.n	8004240 <I2C_MASTER_Receive+0x1d8>
 80043b6:	bf00      	nop

080043b8 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 80043b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80043bc:	6884      	ldr	r4, [r0, #8]
  fifo_lindex = 0U;

  if (ptr_runtime->rx_busy == true)
 80043be:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d040      	beq.n	8004448 <I2C_MASTER_ReceiveHandler+0x90>
  {
    if (handle->config->rxFIFO_size > 0)
 80043c6:	6843      	ldr	r3, [r0, #4]
 80043c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80043cc:	4606      	mov	r6, r0
 80043ce:	bb63      	cbnz	r3, 800442a <I2C_MASTER_ReceiveHandler+0x72>
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 80043d0:	6800      	ldr	r0, [r0, #0]
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 80043d2:	6965      	ldr	r5, [r4, #20]
 80043d4:	6867      	ldr	r7, [r4, #4]
 80043d6:	f7fc fc4b 	bl	8000c70 <XMC_I2C_CH_GetReceivedData>
 80043da:	5578      	strb	r0, [r7, r5]
      ptr_runtime->rx_data_index++;
 80043dc:	6963      	ldr	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80043de:	6922      	ldr	r2, [r4, #16]
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
      ptr_runtime->rx_data_index++;
 80043e0:	3301      	adds	r3, #1
 80043e2:	6163      	str	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80043e4:	6963      	ldr	r3, [r4, #20]
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f080 80aa 	bcs.w	8004540 <I2C_MASTER_ReceiveHandler+0x188>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80043ec:	68e2      	ldr	r2, [r4, #12]
 80043ee:	68a3      	ldr	r3, [r4, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d229      	bcs.n	8004448 <I2C_MASTER_ReceiveHandler+0x90>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 80043f4:	68e2      	ldr	r2, [r4, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	429a      	cmp	r2, r3
 80043fa:	f000 80e5 	beq.w	80045c8 <I2C_MASTER_ReceiveHandler+0x210>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80043fe:	6830      	ldr	r0, [r6, #0]
 8004400:	f7fc fc0a 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 8004404:	68e3      	ldr	r3, [r4, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60e3      	str	r3, [r4, #12]
 800440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 800440e:	6967      	ldr	r7, [r4, #20]
 8004410:	f8d4 8004 	ldr.w	r8, [r4, #4]
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8004414:	f7fc fc2c 	bl	8000c70 <XMC_I2C_CH_GetReceivedData>
 8004418:	f808 0007 	strb.w	r0, [r8, r7]
        ptr_runtime->rx_data_index++;
 800441c:	6963      	ldr	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800441e:	6920      	ldr	r0, [r4, #16]
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
        ptr_runtime->rx_data_index++;
 8004420:	3301      	adds	r3, #1
 8004422:	6163      	str	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8004424:	6963      	ldr	r3, [r4, #20]
 8004426:	4283      	cmp	r3, r0
 8004428:	d010      	beq.n	800444c <I2C_MASTER_ReceiveHandler+0x94>
 800442a:	6833      	ldr	r3, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800442c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8004430:	f012 0508 	ands.w	r5, r2, #8
 8004434:	4618      	mov	r0, r3
 8004436:	d0ea      	beq.n	800440e <I2C_MASTER_ReceiveHandler+0x56>
 8004438:	6920      	ldr	r0, [r4, #16]
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800443a:	6961      	ldr	r1, [r4, #20]
 800443c:	4281      	cmp	r1, r0
 800443e:	4602      	mov	r2, r0
 8004440:	d311      	bcc.n	8004466 <I2C_MASTER_ReceiveHandler+0xae>
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8004442:	6963      	ldr	r3, [r4, #20]
 8004444:	4293      	cmp	r3, r2
 8004446:	d059      	beq.n	80044fc <I2C_MASTER_ReceiveHandler+0x144>
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 800444c:	6833      	ldr	r3, [r6, #0]
        ptr_runtime->rx_data_index++;

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 800444e:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8004452:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004456:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 800445a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800445e:	6961      	ldr	r1, [r4, #20]
 8004460:	4281      	cmp	r1, r0
 8004462:	4602      	mov	r2, r0
 8004464:	d2ed      	bcs.n	8004442 <I2C_MASTER_ReceiveHandler+0x8a>
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004466:	6872      	ldr	r2, [r6, #4]
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8004468:	6965      	ldr	r5, [r4, #20]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 800446a:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27

  if ((handle->config->txFIFO_size > 0))
 800446e:	f892 e026 	ldrb.w	lr, [r2, #38]	; 0x26
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f701 	lsl.w	r7, r2, r1
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8004478:	1b45      	subs	r5, r0, r5
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);

  if ((handle->config->txFIFO_size > 0))
 800447a:	f1be 0f00 	cmp.w	lr, #0
 800447e:	d002      	beq.n	8004486 <I2C_MASTER_ReceiveHandler+0xce>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8004480:	fa02 f20e 	lsl.w	r2, r2, lr
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	b2f8      	uxtb	r0, r7
 8004488:	42a8      	cmp	r0, r5
 800448a:	bf28      	it	cs
 800448c:	4628      	movcs	r0, r5
 800448e:	4282      	cmp	r2, r0
 8004490:	bf28      	it	cs
 8004492:	4602      	movcs	r2, r0
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8004494:	3a01      	subs	r2, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fe92 	bl	80021c0 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
 800449c:	6873      	ldr	r3, [r6, #4]
 800449e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80044a2:	2a00      	cmp	r2, #0
 80044a4:	d060      	beq.n	8004568 <I2C_MASTER_ReceiveHandler+0x1b0>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 80044a6:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 80044aa:	2301      	movs	r3, #1
 80044ac:	fa03 f501 	lsl.w	r5, r3, r1
 80044b0:	4093      	lsls	r3, r2
 80044b2:	42ab      	cmp	r3, r5
 80044b4:	bf28      	it	cs
 80044b6:	462b      	movcs	r3, r5
 80044b8:	b2dd      	uxtb	r5, r3
 80044ba:	2700      	movs	r7, #0
 80044bc:	e008      	b.n	80044d0 <I2C_MASTER_ReceiveHandler+0x118>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80044be:	f7fc fbab 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
 80044c2:	68e3      	ldr	r3, [r4, #12]
 80044c4:	3701      	adds	r7, #1

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 80044c6:	b2fa      	uxtb	r2, r7
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
 80044c8:	3301      	adds	r3, #1

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 80044ca:	4295      	cmp	r5, r2
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
 80044cc:	60e3      	str	r3, [r4, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 80044ce:	d949      	bls.n	8004564 <I2C_MASTER_ReceiveHandler+0x1ac>
 80044d0:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80044d2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80044d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80044da:	4610      	mov	r0, r2
 80044dc:	d142      	bne.n	8004564 <I2C_MASTER_ReceiveHandler+0x1ac>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	68a1      	ldr	r1, [r4, #8]
 80044e2:	428b      	cmp	r3, r1
 80044e4:	d23e      	bcs.n	8004564 <I2C_MASTER_ReceiveHandler+0x1ac>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80044e6:	68e3      	ldr	r3, [r4, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	4299      	cmp	r1, r3
 80044ec:	d1e7      	bne.n	80044be <I2C_MASTER_ReceiveHandler+0x106>
 80044ee:	6a23      	ldr	r3, [r4, #32]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d1e4      	bne.n	80044be <I2C_MASTER_ReceiveHandler+0x106>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fc fba5 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 80044fa:	e7e2      	b.n	80044c2 <I2C_MASTER_ReceiveHandler+0x10a>
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 80044fc:	6830      	ldr	r0, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 80044fe:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8004502:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004506:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 800450a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800450c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004510:	6403      	str	r3, [r0, #64]	; 0x40

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8004512:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d096      	beq.n	8004448 <I2C_MASTER_ReceiveHandler+0x90>
/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 800451a:	68b4      	ldr	r4, [r6, #8]

  if (ptr_runtime->send_stop == true)
 800451c:	69e3      	ldr	r3, [r4, #28]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d02f      	beq.n	8004582 <I2C_MASTER_ReceiveHandler+0x1ca>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004522:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ptr_runtime->bus_acquired = false;

    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004524:	0619      	lsls	r1, r3, #24
 8004526:	d4fc      	bmi.n	8004522 <I2C_MASTER_ReceiveHandler+0x16a>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
  ptr_runtime->tx_busy = false;

  if (handle->config->rx_cbhandler != NULL)
 8004528:	6873      	ldr	r3, [r6, #4]
 800452a:	695a      	ldr	r2, [r3, #20]
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 800452c:	2300      	movs	r3, #0
 800452e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 8004532:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8004536:	2a00      	cmp	r2, #0
 8004538:	d086      	beq.n	8004448 <I2C_MASTER_ReceiveHandler+0x90>
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 800453a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ptr_runtime->tx_busy = false;

  if (handle->config->rx_cbhandler != NULL)
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 800453e:	4710      	bx	r2
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8004540:	6830      	ldr	r0, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8004542:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004548:	6403      	str	r3, [r0, #64]	; 0x40
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 800454a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	f43f af7a 	beq.w	8004448 <I2C_MASTER_ReceiveHandler+0x90>
/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8004554:	68b4      	ldr	r4, [r6, #8]

  if (ptr_runtime->send_stop == true)
 8004556:	69e3      	ldr	r3, [r4, #28]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d020      	beq.n	800459e <I2C_MASTER_ReceiveHandler+0x1e6>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800455c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ptr_runtime->bus_acquired = false;

    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 800455e:	061b      	lsls	r3, r3, #24
 8004560:	d4fc      	bmi.n	800455c <I2C_MASTER_ReceiveHandler+0x1a4>
 8004562:	e7e1      	b.n	8004528 <I2C_MASTER_ReceiveHandler+0x170>
 8004564:	6922      	ldr	r2, [r4, #16]
 8004566:	e76c      	b.n	8004442 <I2C_MASTER_ReceiveHandler+0x8a>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004568:	68e3      	ldr	r3, [r4, #12]
 800456a:	68a2      	ldr	r2, [r4, #8]
 800456c:	3301      	adds	r3, #1
 800456e:	4293      	cmp	r3, r2
 8004570:	d023      	beq.n	80045ba <I2C_MASTER_ReceiveHandler+0x202>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8004572:	6830      	ldr	r0, [r6, #0]
 8004574:	f7fc fb50 	bl	8000c18 <XMC_I2C_CH_MasterReceiveAck>
         else
         {
           I2C_MASTER_ReceiveACK(handle);
         }

         ptr_runtime->tx_data_index++;
 8004578:	68e3      	ldr	r3, [r4, #12]
 800457a:	6922      	ldr	r2, [r4, #16]
 800457c:	3301      	adds	r3, #1
 800457e:	60e3      	str	r3, [r4, #12]
 8004580:	e75f      	b.n	8004442 <I2C_MASTER_ReceiveHandler+0x8a>
 8004582:	6b83      	ldr	r3, [r0, #56]	; 0x38

  ptr_runtime = handle->runtime;

  if (ptr_runtime->send_stop == true)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004584:	061d      	lsls	r5, r3, #24
 8004586:	d4fc      	bmi.n	8004582 <I2C_MASTER_ReceiveHandler+0x1ca>

    ptr_runtime->bus_acquired = false;
 8004588:	2300      	movs	r3, #0
 800458a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800458e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004590:	f043 0310 	orr.w	r3, r3, #16
 8004594:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
 8004596:	f7fc fb17 	bl	8000bc8 <XMC_I2C_CH_MasterStop>
 800459a:	6830      	ldr	r0, [r6, #0]
 800459c:	e7c1      	b.n	8004522 <I2C_MASTER_ReceiveHandler+0x16a>
 800459e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  ptr_runtime = handle->runtime;

  if (ptr_runtime->send_stop == true)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 80045a0:	061a      	lsls	r2, r3, #24
 80045a2:	d4fc      	bmi.n	800459e <I2C_MASTER_ReceiveHandler+0x1e6>

    ptr_runtime->bus_acquired = false;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80045aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80045ac:	f043 0310 	orr.w	r3, r3, #16
 80045b0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80045b2:	f7fc fb09 	bl	8000bc8 <XMC_I2C_CH_MasterStop>
 80045b6:	6830      	ldr	r0, [r6, #0]
 80045b8:	e7d0      	b.n	800455c <I2C_MASTER_ReceiveHandler+0x1a4>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80045ba:	6a23      	ldr	r3, [r4, #32]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d1d8      	bne.n	8004572 <I2C_MASTER_ReceiveHandler+0x1ba>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80045c0:	6830      	ldr	r0, [r6, #0]
 80045c2:	f7fc fb3f 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 80045c6:	e7d7      	b.n	8004578 <I2C_MASTER_ReceiveHandler+0x1c0>
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 80045c8:	6a23      	ldr	r3, [r4, #32]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	f47f af17 	bne.w	80043fe <I2C_MASTER_ReceiveHandler+0x46>
 80045d0:	6830      	ldr	r0, [r6, #0]
 80045d2:	f7fc fb37 	bl	8000c44 <XMC_I2C_CH_MasterReceiveNack>
 80045d6:	e715      	b.n	8004404 <I2C_MASTER_ReceiveHandler+0x4c>

080045d8 <I2C_MASTER_AbortTransmit>:
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80045d8:	6843      	ldr	r3, [r0, #4]
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 80045da:	b510      	push	{r4, lr}
 80045dc:	4604      	mov	r4, r0
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80045de:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80045e2:	b150      	cbz	r0, 80045fa <I2C_MASTER_AbortTransmit+0x22>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 80045e4:	f110 30ff 	adds.w	r0, r0, #4294967295
 80045e8:	bf18      	it	ne
 80045ea:	2001      	movne	r0, #1
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 80045f0:	2102      	movs	r1, #2
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 80045f2:	430a      	orrs	r2, r1
 80045f4:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 80045f6:	6699      	str	r1, [r3, #104]	; 0x68

  return (status);
}
 80045f8:	bd10      	pop	{r4, pc}
  handle->runtime->tx_busy = false;
  handle->runtime->tx_data = NULL;
  handle->runtime->bus_acquired = false;

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 80045fa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
  handle->runtime->tx_busy = false;
 80045fe:	68a3      	ldr	r3, [r4, #8]
 8004600:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
  handle->runtime->tx_data = NULL;
 8004604:	6018      	str	r0, [r3, #0]
  handle->runtime->bus_acquired = false;
 8004606:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800460a:	b152      	cbz	r2, 8004622 <I2C_MASTER_AbortTransmit+0x4a>
  {
    /*Disable the transmit FIFO event*/
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800460c:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 800460e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8004612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8004616:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800461a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 800461e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004628:	f7fc fb3c 	bl	8000ca4 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 800462c:	2000      	movs	r0, #0
 800462e:	e7dd      	b.n	80045ec <I2C_MASTER_AbortTransmit+0x14>

08004630 <I2C_MASTER_AbortReceive>:
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8004630:	6842      	ldr	r2, [r0, #4]
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
 8004632:	b508      	push	{r3, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8004634:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8004638:	b123      	cbz	r3, 8004644 <I2C_MASTER_AbortReceive+0x14>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 800463a:	f113 30ff 	adds.w	r0, r3, #4294967295
 800463e:	bf18      	it	ne
 8004640:	2001      	movne	r0, #1
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }

  return (status);
}
 8004642:	bd08      	pop	{r3, pc}
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 8004644:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
 8004648:	6882      	ldr	r2, [r0, #8]
 800464a:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
  handle->runtime->tx_busy = false;
  handle->runtime->rx_data = NULL;
 800464e:	6053      	str	r3, [r2, #4]

static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
  handle->runtime->tx_busy = false;
 8004650:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;
 8004654:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8004658:	6802      	ldr	r2, [r0, #0]
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800465a:	b951      	cbnz	r1, 8004672 <I2C_MASTER_AbortReceive+0x42>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 800465c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800465e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004662:	6413      	str	r3, [r2, #64]	; 0x40
 8004664:	6800      	ldr	r0, [r0, #0]
 8004666:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800466a:	f7fc fb1b 	bl	8000ca4 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 800466e:	2000      	movs	r0, #0
 8004670:	bd08      	pop	{r3, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8004672:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8004676:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800467a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800467e:	e7f1      	b.n	8004664 <I2C_MASTER_AbortReceive+0x34>

08004680 <i2c_master_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void i2c_master_0_disable_io(void)
{
 8004680:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8004682:	4806      	ldr	r0, [pc, #24]	; (800469c <i2c_master_0_disable_io+0x1c>)
 8004684:	2105      	movs	r1, #5
 8004686:	2200      	movs	r2, #0
 8004688:	f7fc f9e8 	bl	8000a5c <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, XMC_GPIO_MODE_INPUT_TRISTATE);
 800468c:	4804      	ldr	r0, [pc, #16]	; (80046a0 <i2c_master_0_disable_io+0x20>)
 800468e:	2108      	movs	r1, #8
 8004690:	2200      	movs	r2, #0
}
 8004692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
};

static void i2c_master_0_disable_io(void)
{
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, XMC_GPIO_MODE_INPUT_TRISTATE);
 8004696:	f7fc b9e1 	b.w	8000a5c <XMC_GPIO_SetMode>
 800469a:	bf00      	nop
 800469c:	48028100 	.word	0x48028100
 80046a0:	48028000 	.word	0x48028000

080046a4 <i2c_master_0_enable_io>:
}

static void i2c_master_0_enable_io(void)
{
 80046a4:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, i2c_master_0_sda_pin_config.mode);
 80046a6:	4806      	ldr	r0, [pc, #24]	; (80046c0 <i2c_master_0_enable_io+0x1c>)
 80046a8:	2105      	movs	r1, #5
 80046aa:	22d0      	movs	r2, #208	; 0xd0
 80046ac:	f7fc f9d6 	bl	8000a5c <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, i2c_master_0_scl_pin_config.mode);
 80046b0:	4804      	ldr	r0, [pc, #16]	; (80046c4 <i2c_master_0_enable_io+0x20>)
 80046b2:	2108      	movs	r1, #8
 80046b4:	22d0      	movs	r2, #208	; 0xd0
}
 80046b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

static void i2c_master_0_enable_io(void)
{
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, i2c_master_0_sda_pin_config.mode);
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, i2c_master_0_scl_pin_config.mode);
 80046ba:	f7fc b9cf 	b.w	8000a5c <XMC_GPIO_SetMode>
 80046be:	bf00      	nop
 80046c0:	48028100 	.word	0x48028100
 80046c4:	48028000 	.word	0x48028000

080046c8 <i2c_master_0_init>:
  .config = &i2c_master_0_config,
  .runtime = &i2c_master_0_runtime,
};

void i2c_master_0_init(void)
{
 80046c8:	b510      	push	{r4, lr}

  const uint32_t enabled_channel_events = (uint32_t)(XMC_USIC_CH_EVENT_TRANSMIT_BUFFER | 
XMC_USIC_CH_EVENT_STANDARD_RECEIVE | 
XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE);

  XMC_I2C_CH_Init(XMC_I2C0_CH0, &i2c_master_0_channel_config);
 80046ca:	4c3f      	ldr	r4, [pc, #252]	; (80047c8 <i2c_master_0_init+0x100>)
 80046cc:	493f      	ldr	r1, [pc, #252]	; (80047cc <i2c_master_0_init+0x104>)
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7fc f9e8 	bl	8000aa4 <XMC_I2C_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80046d4:	69e3      	ldr	r3, [r4, #28]
 80046d6:	f023 0307 	bic.w	r3, r3, #7
 80046da:	61e3      	str	r3, [r4, #28]
 80046dc:	6a23      	ldr	r3, [r4, #32]
 80046de:	f023 0307 	bic.w	r3, r3, #7
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6223      	str	r3, [r4, #32]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 80046e8:	69e3      	ldr	r3, [r4, #28]
 80046ea:	f043 0320 	orr.w	r3, r3, #32
 80046ee:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 80046f0:	69e3      	ldr	r3, [r4, #28]
 80046f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f6:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 80046f8:	6a23      	ldr	r3, [r4, #32]
 80046fa:	f043 0320 	orr.w	r3, r3, #32
 80046fe:	6223      	str	r3, [r4, #32]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 8004700:	6a23      	ldr	r3, [r4, #32]
 8004702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004706:	6223      	str	r3, [r4, #32]
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX0);
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX0);
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX1);
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX1);
    
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH0,
 8004708:	4620      	mov	r0, r4
 800470a:	2108      	movs	r1, #8
 800470c:	2203      	movs	r2, #3
 800470e:	f7fd fd69 	bl	80021e4 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                       ((uint32_t)3));
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH0,
 8004712:	4620      	mov	r0, r4
 8004714:	210c      	movs	r1, #12
 8004716:	2203      	movs	r2, #3
 8004718:	f7fd fd64 	bl	80021e4 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                       ((uint32_t)3));
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH0,
 800471c:	2200      	movs	r2, #0
 800471e:	4620      	mov	r0, r4
 8004720:	2110      	movs	r1, #16
 8004722:	f7fd fd5f 	bl	80021e4 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)0));
  XMC_I2C_CH_EnableEvent(XMC_I2C0_CH0, enabled_protocol_events);
 8004726:	4620      	mov	r0, r4
 8004728:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
 800472c:	f7fc faaa 	bl	8000c84 <XMC_I2C_CH_EnableEvent>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8004730:	6c23      	ldr	r3, [r4, #64]	; 0x40
  XMC_USIC_CH_EnableEvent(XMC_I2C0_CH0, enabled_channel_events);
  XMC_I2C_CH_Start(XMC_I2C0_CH0);

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &i2c_master_0_sda_pin_config);
 8004732:	4827      	ldr	r0, [pc, #156]	; (80047d0 <i2c_master_0_init+0x108>)
 8004734:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <i2c_master_0_init+0x10c>)
 8004736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800473a:	6423      	str	r3, [r4, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800473c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800473e:	f023 030f 	bic.w	r3, r3, #15
 8004742:	f043 0304 	orr.w	r3, r3, #4
 8004746:	6423      	str	r3, [r4, #64]	; 0x40
 8004748:	2105      	movs	r1, #5
 800474a:	f7fb fda7 	bl	800029c <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, &i2c_master_0_scl_pin_config);
 800474e:	2108      	movs	r1, #8
 8004750:	4821      	ldr	r0, [pc, #132]	; (80047d8 <i2c_master_0_init+0x110>)
 8004752:	4a22      	ldr	r2, [pc, #136]	; (80047dc <i2c_master_0_init+0x114>)
 8004754:	f7fb fda2 	bl	800029c <XMC_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <i2c_master_0_init+0x118>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004760:	f1c3 0107 	rsb	r1, r3, #7
 8004764:	2906      	cmp	r1, #6
 8004766:	bf28      	it	cs
 8004768:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800476a:	b343      	cbz	r3, 80047be <i2c_master_0_init+0xf6>
 800476c:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476e:	2301      	movs	r3, #1
 8004770:	408b      	lsls	r3, r1
 8004772:	3b01      	subs	r3, #1
 8004774:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004778:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <i2c_master_0_init+0x11c>)
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800477e:	4918      	ldr	r1, [pc, #96]	; (80047e0 <i2c_master_0_init+0x118>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004780:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004782:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004786:	f882 3355 	strb.w	r3, [r2, #853]	; 0x355
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478a:	6090      	str	r0, [r2, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800478c:	68cb      	ldr	r3, [r1, #12]
 800478e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004792:	f1c3 0107 	rsb	r1, r3, #7
 8004796:	2906      	cmp	r1, #6
 8004798:	bf28      	it	cs
 800479a:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800479c:	b18b      	cbz	r3, 80047c2 <i2c_master_0_init+0xfa>
 800479e:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	2301      	movs	r3, #1
 80047a2:	408b      	lsls	r3, r1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80047aa:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <i2c_master_0_init+0x11c>)
 80047b0:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b6:	f882 3357 	strb.w	r3, [r2, #855]	; 0x357
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ba:	6091      	str	r1, [r2, #8]
 80047bc:	bd10      	pop	{r4, pc}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047be:	461a      	mov	r2, r3
 80047c0:	e7d5      	b.n	800476e <i2c_master_0_init+0xa6>
 80047c2:	461a      	mov	r2, r3
 80047c4:	e7ec      	b.n	80047a0 <i2c_master_0_init+0xd8>
 80047c6:	bf00      	nop
 80047c8:	40030000 	.word	0x40030000
 80047cc:	0800da78 	.word	0x0800da78
 80047d0:	48028100 	.word	0x48028100
 80047d4:	0800da34 	.word	0x0800da34
 80047d8:	48028000 	.word	0x48028000
 80047dc:	0800da40 	.word	0x0800da40
 80047e0:	e000ed00 	.word	0xe000ed00
 80047e4:	e000e100 	.word	0xe000e100

080047e8 <USIC0_1_IRQHandler>:
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),60,0));
  NVIC_EnableIRQ((IRQn_Type)87);}
/*Transmit ISR*/
void i2c_master_0_TX_HANDLER()
{
  I2C_MASTER_TransmitHandler(&i2c_master_0);
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <USIC0_1_IRQHandler+0x8>)
 80047ea:	f7ff bb0f 	b.w	8003e0c <I2C_MASTER_TransmitHandler>
 80047ee:	bf00      	nop
 80047f0:	1ffed158 	.word	0x1ffed158

080047f4 <USIC0_3_IRQHandler>:
}
/*Receive ISR*/
void i2c_master_0_RX_HANDLER()
{
  I2C_MASTER_ReceiveHandler(&i2c_master_0);
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <USIC0_3_IRQHandler+0x8>)
 80047f6:	f7ff bddf 	b.w	80043b8 <I2C_MASTER_ReceiveHandler>
 80047fa:	bf00      	nop
 80047fc:	1ffed158 	.word	0x1ffed158

08004800 <GLOBAL_CCU8_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8004800:	7b43      	ldrb	r3, [r0, #13]
 8004802:	b10b      	cbz	r3, 8004808 <GLOBAL_CCU8_Init+0x8>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 8004804:	2000      	movs	r0, #0
 8004806:	4770      	bx	lr
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8004808:	b510      	push	{r4, lr}
 800480a:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800480c:	6880      	ldr	r0, [r0, #8]
 800480e:	7b21      	ldrb	r1, [r4, #12]
 8004810:	f7fc f8ae 	bl	8000970 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8004814:	68a2      	ldr	r2, [r4, #8]
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8004816:	68d3      	ldr	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8004818:	2101      	movs	r1, #1
 800481a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481e:	60d3      	str	r3, [r2, #12]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 8004820:	2000      	movs	r0, #0
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8004822:	7361      	strb	r1, [r4, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 8004824:	bd10      	pop	{r4, pc}
 8004826:	bf00      	nop

08004828 <GLOBAL_CCU4_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8004828:	7b43      	ldrb	r3, [r0, #13]
 800482a:	b10b      	cbz	r3, 8004830 <GLOBAL_CCU4_Init+0x8>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 800482c:	2000      	movs	r0, #0
 800482e:	4770      	bx	lr
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8004830:	b510      	push	{r4, lr}
 8004832:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8004834:	6880      	ldr	r0, [r0, #8]
 8004836:	7b21      	ldrb	r1, [r4, #12]
 8004838:	f7fc f818 	bl	800086c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800483c:	68a2      	ldr	r2, [r4, #8]
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800483e:	68d3      	ldr	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8004840:	2101      	movs	r1, #1
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	60d3      	str	r3, [r2, #12]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 8004848:	2000      	movs	r0, #0
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 800484a:	7361      	strb	r1, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 800484c:	bd10      	pop	{r4, pc}
 800484e:	bf00      	nop

08004850 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8004850:	b510      	push	{r4, lr}
 8004852:	4604      	mov	r4, r0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8004854:	1d02      	adds	r2, r0, #4
 8004856:	7c21      	ldrb	r1, [r4, #16]
 8004858:	6800      	ldr	r0, [r0, #0]
 800485a:	f7fb fd1f 	bl	800029c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	7c21      	ldrb	r1, [r4, #16]
 8004862:	7c62      	ldrb	r2, [r4, #17]
 8004864:	f7fc f90e 	bl	8000a84 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
 8004868:	2000      	movs	r0, #0
 800486a:	bd10      	pop	{r4, pc}

0800486c <SystemCoreSetup>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <SystemCoreSetup+0x64>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800486e:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <SystemCoreSetup+0x68>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004870:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004872:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8004876:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 8004878:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800487a:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800487c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <SystemCoreSetup+0x6c>)
 8004880:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004882:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004886:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004888:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800488c:	4813      	ldr	r0, [pc, #76]	; (80048dc <SystemCoreSetup+0x70>)

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800488e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8004892:	f241 0114 	movw	r1, #4116	; 0x1014

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800489a:	5842      	ldr	r2, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800489c:	f022 020f 	bic.w	r2, r2, #15
  temp |= PMU_FLASH_WS;
 80048a0:	f042 0204 	orr.w	r2, r2, #4
  FLASH0->FCON = temp;
 80048a4:	5042      	str	r2, [r0, r1]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	f022 0210 	bic.w	r2, r2, #16
 80048ac:	615a      	str	r2, [r3, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	f022 0208 	bic.w	r2, r2, #8
 80048b4:	615a      	str	r2, [r3, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80048b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80048be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80048c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
 80048ce:	4770      	bx	lr
 80048d0:	e000ed00 	.word	0xe000ed00
 80048d4:	05fa0100 	.word	0x05fa0100
 80048d8:	08000000 	.word	0x08000000
 80048dc:	58001000 	.word	0x58001000

080048e0 <CLOCK_XMC4_Init>:
{
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80048e0:	2301      	movs	r3, #1
 80048e2:	7003      	strb	r3, [r0, #0]

  return (status);
}
 80048e4:	2000      	movs	r0, #0
 80048e6:	4770      	bx	lr

080048e8 <OSCHP_GetFrequency>:
#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
}
 80048e8:	4800      	ldr	r0, [pc, #0]	; (80048ec <OSCHP_GetFrequency+0x4>)
 80048ea:	4770      	bx	lr
 80048ec:	00b71b00 	.word	0x00b71b00

080048f0 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80048f0:	b530      	push	{r4, r5, lr}
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80048f2:	4d15      	ldr	r5, [pc, #84]	; (8004948 <SystemCoreClockSetup+0x58>)
 80048f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80048f6:	b087      	sub	sp, #28
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80048f8:	ac01      	add	r4, sp, #4
 80048fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8004900:	a801      	add	r0, sp, #4
 8004902:	f7fb feab 	bl	800065c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8004906:	2000      	movs	r0, #0
 8004908:	f7fb fd46 	bl	8000398 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 800490c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004910:	f7fb fd2e 	bl	8000370 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8004914:	2006      	movs	r0, #6
 8004916:	f7fb fd4f 	bl	80003b8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	2003      	movs	r0, #3
 800491e:	f7fb fd91 	bl	8000444 <XMC_SCU_CLOCK_StartUsbPll>
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <SystemCoreClockSetup+0x5c>)
 8004924:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	6393      	str	r3, [r2, #56]	; 0x38
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 800492c:	2002      	movs	r0, #2
 800492e:	f7fb fd61 	bl	80003f4 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8004932:	2000      	movs	r0, #0
 8004934:	f7fb fd26 	bl	8000384 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8004938:	2001      	movs	r0, #1
 800493a:	f7fb fd51 	bl	80003e0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800493e:	2001      	movs	r0, #1
 8004940:	f7fb fd44 	bl	80003cc <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8004944:	b007      	add	sp, #28
 8004946:	bd30      	pop	{r4, r5, pc}
 8004948:	0800daa8 	.word	0x0800daa8
 800494c:	50004600 	.word	0x50004600

08004950 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8004950:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004952:	481e      	ldr	r0, [pc, #120]	; (80049cc <DAVE_Init+0x7c>)
 8004954:	f7ff ffc4 	bl	80048e0 <CLOCK_XMC4_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
 8004958:	b100      	cbz	r0, 800495c <DAVE_Init+0xc>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t) TIMER_Init(&TIMER_Cooldwon);
   }  
  return init_status;
} /**  End of function DAVE_Init */
 800495a:	bd08      	pop	{r3, pc}
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);

  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of I2C_MASTER APP instance i2c_master_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0); 
 800495c:	481c      	ldr	r0, [pc, #112]	; (80049d0 <DAVE_Init+0x80>)
 800495e:	f7ff f9eb 	bl	8003d38 <I2C_MASTER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004962:	2800      	cmp	r0, #0
 8004964:	d1f9      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of TIMER APP instance tick_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&tick_timer); 
 8004966:	481b      	ldr	r0, [pc, #108]	; (80049d4 <DAVE_Init+0x84>)
 8004968:	f7ff f808 	bl	800397c <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800496c:	2800      	cmp	r0, #0
 800496e:	d1f4      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance tick_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&tick_timer_intr); 
 8004970:	4819      	ldr	r0, [pc, #100]	; (80049d8 <DAVE_Init+0x88>)
 8004972:	f7ff f999 	bl	8003ca8 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004976:	2800      	cmp	r0, #0
 8004978:	d1ef      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of TIMER APP instance scheduler_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&scheduler_timer); 
 800497a:	4818      	ldr	r0, [pc, #96]	; (80049dc <DAVE_Init+0x8c>)
 800497c:	f7fe fffe 	bl	800397c <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004980:	2800      	cmp	r0, #0
 8004982:	d1ea      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance scheduler_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&scheduler_timer_intr); 
 8004984:	4816      	ldr	r0, [pc, #88]	; (80049e0 <DAVE_Init+0x90>)
 8004986:	f7ff f98f 	bl	8003ca8 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800498a:	2800      	cmp	r0, #0
 800498c:	d1e5      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance reset_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&reset_pin); 
 800498e:	4815      	ldr	r0, [pc, #84]	; (80049e4 <DAVE_Init+0x94>)
 8004990:	f7ff ff5e 	bl	8004850 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004994:	2800      	cmp	r0, #0
 8004996:	d1e0      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of UART APP instance cunit_logger */
	 init_status = (DAVE_STATUS_t)UART_Init(&cunit_logger); 
 8004998:	4813      	ldr	r0, [pc, #76]	; (80049e8 <DAVE_Init+0x98>)
 800499a:	f7fe fe3f 	bl	800361c <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800499e:	2800      	cmp	r0, #0
 80049a0:	d1db      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of USBD_VCOM APP instance console_logger */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&console_logger); 
 80049a2:	4812      	ldr	r0, [pc, #72]	; (80049ec <DAVE_Init+0x9c>)
 80049a4:	f7fd fec6 	bl	8002734 <USBD_VCOM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d1d6      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance vdd_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&vdd_pin); 
 80049ac:	4810      	ldr	r0, [pc, #64]	; (80049f0 <DAVE_Init+0xa0>)
 80049ae:	f7ff ff4f 	bl	8004850 <DIGITAL_IO_Init>
   }  
    if (init_status == DAVE_STATUS_SUCCESS)
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d1d1      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 80049b6:	480f      	ldr	r0, [pc, #60]	; (80049f4 <DAVE_Init+0xa4>)
 80049b8:	f7ff f976 	bl	8003ca8 <INTERRUPT_Init>
   }
    if (init_status == DAVE_STATUS_SUCCESS)
 80049bc:	2800      	cmp	r0, #0
 80049be:	d1cc      	bne.n	800495a <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t) TIMER_Init(&TIMER_Cooldwon);
 80049c0:	480d      	ldr	r0, [pc, #52]	; (80049f8 <DAVE_Init+0xa8>)
   }  
  return init_status;
} /**  End of function DAVE_Init */
 80049c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
   }
    if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t) TIMER_Init(&TIMER_Cooldwon);
 80049c6:	f7fe bfd9 	b.w	800397c <TIMER_Init>
 80049ca:	bf00      	nop
 80049cc:	1ffed7e0 	.word	0x1ffed7e0
 80049d0:	1ffed158 	.word	0x1ffed158
 80049d4:	1ffed058 	.word	0x1ffed058
 80049d8:	0800da2c 	.word	0x0800da2c
 80049dc:	1ffed094 	.word	0x1ffed094
 80049e0:	0800da28 	.word	0x0800da28
 80049e4:	0800da80 	.word	0x0800da80
 80049e8:	1ffed04c 	.word	0x1ffed04c
 80049ec:	1ffed798 	.word	0x1ffed798
 80049f0:	0800da94 	.word	0x0800da94
 80049f4:	0800da30 	.word	0x0800da30
 80049f8:	1ffed0d0 	.word	0x1ffed0d0

080049fc <pal_init>:


pal_status_t pal_init(void)
{
    return PAL_STATUS_SUCCESS;
}
 80049fc:	2000      	movs	r0, #0
 80049fe:	4770      	bx	lr

08004a00 <pal_crypt_tls_prf_sha256>:
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	b0ad      	sub	sp, #180	; 0xb4
 8004a06:	460e      	mov	r6, r1
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
 8004a08:	a801      	add	r0, sp, #4
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
 8004a0a:	4692      	mov	sl, r2
 8004a0c:	461d      	mov	r5, r3
 8004a0e:	f8bd 80d8 	ldrh.w	r8, [sp, #216]	; 0xd8
 8004a12:	f8bd 70e0 	ldrh.w	r7, [sp, #224]	; 0xe0
 8004a16:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
 8004a1a:	f006 fc3f 	bl	800b29c <mbedtls_md_init>
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
 8004a1e:	b1c6      	cbz	r6, 8004a52 <pal_crypt_tls_prf_sha256+0x52>
 8004a20:	b1bd      	cbz	r5, 8004a52 <pal_crypt_tls_prf_sha256+0x52>
 8004a22:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8004a24:	b1ab      	cbz	r3, 8004a52 <pal_crypt_tls_prf_sha256+0x52>
 8004a26:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8004a28:	b19b      	cbz	r3, 8004a52 <pal_crypt_tls_prf_sha256+0x52>
        {
            break;
        }
#endif  //OPTIGA_LIB_DEBUG_NULL_CHECK

        if (sizeof(md_hmac_temp_array ) < (uint32_t)(message_digest_length + label_length + seed_length))
 8004a2a:	f108 0920 	add.w	r9, r8, #32
 8004a2e:	eb09 0307 	add.w	r3, r9, r7
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	dd10      	ble.n	8004a58 <pal_crypt_tls_prf_sha256+0x58>
 8004a36:	ad0c      	add	r5, sp, #48	; 0x30
        {
            return_value = PAL_STATUS_INVALID_INPUT;
 8004a38:	2404      	movs	r4, #4
        {
            return_value = PAL_STATUS_SUCCESS;
        }
    } while (FALSE);
    
    mbedtls_md_free(&message_digest_context);
 8004a3a:	a801      	add	r0, sp, #4
 8004a3c:	f006 fc48 	bl	800b2d0 <mbedtls_md_free>

    memset(md_hmac_temp_array, 0x00, sizeof(md_hmac_temp_array));
 8004a40:	4628      	mov	r0, r5
 8004a42:	2100      	movs	r1, #0
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	f008 fdb4 	bl	800d5b2 <memset>
    memset(hmac_checksum_result, 0x00, sizeof(hmac_checksum_result));    
    #undef PAL_CRYPT_DIGEST_MAX_SIZE
    return return_value;
}
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	b02d      	add	sp, #180	; 0xb4
 8004a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a52:	ad0c      	add	r5, sp, #48	; 0x30
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
 8004a54:	2401      	movs	r4, #1
 8004a56:	e7f0      	b.n	8004a3a <pal_crypt_tls_prf_sha256+0x3a>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
 8004a58:	2006      	movs	r0, #6
 8004a5a:	f006 fc11 	bl	800b280 <mbedtls_md_info_from_type>

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
 8004a5e:	4629      	mov	r1, r5
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
 8004a60:	4683      	mov	fp, r0

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
 8004a62:	4642      	mov	r2, r8
 8004a64:	a814      	add	r0, sp, #80	; 0x50
 8004a66:	ad0c      	add	r5, sp, #48	; 0x30
 8004a68:	f008 fd98 	bl	800d59c <memcpy>
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
 8004a6c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8004a6e:	463a      	mov	r2, r7
 8004a70:	eb05 0009 	add.w	r0, r5, r9
 8004a74:	f008 fd92 	bl	800d59c <memcpy>
        final_seed_length = label_length + seed_length;

        if (0 != (mbedtls_md_setup(&message_digest_context,message_digest_info,1)))
 8004a78:	a801      	add	r0, sp, #4
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f006 fc41 	bl	800b304 <mbedtls_md_setup>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d1d8      	bne.n	8004a38 <pal_crypt_tls_prf_sha256+0x38>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
 8004a86:	4631      	mov	r1, r6
 8004a88:	4652      	mov	r2, sl
 8004a8a:	a801      	add	r0, sp, #4
 8004a8c:	f006 fc5e 	bl	800b34c <mbedtls_md_hmac_starts>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d1df      	bne.n	8004a54 <pal_crypt_tls_prf_sha256+0x54>

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
        final_seed_length = label_length + seed_length;
 8004a94:	eb08 0607 	add.w	r6, r8, r7
 8004a98:	b2b6      	uxth	r6, r6
        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
        {
            break;
        }
       
        if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array + message_digest_length, final_seed_length))
 8004a9a:	a914      	add	r1, sp, #80	; 0x50
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	a801      	add	r0, sp, #4
 8004aa0:	f006 fd4c 	bl	800b53c <mbedtls_md_hmac_update>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d1d5      	bne.n	8004a54 <pal_crypt_tls_prf_sha256+0x54>
        {
            break;
        }
        
        if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
 8004aa8:	a801      	add	r0, sp, #4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f006 fd5a 	bl	800b564 <mbedtls_md_hmac_finish>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d1cf      	bne.n	8004a54 <pal_crypt_tls_prf_sha256+0x54>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
 8004ab4:	2c00      	cmp	r4, #0
 8004ab6:	d042      	beq.n	8004b3e <pal_crypt_tls_prf_sha256+0x13e>
            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
            {
                break;
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, 
                            message_digest_length + final_seed_length))
 8004ab8:	3620      	adds	r6, #32
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
                                  (derived_key_length % message_digest_length) : (message_digest_length);
 8004aba:	f004 081f 	and.w	r8, r4, #31
 8004abe:	2700      	movs	r7, #0
 8004ac0:	e014      	b.n	8004aec <pal_crypt_tls_prf_sha256+0xec>

            for (hmac_checksum_result_index = 0; hmac_checksum_result_index < hmac_result_length; 
 8004ac2:	4643      	mov	r3, r8
 8004ac4:	f1b8 0f00 	cmp.w	r8, #0
 8004ac8:	d00c      	beq.n	8004ae4 <pal_crypt_tls_prf_sha256+0xe4>
                 hmac_checksum_result_index++)
            {
                p_derived_key[derive_key_len_index + hmac_checksum_result_index] = 
 8004aca:	1e5a      	subs	r2, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	f102 0201 	add.w	r2, r2, #1
 8004ad6:	eb03 0007 	add.w	r0, r3, r7
 8004ada:	bf08      	it	eq
 8004adc:	2201      	moveq	r2, #1
 8004ade:	a904      	add	r1, sp, #16
 8004ae0:	f008 fd5c 	bl	800d59c <memcpy>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
             derive_key_len_index += message_digest_length)
 8004ae4:	fa1f f789 	uxth.w	r7, r9
        if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
 8004ae8:	42bc      	cmp	r4, r7
 8004aea:	d928      	bls.n	8004b3e <pal_crypt_tls_prf_sha256+0x13e>
             derive_key_len_index += message_digest_length)
        {
            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
 8004aec:	a801      	add	r0, sp, #4
 8004aee:	f006 fd71 	bl	800b5d4 <mbedtls_md_hmac_reset>
 8004af2:	b9f8      	cbnz	r0, 8004b34 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, 
 8004af4:	a801      	add	r0, sp, #4
 8004af6:	4629      	mov	r1, r5
 8004af8:	4632      	mov	r2, r6
 8004afa:	f006 fd1f 	bl	800b53c <mbedtls_md_hmac_update>
 8004afe:	b9c8      	cbnz	r0, 8004b34 <pal_crypt_tls_prf_sha256+0x134>
                            message_digest_length + final_seed_length))
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, hmac_checksum_result))
 8004b00:	a801      	add	r0, sp, #4
 8004b02:	a904      	add	r1, sp, #16
 8004b04:	f006 fd2e 	bl	800b564 <mbedtls_md_hmac_finish>
 8004b08:	b9a0      	cbnz	r0, 8004b34 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                                
            }

            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
 8004b0a:	a801      	add	r0, sp, #4
 8004b0c:	f006 fd62 	bl	800b5d4 <mbedtls_md_hmac_reset>
 8004b10:	b980      	cbnz	r0, 8004b34 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, message_digest_length))
 8004b12:	a801      	add	r0, sp, #4
 8004b14:	4629      	mov	r1, r5
 8004b16:	2220      	movs	r2, #32
 8004b18:	f006 fd10 	bl	800b53c <mbedtls_md_hmac_update>
 8004b1c:	b950      	cbnz	r0, 8004b34 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
 8004b1e:	a801      	add	r0, sp, #4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f006 fd1f 	bl	800b564 <mbedtls_md_hmac_finish>
 8004b26:	b928      	cbnz	r0, 8004b34 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
 8004b28:	f107 0920 	add.w	r9, r7, #32
 8004b2c:	45a1      	cmp	r9, r4
 8004b2e:	dcc8      	bgt.n	8004ac2 <pal_crypt_tls_prf_sha256+0xc2>
 8004b30:	2320      	movs	r3, #32
 8004b32:	e7ca      	b.n	8004aca <pal_crypt_tls_prf_sha256+0xca>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
 8004b34:	42bc      	cmp	r4, r7
 8004b36:	bf94      	ite	ls
 8004b38:	2400      	movls	r4, #0
 8004b3a:	2401      	movhi	r4, #1
 8004b3c:	e77d      	b.n	8004a3a <pal_crypt_tls_prf_sha256+0x3a>
                                                                    hmac_checksum_result[hmac_checksum_result_index];
            }
        }
        if (derive_key_len_index >= derived_key_length)
        {
            return_value = PAL_STATUS_SUCCESS;
 8004b3e:	2400      	movs	r4, #0
 8004b40:	e77b      	b.n	8004a3a <pal_crypt_tls_prf_sha256+0x3a>
 8004b42:	bf00      	nop

08004b44 <pal_crypt_encrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	b099      	sub	sp, #100	; 0x64
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
 8004b4a:	a80a      	add	r0, sp, #40	; 0x28
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
 8004b4c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8004b4e:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 8004b52:	f8bd a094 	ldrh.w	sl, [sp, #148]	; 0x94
 8004b56:	f89d 7098 	ldrb.w	r7, [sp, #152]	; 0x98
 8004b5a:	460e      	mov	r6, r1
 8004b5c:	4690      	mov	r8, r2
 8004b5e:	461c      	mov	r4, r3
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
 8004b60:	f006 fa4e 	bl	800b000 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
 8004b64:	b165      	cbz	r5, 8004b80 <pal_crypt_encrypt_aes128_ccm+0x3c>
 8004b66:	b15e      	cbz	r6, 8004b80 <pal_crypt_encrypt_aes128_ccm+0x3c>
 8004b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b6a:	b14b      	cbz	r3, 8004b80 <pal_crypt_encrypt_aes128_ccm+0x3c>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_encrypt_key))
 8004b6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004b6e:	b13b      	cbz	r3, 8004b80 <pal_crypt_encrypt_aes128_ccm+0x3c>
 8004b70:	b134      	cbz	r4, 8004b80 <pal_crypt_encrypt_aes128_ccm+0x3c>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sEncrypt, MBEDTLS_CIPHER_ID_AES, p_encrypt_key, 8 * AES128_KEY_BITS_SIZE))
 8004b72:	4622      	mov	r2, r4
 8004b74:	a80a      	add	r0, sp, #40	; 0x28
 8004b76:	2102      	movs	r1, #2
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	f006 fa45 	bl	800b008 <mbedtls_ccm_setkey>
 8004b7e:	b138      	cbz	r0, 8004b90 <pal_crypt_encrypt_aes128_ccm+0x4c>
                                          uint8_t * p_cipher_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    #define MAC_TAG_BUFFER_SIZE     (16U)
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004b80:	2401      	movs	r4, #1
        }

        memcpy((p_cipher_text + plain_text_length), mac_output, mac_size);
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sEncrypt);
 8004b82:	a80a      	add	r0, sp, #40	; 0x28
 8004b84:	f006 fa66 	bl	800b054 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    #undef MAC_TAG_BUFFER_SIZE    
    return return_status;
}
 8004b88:	4620      	mov	r0, r4
 8004b8a:	b019      	add	sp, #100	; 0x64
 8004b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (0 != mbedtls_ccm_setkey(&sEncrypt, MBEDTLS_CIPHER_ID_AES, p_encrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }
        
        if (0 != mbedtls_ccm_encrypt_and_tag(&sEncrypt,
 8004b90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004b92:	9602      	str	r6, [sp, #8]
 8004b94:	f10d 0b18 	add.w	fp, sp, #24
 8004b98:	e88d 0408 	stmia.w	sp, {r3, sl}
 8004b9c:	9503      	str	r5, [sp, #12]
 8004b9e:	9705      	str	r7, [sp, #20]
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	f8cd b010 	str.w	fp, [sp, #16]
 8004ba6:	a80a      	add	r0, sp, #40	; 0x28
 8004ba8:	4641      	mov	r1, r8
 8004baa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bac:	f006 fa5e 	bl	800b06c <mbedtls_ccm_encrypt_and_tag>
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d1e4      	bne.n	8004b80 <pal_crypt_encrypt_aes128_ccm+0x3c>
        
        {
            break;
        }

        memcpy((p_cipher_text + plain_text_length), mac_output, mac_size);
 8004bb6:	eb05 0008 	add.w	r0, r5, r8
 8004bba:	4659      	mov	r1, fp
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	f008 fced 	bl	800d59c <memcpy>
 8004bc2:	e7de      	b.n	8004b82 <pal_crypt_encrypt_aes128_ccm+0x3e>

08004bc4 <pal_crypt_decrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
 8004bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	b094      	sub	sp, #80	; 0x50
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
 8004bca:	a806      	add	r0, sp, #24
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
 8004bcc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004bce:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 8004bd2:	f8bd a07c 	ldrh.w	sl, [sp, #124]	; 0x7c
 8004bd6:	f89d 8080 	ldrb.w	r8, [sp, #128]	; 0x80
 8004bda:	460c      	mov	r4, r1
 8004bdc:	4617      	mov	r7, r2
 8004bde:	461e      	mov	r6, r3
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
 8004be0:	f006 fa0e 	bl	800b000 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
 8004be4:	b165      	cbz	r5, 8004c00 <pal_crypt_decrypt_aes128_ccm+0x3c>
 8004be6:	b15c      	cbz	r4, 8004c00 <pal_crypt_decrypt_aes128_ccm+0x3c>
 8004be8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004bea:	b14b      	cbz	r3, 8004c00 <pal_crypt_decrypt_aes128_ccm+0x3c>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_decrypt_key))
 8004bec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004bee:	b13b      	cbz	r3, 8004c00 <pal_crypt_decrypt_aes128_ccm+0x3c>
 8004bf0:	b136      	cbz	r6, 8004c00 <pal_crypt_decrypt_aes128_ccm+0x3c>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	a806      	add	r0, sp, #24
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	f006 fa05 	bl	800b008 <mbedtls_ccm_setkey>
 8004bfe:	b138      	cbz	r0, 8004c10 <pal_crypt_decrypt_aes128_ccm+0x4c>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004c00:	2401      	movs	r4, #1
        {
            break;
        }
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sDecrypt);
 8004c02:	a806      	add	r0, sp, #24
 8004c04:	f006 fa26 	bl	800b054 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    return return_status;
}
 8004c08:	4620      	mov	r0, r4
 8004c0a:	b014      	add	sp, #80	; 0x50
 8004c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
 8004c10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c12:	9402      	str	r4, [sp, #8]
                                          (cipher_text_length - mac_size),
 8004c14:	ebc8 0107 	rsb	r1, r8, r7
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
 8004c18:	1863      	adds	r3, r4, r1
 8004c1a:	e88d 0404 	stmia.w	sp, {r2, sl}
 8004c1e:	9304      	str	r3, [sp, #16]
 8004c20:	9503      	str	r5, [sp, #12]
 8004c22:	f8cd 8014 	str.w	r8, [sp, #20]
 8004c26:	464b      	mov	r3, r9
 8004c28:	a806      	add	r0, sp, #24
 8004c2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004c2c:	f006 fa2a 	bl	800b084 <mbedtls_ccm_auth_decrypt>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004c30:	1c04      	adds	r4, r0, #0
 8004c32:	bf18      	it	ne
 8004c34:	2401      	movne	r4, #1
 8004c36:	e7e4      	b.n	8004c02 <pal_crypt_decrypt_aes128_ccm+0x3e>

08004c38 <pal_gpio_set_high>:
    return PAL_STATUS_SUCCESS;
}

void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8004c38:	b130      	cbz	r0, 8004c48 <pal_gpio_set_high+0x10>
 8004c3a:	6803      	ldr	r3, [r0, #0]
 8004c3c:	b123      	cbz	r3, 8004c48 <pal_gpio_set_high+0x10>

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8004c3e:	7c19      	ldrb	r1, [r3, #16]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	2301      	movs	r3, #1
 8004c44:	408b      	lsls	r3, r1
 8004c46:	6053      	str	r3, [r2, #4]
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop

08004c4c <pal_gpio_set_low>:
    }
}

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8004c4c:	b138      	cbz	r0, 8004c5e <pal_gpio_set_low+0x12>
 8004c4e:	6803      	ldr	r3, [r0, #0]
 8004c50:	b12b      	cbz	r3, 8004c5e <pal_gpio_set_low+0x12>

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8004c52:	7c19      	ldrb	r1, [r3, #16]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c5a:	408b      	lsls	r3, r1
 8004c5c:	6053      	str	r3, [r2, #4]
 8004c5e:	4770      	bx	lr

08004c60 <i2c_master_end_of_transmit_callback>:
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
}

/// @cond hidden
void i2c_master_end_of_transmit_callback(void)
{
 8004c60:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <i2c_master_end_of_transmit_callback+0x18>)
 8004c64:	681b      	ldr	r3, [r3, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8004c66:	2100      	movs	r1, #0
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	6898      	ldr	r0, [r3, #8]
 8004c6c:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004c6e:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <i2c_master_end_of_transmit_callback+0x1c>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	bd08      	pop	{r3, pc}
 8004c76:	bf00      	nop
 8004c78:	1ffed7e4 	.word	0x1ffed7e4
 8004c7c:	1ffed7e8 	.word	0x1ffed7e8

08004c80 <i2c_master_end_of_receive_callback>:
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
}

void i2c_master_end_of_receive_callback(void)
{
 8004c80:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <i2c_master_end_of_receive_callback+0x18>)
 8004c84:	681b      	ldr	r3, [r3, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8004c86:	2100      	movs	r1, #0
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	6898      	ldr	r0, [r3, #8]
 8004c8c:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004c8e:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <i2c_master_end_of_receive_callback+0x1c>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	bd08      	pop	{r3, pc}
 8004c96:	bf00      	nop
 8004c98:	1ffed7e4 	.word	0x1ffed7e4
 8004c9c:	1ffed7e8 	.word	0x1ffed7e8

08004ca0 <i2c_master_error_detected_callback>:
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
}

void i2c_master_error_detected_callback(void)
{
 8004ca0:	b538      	push	{r3, r4, r5, lr}
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 8004ca2:	4d12      	ldr	r5, [pc, #72]	; (8004cec <i2c_master_error_detected_callback+0x4c>)
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	681c      	ldr	r4, [r3, #0]
 8004ca8:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8004caa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 8004cae:	b9a2      	cbnz	r2, 8004cda <i2c_master_error_detected_callback+0x3a>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 8004cb0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 8004cb4:	b943      	cbnz	r3, 8004cc8 <i2c_master_error_detected_callback+0x28>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8004cb6:	682b      	ldr	r3, [r5, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8004cb8:	2101      	movs	r1, #1
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	6898      	ldr	r0, [r3, #8]
 8004cbe:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <i2c_master_error_detected_callback+0x50>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f7ff fcb1 	bl	8004630 <I2C_MASTER_AbortReceive>
 8004cce:	68a2      	ldr	r2, [r4, #8]
 8004cd0:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1fb      	bne.n	8004cd0 <i2c_master_error_detected_callback+0x30>
 8004cd8:	e7ed      	b.n	8004cb6 <i2c_master_error_detected_callback+0x16>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7ff fc7c 	bl	80045d8 <I2C_MASTER_AbortTransmit>
 8004ce0:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8004ce2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	d1fb      	bne.n	8004ce2 <i2c_master_error_detected_callback+0x42>
 8004cea:	e7e1      	b.n	8004cb0 <i2c_master_error_detected_callback+0x10>
 8004cec:	1ffed7e4 	.word	0x1ffed7e4
 8004cf0:	1ffed7e8 	.word	0x1ffed7e8

08004cf4 <i2c_master_nack_received_callback>:

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
}

void i2c_master_nack_received_callback(void)
{
 8004cf4:	b538      	push	{r3, r4, r5, lr}

void i2c_master_error_detected_callback(void)
{
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 8004cf6:	4d12      	ldr	r5, [pc, #72]	; (8004d40 <i2c_master_nack_received_callback+0x4c>)
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	681c      	ldr	r4, [r3, #0]
 8004cfc:	68a3      	ldr	r3, [r4, #8]
 8004cfe:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 8004d02:	b9a2      	cbnz	r2, 8004d2e <i2c_master_nack_received_callback+0x3a>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 8004d04:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 8004d08:	b943      	cbnz	r3, 8004d1c <i2c_master_nack_received_callback+0x28>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8004d0a:	682b      	ldr	r3, [r5, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	6898      	ldr	r0, [r3, #8]
 8004d12:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <i2c_master_nack_received_callback+0x50>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7ff fc87 	bl	8004630 <I2C_MASTER_AbortReceive>
 8004d22:	68a2      	ldr	r2, [r4, #8]
 8004d24:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1fb      	bne.n	8004d24 <i2c_master_nack_received_callback+0x30>
 8004d2c:	e7ed      	b.n	8004d0a <i2c_master_nack_received_callback+0x16>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7ff fc52 	bl	80045d8 <I2C_MASTER_AbortTransmit>
 8004d34:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8004d36:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	d1fb      	bne.n	8004d36 <i2c_master_nack_received_callback+0x42>
 8004d3e:	e7e1      	b.n	8004d04 <i2c_master_nack_received_callback+0x10>
 8004d40:	1ffed7e4 	.word	0x1ffed7e4
 8004d44:	1ffed7e8 	.word	0x1ffed7e8

08004d48 <i2c_master_arbitration_lost_callback>:
{
    i2c_master_error_detected_callback();
}

void i2c_master_arbitration_lost_callback(void)
{
 8004d48:	b538      	push	{r3, r4, r5, lr}

void i2c_master_error_detected_callback(void)
{
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 8004d4a:	4d12      	ldr	r5, [pc, #72]	; (8004d94 <i2c_master_arbitration_lost_callback+0x4c>)
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	681c      	ldr	r4, [r3, #0]
 8004d50:	68a3      	ldr	r3, [r4, #8]
 8004d52:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 8004d56:	b9a2      	cbnz	r2, 8004d82 <i2c_master_arbitration_lost_callback+0x3a>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 8004d58:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 8004d5c:	b943      	cbnz	r3, 8004d70 <i2c_master_arbitration_lost_callback+0x28>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8004d5e:	682b      	ldr	r3, [r5, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8004d60:	2101      	movs	r1, #1
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	6898      	ldr	r0, [r3, #8]
 8004d66:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <i2c_master_arbitration_lost_callback+0x50>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff fc5d 	bl	8004630 <I2C_MASTER_AbortReceive>
 8004d76:	68a2      	ldr	r2, [r4, #8]
 8004d78:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1fb      	bne.n	8004d78 <i2c_master_arbitration_lost_callback+0x30>
 8004d80:	e7ed      	b.n	8004d5e <i2c_master_arbitration_lost_callback+0x16>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff fc28 	bl	80045d8 <I2C_MASTER_AbortTransmit>
 8004d88:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8004d8a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	d1fb      	bne.n	8004d8a <i2c_master_arbitration_lost_callback+0x42>
 8004d92:	e7e1      	b.n	8004d58 <i2c_master_arbitration_lost_callback+0x10>
 8004d94:	1ffed7e4 	.word	0x1ffed7e4
 8004d98:	1ffed7e8 	.word	0x1ffed7e8

08004d9c <pal_i2c_init>:
/// @endcond

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	4770      	bx	lr

08004da0 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
 8004da0:	2000      	movs	r0, #0
 8004da2:	4770      	bx	lr

08004da4 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8004da4:	b5f0      	push	{r4, r5, r6, r7, lr}
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8004da6:	4d15      	ldr	r5, [pc, #84]	; (8004dfc <pal_i2c_write+0x58>)
 8004da8:	682f      	ldr	r7, [r5, #0]
{
    return PAL_STATUS_SUCCESS;
}

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8004daa:	b083      	sub	sp, #12
 8004dac:	4604      	mov	r4, r0
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8004dae:	b137      	cbz	r7, 8004dbe <pal_i2c_write+0x1a>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8004db0:	68a0      	ldr	r0, [r4, #8]
 8004db2:	68e3      	ldr	r3, [r4, #12]
 8004db4:	2102      	movs	r1, #2
 8004db6:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8004db8:	2002      	movs	r0, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
 8004dba:	b003      	add	sp, #12
 8004dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
    {
        g_entry_count++;
 8004dbe:	6828      	ldr	r0, [r5, #0]
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	6028      	str	r0, [r5, #0]
        if (1 == g_entry_count)
 8004dc4:	682e      	ldr	r6, [r5, #0]
 8004dc6:	2e01      	cmp	r6, #1
 8004dc8:	d1f2      	bne.n	8004db0 <pal_i2c_write+0xc>
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
 8004dca:	f894 c004 	ldrb.w	ip, [r4, #4]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004dce:	f8df e030 	ldr.w	lr, [pc, #48]	; 8004e00 <pal_i2c_write+0x5c>

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 8004dd2:	6820      	ldr	r0, [r4, #0]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	e88d 0044 	stmia.w	sp, {r2, r6}
 8004dda:	4631      	mov	r1, r6
 8004ddc:	ea4f 024c 	mov.w	r2, ip, lsl #1
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004de0:	f8ce 4000 	str.w	r4, [lr]

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 8004de4:	f7fe ffb2 	bl	8003d4c <I2C_MASTER_Transmit>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d0e6      	beq.n	8004dba <pal_i2c_write+0x16>
                                                             (bool)TRUE))
        {
            //If I2C Master fails to invoke the write operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8004dec:	68a0      	ldr	r0, [r4, #8]
 8004dee:	68e3      	ldr	r3, [r4, #12]
 8004df0:	4631      	mov	r1, r6
 8004df2:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004df4:	602f      	str	r7, [r5, #0]
    return PAL_STATUS_SUCCESS;
}

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
 8004df6:	4630      	mov	r0, r6
 8004df8:	e7df      	b.n	8004dba <pal_i2c_write+0x16>
 8004dfa:	bf00      	nop
 8004dfc:	1ffed7e8 	.word	0x1ffed7e8
 8004e00:	1ffed7e4 	.word	0x1ffed7e4

08004e04 <pal_i2c_read>:
    }
    return status;
}

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8004e04:	b5f0      	push	{r4, r5, r6, r7, lr}
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8004e06:	4e15      	ldr	r6, [pc, #84]	; (8004e5c <pal_i2c_read+0x58>)
 8004e08:	6837      	ldr	r7, [r6, #0]
    }
    return status;
}

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	4604      	mov	r4, r0
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8004e0e:	b137      	cbz	r7, 8004e1e <pal_i2c_read+0x1a>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8004e10:	68a0      	ldr	r0, [r4, #8]
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	2102      	movs	r1, #2
 8004e16:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8004e18:	2002      	movs	r0, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
 8004e1a:	b005      	add	sp, #20
 8004e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
    {
        g_entry_count++;
 8004e1e:	6830      	ldr	r0, [r6, #0]
 8004e20:	3001      	adds	r0, #1
 8004e22:	6030      	str	r0, [r6, #0]
        if (1 == g_entry_count)
 8004e24:	6835      	ldr	r5, [r6, #0]
 8004e26:	2d01      	cmp	r5, #1
 8004e28:	d1f2      	bne.n	8004e10 <pal_i2c_read+0xc>
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
 8004e2a:	f894 c004 	ldrb.w	ip, [r4, #4]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004e2e:	f8df e030 	ldr.w	lr, [pc, #48]	; 8004e60 <pal_i2c_read+0x5c>

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	9502      	str	r5, [sp, #8]
 8004e36:	e88d 0024 	stmia.w	sp, {r2, r5}
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8004e40:	4629      	mov	r1, r5
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004e42:	f8ce 4000 	str.w	r4, [lr]

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 8004e46:	f7ff f90f 	bl	8004068 <I2C_MASTER_Receive>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0e5      	beq.n	8004e1a <pal_i2c_read+0x16>
                                                            (bool)TRUE))
        {
            //If I2C Master fails to invoke the read operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8004e4e:	68a0      	ldr	r0, [r4, #8]
 8004e50:	68e3      	ldr	r3, [r4, #12]
 8004e52:	4629      	mov	r1, r5
 8004e54:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004e56:	6037      	str	r7, [r6, #0]
    return status;
}

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
 8004e58:	4628      	mov	r0, r5
 8004e5a:	e7de      	b.n	8004e1a <pal_i2c_read+0x16>
 8004e5c:	1ffed7e8 	.word	0x1ffed7e8
 8004e60:	1ffed7e4 	.word	0x1ffed7e4

08004e64 <pal_i2c_set_bitrate>:
    }
    return status;
}

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8004e64:	b570      	push	{r4, r5, r6, lr}
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8004e66:	4c15      	ldr	r4, [pc, #84]	; (8004ebc <pal_i2c_set_bitrate+0x58>)
 8004e68:	6823      	ldr	r3, [r4, #0]
    }
    return status;
}

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8004e6a:	4605      	mov	r5, r0
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8004e6c:	b13b      	cbz	r3, 8004e7e <pal_i2c_set_bitrate+0x1a>
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 8004e6e:	68eb      	ldr	r3, [r5, #12]
 8004e70:	b113      	cbz	r3, 8004e78 <pal_i2c_set_bitrate+0x14>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
 8004e72:	68a8      	ldr	r0, [r5, #8]
 8004e74:	2102      	movs	r1, #2
 8004e76:	4798      	blx	r3
    }
    return status;
}

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8004e78:	2602      	movs	r6, #2
    if (PAL_STATUS_I2C_BUSY != return_status)
    {
        pal_i2c_release((void * )p_i2c_context);
    }
    return return_status;
}
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
    {
        g_entry_count++;
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	6023      	str	r3, [r4, #0]
        if (1 == g_entry_count)
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d1f1      	bne.n	8004e6e <pal_i2c_set_bitrate+0xa>
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
                                                            bitrate * 1000))
 8004e8a:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
 8004e8e:	6803      	ldr	r3, [r0, #0]
                                                            bitrate * 1000))
 8004e90:	bf28      	it	cs
 8004e92:	f44f 71c8 	movcs.w	r1, #400	; 0x190
 8004e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	fb02 f101 	mul.w	r1, r2, r1
 8004ea0:	f7fb fe3e 	bl	8000b20 <XMC_I2C_CH_SetBaudrate>
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 8004ea4:	68eb      	ldr	r3, [r5, #12]
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
                                                            bitrate * 1000))
        {
            return_status = PAL_STATUS_FAILURE;
 8004ea6:	1c06      	adds	r6, r0, #0
 8004ea8:	bf18      	it	ne
 8004eaa:	2601      	movne	r6, #1
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 8004eac:	b113      	cbz	r3, 8004eb4 <pal_i2c_set_bitrate+0x50>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
 8004eae:	68a8      	ldr	r0, [r5, #8]
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6023      	str	r3, [r4, #0]
    if (PAL_STATUS_I2C_BUSY != return_status)
    {
        pal_i2c_release((void * )p_i2c_context);
    }
    return return_status;
}
 8004eb8:	4630      	mov	r0, r6
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	1ffed7e8 	.word	0x1ffed7e8

08004ec0 <cunit_console_uart_end_of_transmit_callback>:
        .logger_tx_flag = 1
};

void cunit_console_uart_end_of_transmit_callback(void)
{
    cunit_console.logger_tx_flag = 0;
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <cunit_console_uart_end_of_transmit_callback+0x8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	715a      	strb	r2, [r3, #5]
 8004ec6:	4770      	bx	lr
 8004ec8:	1ffed1ac 	.word	0x1ffed1ac

08004ecc <cunit_console_uart_end_of_receive_callback>:
}

void cunit_console_uart_end_of_receive_callback(void)
{
    cunit_console.logger_rx_flag = 0;
 8004ecc:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <cunit_console_uart_end_of_receive_callback+0x8>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	711a      	strb	r2, [r3, #4]
 8004ed2:	4770      	bx	lr
 8004ed4:	1ffed1ac 	.word	0x1ffed1ac

08004ed8 <pal_logger_init>:

/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
 8004ed8:	b508      	push	{r3, lr}
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 8004eda:	6803      	ldr	r3, [r0, #0]
 8004edc:	b10b      	cbz	r3, 8004ee2 <pal_logger_init+0xa>
            while(!USBD_VCOM_IsEnumDone()){};
            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
            return_status = PAL_STATUS_SUCCESS;
 8004ede:	2000      	movs	r0, #0
 8004ee0:	bd08      	pop	{r3, pc}
    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
        {
            if(USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 8004ee2:	f7fd fcc7 	bl	8002874 <USBD_VCOM_Connect>
 8004ee6:	b920      	cbnz	r0, 8004ef2 <pal_logger_init+0x1a>
            {
                break;
            }

            while(!USBD_VCOM_IsEnumDone()){};
 8004ee8:	f7fd fc78 	bl	80027dc <USBD_VCOM_IsEnumDone>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d0fb      	beq.n	8004ee8 <pal_logger_init+0x10>
 8004ef0:	e7f5      	b.n	8004ede <pal_logger_init+0x6>
/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004ef2:	2001      	movs	r0, #1
        {
            return_status = PAL_STATUS_SUCCESS;
        }
    }while(FALSE);
    return return_status;
}
 8004ef4:	bd08      	pop	{r3, pc}
 8004ef6:	bf00      	nop

08004ef8 <pal_logger_write>:
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4604      	mov	r4, r0
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	b160      	cbz	r0, 8004f1a <pal_logger_write+0x22>
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
            p_log_context->logger_tx_flag = 1U;
 8004f00:	2301      	movs	r3, #1
 8004f02:	7163      	strb	r3, [r4, #5]

            return_status = (int32_t)UART_Transmit(p_log_context->logger_config_ptr, (uint8_t *)p_log_data, log_data_length);
 8004f04:	f7fe fb8e 	bl	8003624 <UART_Transmit>
            if (return_status != PAL_STATUS_SUCCESS)
 8004f08:	b928      	cbnz	r0, 8004f16 <pal_logger_write+0x1e>
            {
                break;
            }
            while (p_log_context->logger_tx_flag)
 8004f0a:	7963      	ldrb	r3, [r4, #5]
 8004f0c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1fa      	bne.n	8004f0a <pal_logger_write+0x12>
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	b280      	uxth	r0, r0
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_SendData((int8_t *)p_log_data,(uint16_t)log_data_length))
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	b291      	uxth	r1, r2
 8004f1e:	f7fd fc6b 	bl	80027f8 <USBD_VCOM_SendData>
 8004f22:	4604      	mov	r4, r0
 8004f24:	b108      	cbz	r0, 8004f2a <pal_logger_write+0x32>
 8004f26:	2001      	movs	r0, #1
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
}
 8004f28:	bd38      	pop	{r3, r4, r5, pc}
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_SendData((int8_t *)p_log_data,(uint16_t)log_data_length))
            {
                break;
            }
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 8004f2a:	4802      	ldr	r0, [pc, #8]	; (8004f34 <pal_logger_write+0x3c>)
 8004f2c:	f7fd fad8 	bl	80024e0 <CDC_Device_USBTask>
 8004f30:	4620      	mov	r0, r4
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	1fff0444 	.word	0x1fff0444

08004f38 <pal_logger_read>:
    } while(0);
    return ((pal_status_t)return_status);
}

pal_status_t pal_logger_read(void * p_logger_context, uint8_t * p_log_data, uint32_t log_data_length)
{
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4604      	mov	r4, r0
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 8004f3c:	6800      	ldr	r0, [r0, #0]
 8004f3e:	b160      	cbz	r0, 8004f5a <pal_logger_read+0x22>
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
            p_log_context->logger_rx_flag = 1U;
 8004f40:	2301      	movs	r3, #1
 8004f42:	7123      	strb	r3, [r4, #4]
            return_status = (int32_t)UART_Receive(p_log_context->logger_config_ptr, p_log_data, log_data_length);
 8004f44:	f7fe fba2 	bl	800368c <UART_Receive>
            if (return_status != PAL_STATUS_SUCCESS)
 8004f48:	b928      	cbnz	r0, 8004f56 <pal_logger_read+0x1e>
            {
                break;
            }
            while (p_log_context->logger_rx_flag)
 8004f4a:	7923      	ldrb	r3, [r4, #4]
 8004f4c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1fa      	bne.n	8004f4a <pal_logger_read+0x12>
 8004f54:	bd38      	pop	{r3, r4, r5, pc}
 8004f56:	b280      	uxth	r0, r0
 8004f58:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_ReceiveData((int8_t * )p_log_data,(uint16_t)log_data_length))
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	b291      	uxth	r1, r2
 8004f5e:	f7fd fc65 	bl	800282c <USBD_VCOM_ReceiveData>
 8004f62:	4604      	mov	r4, r0
 8004f64:	b108      	cbz	r0, 8004f6a <pal_logger_read+0x32>
 8004f66:	2001      	movs	r0, #1
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
}
 8004f68:	bd38      	pop	{r3, r4, r5, pc}
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_ReceiveData((int8_t * )p_log_data,(uint16_t)log_data_length))
            {
                break;
            }
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 8004f6a:	4802      	ldr	r0, [pc, #8]	; (8004f74 <pal_logger_read+0x3c>)
 8004f6c:	f7fd fab8 	bl	80024e0 <CDC_Device_USBTask>
 8004f70:	4620      	mov	r0, r4
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	1fff0444 	.word	0x1fff0444

08004f78 <pal_os_datastore_write>:
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t offset = 0;

    switch(datastore_id)
 8004f78:	2822      	cmp	r0, #34	; 0x22


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8004f7a:	b538      	push	{r3, r4, r5, lr}
 8004f7c:	4613      	mov	r3, r2
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t offset = 0;

    switch(datastore_id)
 8004f7e:	d019      	beq.n	8004fb4 <pal_os_datastore_write+0x3c>
 8004f80:	2833      	cmp	r0, #51	; 0x33
 8004f82:	d00e      	beq.n	8004fa2 <pal_os_datastore_write+0x2a>
 8004f84:	2811      	cmp	r0, #17
 8004f86:	d001      	beq.n	8004f8c <pal_os_datastore_write+0x14>

pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004f88:	2001      	movs	r0, #1
        {
            break;
        }
    }
    return return_status;
}
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of updating
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8004f8c:	2a40      	cmp	r2, #64	; 0x40
 8004f8e:	d8fb      	bhi.n	8004f88 <pal_os_datastore_write+0x10>
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8004f90:	4d09      	ldr	r5, [pc, #36]	; (8004fb8 <pal_os_datastore_write+0x40>)
 8004f92:	2400      	movs	r4, #0
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8004f94:	1ca8      	adds	r0, r5, #2
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8004f96:	706a      	strb	r2, [r5, #1]
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8004f98:	702c      	strb	r4, [r5, #0]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8004f9a:	f008 faff 	bl	800d59c <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8004fa2:	4c06      	ldr	r4, [pc, #24]	; (8004fbc <pal_os_datastore_write+0x44>)
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8004fa4:	7063      	strb	r3, [r4, #1]
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8004fa6:	0a1d      	lsrs	r5, r3, #8
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8004fa8:	1ca0      	adds	r0, r4, #2
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8004faa:	7025      	strb	r5, [r4, #0]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8004fac:	f008 faf6 	bl	800d59c <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8004fb0:	2000      	movs	r0, #0
            break;
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the manage context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8004fb4:	4c02      	ldr	r4, [pc, #8]	; (8004fc0 <pal_os_datastore_write+0x48>)
 8004fb6:	e7f5      	b.n	8004fa4 <pal_os_datastore_write+0x2c>
 8004fb8:	1ffed1bc 	.word	0x1ffed1bc
 8004fbc:	1fff07f8 	.word	0x1fff07f8
 8004fc0:	1fff07b4 	.word	0x1fff07b4

08004fc4 <pal_os_datastore_read>:
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint16_t data_length;
    uint8_t offset = 0;

    switch(datastore_id)
 8004fc4:	2822      	cmp	r0, #34	; 0x22


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8004fc6:	b538      	push	{r3, r4, r5, lr}
 8004fc8:	4614      	mov	r4, r2
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint16_t data_length;
    uint8_t offset = 0;

    switch(datastore_id)
 8004fca:	d01d      	beq.n	8005008 <pal_os_datastore_read+0x44>
 8004fcc:	2833      	cmp	r0, #51	; 0x33
 8004fce:	d00e      	beq.n	8004fee <pal_os_datastore_read+0x2a>
 8004fd0:	2811      	cmp	r0, #17
 8004fd2:	d003      	beq.n	8004fdc <pal_os_datastore_read+0x18>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            *p_buffer_length = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	8013      	strh	r3, [r2, #0]

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004fd8:	2001      	movs	r0, #1
            break;
        }
        default:
        {
            *p_buffer_length = 0;
            break;
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8004fdc:	4a0b      	ldr	r2, [pc, #44]	; (800500c <pal_os_datastore_read+0x48>)
 8004fde:	7815      	ldrb	r5, [r2, #0]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8004fe0:	7853      	ldrb	r3, [r2, #1]
 8004fe2:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8004fe6:	2d40      	cmp	r5, #64	; 0x40
 8004fe8:	d906      	bls.n	8004ff8 <pal_os_datastore_read+0x34>

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004fea:	2001      	movs	r0, #1
            break;
        }
    }

    return return_status;
}
 8004fec:	bd38      	pop	{r3, r4, r5, pc}
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8004fee:	4a08      	ldr	r2, [pc, #32]	; (8005010 <pal_os_datastore_read+0x4c>)
 8004ff0:	7815      	ldrb	r5, [r2, #0]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8004ff2:	7853      	ldrb	r3, [r2, #1]
 8004ff4:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	1c91      	adds	r1, r2, #2
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	f008 facd 	bl	800d59c <memcpy>
            *p_buffer_length = data_length;
 8005002:	8025      	strh	r5, [r4, #0]
            return_status = PAL_STATUS_SUCCESS;
 8005004:	2000      	movs	r0, #0
            break;
 8005006:	bd38      	pop	{r3, r4, r5, pc}
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8005008:	4a02      	ldr	r2, [pc, #8]	; (8005014 <pal_os_datastore_read+0x50>)
 800500a:	e7f1      	b.n	8004ff0 <pal_os_datastore_read+0x2c>
 800500c:	1ffed1bc 	.word	0x1ffed1bc
 8005010:	1fff07f8 	.word	0x1fff07f8
 8005014:	1fff07b4 	.word	0x1fff07b4

08005018 <pal_os_event_start>:
/// @cond hidden

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8005018:	b508      	push	{r3, lr}
    if (FALSE == p_pal_os_event->is_event_triggered)
 800501a:	7803      	ldrb	r3, [r0, #0]
 800501c:	b103      	cbz	r3, 8005020 <pal_os_event_start+0x8>
 800501e:	bd08      	pop	{r3, pc}
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8005020:	2301      	movs	r3, #1
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
 8005022:	6041      	str	r1, [r0, #4]

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8005024:	7003      	strb	r3, [r0, #0]
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
    p_pal_os_event->callback_ctx = callback_args;
 8005026:	6082      	str	r2, [r0, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 8005028:	4904      	ldr	r1, [pc, #16]	; (800503c <pal_os_event_start+0x24>)
 800502a:	4805      	ldr	r0, [pc, #20]	; (8005040 <pal_os_event_start+0x28>)
 800502c:	f7fe fd60 	bl	8003af0 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 8005030:	4803      	ldr	r0, [pc, #12]	; (8005040 <pal_os_event_start+0x28>)
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
    }
}
 8005032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
    TIMER_Start(&scheduler_timer);
 8005036:	f7fe bd23 	b.w	8003a80 <TIMER_Start>
 800503a:	bf00      	nop
 800503c:	000186a0 	.word	0x000186a0
 8005040:	1ffed094 	.word	0x1ffed094

08005044 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
    //lint --e{714} suppress "The API pal_os_event_stop is not exposed in header file but used as extern in 
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
 8005044:	2300      	movs	r3, #0
 8005046:	7003      	strb	r3, [r0, #0]
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop

0800504c <pal_os_event_create>:
}

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
    if (( NULL != callback )&&( NULL != callback_args ))
 800504c:	b1a8      	cbz	r0, 800507a <pal_os_event_create+0x2e>
 800504e:	b1a1      	cbz	r1, 800507a <pal_os_event_create+0x2e>
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
}

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8005050:	b538      	push	{r3, r4, r5, lr}

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
 8005052:	4c0b      	ldr	r4, [pc, #44]	; (8005080 <pal_os_event_create+0x34>)
 8005054:	7823      	ldrb	r3, [r4, #0]
 8005056:	b10b      	cbz	r3, 800505c <pal_os_event_create+0x10>
    if (( NULL != callback )&&( NULL != callback_args ))
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
    }
    return (&pal_os_event_0);
}
 8005058:	4809      	ldr	r0, [pc, #36]	; (8005080 <pal_os_event_create+0x34>)
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	4603      	mov	r3, r0
 800505e:	460a      	mov	r2, r1

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8005060:	2501      	movs	r5, #1
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 8005062:	4908      	ldr	r1, [pc, #32]	; (8005084 <pal_os_event_create+0x38>)
 8005064:	4808      	ldr	r0, [pc, #32]	; (8005088 <pal_os_event_create+0x3c>)
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
 8005066:	6063      	str	r3, [r4, #4]
    p_pal_os_event->callback_ctx = callback_args;
 8005068:	60a2      	str	r2, [r4, #8]

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
 800506a:	7025      	strb	r5, [r4, #0]
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 800506c:	f7fe fd40 	bl	8003af0 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 8005070:	4805      	ldr	r0, [pc, #20]	; (8005088 <pal_os_event_create+0x3c>)
 8005072:	f7fe fd05 	bl	8003a80 <TIMER_Start>
    if (( NULL != callback )&&( NULL != callback_args ))
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
    }
    return (&pal_os_event_0);
}
 8005076:	4802      	ldr	r0, [pc, #8]	; (8005080 <pal_os_event_create+0x34>)
 8005078:	bd38      	pop	{r3, r4, r5, pc}
 800507a:	4801      	ldr	r0, [pc, #4]	; (8005080 <pal_os_event_create+0x34>)
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	1ffed7ec 	.word	0x1ffed7ec
 8005084:	000186a0 	.word	0x000186a0
 8005088:	1ffed094 	.word	0x1ffed094

0800508c <CCU43_1_IRQHandler>:

void pal_os_event_trigger_registered_callback(void)
{
 800508c:	b510      	push	{r4, lr}
    register_callback callback;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    TIMER_ClearEvent(&scheduler_timer);
 800508e:	4808      	ldr	r0, [pc, #32]	; (80050b0 <CCU43_1_IRQHandler+0x24>)
 8005090:	f7fe fdde 	bl	8003c50 <TIMER_ClearEvent>
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_Stop(&scheduler_timer);
 8005094:	4806      	ldr	r0, [pc, #24]	; (80050b0 <CCU43_1_IRQHandler+0x24>)
 8005096:	f7fe fd09 	bl	8003aac <TIMER_Stop>
    TIMER_Clear(&scheduler_timer);
 800509a:	4805      	ldr	r0, [pc, #20]	; (80050b0 <CCU43_1_IRQHandler+0x24>)
 800509c:	f7fe fdee 	bl	8003c7c <TIMER_Clear>
    /// If callback_ctx is NULL then callback function will have unexpected behavior 
    if (pal_os_event_0.callback_registered)
 80050a0:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <CCU43_1_IRQHandler+0x28>)
 80050a2:	6853      	ldr	r3, [r2, #4]
 80050a4:	b11b      	cbz	r3, 80050ae <CCU43_1_IRQHandler+0x22>
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
 80050a6:	6890      	ldr	r0, [r2, #8]
    }
}
 80050a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TIMER_Clear(&scheduler_timer);
    /// If callback_ctx is NULL then callback function will have unexpected behavior 
    if (pal_os_event_0.callback_registered)
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
 80050ac:	4718      	bx	r3
 80050ae:	bd10      	pop	{r4, pc}
 80050b0:	1ffed094 	.word	0x1ffed094
 80050b4:	1ffed7ec 	.word	0x1ffed7ec

080050b8 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
 80050b8:	b510      	push	{r4, lr}
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 80050ba:	4c07      	ldr	r4, [pc, #28]	; (80050d8 <pal_os_event_register_callback_oneshot+0x20>)
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
 80050bc:	6041      	str	r1, [r0, #4]
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 80050be:	2164      	movs	r1, #100	; 0x64
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
    p_pal_os_event->callback_ctx = callback_args;
 80050c0:	6082      	str	r2, [r0, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 80050c2:	fb01 f103 	mul.w	r1, r1, r3
 80050c6:	4620      	mov	r0, r4
 80050c8:	f7fe fd12 	bl	8003af0 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 80050cc:	4620      	mov	r0, r4
}
 80050ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
    TIMER_Start(&scheduler_timer);
 80050d2:	f7fe bcd5 	b.w	8003a80 <TIMER_Start>
 80050d6:	bf00      	nop
 80050d8:	1ffed094 	.word	0x1ffed094

080050dc <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop

080050e0 <pal_os_lock_exit_critical_section>:
}

void pal_os_lock_exit_critical_section()
{
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop

080050e4 <pal_os_calloc>:
    return (malloc(block_size));
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
    return (calloc(number_of_blocks, block_size));
 80050e4:	f008 ba0c 	b.w	800d500 <calloc>

080050e8 <pal_os_free>:
}

void pal_os_free(void * p_block)
{
    free(p_block);
 80050e8:	f008 ba40 	b.w	800d56c <free>

080050ec <pal_os_memcpy>:
}

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
    memcpy(p_destination, p_source, size);
 80050ec:	f008 ba56 	b.w	800d59c <memcpy>

080050f0 <pal_os_memset>:
}

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
    memset(p_buffer, (int32_t)value, size);
 80050f0:	f008 ba5f 	b.w	800d5b2 <memset>

080050f4 <CCU41_1_IRQHandler>:

/// @cond hidden
static volatile uint32_t g_tick_count = 0;

void delay_timer_isr(void)
{
 80050f4:	b510      	push	{r4, lr}
    TIMER_ClearEvent(&tick_timer);
 80050f6:	4c06      	ldr	r4, [pc, #24]	; (8005110 <CCU41_1_IRQHandler+0x1c>)
 80050f8:	4620      	mov	r0, r4
 80050fa:	f7fe fda9 	bl	8003c50 <TIMER_ClearEvent>
    (void)TIMER_Clear(&tick_timer);
 80050fe:	4620      	mov	r0, r4
 8005100:	f7fe fdbc 	bl	8003c7c <TIMER_Clear>
    g_tick_count += 1U;
 8005104:	4a03      	ldr	r2, [pc, #12]	; (8005114 <CCU41_1_IRQHandler+0x20>)
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	1ffed058 	.word	0x1ffed058
 8005114:	1ffed7fc 	.word	0x1ffed7fc

08005118 <pal_os_timer_get_time_in_microseconds>:
{
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // This API is needed to support optiga cmd scheduler. 
    static uint32_t count = 0;
    // The implementation must ensure that every invocation of this API returns a unique value.
    return (count++);
 8005118:	4b02      	ldr	r3, [pc, #8]	; (8005124 <pal_os_timer_get_time_in_microseconds+0xc>)
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	1c42      	adds	r2, r0, #1
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	1ffed800 	.word	0x1ffed800

08005128 <pal_os_timer_get_time_in_milliseconds>:

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
 8005128:	4b01      	ldr	r3, [pc, #4]	; (8005130 <pal_os_timer_get_time_in_milliseconds+0x8>)
 800512a:	6818      	ldr	r0, [r3, #0]
}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	1ffed7fc 	.word	0x1ffed7fc

08005134 <pal_os_timer_delay_in_milliseconds>:
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
 8005134:	4a03      	ldr	r2, [pc, #12]	; (8005144 <pal_os_timer_delay_in_milliseconds+0x10>)
 8005136:	6811      	ldr	r1, [r2, #0]
 8005138:	6813      	ldr	r3, [r2, #0]
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
    {
        current_time = pal_os_timer_get_time_in_milliseconds();
        time_stamp_diff = current_time - start_time;
 800513a:	1a5b      	subs	r3, r3, r1
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
 800513c:	4283      	cmp	r3, r0
 800513e:	d9fb      	bls.n	8005138 <pal_os_timer_delay_in_milliseconds+0x4>
        if (start_time > current_time)
        {
            time_stamp_diff = (0xFFFFFFFF + (current_time - start_time)) + 0x01;
        }        
    }
}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	1ffed7fc 	.word	0x1ffed7fc

08005148 <optiga_util_generic_event_handler>:
_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005148:	2300      	movs	r3, #0
 800514a:	8403      	strh	r3, [r0, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 800514c:	69c3      	ldr	r3, [r0, #28]
 800514e:	6980      	ldr	r0, [r0, #24]
 8005150:	4718      	bx	r3
 8005152:	bf00      	nop

08005154 <optiga_util_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
    switch (parameter_type)
 8005154:	2901      	cmp	r1, #1
 8005156:	d005      	beq.n	8005164 <optiga_util_set_comms_params+0x10>
 8005158:	2902      	cmp	r1, #2
 800515a:	d102      	bne.n	8005162 <optiga_util_set_comms_params+0xe>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
 800515c:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
 8005160:	4770      	bx	lr
 8005162:	4770      	bx	lr
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005164:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
            break;
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop

0800516c <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_util_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 800516e:	b1d9      	cbz	r1, 80051a8 <optiga_util_create+0x3c>
 8005170:	460d      	mov	r5, r1
 8005172:	4606      	mov	r6, r0
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 8005174:	2124      	movs	r1, #36	; 0x24
 8005176:	2001      	movs	r0, #1
 8005178:	4617      	mov	r7, r2
 800517a:	f7ff ffb3 	bl	80050e4 <pal_os_calloc>
        if (NULL == me)
 800517e:	4604      	mov	r4, r0
 8005180:	b190      	cbz	r0, 80051a8 <optiga_util_create+0x3c>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005182:	2300      	movs	r3, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005184:	2201      	movs	r2, #1
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 8005186:	61c5      	str	r5, [r0, #28]
        me->caller_context = caller_context;
 8005188:	6187      	str	r7, [r0, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 800518a:	490b      	ldr	r1, [pc, #44]	; (80051b8 <optiga_util_create+0x4c>)

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 800518c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8005190:	4630      	mov	r0, r6
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005192:	8423      	strh	r3, [r4, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005194:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8005198:	4622      	mov	r2, r4
 800519a:	f004 f80f 	bl	80091bc <optiga_cmd_create>
 800519e:	4605      	mov	r5, r0
 80051a0:	6160      	str	r0, [r4, #20]
        if (NULL == me->my_cmd)
 80051a2:	b120      	cbz	r0, 80051ae <optiga_util_create+0x42>
            me = NULL;
        }
    } while (FALSE);

    return (me);
}
 80051a4:	4620      	mov	r0, r4
 80051a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
    optiga_util_t * me = NULL;
 80051a8:	2400      	movs	r4, #0
            me = NULL;
        }
    } while (FALSE);

    return (me);
}
 80051aa:	4620      	mov	r0, r4
 80051ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
        if (NULL == me->my_cmd)
        {
            pal_os_free(me);
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff ff9a 	bl	80050e8 <pal_os_free>
            me = NULL;
 80051b4:	462c      	mov	r4, r5
 80051b6:	e7f5      	b.n	80051a4 <optiga_util_create+0x38>
 80051b8:	08005149 	.word	0x08005149

080051bc <optiga_util_destroy>:

    return (me);
}

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 80051bc:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 80051be:	b180      	cbz	r0, 80051e2 <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80051c0:	8c03      	ldrh	r3, [r0, #32]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d103      	bne.n	80051ce <optiga_util_destroy+0x12>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80051c6:	f240 3505 	movw	r5, #773	; 0x305
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);
    } while (FALSE);
    return (return_value);
}
 80051ca:	4628      	mov	r0, r5
 80051cc:	bd38      	pop	{r3, r4, r5, pc}
 80051ce:	4604      	mov	r4, r0
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 80051d0:	6940      	ldr	r0, [r0, #20]
 80051d2:	f004 f891 	bl	80092f8 <optiga_cmd_destroy>
 80051d6:	4605      	mov	r5, r0
        pal_os_free(me);
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff ff85 	bl	80050e8 <pal_os_free>
    } while (FALSE);
    return (return_value);
}
 80051de:	4628      	mov	r0, r5
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80051e2:	f240 3503 	movw	r5, #771	; 0x303
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);
    } while (FALSE);
    return (return_value);
}
 80051e6:	4628      	mov	r0, r5
 80051e8:	bd38      	pop	{r3, r4, r5, pc}
 80051ea:	bf00      	nop

080051ec <optiga_util_open_application>:

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 80051ec:	b168      	cbz	r0, 800520a <optiga_util_open_application+0x1e>
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 80051ee:	b570      	push	{r4, r5, r6, lr}
 80051f0:	4604      	mov	r4, r0

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 80051f2:	6940      	ldr	r0, [r0, #20]
 80051f4:	460d      	mov	r5, r1
 80051f6:	b340      	cbz	r0, 800524a <optiga_util_open_application+0x5e>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80051f8:	8c23      	ldrh	r3, [r4, #32]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d108      	bne.n	8005210 <optiga_util_open_application+0x24>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80051fe:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005202:	2300      	movs	r3, #0
 8005204:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005208:	bd70      	pop	{r4, r5, r6, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800520a:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 800520e:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005210:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005212:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005216:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005218:	2200      	movs	r2, #0
 800521a:	f003 ffc3 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800521e:	6960      	ldr	r0, [r4, #20]
 8005220:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8005224:	4632      	mov	r2, r6
 8005226:	f003 ffbd 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 800522a:	6960      	ldr	r0, [r4, #20]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 800522c:	b99d      	cbnz	r5, 8005256 <optiga_util_open_application+0x6a>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 800522e:	2133      	movs	r1, #51	; 0x33
 8005230:	2202      	movs	r2, #2
 8005232:	f003 ffb7 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8005236:	4629      	mov	r1, r5
 8005238:	6960      	ldr	r0, [r4, #20]
 800523a:	2200      	movs	r2, #0
 800523c:	f004 f882 	bl	8009344 <optiga_cmd_open_application>
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005240:	2800      	cmp	r0, #0
 8005242:	d0de      	beq.n	8005202 <optiga_util_open_application+0x16>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005244:	2300      	movs	r3, #0
 8005246:	8423      	strh	r3, [r4, #32]
 8005248:	e7db      	b.n	8005202 <optiga_util_open_application+0x16>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800524a:	2300      	movs	r3, #0
 800524c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005250:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005254:	bd70      	pop	{r4, r5, r6, pc}
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8005256:	2111      	movs	r1, #17
 8005258:	2202      	movs	r2, #2
 800525a:	f003 ffa3 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
 800525e:	e7ea      	b.n	8005236 <optiga_util_open_application+0x4a>

08005260 <optiga_util_close_application>:
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8005260:	b168      	cbz	r0, 800527e <optiga_util_close_application+0x1e>
    return (return_value);
}

optiga_lib_status_t optiga_util_close_application(optiga_util_t * me,
                                                  bool_t perform_hibernate)
{
 8005262:	b570      	push	{r4, r5, r6, lr}
 8005264:	4604      	mov	r4, r0
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8005266:	6940      	ldr	r0, [r0, #20]
 8005268:	460d      	mov	r5, r1
 800526a:	b340      	cbz	r0, 80052be <optiga_util_close_application+0x5e>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800526c:	8c23      	ldrh	r3, [r4, #32]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d108      	bne.n	8005284 <optiga_util_close_application+0x24>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005272:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005276:	2300      	movs	r3, #0
 8005278:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 800527c:	bd70      	pop	{r4, r5, r6, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800527e:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005282:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005284:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005286:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800528a:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800528c:	2200      	movs	r2, #0
 800528e:	f003 ff89 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005292:	6960      	ldr	r0, [r4, #20]
 8005294:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8005298:	4632      	mov	r2, r6
 800529a:	f003 ff83 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 800529e:	6960      	ldr	r0, [r4, #20]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
 80052a0:	b99d      	cbnz	r5, 80052ca <optiga_util_close_application+0x6a>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80052a2:	2133      	movs	r1, #51	; 0x33
 80052a4:	2202      	movs	r2, #2
 80052a6:	f003 ff7d 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_SAVE);
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_close_application(me->my_cmd, perform_hibernate, NULL);
 80052aa:	4629      	mov	r1, r5
 80052ac:	6960      	ldr	r0, [r4, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f004 f85a 	bl	8009368 <optiga_cmd_close_application>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d0de      	beq.n	8005276 <optiga_util_close_application+0x16>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	8423      	strh	r3, [r4, #32]
 80052bc:	e7db      	b.n	8005276 <optiga_util_close_application+0x16>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80052be:	2300      	movs	r3, #0
 80052c0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80052c4:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80052c8:	bd70      	pop	{r4, r5, r6, pc}
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
        }
        else
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_SAVE);
 80052ca:	2122      	movs	r1, #34	; 0x22
 80052cc:	2202      	movs	r2, #2
 80052ce:	f003 ff69 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
 80052d2:	e7ea      	b.n	80052aa <optiga_util_close_application+0x4a>

080052d4 <optiga_util_read_data>:
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80052d4:	b1e0      	cbz	r0, 8005310 <optiga_util_read_data+0x3c>
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 80052d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	4615      	mov	r5, r2
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80052dc:	6942      	ldr	r2, [r0, #20]
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 80052de:	b082      	sub	sp, #8
 80052e0:	4604      	mov	r4, r0
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80052e2:	b16a      	cbz	r2, 8005300 <optiga_util_read_data+0x2c>
 80052e4:	b163      	cbz	r3, 8005300 <optiga_util_read_data+0x2c>
            (NULL == buffer) || (NULL == length))
 80052e6:	9a08      	ldr	r2, [sp, #32]
 80052e8:	b152      	cbz	r2, 8005300 <optiga_util_read_data+0x2c>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80052ea:	8c02      	ldrh	r2, [r0, #32]
 80052ec:	2a01      	cmp	r2, #1
 80052ee:	d112      	bne.n	8005316 <optiga_util_read_data+0x42>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80052f0:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80052fa:	b002      	add	sp, #8
 80052fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005300:	f240 3003 	movw	r0, #771	; 0x303
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005304:	2300      	movs	r3, #0
 8005306:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 800530a:	b002      	add	sp, #8
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005310:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005314:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005316:	f04f 0801 	mov.w	r8, #1
 800531a:	460e      	mov	r6, r1
 800531c:	f8a0 8020 	strh.w	r8, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005320:	2100      	movs	r1, #0
 8005322:	2214      	movs	r2, #20

        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
 8005324:	460f      	mov	r7, r1
 8005326:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005328:	f7ff fee2 	bl	80050f0 <pal_os_memset>
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 800532c:	9b08      	ldr	r3, [sp, #32]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
 800532e:	8026      	strh	r6, [r4, #0]
        p_params->offset = offset;
 8005330:	8065      	strh	r5, [r4, #2]
        // set option to read data
        p_params->data_or_metadata = 0;
 8005332:	72a7      	strb	r7, [r4, #10]
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 8005334:	881a      	ldrh	r2, [r3, #0]

        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	6123      	str	r3, [r4, #16]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
 800533a:	9b08      	ldr	r3, [sp, #32]
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 800533c:	80a2      	strh	r2, [r4, #4]
        p_params->ref_bytes_to_read = length;
 800533e:	60e3      	str	r3, [r4, #12]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005340:	463a      	mov	r2, r7
 8005342:	6960      	ldr	r0, [r4, #20]
 8005344:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
 8005348:	80e7      	strh	r7, [r4, #6]
        p_params->last_read_size = 0;
 800534a:	8127      	strh	r7, [r4, #8]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800534c:	f003 ff2a 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005350:	4642      	mov	r2, r8
 8005352:	6960      	ldr	r0, [r4, #20]
 8005354:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8005358:	f003 ff24 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 800535c:	6960      	ldr	r0, [r4, #20]
 800535e:	7aa1      	ldrb	r1, [r4, #10]
 8005360:	4622      	mov	r2, r4
 8005362:	f004 f815 	bl	8009390 <optiga_cmd_get_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005366:	2800      	cmp	r0, #0
 8005368:	d0cc      	beq.n	8005304 <optiga_util_read_data+0x30>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800536a:	8427      	strh	r7, [r4, #32]
 800536c:	e7ca      	b.n	8005304 <optiga_util_read_data+0x30>
 800536e:	bf00      	nop

08005370 <optiga_util_read_metadata>:
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005370:	b1d8      	cbz	r0, 80053aa <optiga_util_read_metadata+0x3a>

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
 8005372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005376:	4615      	mov	r5, r2
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005378:	6942      	ldr	r2, [r0, #20]

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
 800537a:	b082      	sub	sp, #8
 800537c:	4604      	mov	r4, r0
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 800537e:	b162      	cbz	r2, 800539a <optiga_util_read_metadata+0x2a>
 8005380:	b15d      	cbz	r5, 800539a <optiga_util_read_metadata+0x2a>
            (NULL == buffer) || (NULL == length))
 8005382:	b153      	cbz	r3, 800539a <optiga_util_read_metadata+0x2a>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005384:	8c02      	ldrh	r2, [r0, #32]
 8005386:	2a01      	cmp	r2, #1
 8005388:	d112      	bne.n	80053b0 <optiga_util_read_metadata+0x40>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800538a:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800538e:	2300      	movs	r3, #0
 8005390:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005394:	b002      	add	sp, #8
 8005396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800539a:	f240 3003 	movw	r0, #771	; 0x303
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800539e:	2300      	movs	r3, #0
 80053a0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80053a4:	b002      	add	sp, #8
 80053a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80053aa:	f240 3003 	movw	r0, #771	; 0x303
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80053ae:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80053b0:	f04f 0801 	mov.w	r8, #1
 80053b4:	460e      	mov	r6, r1
 80053b6:	f8a0 8020 	strh.w	r8, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80053ba:	2100      	movs	r1, #0
 80053bc:	2214      	movs	r2, #20

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 80053be:	460f      	mov	r7, r1
 80053c0:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80053c2:	f7ff fe95 	bl	80050f0 <pal_os_memset>
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 80053c6:	9b01      	ldr	r3, [sp, #4]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
 80053c8:	f884 800a 	strb.w	r8, [r4, #10]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
 80053cc:	8026      	strh	r6, [r4, #0]
        p_params->offset = 0;
 80053ce:	8067      	strh	r7, [r4, #2]
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	80a2      	strh	r2, [r4, #4]
        p_params->ref_bytes_to_read = length;
 80053d4:	60e3      	str	r3, [r4, #12]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80053d6:	463a      	mov	r2, r7
 80053d8:	6960      	ldr	r0, [r4, #20]
 80053da:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
 80053de:	6125      	str	r5, [r4, #16]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
 80053e0:	80e7      	strh	r7, [r4, #6]
        p_params->last_read_size = 0;
 80053e2:	8127      	strh	r7, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80053e4:	f003 fede 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80053e8:	4642      	mov	r2, r8
 80053ea:	6960      	ldr	r0, [r4, #20]
 80053ec:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80053f0:	f003 fed8 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata,
 80053f4:	6960      	ldr	r0, [r4, #20]
 80053f6:	7aa1      	ldrb	r1, [r4, #10]
 80053f8:	4622      	mov	r2, r4
 80053fa:	f003 ffc9 	bl	8009390 <optiga_cmd_get_data_object>
                                                  (optiga_get_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 80053fe:	2800      	cmp	r0, #0
 8005400:	d0cd      	beq.n	800539e <optiga_util_read_metadata+0x2e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005402:	8427      	strh	r7, [r4, #32]
 8005404:	e7cb      	b.n	800539e <optiga_util_read_metadata+0x2e>
 8005406:	bf00      	nop

08005408 <optiga_util_write_data>:
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 8005408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800540c:	b083      	sub	sp, #12
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 800540e:	f012 06bf 	ands.w	r6, r2, #191	; 0xbf
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 8005412:	4614      	mov	r4, r2
 8005414:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 8005418:	d004      	beq.n	8005424 <optiga_util_write_data+0x1c>
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800541a:	f240 3003 	movw	r0, #771	; 0x303
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
 800541e:	b003      	add	sp, #12
 8005420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005424:	4605      	mov	r5, r0
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 8005426:	2800      	cmp	r0, #0
 8005428:	d0f7      	beq.n	800541a <optiga_util_write_data+0x12>
 800542a:	6942      	ldr	r2, [r0, #20]
 800542c:	b162      	cbz	r2, 8005448 <optiga_util_write_data+0x40>
 800542e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005430:	b152      	cbz	r2, 8005448 <optiga_util_write_data+0x40>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005432:	8c02      	ldrh	r2, [r0, #32]
 8005434:	2a01      	cmp	r2, #1
 8005436:	d10a      	bne.n	800544e <optiga_util_write_data+0x46>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005438:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800543c:	2300      	movs	r3, #0
 800543e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
 8005442:	b003      	add	sp, #12
 8005444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005448:	f240 3003 	movw	r0, #771	; 0x303
 800544c:	e7f6      	b.n	800543c <optiga_util_write_data+0x34>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800544e:	2201      	movs	r2, #1
 8005450:	8402      	strh	r2, [r0, #32]
 8005452:	4688      	mov	r8, r1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005454:	2214      	movs	r2, #20
 8005456:	4631      	mov	r1, r6
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	f7ff fe49 	bl	80050f0 <pal_os_memset>

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
 800545e:	9a0a      	ldr	r2, [sp, #40]	; 0x28

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
 8005460:	9b01      	ldr	r3, [sp, #4]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005462:	6968      	ldr	r0, [r5, #20]
 8005464:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
 8005468:	2c02      	cmp	r4, #2
        {
            p_params->count = p_buffer[0];
 800546a:	bf08      	it	eq
 800546c:	7816      	ldrbeq	r6, [r2, #0]
 800546e:	73ae      	strb	r6, [r5, #14]
            p_params->buffer = NULL;
 8005470:	bf08      	it	eq
 8005472:	2200      	moveq	r2, #0
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
 8005474:	f04f 0900 	mov.w	r9, #0
 8005478:	60aa      	str	r2, [r5, #8]
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
 800547a:	806b      	strh	r3, [r5, #2]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800547c:	464a      	mov	r2, r9
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
 800547e:	f8a5 8000 	strh.w	r8, [r5]
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
 8005482:	80af      	strh	r7, [r5, #4]
        p_params->written_size = 0;
        p_params->write_type = write_type;
 8005484:	736c      	strb	r4, [r5, #13]
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
 8005486:	f885 900c 	strb.w	r9, [r5, #12]
        p_params->size = length;
        p_params->written_size = 0;
 800548a:	f8a5 9006 	strh.w	r9, [r5, #6]
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800548e:	f003 fe89 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005492:	6968      	ldr	r0, [r5, #20]
 8005494:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 8005498:	2201      	movs	r2, #1
 800549a:	f003 fe83 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
 800549e:	4621      	mov	r1, r4
 80054a0:	6968      	ldr	r0, [r5, #20]
 80054a2:	462a      	mov	r2, r5
 80054a4:	f003 ff88 	bl	80093b8 <optiga_cmd_set_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d0c7      	beq.n	800543c <optiga_util_write_data+0x34>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80054ac:	f8a5 9020 	strh.w	r9, [r5, #32]
 80054b0:	e7c4      	b.n	800543c <optiga_util_write_data+0x34>
 80054b2:	bf00      	nop

080054b4 <optiga_util_write_metadata>:
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 80054b4:	b1d0      	cbz	r0, 80054ec <optiga_util_write_metadata+0x38>

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
 80054b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ba:	4615      	mov	r5, r2
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 80054bc:	6942      	ldr	r2, [r0, #20]

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
 80054be:	b082      	sub	sp, #8
 80054c0:	4604      	mov	r4, r0
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 80054c2:	b15a      	cbz	r2, 80054dc <optiga_util_write_metadata+0x28>
 80054c4:	b155      	cbz	r5, 80054dc <optiga_util_write_metadata+0x28>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80054c6:	8c02      	ldrh	r2, [r0, #32]
 80054c8:	2a01      	cmp	r2, #1
 80054ca:	d112      	bne.n	80054f2 <optiga_util_write_metadata+0x3e>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80054cc:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80054d6:	b002      	add	sp, #8
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80054dc:	f240 3003 	movw	r0, #771	; 0x303
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80054e6:	b002      	add	sp, #8
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80054ec:	f240 3003 	movw	r0, #771	; 0x303
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80054f0:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80054f2:	2701      	movs	r7, #1
 80054f4:	460e      	mov	r6, r1
 80054f6:	8407      	strh	r7, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80054f8:	2100      	movs	r1, #0
 80054fa:	2214      	movs	r2, #20

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 80054fc:	4688      	mov	r8, r1
 80054fe:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005500:	f7ff fdf6 	bl	80050f0 <pal_os_memset>
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
 8005504:	9b01      	ldr	r3, [sp, #4]
 8005506:	80a3      	strh	r3, [r4, #4]
        p_params->write_type = 1;
        p_params->written_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005508:	4642      	mov	r2, r8
 800550a:	6960      	ldr	r0, [r4, #20]
 800550c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
 8005510:	7327      	strb	r7, [r4, #12]
        p_params->buffer = buffer;
        p_params->size = length;
        p_params->write_type = 1;
 8005512:	7367      	strb	r7, [r4, #13]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
 8005514:	8026      	strh	r6, [r4, #0]
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
 8005516:	60a5      	str	r5, [r4, #8]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 8005518:	f8a4 8002 	strh.w	r8, [r4, #2]
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
        p_params->write_type = 1;
        p_params->written_size = 0;
 800551c:	f8a4 8006 	strh.w	r8, [r4, #6]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005520:	f003 fe40 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005524:	463a      	mov	r2, r7
 8005526:	6960      	ldr	r0, [r4, #20]
 8005528:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 800552c:	f003 fe3a 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, p_params->write_type,
 8005530:	6960      	ldr	r0, [r4, #20]
 8005532:	7b61      	ldrb	r1, [r4, #13]
 8005534:	4622      	mov	r2, r4
 8005536:	f003 ff3f 	bl	80093b8 <optiga_cmd_set_data_object>
                                                  (optiga_set_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 800553a:	2800      	cmp	r0, #0
 800553c:	d0c8      	beq.n	80054d0 <optiga_util_write_metadata+0x1c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800553e:	f8a4 8020 	strh.w	r8, [r4, #32]
 8005542:	e7c5      	b.n	80054d0 <optiga_util_write_metadata+0x1c>

08005544 <optiga_util_update_count>:
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 8005544:	b178      	cbz	r0, 8005566 <optiga_util_update_count+0x22>
}

optiga_lib_status_t optiga_util_update_count(optiga_util_t * me,
                                             uint16_t optiga_counter_oid,
                                             uint8_t count)
{
 8005546:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 800554a:	6943      	ldr	r3, [r0, #20]
 800554c:	4604      	mov	r4, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d038      	beq.n	80055c4 <optiga_util_update_count+0x80>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005552:	8c03      	ldrh	r3, [r0, #32]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d109      	bne.n	800556c <optiga_util_update_count+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005558:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800555c:	2300      	movs	r3, #0
 800555e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                                           optiga_counter_oid,
                                           OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                           0x0000,
                                           count_value,
                                           sizeof(count_value)));
}
 8005562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005566:	f240 3003 	movw	r0, #771	; 0x303
                                           optiga_counter_oid,
                                           OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                           0x0000,
                                           count_value,
                                           sizeof(count_value)));
}
 800556a:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800556c:	f04f 0801 	mov.w	r8, #1
 8005570:	460e      	mov	r6, r1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005572:	2100      	movs	r1, #0

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
            p_params->buffer = NULL;
 8005574:	460d      	mov	r5, r1
 8005576:	4617      	mov	r7, r2
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005578:	f8a0 8020 	strh.w	r8, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 800557c:	2214      	movs	r2, #20
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;
 800557e:	f04f 0902 	mov.w	r9, #2
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005582:	f7ff fdb5 	bl	80050f0 <pal_os_memset>
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005586:	462a      	mov	r2, r5
 8005588:	6960      	ldr	r0, [r4, #20]
 800558a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
 800558e:	f8a4 8004 	strh.w	r8, [r4, #4]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
 8005592:	73a7      	strb	r7, [r4, #14]
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
 8005594:	8026      	strh	r6, [r4, #0]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
            p_params->buffer = NULL;
 8005596:	60a5      	str	r5, [r4, #8]
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
 8005598:	8065      	strh	r5, [r4, #2]
        p_params->data_or_metadata = 0;//for Data
 800559a:	7325      	strb	r5, [r4, #12]
        p_params->size = length;
        p_params->written_size = 0;
 800559c:	80e5      	strh	r5, [r4, #6]
        p_params->write_type = write_type;
 800559e:	f884 900d 	strb.w	r9, [r4, #13]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80055a2:	f003 fdff 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80055a6:	4642      	mov	r2, r8
 80055a8:	6960      	ldr	r0, [r4, #20]
 80055aa:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80055ae:	f003 fdf9 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
 80055b2:	4649      	mov	r1, r9
 80055b4:	6960      	ldr	r0, [r4, #20]
 80055b6:	4622      	mov	r2, r4
 80055b8:	f003 fefe 	bl	80093b8 <optiga_cmd_set_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80055bc:	2800      	cmp	r0, #0
 80055be:	d0cd      	beq.n	800555c <optiga_util_update_count+0x18>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80055c0:	8425      	strh	r5, [r4, #32]
 80055c2:	e7cb      	b.n	800555c <optiga_util_update_count+0x18>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80055ca:	f240 3003 	movw	r0, #771	; 0x303
                                           optiga_counter_oid,
                                           OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                           0x0000,
                                           count_value,
                                           sizeof(count_value)));
}
 80055ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d2:	bf00      	nop

080055d4 <optiga_crypt_generic_event_handler>:
_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    me->handler(me->caller_context, event);
 80055da:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80055dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80055de:	4718      	bx	r3

080055e0 <optiga_crypt_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
    switch (parameter_type)
 80055e0:	2901      	cmp	r1, #1
 80055e2:	d005      	beq.n	80055f0 <optiga_crypt_set_comms_params+0x10>
 80055e4:	2902      	cmp	r1, #2
 80055e6:	d102      	bne.n	80055ee <optiga_crypt_set_comms_params+0xe>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
 80055e8:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
 80055ec:	4770      	bx	lr
 80055ee:	4770      	bx	lr
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80055f0:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
            break;
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_crypt_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80055fa:	b1e1      	cbz	r1, 8005636 <optiga_crypt_create+0x3e>
 80055fc:	460d      	mov	r5, r1
 80055fe:	4606      	mov	r6, r0
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 8005600:	2150      	movs	r1, #80	; 0x50
 8005602:	2001      	movs	r0, #1
 8005604:	4617      	mov	r7, r2
 8005606:	f7ff fd6d 	bl	80050e4 <pal_os_calloc>
        if (NULL == me)
 800560a:	4604      	mov	r4, r0
 800560c:	b198      	cbz	r0, 8005636 <optiga_crypt_create+0x3e>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 800560e:	2300      	movs	r3, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005610:	2201      	movs	r2, #1
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 8005612:	6485      	str	r5, [r0, #72]	; 0x48
        me->caller_context = caller_context;
 8005614:	6447      	str	r7, [r0, #68]	; 0x44
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8005616:	490c      	ldr	r1, [pc, #48]	; (8005648 <optiga_crypt_create+0x50>)

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005618:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 800561c:	4630      	mov	r0, r6
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 800561e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005622:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8005626:	4622      	mov	r2, r4
 8005628:	f003 fdc8 	bl	80091bc <optiga_cmd_create>
 800562c:	4605      	mov	r5, r0
 800562e:	6420      	str	r0, [r4, #64]	; 0x40
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8005630:	b120      	cbz	r0, 800563c <optiga_crypt_create+0x44>
        }

    } while (FALSE);

    return (me);
}
 8005632:	4620      	mov	r0, r4
 8005634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
    optiga_crypt_t * me = NULL;
 8005636:	2400      	movs	r4, #0
        }

    } while (FALSE);

    return (me);
}
 8005638:	4620      	mov	r0, r4
 800563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
        {
            pal_os_free(me);
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff fd53 	bl	80050e8 <pal_os_free>
            me = NULL;
 8005642:	462c      	mov	r4, r5
 8005644:	e7f5      	b.n	8005632 <optiga_crypt_create+0x3a>
 8005646:	bf00      	nop
 8005648:	080055d5 	.word	0x080055d5

0800564c <optiga_crypt_destroy>:

    return (me);
}

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 800564c:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 800564e:	b188      	cbz	r0, 8005674 <optiga_crypt_destroy+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005650:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d103      	bne.n	8005660 <optiga_crypt_destroy+0x14>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005658:	f240 4505 	movw	r5, #1029	; 0x405
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);

    } while (FALSE);
    return (return_value);
}
 800565c:	4628      	mov	r0, r5
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	4604      	mov	r4, r0
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8005662:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8005664:	f003 fe48 	bl	80092f8 <optiga_cmd_destroy>
 8005668:	4605      	mov	r5, r0
        pal_os_free(me);
 800566a:	4620      	mov	r0, r4
 800566c:	f7ff fd3c 	bl	80050e8 <pal_os_free>

    } while (FALSE);
    return (return_value);
}
 8005670:	4628      	mov	r0, r5
 8005672:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005674:	f240 4503 	movw	r5, #1027	; 0x403
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);

    } while (FALSE);
    return (return_value);
}
 8005678:	4628      	mov	r0, r5
 800567a:	bd38      	pop	{r3, r4, r5, pc}

0800567c <optiga_crypt_random>:
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 800567c:	b1c0      	cbz	r0, 80056b0 <optiga_crypt_random+0x34>
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
 800567e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005682:	4615      	mov	r5, r2
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 8005684:	6c02      	ldr	r2, [r0, #64]	; 0x40
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
 8005686:	b082      	sub	sp, #8
 8005688:	4604      	mov	r4, r0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 800568a:	b162      	cbz	r2, 80056a6 <optiga_crypt_random+0x2a>
 800568c:	b15d      	cbz	r5, 80056a6 <optiga_crypt_random+0x2a>
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800568e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8005692:	2a01      	cmp	r2, #1
 8005694:	d10f      	bne.n	80056b6 <optiga_crypt_random+0x3a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005696:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800569a:	2300      	movs	r3, #0
 800569c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
                                               0x00,
                                               FALSE);
    } while (FALSE);

    return (return_value);
}
 80056a0:	b002      	add	sp, #8
 80056a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80056a6:	f240 4003 	movw	r0, #1027	; 0x403
                                               0x00,
                                               FALSE);
    } while (FALSE);

    return (return_value);
}
 80056aa:	b002      	add	sp, #8
 80056ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80056b0:	f240 4003 	movw	r0, #1027	; 0x403
                                               0x00,
                                               FALSE);
    } while (FALSE);

    return (return_value);
}
 80056b4:	4770      	bx	lr
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80056b6:	f04f 0801 	mov.w	r8, #1
 80056ba:	460e      	mov	r6, r1
 80056bc:	f8a0 804c 	strh.w	r8, [r0, #76]	; 0x4c
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80056c0:	2100      	movs	r1, #0
 80056c2:	2240      	movs	r2, #64	; 0x40

        p_params->optional_data = p_optional_data;
 80056c4:	460f      	mov	r7, r1
 80056c6:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80056c8:	f7ff fd12 	bl	80050f0 <pal_os_memset>

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
 80056cc:	9b01      	ldr	r3, [sp, #4]
 80056ce:	8023      	strh	r3, [r4, #0]
        p_params->store_in_session = store_in_session;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80056d0:	463a      	mov	r2, r7
 80056d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80056d4:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
 80056d8:	6065      	str	r5, [r4, #4]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
 80056da:	60a7      	str	r7, [r4, #8]
        p_params->optional_data_length = optional_data_length;
 80056dc:	8067      	strh	r7, [r4, #2]
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
        p_params->store_in_session = store_in_session;
 80056de:	7327      	strb	r7, [r4, #12]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80056e0:	f003 fd60 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80056e4:	4642      	mov	r2, r8
 80056e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80056e8:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 80056ec:	f003 fd5a 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_random(me->my_cmd,
 80056f0:	4631      	mov	r1, r6
 80056f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80056f4:	4622      	mov	r2, r4
 80056f6:	f003 fe73 	bl	80093e0 <optiga_cmd_get_random>
                                             cmd_param,
                                             (optiga_get_random_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d0cd      	beq.n	800569a <optiga_crypt_random+0x1e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80056fe:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
 8005702:	e7ca      	b.n	800569a <optiga_crypt_random+0x1e>

08005704 <optiga_crypt_hash>:
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
 8005704:	b1c8      	cbz	r0, 800573a <optiga_crypt_hash+0x36>
optiga_lib_status_t optiga_crypt_hash(optiga_crypt_t * me,
                                      optiga_hash_type_t hash_algorithm,
                                      uint8_t source_of_data_to_hash,
                                      const void * data_to_hash, 
                                      uint8_t * hash_output)
{
 8005706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
 800570a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800570c:	b18d      	cbz	r5, 8005732 <optiga_crypt_hash+0x2e>
 800570e:	b183      	cbz	r3, 8005732 <optiga_crypt_hash+0x2e>
 8005710:	9d06      	ldr	r5, [sp, #24]
 8005712:	b175      	cbz	r5, 8005732 <optiga_crypt_hash+0x2e>
 8005714:	461c      	mov	r4, r3
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005716:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 800571a:	2b01      	cmp	r3, #1
 800571c:	4605      	mov	r5, r0
 800571e:	4617      	mov	r7, r2
 8005720:	460e      	mov	r6, r1
 8005722:	d10d      	bne.n	8005740 <optiga_crypt_hash+0x3c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005724:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005728:	2300      	movs	r3, #0
 800572a:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 800572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005732:	f240 4003 	movw	r0, #1027	; 0x403
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
}
 8005736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800573a:	f240 4003 	movw	r0, #1027	; 0x403
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
}
 800573e:	4770      	bx	lr
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005740:	f04f 0801 	mov.w	r8, #1
 8005744:	f8a0 804c 	strh.w	r8, [r0, #76]	; 0x4c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005748:	2100      	movs	r1, #0
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	f7ff fcd0 	bl	80050f0 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005750:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8005752:	f895 104e 	ldrb.w	r1, [r5, #78]	; 0x4e
 8005756:	2200      	movs	r2, #0
 8005758:	f003 fd24 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800575c:	4642      	mov	r2, r8
 800575e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8005760:	f895 104f 	ldrb.w	r1, [r5, #79]	; 0x4f
 8005764:	f003 fd1e 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        p_params->hash_sequence = hash_sequence;
        p_params->p_hash_context = hash_ctx;
 8005768:	2300      	movs	r3, #0
        p_params->apparent_context_size = context_length;
        p_params->p_hash_data = NULL;
        p_params->p_hash_oid = NULL;
        p_params->p_out_digest = hash_output;
 800576a:	9a06      	ldr	r2, [sp, #24]
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
 800576c:	f885 800c 	strb.w	r8, [r5, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = context_length;
        p_params->p_hash_data = NULL;
        p_params->p_hash_oid = NULL;
        p_params->p_out_digest = hash_output;
 8005770:	616a      	str	r2, [r5, #20]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
        p_params->p_hash_context = hash_ctx;
 8005772:	60ab      	str	r3, [r5, #8]
        p_params->apparent_context_size = context_length;
 8005774:	61eb      	str	r3, [r5, #28]
        p_params->p_hash_data = NULL;
 8005776:	606b      	str	r3, [r5, #4]
        p_params->p_hash_oid = NULL;
 8005778:	602b      	str	r3, [r5, #0]
        p_params->p_out_digest = hash_output;
        p_params->export_hash_ctx = export_intermediate_ctx;
 800577a:	762b      	strb	r3, [r5, #24]
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
        {
            if (source_of_data_to_hash)
 800577c:	b96f      	cbnz	r7, 800579a <optiga_crypt_hash+0x96>
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
            }
            else
            {
                p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
 800577e:	2311      	movs	r3, #17
                p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
 8005780:	602c      	str	r4, [r5, #0]
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
            }
            else
            {
                p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
 8005782:	732b      	strb	r3, [r5, #12]
                p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
            }
        }

        return_value = optiga_cmd_calc_hash(me->my_cmd,
 8005784:	4631      	mov	r1, r6
 8005786:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8005788:	462a      	mov	r2, r5
 800578a:	f003 fe73 	bl	8009474 <optiga_cmd_calc_hash>
                                            hash_algorithm,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 800578e:	2800      	cmp	r0, #0
 8005790:	d0ca      	beq.n	8005728 <optiga_crypt_hash+0x24>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005792:	2300      	movs	r3, #0
 8005794:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
 8005798:	e7c6      	b.n	8005728 <optiga_crypt_hash+0x24>
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
        {
            if (source_of_data_to_hash)
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
 800579a:	606c      	str	r4, [r5, #4]
 800579c:	e7f2      	b.n	8005784 <optiga_crypt_hash+0x80>
 800579e:	bf00      	nop

080057a0 <optiga_crypt_rsa_verify>:
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
 80057a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057a4:	b083      	sub	sp, #12
 80057a6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 80057aa:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80057ae:	b1b8      	cbz	r0, 80057e0 <optiga_crypt_rsa_verify+0x40>
 80057b0:	4615      	mov	r5, r2
 80057b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80057b4:	4604      	mov	r4, r0
 80057b6:	b15a      	cbz	r2, 80057d0 <optiga_crypt_rsa_verify+0x30>
 80057b8:	b155      	cbz	r5, 80057d0 <optiga_crypt_rsa_verify+0x30>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 80057ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057bc:	b142      	cbz	r2, 80057d0 <optiga_crypt_rsa_verify+0x30>
 80057be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057c0:	b132      	cbz	r2, 80057d0 <optiga_crypt_rsa_verify+0x30>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80057c2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 80057c6:	2a01      	cmp	r2, #1
 80057c8:	d10f      	bne.n	80057ea <optiga_crypt_rsa_verify+0x4a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 80057ca:	f240 4005 	movw	r0, #1029	; 0x405
 80057ce:	e001      	b.n	80057d4 <optiga_crypt_rsa_verify+0x34>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80057d0:	f240 4003 	movw	r0, #1027	; 0x403
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                salt_length));
}
 80057da:	b003      	add	sp, #12
 80057dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80057e0:	f240 4003 	movw	r0, #1027	; 0x403
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                salt_length));
}
 80057e4:	b003      	add	sp, #12
 80057e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80057ea:	f04f 0901 	mov.w	r9, #1
 80057ee:	f8a0 904c 	strh.w	r9, [r0, #76]	; 0x4c
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80057f2:	2240      	movs	r2, #64	; 0x40
 80057f4:	460f      	mov	r7, r1
 80057f6:	2100      	movs	r1, #0
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	f7ff fc79 	bl	80050f0 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80057fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005800:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8005804:	2200      	movs	r2, #0
 8005806:	f003 fccd 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800580a:	464a      	mov	r2, r9
 800580c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800580e:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8005812:	f003 fcc7 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	7123      	strb	r3, [r4, #4]
        p_params->p_signature = p_signature;
 800581a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800581c:	60a3      	str	r3, [r4, #8]
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_digest = p_digest;
 800581e:	6025      	str	r5, [r4, #0]
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
 8005820:	f8a4 800c 	strh.w	r8, [r4, #12]
        p_params->public_key_source_type = public_key_source_type;
 8005824:	73a6      	strb	r6, [r4, #14]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8005826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8005828:	b15e      	cbz	r6, 8005842 <optiga_crypt_rsa_verify+0xa2>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 800582a:	6123      	str	r3, [r4, #16]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 800582c:	4639      	mov	r1, r7
 800582e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005830:	4622      	mov	r2, r4
 8005832:	f003 fded 	bl	8009410 <optiga_cmd_verify_sign>
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005836:	2800      	cmp	r0, #0
 8005838:	d0cc      	beq.n	80057d4 <optiga_crypt_rsa_verify+0x34>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800583a:	2300      	movs	r3, #0
 800583c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8005840:	e7c8      	b.n	80057d4 <optiga_crypt_rsa_verify+0x34>
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	82a3      	strh	r3, [r4, #20]
 8005846:	e7f1      	b.n	800582c <optiga_crypt_rsa_verify+0x8c>

08005848 <optiga_crypt_rsa_encrypt_message>:
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message)||
 8005852:	b1b0      	cbz	r0, 8005882 <optiga_crypt_rsa_encrypt_message+0x3a>
 8005854:	4615      	mov	r5, r2
 8005856:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005858:	4604      	mov	r4, r0
 800585a:	b192      	cbz	r2, 8005882 <optiga_crypt_rsa_encrypt_message+0x3a>
 800585c:	b18d      	cbz	r5, 8005882 <optiga_crypt_rsa_encrypt_message+0x3a>
 800585e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005860:	b17a      	cbz	r2, 8005882 <optiga_crypt_rsa_encrypt_message+0x3a>
            (NULL == public_key) || (NULL == encrypted_message) || (NULL == encrypted_message_length))
 8005862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005864:	b16a      	cbz	r2, 8005882 <optiga_crypt_rsa_encrypt_message+0x3a>
 8005866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005868:	b15a      	cbz	r2, 8005882 <optiga_crypt_rsa_encrypt_message+0x3a>
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_encrypt_asym_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800586a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 800586e:	2a01      	cmp	r2, #1
 8005870:	d10c      	bne.n	800588c <optiga_crypt_rsa_encrypt_message+0x44>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005872:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005876:	2300      	movs	r3, #0
 8005878:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
 800587c:	b002      	add	sp, #8
 800587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005882:	f240 4003 	movw	r0, #1027	; 0x403
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
 8005886:	b002      	add	sp, #8
 8005888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;
 800588c:	f04f 0801 	mov.w	r8, #1
 8005890:	460e      	mov	r6, r1
 8005892:	f8a0 804c 	strh.w	r8, [r0, #76]	; 0x4c

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005896:	2100      	movs	r1, #0
 8005898:	2240      	movs	r2, #64	; 0x40
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	f7ff fc28 	bl	80050f0 <pal_os_memset>

        p_params->message = p_message;
        p_params->message_length = message_length;
 80058a0:	9b01      	ldr	r3, [sp, #4]
 80058a2:	8023      	strh	r3, [r4, #0]
        p_params->processed_message = p_processed_message;
 80058a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058a6:	6163      	str	r3, [r4, #20]
        p_params->processed_message_length = p_processed_message_length;
 80058a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058aa:	6063      	str	r3, [r4, #4]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80058ac:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80058ae:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->message = p_message;
 80058b2:	60a5      	str	r5, [r4, #8]
        p_params->message_length = message_length;
        p_params->processed_message = p_processed_message;
        p_params->processed_message_length = p_processed_message_length;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80058b4:	2200      	movs	r2, #0
 80058b6:	f003 fc75 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80058ba:	4642      	mov	r2, r8
 80058bc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80058be:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 80058c2:	f003 fc6f 	bl	80091a4 <optiga_cmd_set_shielded_connection_option>


        if (is_enc)
        {
            p_params->key = p_key;
 80058c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058c8:	6123      	str	r3, [r4, #16]
            p_params->public_key_source_type = public_key_source_type;
 80058ca:	7327      	strb	r7, [r4, #12]
#ifdef OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED
            return_value = optiga_cmd_encrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
 80058cc:	4631      	mov	r1, r6
 80058ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80058d0:	4622      	mov	r2, r4
 80058d2:	f003 fdb1 	bl	8009438 <optiga_cmd_encrypt_asym>
#ifdef OPTIGA_CRYPT_RSA_DECRYPT_ENABLED
            return_value = optiga_cmd_decrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        if (OPTIGA_LIB_SUCCESS != return_value)
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d0cd      	beq.n	8005876 <optiga_crypt_rsa_encrypt_message+0x2e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80058da:	2300      	movs	r3, #0
 80058dc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80058e0:	e7c9      	b.n	8005876 <optiga_crypt_rsa_encrypt_message+0x2e>
 80058e2:	bf00      	nop

080058e4 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 80058e4:	b538      	push	{r3, r4, r5, lr}
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80058e6:	6983      	ldr	r3, [r0, #24]
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 80058e8:	4604      	mov	r4, r0
 80058ea:	460d      	mov	r5, r1
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80058ec:	b10b      	cbz	r3, 80058f2 <ifx_i2c_tl_event_handler+0xe>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80058ee:	69c0      	ldr	r0, [r0, #28]
 80058f0:	4798      	blx	r3
    }
    p_ctx->close_state = event;
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
 80058f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
    p_ctx->close_state = event;
 80058f6:	85a5      	strh	r5, [r4, #44]	; 0x2c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80058f8:	2204      	movs	r2, #4
    switch (p_ctx->state)
 80058fa:	2b01      	cmp	r3, #1
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
    p_ctx->close_state = event;
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80058fc:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    switch (p_ctx->state)
 8005900:	d103      	bne.n	800590a <ifx_i2c_tl_event_handler+0x26>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8005902:	b915      	cbnz	r5, 800590a <ifx_i2c_tl_event_handler+0x26>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8005904:	2302      	movs	r3, #2
 8005906:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800590a:	bd38      	pop	{r3, r4, r5, pc}

0800590c <ifx_i2c_init>:
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 800590c:	b510      	push	{r4, lr}
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 800590e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8005912:	2b02      	cmp	r3, #2
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8005914:	4604      	mov	r4, r0
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8005916:	d00b      	beq.n	8005930 <ifx_i2c_init+0x24>
 8005918:	b99b      	cbnz	r3, 8005942 <ifx_i2c_init+0x36>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
 800591a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800591e:	2bb2      	cmp	r3, #178	; 0xb2
 8005920:	d017      	beq.n	8005952 <ifx_i2c_init+0x46>
 8005922:	2bb3      	cmp	r3, #179	; 0xb3
 8005924:	d03b      	beq.n	800599e <ifx_i2c_init+0x92>
 8005926:	2bb1      	cmp	r3, #177	; 0xb1
 8005928:	d026      	beq.n	8005978 <ifx_i2c_init+0x6c>
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 800592a:	f44f 7081 	mov.w	r0, #258	; 0x102
 800592e:	bd10      	pop	{r4, pc}

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
 8005930:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005934:	2bb2      	cmp	r3, #178	; 0xb2
 8005936:	d00f      	beq.n	8005958 <ifx_i2c_init+0x4c>
 8005938:	2bb3      	cmp	r3, #179	; 0xb3
 800593a:	d030      	beq.n	800599e <ifx_i2c_init+0x92>
 800593c:	2bb1      	cmp	r3, #177	; 0xb1
 800593e:	d1f4      	bne.n	800592a <ifx_i2c_init+0x1e>
 8005940:	e01d      	b.n	800597e <ifx_i2c_init+0x72>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8005942:	2301      	movs	r3, #1
 8005944:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8005948:	4918      	ldr	r1, [pc, #96]	; (80059ac <ifx_i2c_init+0xa0>)
#endif
    }

    return (api_status);
}
 800594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800594e:	f001 bdb9 	b.w	80074c4 <ifx_i2c_prl_init>
            case IFX_I2C_STATE_RESET_PIN_HIGH:
            {
                // Setting the Vdd & Reset pin to high
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8005952:	68a0      	ldr	r0, [r4, #8]
 8005954:	f7ff f970 	bl	8004c38 <pal_gpio_set_high>
                }
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8005958:	68e0      	ldr	r0, [r4, #12]
 800595a:	f7ff f96d 	bl	8004c38 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 800595e:	23b3      	movs	r3, #179	; 0xb3
 8005960:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8005964:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8005968:	4911      	ldr	r1, [pc, #68]	; (80059b0 <ifx_i2c_init+0xa4>)
 800596a:	4622      	mov	r2, r4
 800596c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005970:	f7ff fba2 	bl	80050b8 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       STARTUP_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
 8005974:	2000      	movs	r0, #0
                break;
 8005976:	bd10      	pop	{r4, pc}
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8005978:	68a0      	ldr	r0, [r4, #8]
 800597a:	f7ff f967 	bl	8004c4c <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	f7ff f964 	bl	8004c4c <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8005984:	23b2      	movs	r3, #178	; 0xb2
 8005986:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 800598a:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 800598e:	4908      	ldr	r1, [pc, #32]	; (80059b0 <ifx_i2c_init+0xa4>)
 8005990:	4622      	mov	r2, r4
 8005992:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005996:	f7ff fb8f 	bl	80050b8 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       RESET_LOW_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
 800599a:	2000      	movs	r0, #0
                break;
 800599c:	bd10      	pop	{r4, pc}
            {
                //Frequency and frame size negotiation
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
                api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800599e:	4620      	mov	r0, r4
 80059a0:	4902      	ldr	r1, [pc, #8]	; (80059ac <ifx_i2c_init+0xa0>)
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
    }

    return (api_status);
}
 80059a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            {
                //Frequency and frame size negotiation
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
                api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 80059a6:	f001 bd8d 	b.w	80074c4 <ifx_i2c_prl_init>
 80059aa:	bf00      	nop
 80059ac:	080058e5 	.word	0x080058e5
 80059b0:	0800590d 	.word	0x0800590d

080059b4 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 80059b4:	b510      	push	{r4, lr}
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
 80059b6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80059ba:	2204      	movs	r2, #4
    switch (p_ctx->state)
 80059bc:	2b01      	cmp	r3, #1
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 80059be:	b082      	sub	sp, #8
 80059c0:	4604      	mov	r4, r0
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80059c2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    switch (p_ctx->state)
 80059c6:	d006      	beq.n	80059d6 <ifx_i2c_prl_close_event_handler+0x22>
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80059c8:	69a3      	ldr	r3, [r4, #24]
 80059ca:	b193      	cbz	r3, 80059f2 <ifx_i2c_prl_close_event_handler+0x3e>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80059cc:	69e0      	ldr	r0, [r4, #28]
    }
}
 80059ce:	b002      	add	sp, #8
 80059d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80059d4:	4718      	bx	r3
    switch (p_ctx->state)
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 80059d6:	6900      	ldr	r0, [r0, #16]
 80059d8:	9101      	str	r1, [sp, #4]
 80059da:	f7ff f9e1 	bl	8004da0 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 80059de:	68a0      	ldr	r0, [r4, #8]
 80059e0:	f7ff f934 	bl	8004c4c <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 80059e4:	68e0      	ldr	r0, [r4, #12]
 80059e6:	f7ff f931 	bl	8004c4c <pal_gpio_set_low>
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80059ea:	69a3      	ldr	r3, [r4, #24]
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 80059ec:	9901      	ldr	r1, [sp, #4]
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1ec      	bne.n	80059cc <ifx_i2c_prl_close_event_handler+0x18>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
 80059f2:	b002      	add	sp, #8
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	bf00      	nop

080059f8 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 80059f8:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 80059fa:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d102      	bne.n	8005a08 <ifx_i2c_open+0x10>
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8005a02:	f44f 7081 	mov.w	r0, #258	; 0x102
                p_ctx->status = IFX_I2C_STATUS_BUSY;
            }
        }while(FALSE);
    }
    return (api_status);
}
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8005a08:	6903      	ldr	r3, [r0, #16]
 8005a0a:	4604      	mov	r4, r0
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8005a0c:	22b1      	movs	r2, #177	; 0xb1
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8005a0e:	6880      	ldr	r0, [r0, #8]
    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8005a10:	609c      	str	r4, [r3, #8]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8005a12:	2500      	movs	r5, #0
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
            p_ctx->do_pal_init = TRUE;
 8005a14:	2301      	movs	r3, #1
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8005a16:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            p_ctx->do_pal_init = TRUE;
 8005a1a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8005a1e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8005a22:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8005a26:	f7ff f911 	bl	8004c4c <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8005a2a:	68e0      	ldr	r0, [r4, #12]
 8005a2c:	f7ff f90e 	bl	8004c4c <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8005a30:	23b2      	movs	r3, #178	; 0xb2
 8005a32:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8005a36:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8005a3a:	4905      	ldr	r1, [pc, #20]	; (8005a50 <ifx_i2c_open+0x58>)
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005a42:	f7ff fb39 	bl	80050b8 <pal_os_event_register_callback_oneshot>
            p_ctx->state = IFX_I2C_STATE_UNINIT;

            api_status = ifx_i2c_init(p_ctx);
            if (IFX_I2C_STACK_SUCCESS == api_status)
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8005a46:	2303      	movs	r3, #3
 8005a48:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
            p_ctx->do_pal_init = TRUE;
            p_ctx->state = IFX_I2C_STATE_UNINIT;

            api_status = ifx_i2c_init(p_ctx);
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	0800590d 	.word	0x0800590d

08005a54 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8005a54:	b570      	push	{r4, r5, r6, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8005a56:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
 8005a5a:	2d02      	cmp	r5, #2
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	4604      	mov	r4, r0
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8005a60:	d003      	beq.n	8005a6a <ifx_i2c_transceive+0x16>
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8005a62:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
    }
    return (api_status);
}
 8005a66:	b002      	add	sp, #8
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8005a6a:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
 8005a6e:	2d03      	cmp	r5, #3
 8005a70:	d0f7      	beq.n	8005a62 <ifx_i2c_transceive+0xe>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8005a72:	9d06      	ldr	r5, [sp, #24]
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8005a74:	6223      	str	r3, [r4, #32]
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8005a76:	6245      	str	r5, [r0, #36]	; 0x24
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8005a78:	9500      	str	r5, [sp, #0]
 8005a7a:	f001 fd77 	bl	800756c <ifx_i2c_prl_transceive>
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d1f1      	bne.n	8005a66 <ifx_i2c_transceive+0x12>
 8005a82:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ee      	bne.n	8005a66 <ifx_i2c_transceive+0x12>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005a8e:	e7ea      	b.n	8005a66 <ifx_i2c_transceive+0x12>

08005a90 <ifx_i2c_close>:
    return (api_status);
}


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8005a90:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8005a92:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
 8005a96:	2a03      	cmp	r2, #3
 8005a98:	d103      	bne.n	8005aa2 <ifx_i2c_close+0x12>
}


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8005a9a:	f44f 7581 	mov.w	r5, #258	; 0x102
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
}
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8005aa2:	f44f 7281 	mov.w	r2, #258	; 0x102
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8005aa6:	2301      	movs	r3, #1
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8005aa8:	8582      	strh	r2, [r0, #44]	; 0x2c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8005aaa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8005aae:	490a      	ldr	r1, [pc, #40]	; (8005ad8 <ifx_i2c_close+0x48>)
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	f001 fd31 	bl	8007518 <ifx_i2c_prl_close>
        if (IFX_I2C_STACK_ERROR == api_status)
 8005ab6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8005aba:	4605      	mov	r5, r0
        if (IFX_I2C_STACK_ERROR == api_status)
 8005abc:	d1ef      	bne.n	8005a9e <ifx_i2c_close+0xe>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8005abe:	6920      	ldr	r0, [r4, #16]
 8005ac0:	f7ff f96e 	bl	8004da0 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8005ac4:	68a0      	ldr	r0, [r4, #8]
 8005ac6:	f7ff f8c1 	bl	8004c4c <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8005aca:	68e0      	ldr	r0, [r4, #12]
 8005acc:	f7ff f8be 	bl	8004c4c <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005ad6:	e7e2      	b.n	8005a9e <ifx_i2c_close+0xe>
 8005ad8:	080059b5 	.word	0x080059b5

08005adc <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8005adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	b087      	sub	sp, #28
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
 8005ae2:	2400      	movs	r4, #0
 8005ae4:	f1a3 0a03 	sub.w	sl, r3, #3

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8005ae8:	469b      	mov	fp, r3
 8005aea:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
 8005aee:	9400      	str	r4, [sp, #0]

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8005af0:	4605      	mov	r5, r0
 8005af2:	4690      	mov	r8, r2
 8005af4:	4689      	mov	r9, r1
 8005af6:	fa12 fa8a 	uxtah	sl, r2, sl
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
 8005afa:	9402      	str	r4, [sp, #8]
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
 8005afc:	9401      	str	r4, [sp, #4]
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
 8005afe:	9404      	str	r4, [sp, #16]
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
 8005b00:	9403      	str	r4, [sp, #12]
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8005b02:	f5b9 7f83 	cmp.w	r9, #262	; 0x106
 8005b06:	d021      	beq.n	8005b4c <ifx_i2c_pl_event_handler+0x70>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
        }
        switch (p_ctx->dl.state)
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	2b0a      	cmp	r3, #10
 8005b0c:	f200 814a 	bhi.w	8005da4 <ifx_i2c_pl_event_handler+0x2c8>
 8005b10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b14:	01360154 	.word	0x01360154
 8005b18:	00db00f4 	.word	0x00db00f4
 8005b1c:	005c009b 	.word	0x005c009b
 8005b20:	00220148 	.word	0x00220148
 8005b24:	004b0053 	.word	0x004b0053
 8005b28:	000b      	.short	0x000b
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8005b2a:	9a01      	ldr	r2, [sp, #4]
 8005b2c:	f895 3063 	ldrb.w	r3, [r5, #99]	; 0x63
 8005b30:	f1a2 0202 	sub.w	r2, r2, #2
 8005b34:	fab2 f282 	clz	r2, r2
 8005b38:	0952      	lsrs	r2, r2, #5
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f000 81d2 	beq.w	8005ee4 <ifx_i2c_pl_event_handler+0x408>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8005b40:	2309      	movs	r3, #9
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8005b42:	f5b9 7f83 	cmp.w	r9, #262	; 0x106
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8005b46:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8005b4a:	d1dd      	bne.n	8005b08 <ifx_i2c_pl_event_handler+0x2c>
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	f000 8140 	beq.w	8005dd2 <ifx_i2c_pl_event_handler+0x2f6>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8005b52:	2308      	movs	r3, #8
 8005b54:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                }
            }
            break;
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8005b58:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 813a 	bne.w	8005dd6 <ifx_i2c_pl_event_handler+0x2fa>
                {
                    p_ctx->dl.error = 1;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
    {
        ack_nr = 0;
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8005b68:	6f69      	ldr	r1, [r5, #116]	; 0x74

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8005b6a:	2303      	movs	r3, #3
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005b6c:	2400      	movs	r4, #0
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
 8005b6e:	f04f 0e01 	mov.w	lr, #1
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8005b72:	2205      	movs	r2, #5
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005b74:	209a      	movs	r0, #154	; 0x9a
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005b76:	27c0      	movs	r7, #192	; 0xc0
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005b78:	260a      	movs	r6, #10

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8005b7a:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8005b7e:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
    p_ctx->dl.resynced = 1;
 8005b82:	f885 e066 	strb.w	lr, [r5, #102]	; 0x66
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8005b86:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005b8a:	7108      	strb	r0, [r1, #4]
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005b8c:	700f      	strb	r7, [r1, #0]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005b8e:	70ce      	strb	r6, [r1, #3]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005b90:	704c      	strb	r4, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8005b92:	708c      	strb	r4, [r1, #2]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 fe17 	bl	80067c8 <ifx_i2c_pl_send_frame>
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
                    p_ctx->dl.state = DL_STATE_ERROR;
 8005b9a:	2308      	movs	r3, #8
                    p_ctx->dl.error = 0;
 8005b9c:	f885 4065 	strb.w	r4, [r5, #101]	; 0x65
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
                    p_ctx->dl.state = DL_STATE_ERROR;
 8005ba0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005ba4:	b007      	add	sp, #28
 8005ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	f000 8134 	beq.w	8005e1a <ifx_i2c_pl_event_handler+0x33e>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8005bb2:	2306      	movs	r3, #6
 8005bb4:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 8005bb8:	e7a3      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8005bba:	2303      	movs	r3, #3
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8005bbc:	4628      	mov	r0, r5
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8005bbe:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005bc2:	b007      	add	sp, #28
 8005bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8005bc8:	f000 be38 	b.w	800683c <ifx_i2c_pl_receive_frame>
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8005bcc:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8005bd0:	6f29      	ldr	r1, [r5, #112]	; 0x70

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8005bd2:	3301      	adds	r3, #1
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8005bd4:	f003 0303 	and.w	r3, r3, #3
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005bd8:	f043 04a0 	orr.w	r4, r3, #160	; 0xa0
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005bdc:	b29b      	uxth	r3, r3
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005bde:	ea84 1003 	eor.w	r0, r4, r3, lsl #4
    h4 = h3 >> 4;
 8005be2:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005be4:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005be8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005bec:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005bf0:	f003 060b 	and.w	r6, r3, #11
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005bf4:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005bf6:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 8005bfa:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005bfc:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005c00:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8005c04:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8005c08:	ea82 03c0 	eor.w	r3, r2, r0, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005c0c:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005c10:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005c12:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 8005c16:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005c18:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005c1c:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8005c20:	ea82 2313 	eor.w	r3, r2, r3, lsr #8
 8005c24:	ea83 03c0 	eor.w	r3, r3, r0, lsl #3
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8005c28:	2002      	movs	r0, #2
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005c2a:	2200      	movs	r2, #0
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005c2c:	0a1e      	lsrs	r6, r3, #8
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8005c2e:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005c32:	4628      	mov	r0, r5
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005c34:	700c      	strb	r4, [r1, #0]
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005c36:	710b      	strb	r3, [r1, #4]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005c38:	70ce      	strb	r6, [r1, #3]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005c3a:	704a      	strb	r2, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8005c3c:	708a      	strb	r2, [r1, #2]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005c3e:	2205      	movs	r2, #5
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005c40:	b007      	add	sp, #28
 8005c42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005c46:	f000 bdbf 	b.w	80067c8 <ifx_i2c_pl_send_frame>

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8005c4a:	f7ff fa6d 	bl	8005128 <pal_os_timer_get_time_in_milliseconds>
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8005c4e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c

    if (p_ctx->tl.api_start_time > current_time_stamp)
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8005c50:	4ad0      	ldr	r2, [pc, #832]	; (8005f94 <ifx_i2c_pl_event_handler+0x4b8>)
_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8005c52:	1ac0      	subs	r0, r0, r3

    if (p_ctx->tl.api_start_time > current_time_stamp)
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8005c54:	4290      	cmp	r0, r2
 8005c56:	f200 80ce 	bhi.w	8005df6 <ifx_i2c_pl_event_handler+0x31a>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8005c5a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	f000 8177 	beq.w	8005f52 <ifx_i2c_pl_event_handler+0x476>
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005c64:	f8b5 206c 	ldrh.w	r2, [r5, #108]	; 0x6c
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8005c68:	6f29      	ldr	r1, [r5, #112]	; 0x70
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005c6a:	9205      	str	r2, [sp, #20]
            status = ifx_i2c_dl_resync(p_ctx);
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005c72:	4610      	mov	r0, r2
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
 8005c74:	2302      	movs	r3, #2
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8005c76:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
 8005c7a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8005c7e:	700a      	strb	r2, [r1, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);

    if (0 != frame_len) // Data frame
 8005c80:	2800      	cmp	r0, #0
 8005c82:	f000 8136 	beq.w	8005ef2 <ifx_i2c_pl_event_handler+0x416>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8005c86:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 81a1 	beq.w	8005fd2 <ifx_i2c_pl_event_handler+0x4f6>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8005c90:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005c94:	3301      	adds	r3, #1
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8005c9e:	780a      	ldrb	r2, [r1, #0]
    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8005ca0:	9e05      	ldr	r6, [sp, #20]
 8005ca2:	f106 0c03 	add.w	ip, r6, #3
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8005ca6:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8005caa:	2000      	movs	r0, #0
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005cac:	0a33      	lsrs	r3, r6, #8
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8005cae:	fa1f fc8c 	uxth.w	ip, ip
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8005cb2:	700a      	strb	r2, [r1, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8005cb4:	f885 0066 	strb.w	r0, [r5, #102]	; 0x66
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;
 8005cb8:	708e      	strb	r6, [r1, #2]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005cba:	704b      	strb	r3, [r1, #1]
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8005cbc:	f1bc 0f00 	cmp.w	ip, #0
 8005cc0:	f040 811f 	bne.w	8005f02 <ifx_i2c_pl_event_handler+0x426>
 8005cc4:	4660      	mov	r0, ip
 8005cc6:	4666      	mov	r6, ip
 8005cc8:	e135      	b.n	8005f36 <ifx_i2c_pl_event_handler+0x45a>
            }
            break;
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 8005cca:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
 8005cce:	d07c      	beq.n	8005dca <ifx_i2c_pl_event_handler+0x2ee>
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
 8005cd0:	f895 3063 	ldrb.w	r3, [r5, #99]	; 0x63
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 808f 	beq.w	8005dfe <ifx_i2c_pl_event_handler+0x322>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8005ce0:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
 8005ce4:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8005ce6:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 8005ce8:	3b05      	subs	r3, #5
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3203      	adds	r2, #3
 8005cee:	4628      	mov	r0, r5
 8005cf0:	2104      	movs	r1, #4
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005cf2:	46a4      	mov	ip, r4
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005cf4:	b007      	add	sp, #28
 8005cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005cfa:	4760      	bx	ip
                }
            }
            break;
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8005cfc:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
 8005d00:	d063      	beq.n	8005dca <ifx_i2c_pl_event_handler+0x2ee>
                    break;
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8005d02:	f1bb 0f04 	cmp.w	fp, #4
 8005d06:	f67f af54 	bls.w	8005bb2 <ifx_i2c_pl_event_handler+0xd6>
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8005d0a:	eb08 020b 	add.w	r2, r8, fp
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8005d0e:	f898 3000 	ldrb.w	r3, [r8]
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8005d12:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8005d16:	f812 0c01 	ldrb.w	r0, [r2, #-1]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
 8005d1a:	f898 1001 	ldrb.w	r1, [r8, #1]
 8005d1e:	f898 2002 	ldrb.w	r2, [r8, #2]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8005d22:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8005d26:	f3c3 1441 	ubfx	r4, r3, #5, #2
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8005d2a:	9000      	str	r0, [sp, #0]
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8005d2c:	9401      	str	r4, [sp, #4]
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8005d2e:	09d8      	lsrs	r0, r3, #7
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8005d30:	f003 0403 	and.w	r4, r3, #3
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8005d34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005d38:	9303      	str	r3, [sp, #12]
                packet_len = (p_data[1] << 8) | p_data[2];
 8005d3a:	ea42 2301 	orr.w	r3, r2, r1, lsl #8
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8005d3e:	9404      	str	r4, [sp, #16]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
 8005d40:	9302      	str	r3, [sp, #8]
 8005d42:	f108 31ff 	add.w	r1, r8, #4294967295
}

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;
 8005d46:	2400      	movs	r4, #0
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005d48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005d4c:	4063      	eors	r3, r4
 8005d4e:	b29b      	uxth	r3, r3
    h2 = h1 & 0x0F;
 8005d50:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005d54:	b2db      	uxtb	r3, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005d56:	ea83 1306 	eor.w	r3, r3, r6, lsl #4
    h4 = h3 >> 4;
 8005d5a:	091a      	lsrs	r2, r3, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005d5c:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8005d60:	ea82 2414 	eor.w	r4, r2, r4, lsr #8
 8005d64:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 8005d68:	b2a4      	uxth	r4, r4
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8005d6a:	4551      	cmp	r1, sl
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005d6c:	ea84 04c3 	eor.w	r4, r4, r3, lsl #3
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8005d70:	d1ea      	bne.n	8005d48 <ifx_i2c_pl_event_handler+0x26c>
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8005d72:	2801      	cmp	r0, #1
 8005d74:	bf0c      	ite	eq
 8005d76:	230b      	moveq	r3, #11
 8005d78:	230a      	movne	r3, #10
 8005d7a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
            }
            break;
 8005d7e:	e6c0      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
            }
            break;
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8005d80:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8005d84:	f04f 0305 	mov.w	r3, #5
            }
            break;
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8005d88:	d020      	beq.n	8005dcc <ifx_i2c_pl_event_handler+0x2f0>
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8005d8a:	f7ff f9cd 	bl	8005128 <pal_os_timer_get_time_in_milliseconds>
                p_ctx->dl.state = DL_STATE_RX;
 8005d8e:	2303      	movs	r3, #3
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8005d90:	67a8      	str	r0, [r5, #120]	; 0x78
                p_ctx->dl.state = DL_STATE_RX;
 8005d92:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fd50 	bl	800683c <ifx_i2c_pl_receive_frame>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f47f af08 	bne.w	8005bb2 <ifx_i2c_pl_event_handler+0xd6>
 8005da2:	e6ff      	b.n	8005ba4 <ifx_i2c_pl_event_handler+0xc8>
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 8005da4:	2101      	movs	r1, #1
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005da6:	2200      	movs	r2, #0
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 8005da8:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005dac:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 8005dae:	4613      	mov	r3, r2
 8005db0:	4628      	mov	r0, r5
 8005db2:	46a4      	mov	ip, r4
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005db4:	b007      	add	sp, #28
 8005db6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005dba:	4760      	bx	ip
        }
        switch (p_ctx->dl.state)
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8005dbc:	f1b9 0f00 	cmp.w	r9, #0
 8005dc0:	bf14      	ite	ne
 8005dc2:	2101      	movne	r1, #1
 8005dc4:	2102      	moveq	r1, #2
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	e7f0      	b.n	8005dac <ifx_i2c_pl_event_handler+0x2d0>
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8005dca:	2305      	movs	r3, #5
 8005dcc:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 8005dd0:	e69a      	b.n	8005b08 <ifx_i2c_pl_event_handler+0x2c>
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	e7f7      	b.n	8005dc6 <ifx_i2c_pl_event_handler+0x2ea>
            {
                if (0 == p_ctx->dl.resynced)
                {
                    p_ctx->dl.error = 1;
                }
                if (0 == p_ctx->dl.error)
 8005dd6:	f895 2065 	ldrb.w	r2, [r5, #101]	; 0x65
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	f47f aec4 	bne.w	8005b68 <ifx_i2c_pl_event_handler+0x8c>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005de0:	6fec      	ldr	r4, [r5, #124]	; 0x7c
                }
                if (0 == p_ctx->dl.error)
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 8005de2:	2101      	movs	r1, #1
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005de4:	4628      	mov	r0, r5
 8005de6:	4613      	mov	r3, r2
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005de8:	46a4      	mov	ip, r4
                }
                if (0 == p_ctx->dl.error)
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 8005dea:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005dee:	b007      	add	sp, #28
 8005df0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005df4:	4760      	bx	ip
            p_ctx->dl.state  = DL_STATE_NACK;
        }
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
 8005df6:	2308      	movs	r3, #8
 8005df8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 8005dfc:	e681      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8005dfe:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
 8005e02:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8005e04:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 8005e06:	3b05      	subs	r3, #5
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3203      	adds	r2, #3
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	2106      	movs	r1, #6
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005e10:	46a4      	mov	ip, r4
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005e12:	b007      	add	sp, #28
 8005e14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005e18:	4760      	bx	ip
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8005e1a:	9b02      	ldr	r3, [sp, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f43f aec8 	beq.w	8005bb2 <ifx_i2c_pl_event_handler+0xd6>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8005e22:	3305      	adds	r3, #5
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8005e24:	459b      	cmp	fp, r3
 8005e26:	f47f aec4 	bne.w	8005bb2 <ifx_i2c_pl_event_handler+0xd6>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	3b02      	subs	r3, #2
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	f67f aebf 	bls.w	8005bb2 <ifx_i2c_pl_event_handler+0xd6>
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8005e34:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 8005e38:	9903      	ldr	r1, [sp, #12]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	f002 0203 	and.w	r2, r2, #3
 8005e40:	4291      	cmp	r1, r2
 8005e42:	f040 80d8 	bne.w	8005ff6 <ifx_i2c_pl_event_handler+0x51a>
                    continue_state_machine = FALSE;
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
                    break;
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8005e46:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005e4a:	9a04      	ldr	r2, [sp, #16]
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	f040 80bb 	bne.w	8005fc8 <ifx_i2c_pl_event_handler+0x4ec>
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8005e52:	9b01      	ldr	r3, [sp, #4]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	f000 80b2 	beq.w	8005fbe <ifx_i2c_pl_event_handler+0x4e2>
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8005e5a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005e5e:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8005e62:	4641      	mov	r1, r8
 8005e64:	465a      	mov	r2, fp
 8005e66:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8005e68:	f007 fb98 	bl	800d59c <memcpy>
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8005e6c:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8005e70:	6f29      	ldr	r1, [r5, #112]	; 0x70
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
                p_ctx->dl.rx_buffer_size = data_len;
 8005e72:	f8a5 b06e 	strh.w	fp, [r5, #110]	; 0x6e
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005e76:	f043 0480 	orr.w	r4, r3, #128	; 0x80
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005e7a:	f003 030f 	and.w	r3, r3, #15
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005e7e:	ea84 1003 	eor.w	r0, r4, r3, lsl #4
    h4 = h3 >> 4;
 8005e82:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005e84:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005e88:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005e8c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005e90:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005e94:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005e96:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 8005e9a:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005e9c:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005ea0:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8005ea4:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8005ea8:	ea82 03c0 	eor.w	r3, r2, r0, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005eac:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005eb0:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005eb2:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 8005eb6:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005eb8:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005ebc:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8005ec0:	ea82 2313 	eor.w	r3, r2, r3, lsr #8
 8005ec4:	ea83 03c0 	eor.w	r3, r3, r0, lsl #3
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8005ec8:	2200      	movs	r2, #0
                p_ctx->dl.state = DL_STATE_ACK;
 8005eca:	2004      	movs	r0, #4
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005ecc:	0a1e      	lsrs	r6, r3, #8
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
                p_ctx->dl.state = DL_STATE_ACK;
 8005ece:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8005ed2:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005ed6:	4628      	mov	r0, r5
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005ed8:	700c      	strb	r4, [r1, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005eda:	704a      	strb	r2, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8005edc:	708a      	strb	r2, [r1, #2]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005ede:	710b      	strb	r3, [r1, #4]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005ee0:	70ce      	strb	r6, [r1, #3]
 8005ee2:	e6ac      	b.n	8005c3e <ifx_i2c_pl_event_handler+0x162>
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (crc_received != crc_calculated)
 8005ee4:	9a00      	ldr	r2, [sp, #0]
 8005ee6:	42a2      	cmp	r2, r4
 8005ee8:	d056      	beq.n	8005f98 <ifx_i2c_pl_event_handler+0x4bc>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8005eea:	2305      	movs	r3, #5
 8005eec:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 8005ef0:	e607      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef6:	700a      	strb	r2, [r1, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005ef8:	9a05      	ldr	r2, [sp, #20]
 8005efa:	704a      	strb	r2, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8005efc:	708a      	strb	r2, [r1, #2]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8005efe:	f04f 0c03 	mov.w	ip, #3
 8005f02:	468e      	mov	lr, r1
 8005f04:	2000      	movs	r0, #0
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8005f06:	f81e 3b01 	ldrb.w	r3, [lr], #1
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005f0a:	4043      	eors	r3, r0
    h2 = h1 & 0x0F;
 8005f0c:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005f10:	b2db      	uxtb	r3, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005f12:	ea83 1306 	eor.w	r3, r3, r6, lsl #4
    h4 = h3 >> 4;
 8005f16:	091a      	lsrs	r2, r3, #4
 8005f18:	ebc1 070e 	rsb	r7, r1, lr

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005f1c:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8005f20:	b2bf      	uxth	r7, r7
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005f22:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 8005f26:	ea82 2010 	eor.w	r0, r2, r0, lsr #8
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8005f2a:	45bc      	cmp	ip, r7
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005f2c:	ea80 00c3 	eor.w	r0, r0, r3, lsl #3
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8005f30:	d8e9      	bhi.n	8005f06 <ifx_i2c_pl_event_handler+0x42a>
 8005f32:	0a06      	lsrs	r6, r0, #8
 8005f34:	b2c0      	uxtb	r0, r0
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005f36:	9a05      	ldr	r2, [sp, #20]
 8005f38:	188b      	adds	r3, r1, r2
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005f3a:	3205      	adds	r2, #5
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005f3c:	7118      	strb	r0, [r3, #4]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005f3e:	70de      	strb	r6, [r3, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005f40:	b292      	uxth	r2, r2
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 fc40 	bl	80067c8 <ifx_i2c_pl_send_frame>
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8005f48:	b1f0      	cbz	r0, 8005f88 <ifx_i2c_pl_event_handler+0x4ac>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8005f4a:	2306      	movs	r3, #6
 8005f4c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 8005f50:	e628      	b.n	8005ba4 <ifx_i2c_pl_event_handler+0xc8>
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
    {
        ack_nr = 0;
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8005f52:	6f69      	ldr	r1, [r5, #116]	; 0x74

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8005f54:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8005f58:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8005f5c:	2000      	movs	r0, #0
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005f5e:	23c0      	movs	r3, #192	; 0xc0
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
 8005f60:	2601      	movs	r6, #1
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8005f62:	2205      	movs	r2, #5
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8005f64:	f885 0064 	strb.w	r0, [r5, #100]	; 0x64
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
 8005f68:	f885 6066 	strb.w	r6, [r5, #102]	; 0x66
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8005f6c:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005f70:	7048      	strb	r0, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8005f72:	7088      	strb	r0, [r1, #2]
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005f74:	700b      	strb	r3, [r1, #0]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005f76:	200a      	movs	r0, #10
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005f78:	239a      	movs	r3, #154	; 0x9a
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005f7a:	70c8      	strb	r0, [r1, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005f7c:	710b      	strb	r3, [r1, #4]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 fc22 	bl	80067c8 <ifx_i2c_pl_send_frame>
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d1e0      	bne.n	8005f4a <ifx_i2c_pl_event_handler+0x46e>
            break;
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8005f88:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	f47f ae09 	bne.w	8005ba4 <ifx_i2c_pl_event_handler+0xc8>
 8005f92:	e5b6      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
 8005f94:	0002bf1f 	.word	0x0002bf1f
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 8005f98:	f1bb 0f05 	cmpne.w	fp, #5
 8005f9c:	d814      	bhi.n	8005fc8 <ifx_i2c_pl_event_handler+0x4ec>	; unpredictable <IT:ne>
 8005f9e:	9a02      	ldrne	r2, [sp, #8]
 8005fa0:	b992      	cbnz	r2, 8005fc8 <ifx_i2c_pl_event_handler+0x4ec>
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8005fa2:	b9cb      	cbnz	r3, 8005fd8 <ifx_i2c_pl_event_handler+0x4fc>
                    p_ctx->dl.resynced = 1;
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
                    break;
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	b97b      	cbnz	r3, 8005fc8 <ifx_i2c_pl_event_handler+0x4ec>
 8005fa8:	9b01      	ldr	r3, [sp, #4]
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d00c      	beq.n	8005fc8 <ifx_i2c_pl_event_handler+0x4ec>
 8005fae:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005fb2:	9a04      	ldr	r2, [sp, #16]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d107      	bne.n	8005fc8 <ifx_i2c_pl_event_handler+0x4ec>
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8005fb8:	9b01      	ldr	r3, [sp, #4]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d147      	bne.n	800604e <ifx_i2c_pl_event_handler+0x572>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8005fbe:	2305      	movs	r3, #5
 8005fc0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 8005fc4:	9c00      	ldr	r4, [sp, #0]
 8005fc6:	e59c      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8005fc8:	2309      	movs	r3, #9
 8005fca:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 8005fce:	9c00      	ldr	r4, [sp, #0]
 8005fd0:	e597      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
 8005fd2:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005fd6:	e663      	b.n	8005ca0 <ifx_i2c_pl_event_handler+0x1c4>
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    p_ctx->dl.resynced = 1;
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8005fd8:	2203      	movs	r2, #3
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8005fda:	2309      	movs	r3, #9
                    p_ctx->dl.resynced = 1;
 8005fdc:	2101      	movs	r1, #1
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8005fde:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8005fe2:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
                    break;
 8005fe6:	2202      	movs	r2, #2
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8005fe8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    p_ctx->dl.resynced = 1;
 8005fec:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
                    break;
 8005ff0:	9c00      	ldr	r4, [sp, #0]
 8005ff2:	9201      	str	r2, [sp, #4]
 8005ff4:	e585      	b.n	8005b02 <ifx_i2c_pl_event_handler+0x26>
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005ff6:	f043 0480 	orr.w	r4, r3, #128	; 0x80
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005ffa:	f003 030f 	and.w	r3, r3, #15
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005ffe:	ea84 1103 	eor.w	r1, r4, r3, lsl #4
    h4 = h3 >> 4;
 8006002:	090a      	lsrs	r2, r1, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006004:	ea82 0141 	eor.w	r1, r2, r1, lsl #1
 8006008:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800600c:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8006010:	f003 000f 	and.w	r0, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006014:	b2d9      	uxtb	r1, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8006016:	ea81 1100 	eor.w	r1, r1, r0, lsl #4
    h4 = h3 >> 4;
 800601a:	090a      	lsrs	r2, r1, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 800601c:	ea82 0141 	eor.w	r1, r2, r1, lsl #1
 8006020:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
 8006024:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8006028:	ea82 03c1 	eor.w	r3, r2, r1, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 800602c:	f003 000f 	and.w	r0, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006030:	b2d9      	uxtb	r1, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8006032:	ea81 1100 	eor.w	r1, r1, r0, lsl #4
    h4 = h3 >> 4;
 8006036:	090a      	lsrs	r2, r1, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006038:	ea82 0141 	eor.w	r1, r2, r1, lsl #1
 800603c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8006040:	ea82 2313 	eor.w	r3, r2, r3, lsr #8
 8006044:	ea83 03c0 	eor.w	r3, r3, r0, lsl #3
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8006048:	6f69      	ldr	r1, [r5, #116]	; 0x74
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 800604a:	2009      	movs	r0, #9
 800604c:	e5ed      	b.n	8005c2a <ifx_i2c_pl_event_handler+0x14e>

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 800604e:	9a03      	ldr	r2, [sp, #12]
 8006050:	6fec      	ldr	r4, [r5, #124]	; 0x7c
                    break;
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8006052:	2301      	movs	r3, #1
 8006054:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8006058:	4628      	mov	r0, r5
 800605a:	2102      	movs	r1, #2
 800605c:	4613      	mov	r3, r2
 800605e:	e6a8      	b.n	8005db2 <ifx_i2c_pl_event_handler+0x2d6>

08006060 <ifx_i2c_dl_init>:

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8006060:	2300      	movs	r3, #0
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006062:	b570      	push	{r4, r5, r6, lr}
 8006064:	460d      	mov	r5, r1
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8006066:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 800606a:	490e      	ldr	r1, [pc, #56]	; (80060a4 <ifx_i2c_dl_init+0x44>)
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800606c:	4604      	mov	r4, r0
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 800606e:	f000 fb73 	bl	8006758 <ifx_i2c_pl_init>
 8006072:	b110      	cbz	r0, 800607a <ifx_i2c_dl_init+0x1a>
    {
        return (IFX_I2C_STACK_ERROR);
 8006074:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;

    return IFX_I2C_STACK_SUCCESS;
}
 8006078:	bd70      	pop	{r4, r5, r6, pc}
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800607a:	2303      	movs	r3, #3
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
 800607c:	2601      	movs	r6, #1
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 800607e:	f504 7129 	add.w	r1, r4, #676	; 0x2a4
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8006082:	f204 32ba 	addw	r2, r4, #954	; 0x3ba
    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
 8006086:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    p_ctx->dl.error = 0;
 800608a:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
 800608e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8006092:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8006096:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 800609a:	67e5      	str	r5, [r4, #124]	; 0x7c
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 800609c:	6721      	str	r1, [r4, #112]	; 0x70
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 800609e:	6762      	str	r2, [r4, #116]	; 0x74

    return IFX_I2C_STACK_SUCCESS;
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	bf00      	nop
 80060a4:	08005add 	.word	0x08005add

080060a8 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 80060a8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <ifx_i2c_dl_send_frame+0xe>
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}
 80060b0:	f44f 7081 	mov.w	r0, #258	; 0x102
 80060b4:	4770      	bx	lr

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 80060b6:	2900      	cmp	r1, #0
 80060b8:	d0fa      	beq.n	80060b0 <ifx_i2c_dl_send_frame+0x8>

    return IFX_I2C_STACK_SUCCESS;
}

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 80060ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 80060bc:	6f05      	ldr	r5, [r0, #112]	; 0x70
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 80060be:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    }

    p_ctx->dl.state = DL_STATE_TX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
 80060c2:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
    p_ctx->dl.retransmit_counter = 0;
 80060c6:	2200      	movs	r2, #0
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
 80060c8:	2602      	movs	r6, #2
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 80060ca:	240a      	movs	r4, #10
 80060cc:	6684      	str	r4, [r0, #104]	; 0x68
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
 80060ce:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
    p_ctx->dl.retransmit_counter = 0;
 80060d2:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
    p_ctx->dl.action_rx_only = 0;
 80060d6:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 80060da:	702b      	strb	r3, [r5, #0]
    if (0 != frame_len) // Data frame
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80060dc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80060e0:	3301      	adds	r3, #1
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 80060ea:	782e      	ldrb	r6, [r5, #0]
 80060ec:	ea46 0383 	orr.w	r3, r6, r3, lsl #2
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 80060f0:	f64f 76fd 	movw	r6, #65533	; 0xfffd
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80060f4:	0a0c      	lsrs	r4, r1, #8
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 80060f6:	42b1      	cmp	r1, r6
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 80060f8:	702b      	strb	r3, [r5, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 80060fa:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;
 80060fe:	70a9      	strb	r1, [r5, #2]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8006100:	706c      	strb	r4, [r5, #1]
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006102:	d027      	beq.n	8006154 <ifx_i2c_dl_send_frame+0xac>
 8006104:	1c8f      	adds	r7, r1, #2
 8006106:	4696      	mov	lr, r2
 8006108:	fa15 f787 	uxtah	r7, r5, r7
 800610c:	1e6e      	subs	r6, r5, #1
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 800610e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8006112:	ea8e 0303 	eor.w	r3, lr, r3
    h2 = h1 & 0x0F;
 8006116:	f003 040f 	and.w	r4, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 800611a:	b2db      	uxtb	r3, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800611c:	ea83 1304 	eor.w	r3, r3, r4, lsl #4
    h4 = h3 >> 4;
 8006120:	091a      	lsrs	r2, r3, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006122:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8006126:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 800612a:	ea82 221e 	eor.w	r2, r2, lr, lsr #8
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 800612e:	42be      	cmp	r6, r7
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006130:	ea82 0ec3 	eor.w	lr, r2, r3, lsl #3
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006134:	d1eb      	bne.n	800610e <ifx_i2c_dl_send_frame+0x66>
 8006136:	ea4f 241e 	mov.w	r4, lr, lsr #8
 800613a:	fa5f fe8e 	uxtb.w	lr, lr
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 800613e:	186b      	adds	r3, r5, r1
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8006140:	1d4a      	adds	r2, r1, #5
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8006142:	70dc      	strb	r4, [r3, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8006144:	f883 e004 	strb.w	lr, [r3, #4]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8006148:	4629      	mov	r1, r5
 800614a:	b292      	uxth	r2, r2
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}
 800614c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8006150:	f000 bb3a 	b.w	80067c8 <ifx_i2c_pl_send_frame>
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006154:	4696      	mov	lr, r2
 8006156:	4614      	mov	r4, r2
 8006158:	e7f1      	b.n	800613e <ifx_i2c_dl_send_frame+0x96>
 800615a:	bf00      	nop

0800615c <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 800615c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8006160:	2b01      	cmp	r3, #1
 8006162:	d002      	beq.n	800616a <ifx_i2c_dl_receive_frame+0xe>
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;

    return (ifx_i2c_pl_receive_frame(p_ctx));
}
 8006164:	f44f 7081 	mov.w	r0, #258	; 0x102
 8006168:	4770      	bx	lr

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800616a:	b510      	push	{r4, lr}
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 800616c:	2103      	movs	r1, #3
    p_ctx->dl.retransmit_counter = 0;
 800616e:	2200      	movs	r2, #0
    p_ctx->dl.action_rx_only = 1;
 8006170:	f880 3063 	strb.w	r3, [r0, #99]	; 0x63
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8006174:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    p_ctx->dl.retransmit_counter = 0;
 8006178:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 800617c:	4604      	mov	r4, r0
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800617e:	f7fe ffd3 	bl	8005128 <pal_os_timer_get_time_in_milliseconds>
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8006182:	4b04      	ldr	r3, [pc, #16]	; (8006194 <ifx_i2c_dl_receive_frame+0x38>)

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8006184:	67a0      	str	r0, [r4, #120]	; 0x78
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8006186:	66a3      	str	r3, [r4, #104]	; 0x68

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8006188:	4620      	mov	r0, r4
}
 800618a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;

    return (ifx_i2c_pl_receive_frame(p_ctx));
 800618e:	f000 bb55 	b.w	800683c <ifx_i2c_pl_receive_frame>
 8006192:	bf00      	nop
 8006194:	0002bf20 	.word	0x0002bf20

08006198 <ifx_i2c_pl_status_poll_callback>:
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
}


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 8006198:	4601      	mov	r1, r0
 800619a:	b410      	push	{r4}
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 800619c:	2201      	movs	r2, #1
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800619e:	2482      	movs	r4, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 80061a0:	2004      	movs	r0, #4
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 80061a2:	f881 4080 	strb.w	r4, [r1, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 80061a6:	f881 219a 	strb.w	r2, [r1, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80061aa:	f881 219b 	strb.w	r2, [r1, #411]	; 0x19b
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80061ae:	23c8      	movs	r3, #200	; 0xc8
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 80061b0:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80061b4:	f8a1 319c 	strh.w	r3, [r1, #412]	; 0x19c
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 80061b8:	f8a1 2196 	strh.w	r2, [r1, #406]	; 0x196
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80061bc:	6908      	ldr	r0, [r1, #16]

_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
}
 80061be:	f85d 4b04 	ldr.w	r4, [sp], #4
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80061c2:	3180      	adds	r1, #128	; 0x80
 80061c4:	f7fe bdee 	b.w	8004da4 <pal_i2c_write>

080061c8 <ifx_i2c_pal_poll_callback>:
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80061c8:	f890 319b 	ldrb.w	r3, [r0, #411]	; 0x19b
 80061cc:	2b01      	cmp	r3, #1
        }
    }
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 80061ce:	4601      	mov	r1, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80061d0:	d008      	beq.n	80061e4 <ifx_i2c_pal_poll_callback+0x1c>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
    }
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d000      	beq.n	80061d8 <ifx_i2c_pal_poll_callback+0x10>
 80061d6:	4770      	bx	lr
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80061d8:	f8b1 2198 	ldrh.w	r2, [r1, #408]	; 0x198
 80061dc:	6900      	ldr	r0, [r0, #16]
 80061de:	3180      	adds	r1, #128	; 0x80
 80061e0:	f7fe be10 	b.w	8004e04 <pal_i2c_read>
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 80061e4:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
 80061e8:	6900      	ldr	r0, [r0, #16]
 80061ea:	3180      	adds	r1, #128	; 0x80
 80061ec:	f7fe bdda 	b.w	8004da4 <pal_i2c_write>

080061f0 <ifx_i2c_pl_negotiation_event_handler>:

    return (status);

}
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80061f8:	8885      	ldrh	r5, [r0, #4]

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80061fa:	2b55      	cmp	r3, #85	; 0x55
{
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80061fc:	ea4f 2715 	mov.w	r7, r5, lsr #8

    return (status);

}
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 8006200:	4604      	mov	r4, r0
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 8006202:	f44f 7181 	mov.w	r1, #258	; 0x102
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 8006206:	b2ed      	uxtb	r5, r5
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8006208:	f04f 06aa 	mov.w	r6, #170	; 0xaa
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 800620c:	f04f 0833 	mov.w	r8, #51	; 0x33

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8006210:	d025      	beq.n	800625e <ifx_i2c_pl_negotiation_event_handler+0x6e>
 8006212:	d93e      	bls.n	8006292 <ifx_i2c_pl_negotiation_event_handler+0xa2>
 8006214:	2b88      	cmp	r3, #136	; 0x88
 8006216:	f000 80c6 	beq.w	80063a6 <ifx_i2c_pl_negotiation_event_handler+0x1b6>
 800621a:	d858      	bhi.n	80062ce <ifx_i2c_pl_negotiation_event_handler+0xde>
 800621c:	2b66      	cmp	r3, #102	; 0x66
 800621e:	f000 80af 	beq.w	8006380 <ifx_i2c_pl_negotiation_event_handler+0x190>
 8006222:	2b77      	cmp	r3, #119	; 0x77
 8006224:	f040 810a 	bne.w	800643c <ifx_i2c_pl_negotiation_event_handler+0x24c>
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8006228:	6920      	ldr	r0, [r4, #16]
            break;
            // Frequency negotiated, Set frequency at master
            case PL_INIT_AGREE_FREQ:
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 800622a:	8861      	ldrh	r1, [r4, #2]
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 800622c:	f8d0 900c 	ldr.w	r9, [r0, #12]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	60c3      	str	r3, [r0, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8006234:	f7fe fe16 	bl	8004e64 <pal_i2c_set_bitrate>
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8006238:	6923      	ldr	r3, [r4, #16]
 800623a:	f8c3 900c 	str.w	r9, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
 800623e:	2800      	cmp	r0, #0
 8006240:	f000 80eb 	beq.w	800641a <ifx_i2c_pl_negotiation_event_handler+0x22a>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8006244:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
 8006248:	1e5a      	subs	r2, r3, #1
 800624a:	f8a4 219c 	strh.w	r2, [r4, #412]	; 0x19c
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 80f6 	bne.w	8006440 <ifx_i2c_pl_negotiation_event_handler+0x250>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8006254:	23aa      	movs	r3, #170	; 0xaa
 8006256:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
 800625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 800625e:	2566      	movs	r5, #102	; 0x66
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006260:	2084      	movs	r0, #132	; 0x84
    p_ctx->pl.buffer_tx_len = 1;
 8006262:	2201      	movs	r2, #1

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006264:	2104      	movs	r1, #4
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006266:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800626a:	23c8      	movs	r3, #200	; 0xc8
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 800626c:	f884 51ac 	strb.w	r5, [r4, #428]	; 0x1ac
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006270:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006274:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006278:	f8a4 1198 	strh.w	r1, [r4, #408]	; 0x198
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 800627c:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006280:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006284:	6920      	ldr	r0, [r4, #16]
 8006286:	f104 0180 	add.w	r1, r4, #128	; 0x80
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800628a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800628e:	f7fe bd89 	b.w	8004da4 <pal_i2c_write>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8006292:	2b22      	cmp	r3, #34	; 0x22
 8006294:	f000 8082 	beq.w	800639c <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8006298:	d940      	bls.n	800631c <ifx_i2c_pl_negotiation_event_handler+0x12c>
 800629a:	2b33      	cmp	r3, #51	; 0x33
 800629c:	d05f      	beq.n	800635e <ifx_i2c_pl_negotiation_event_handler+0x16e>
 800629e:	2b44      	cmp	r3, #68	; 0x44
 80062a0:	f040 80ca 	bne.w	8006438 <ifx_i2c_pl_negotiation_event_handler+0x248>
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80062a4:	8862      	ldrh	r2, [r4, #2]
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80062a6:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 80062aa:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80062ae:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80062b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80062b6:	f240 808f 	bls.w	80063d8 <ifx_i2c_pl_negotiation_event_handler+0x1e8>
 80062ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80062be:	f240 80c9 	bls.w	8006454 <ifx_i2c_pl_negotiation_event_handler+0x264>
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 80062c2:	2266      	movs	r2, #102	; 0x66
 80062c4:	4613      	mov	r3, r2
 80062c6:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
 80062ca:	2a55      	cmp	r2, #85	; 0x55
 80062cc:	e7a1      	b.n	8006212 <ifx_i2c_pl_negotiation_event_handler+0x22>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80062ce:	2baa      	cmp	r3, #170	; 0xaa
 80062d0:	d047      	beq.n	8006362 <ifx_i2c_pl_negotiation_event_handler+0x172>
 80062d2:	2bbb      	cmp	r3, #187	; 0xbb
 80062d4:	d1c1      	bne.n	800625a <ifx_i2c_pl_negotiation_event_handler+0x6a>
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 80062d6:	6920      	ldr	r0, [r4, #16]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 80062d8:	2300      	movs	r3, #0
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 80062da:	f8d0 900c 	ldr.w	r9, [r0, #12]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 80062de:	60c3      	str	r3, [r0, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 80062e0:	2164      	movs	r1, #100	; 0x64
 80062e2:	f7fe fdbf 	bl	8004e64 <pal_i2c_set_bitrate>
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	f8c3 900c 	str.w	r9, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f000 809b 	beq.w	8006428 <ifx_i2c_pl_negotiation_event_handler+0x238>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 80062f2:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
 80062f6:	1e5a      	subs	r2, r3, #1
 80062f8:	f8a4 219c 	strh.w	r2, [r4, #412]	; 0x19c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 809f 	bne.w	8006440 <ifx_i2c_pl_negotiation_event_handler+0x250>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8006302:	23aa      	movs	r3, #170	; 0xaa
 8006304:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                    p_buffer = NULL;
                    buffer_len = 0;
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 8006308:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 800630c:	4961      	ldr	r1, [pc, #388]	; (8006494 <ifx_i2c_pl_negotiation_event_handler+0x2a4>)
 800630e:	4622      	mov	r2, r4
 8006310:	f642 63e0 	movw	r3, #12000	; 0x2ee0
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 8006314:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                else if (IFX_I2C_STACK_ERROR == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
                    p_buffer = NULL;
                    buffer_len = 0;
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 8006318:	f7fe bece 	b.w	80050b8 <pal_os_event_register_callback_oneshot>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 800631c:	2b11      	cmp	r3, #17
 800631e:	f040 8089 	bne.w	8006434 <ifx_i2c_pl_negotiation_event_handler+0x244>
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8006322:	f04f 0e22 	mov.w	lr, #34	; 0x22
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006326:	2681      	movs	r6, #129	; 0x81
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8006328:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800632a:	2301      	movs	r3, #1
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800632c:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800632e:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006332:	2203      	movs	r2, #3
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006334:	f884 7081 	strb.w	r7, [r4, #129]	; 0x81
 8006338:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 800633c:	f884 e1ac 	strb.w	lr, [r4, #428]	; 0x1ac
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006340:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006344:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006348:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 800634c:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006350:	6920      	ldr	r0, [r4, #16]
 8006352:	f104 0180 	add.w	r1, r4, #128	; 0x80
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 8006356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800635a:	f7fe bd23 	b.w	8004da4 <pal_i2c_write>
            }
            break;
            // Read the current Max frequency supported by slave
            case PL_INIT_GET_FREQ_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 800635e:	2544      	movs	r5, #68	; 0x44
 8006360:	e77e      	b.n	8006260 <ifx_i2c_pl_negotiation_event_handler+0x70>
            break;
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8006362:	2900      	cmp	r1, #0
 8006364:	bf14      	ite	ne
 8006366:	2300      	movne	r3, #0
 8006368:	2302      	moveq	r3, #2
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 800636a:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
 800636e:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
 8006372:	2200      	movs	r2, #0
 8006374:	4620      	mov	r0, r4
 8006376:	46ac      	mov	ip, r5
 8006378:	4613      	mov	r3, r2
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800637a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 800637e:	4760      	bx	ip
            }
            break;
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8006380:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8006384:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
                if (p_ctx->frequency > slave_frequency)
 8006388:	8862      	ldrh	r2, [r4, #2]
 800638a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800638e:	429a      	cmp	r2, r3
 8006390:	d91c      	bls.n	80063cc <ifx_i2c_pl_negotiation_event_handler+0x1dc>
 8006392:	23aa      	movs	r3, #170	; 0xaa
                {
                    LOG_PL("[IFX-PL]: Unexpected frequency in MAX_SCL_FREQU\n");
                    p_buffer = NULL;
                    buffer_len = 0;
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8006394:	f884 61ac 	strb.w	r6, [r4, #428]	; 0x1ac
 8006398:	2b55      	cmp	r3, #85	; 0x55
 800639a:	e73a      	b.n	8006212 <ifx_i2c_pl_negotiation_event_handler+0x22>
            }
            break;
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 800639c:	2588      	movs	r5, #136	; 0x88
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800639e:	2081      	movs	r0, #129	; 0x81
    p_ctx->pl.buffer_tx_len = 1;
 80063a0:	2201      	movs	r2, #1

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 80063a2:	2102      	movs	r1, #2
 80063a4:	e75f      	b.n	8006266 <ifx_i2c_pl_negotiation_event_handler+0x76>
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 80063a6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80063aa:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 80063ae:	88a0      	ldrh	r0, [r4, #4]
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80063b0:	f884 61ac 	strb.w	r6, [r4, #428]	; 0x1ac
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 80063b4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 80063b8:	4290      	cmp	r0, r2
                {
                    p_ctx->frame_size = slave_frame_len;
 80063ba:	f04f 03aa 	mov.w	r3, #170	; 0xaa
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 80063be:	d303      	bcc.n	80063c8 <ifx_i2c_pl_negotiation_event_handler+0x1d8>
                {
                    p_ctx->frame_size = slave_frame_len;
 80063c0:	80a2      	strh	r2, [r4, #4]
                    event = IFX_I2C_STACK_SUCCESS;
 80063c2:	2100      	movs	r1, #0
 80063c4:	2b55      	cmp	r3, #85	; 0x55
 80063c6:	e724      	b.n	8006212 <ifx_i2c_pl_negotiation_event_handler+0x22>
 80063c8:	2b55      	cmp	r3, #85	; 0x55
 80063ca:	e722      	b.n	8006212 <ifx_i2c_pl_negotiation_event_handler+0x22>
                    buffer_len = 0;
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 80063cc:	2277      	movs	r2, #119	; 0x77
 80063ce:	4613      	mov	r3, r2
 80063d0:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
 80063d4:	2a55      	cmp	r2, #85	; 0x55
 80063d6:	e71c      	b.n	8006212 <ifx_i2c_pl_negotiation_event_handler+0x22>
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 80063d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80063dc:	f67f af71 	bls.w	80062c2 <ifx_i2c_pl_negotiation_event_handler+0xd2>
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80063e0:	2580      	movs	r5, #128	; 0x80
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 80063e2:	2755      	movs	r7, #85	; 0x55
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80063e4:	2689      	movs	r6, #137	; 0x89
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80063e6:	2203      	movs	r2, #3
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80063e8:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80063ea:	2301      	movs	r3, #1
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80063ec:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80063ee:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 80063f2:	f884 71ac 	strb.w	r7, [r4, #428]	; 0x1ac
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80063f6:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80063fa:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
 80063fe:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006402:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006406:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 800640a:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800640e:	6920      	ldr	r0, [r4, #16]
 8006410:	1961      	adds	r1, r4, r5
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 8006412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006416:	f7fe bcc5 	b.w	8004da4 <pal_i2c_write>
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 800641a:	2211      	movs	r2, #17
 800641c:	4613      	mov	r3, r2
 800641e:	4601      	mov	r1, r0
 8006420:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
 8006424:	2a55      	cmp	r2, #85	; 0x55
 8006426:	e6f4      	b.n	8006212 <ifx_i2c_pl_negotiation_event_handler+0x22>
 8006428:	2333      	movs	r3, #51	; 0x33
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 800642a:	f884 81ac 	strb.w	r8, [r4, #428]	; 0x1ac
 800642e:	4601      	mov	r1, r0
 8006430:	2b55      	cmp	r3, #85	; 0x55
 8006432:	e6ee      	b.n	8006212 <ifx_i2c_pl_negotiation_event_handler+0x22>
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (PAL_I2C_EVENT_SUCCESS != status)
    {
        if (0 != (p_ctx->pl.retry_counter--))
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8006440:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8006444:	4913      	ldr	r1, [pc, #76]	; (8006494 <ifx_i2c_pl_negotiation_event_handler+0x2a4>)
 8006446:	4622      	mov	r2, r4
 8006448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800644c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (PAL_I2C_EVENT_SUCCESS != status)
    {
        if (0 != (p_ctx->pl.retry_counter--))
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8006450:	f7fe be32 	b.w	80050b8 <pal_os_event_register_callback_oneshot>
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006454:	2680      	movs	r6, #128	; 0x80
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8006456:	f04f 0e55 	mov.w	lr, #85	; 0x55
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800645a:	2789      	movs	r7, #137	; 0x89
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 800645c:	2504      	movs	r5, #4
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800645e:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006460:	2301      	movs	r3, #1
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006462:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8006464:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006468:	2203      	movs	r2, #3
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800646a:	f884 e1ac 	strb.w	lr, [r4, #428]	; 0x1ac
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800646e:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006472:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
 8006476:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800647a:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800647e:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006482:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006486:	6920      	ldr	r0, [r4, #16]
 8006488:	19a1      	adds	r1, r4, r6
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800648a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800648e:	f7fe bc89 	b.w	8004da4 <pal_i2c_write>
 8006492:	bf00      	nop
 8006494:	080061f1 	.word	0x080061f1

08006498 <ifx_i2c_pl_pal_event_handler>:
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8006498:	4602      	mov	r2, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    switch (event)
 800649a:	b179      	cbz	r1, 80064bc <ifx_i2c_pl_pal_event_handler+0x24>
 800649c:	2902      	cmp	r1, #2
 800649e:	d900      	bls.n	80064a2 <ifx_i2c_pl_pal_event_handler+0xa>
 80064a0:	4770      	bx	lr
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 80064a2:	f8b0 319c 	ldrh.w	r3, [r0, #412]	; 0x19c
 80064a6:	1e59      	subs	r1, r3, #1
 80064a8:	f8a0 119c 	strh.w	r1, [r0, #412]	; 0x19c
 80064ac:	b163      	cbz	r3, 80064c8 <ifx_i2c_pl_pal_event_handler+0x30>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 80064ae:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80064b2:	490c      	ldr	r1, [pc, #48]	; (80064e4 <ifx_i2c_pl_pal_event_handler+0x4c>)
 80064b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064b8:	f7fe bdfe 	b.w	80050b8 <pal_os_event_register_callback_oneshot>
            }
            break;

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 80064bc:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80064c0:	4909      	ldr	r1, [pc, #36]	; (80064e8 <ifx_i2c_pl_pal_event_handler+0x50>)
 80064c2:	2332      	movs	r3, #50	; 0x32
 80064c4:	f7fe bdf8 	b.w	80050b8 <pal_os_event_register_callback_oneshot>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 80064c8:	b410      	push	{r4}
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80064ca:	2102      	movs	r1, #2
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80064cc:	f8d0 41a8 	ldr.w	r4, [r0, #424]	; 0x1a8
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80064d0:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80064d4:	46a4      	mov	ip, r4
 80064d6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80064da:	461a      	mov	r2, r3
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
        default:
            break;
    }
}
 80064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80064e0:	4760      	bx	ip
 80064e2:	bf00      	nop
 80064e4:	080061c9 	.word	0x080061c9
 80064e8:	080065d1 	.word	0x080065d1

080064ec <ifx_i2c_pl_soft_reset>:
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80064ec:	b470      	push	{r4, r5, r6}
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
 80064ee:	f890 31ad 	ldrb.w	r3, [r0, #429]	; 0x1ad
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80064f2:	b083      	sub	sp, #12
    uint8_t i2c_mode_value[2] = {0};
 80064f4:	2200      	movs	r2, #0
    switch (p_ctx->pl.request_soft_reset)
 80064f6:	3b99      	subs	r3, #153	; 0x99
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80064f8:	4604      	mov	r4, r0
    uint8_t i2c_mode_value[2] = {0};
 80064fa:	f8ad 2004 	strh.w	r2, [sp, #4]
    switch (p_ctx->pl.request_soft_reset)
 80064fe:	2b0a      	cmp	r3, #10
 8006500:	d84a      	bhi.n	8006598 <ifx_i2c_pl_soft_reset+0xac>
 8006502:	e8df f003 	tbb	[pc, r3]
 8006506:	492f      	.short	0x492f
 8006508:	49494949 	.word	0x49494949
 800650c:	13284949 	.word	0x13284949
 8006510:	06          	.byte	0x06
 8006511:	00          	.byte	0x00
            }
            break;
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8006512:	23a1      	movs	r3, #161	; 0xa1
 8006514:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8006518:	492c      	ldr	r1, [pc, #176]	; (80065cc <ifx_i2c_pl_soft_reset+0xe0>)
 800651a:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800651e:	4622      	mov	r2, r4
 8006520:	f642 63e0 	movw	r3, #12000	; 0x2ee0
            break;
        }
        default:
            break;
    }
}
 8006524:	b003      	add	sp, #12
 8006526:	bc70      	pop	{r4, r5, r6}
            break;
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8006528:	f7fe bdc6 	b.w	80050b8 <pal_os_event_register_callback_oneshot>
            break;
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 800652c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 800653a:	bb83      	cbnz	r3, 800659e <ifx_i2c_pl_soft_reset+0xb2>
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 800653c:	f8d0 51a8 	ldr.w	r5, [r0, #424]	; 0x1a8
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8006540:	2302      	movs	r3, #2
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8006542:	2200      	movs	r2, #0
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8006544:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8006548:	f44f 7181 	mov.w	r1, #258	; 0x102
 800654c:	4613      	mov	r3, r2
 800654e:	46ac      	mov	ip, r5
            break;
        }
        default:
            break;
    }
}
 8006550:	b003      	add	sp, #12
 8006552:	bc70      	pop	{r4, r5, r6}
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8006554:	4760      	bx	ip
                                                   STARTUP_TIME_MSEC);
            break;
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8006556:	2301      	movs	r3, #1
 8006558:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
            break;
        }
        default:
            break;
    }
}
 800655c:	b003      	add	sp, #12
 800655e:	bc70      	pop	{r4, r5, r6}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8006560:	f7ff be46 	b.w	80061f0 <ifx_i2c_pl_negotiation_event_handler>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006564:	2201      	movs	r2, #1
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8006566:	25a2      	movs	r5, #162	; 0xa2
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006568:	2082      	movs	r0, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800656a:	2104      	movs	r1, #4
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800656c:	23c8      	movs	r3, #200	; 0xc8
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 800656e:	f884 51ad 	strb.w	r5, [r4, #429]	; 0x1ad
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006572:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
 8006576:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 800657a:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800657e:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006582:	f8a4 1198 	strh.w	r1, [r4, #408]	; 0x198
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006586:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800658a:	6920      	ldr	r0, [r4, #16]
 800658c:	f104 0180 	add.w	r1, r4, #128	; 0x80
            break;
        }
        default:
            break;
    }
}
 8006590:	b003      	add	sp, #12
 8006592:	bc70      	pop	{r4, r5, r6}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006594:	f7fe bc06 	b.w	8004da4 <pal_i2c_write>
            break;
        }
        default:
            break;
    }
}
 8006598:	b003      	add	sp, #12
 800659a:	bc70      	pop	{r4, r5, r6}
 800659c:	4770      	bx	lr
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 800659e:	23a3      	movs	r3, #163	; 0xa3
 80065a0:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80065a4:	2688      	movs	r6, #136	; 0x88
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80065a6:	f8bd 5004 	ldrh.w	r5, [sp, #4]
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80065aa:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80065ae:	2203      	movs	r2, #3

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80065b0:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80065b2:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80065b4:	2301      	movs	r3, #1
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80065b6:	f8a4 5081 	strh.w	r5, [r4, #129]	; 0x81
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80065ba:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80065be:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80065c2:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80065c6:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
 80065ca:	e7de      	b.n	800658a <ifx_i2c_pl_soft_reset+0x9e>
 80065cc:	080064ed 	.word	0x080064ed

080065d0 <ifx_i2c_pl_guard_time_callback>:
    }
}


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 80065d0:	b570      	push	{r4, r5, r6, lr}
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 80065d2:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
 80065d6:	2b01      	cmp	r3, #1
    }
}


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 80065d8:	4604      	mov	r4, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 80065da:	d002      	beq.n	80065e2 <ifx_i2c_pl_guard_time_callback+0x12>
        {
            LOG_PL("[IFX-PL]: GT done -> REG is read\n");
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
        }
    }
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d010      	beq.n	8006602 <ifx_i2c_pl_guard_time_callback+0x32>
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80065e2:	f890 319b 	ldrb.w	r3, [r0, #411]	; 0x19b
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d1f8      	bne.n	80065dc <ifx_i2c_pl_guard_time_callback+0xc>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 80065ea:	2302      	movs	r3, #2
 80065ec:	f880 319b 	strb.w	r3, [r0, #411]	; 0x19b
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80065f0:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
 80065f4:	6900      	ldr	r0, [r0, #16]
 80065f6:	f104 0180 	add.w	r1, r4, #128	; 0x80
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80065fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80065fe:	f7fe bc01 	b.w	8004e04 <pal_i2c_read>
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 8006602:	f894 319f 	ldrb.w	r3, [r4, #415]	; 0x19f
 8006606:	3b01      	subs	r3, #1
 8006608:	2b04      	cmp	r3, #4
 800660a:	d86b      	bhi.n	80066e4 <ifx_i2c_pl_guard_time_callback+0x114>
 800660c:	e8df f003 	tbb	[pc, r3]
 8006610:	08173a65 	.word	0x08173a65
 8006614:	03          	.byte	0x03
 8006615:	00          	.byte	0x00
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 8006616:	4620      	mov	r0, r4
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8006618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        switch (p_ctx->pl.frame_state)
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 800661c:	f7ff bf66 	b.w	80064ec <ifx_i2c_pl_soft_reset>
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
 8006620:	2302      	movs	r3, #2
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8006622:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
 8006626:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800662a:	4620      	mov	r0, r4
 800662c:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
 8006630:	f104 0280 	add.w	r2, r4, #128	; 0x80
 8006634:	46ac      	mov	ip, r5
 8006636:	2100      	movs	r1, #0
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8006638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800663c:	4760      	bx	ip
            //lint -fallthrough "For write frame, polling of i2c status register is skipped"
            // Do read/write frame
            case PL_STATE_DATA_AVAILABLE:
            {
                // Read frame, if response is ready. Ignore busy flag
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 800663e:	f894 519e 	ldrb.w	r5, [r4, #414]	; 0x19e
 8006642:	2d02      	cmp	r5, #2
 8006644:	d125      	bne.n	8006692 <ifx_i2c_pl_guard_time_callback+0xc2>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8006646:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800664a:	065b      	lsls	r3, r3, #25
 800664c:	d509      	bpl.n	8006662 <ifx_i2c_pl_guard_time_callback+0x92>
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800664e:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
 8006652:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8006656:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800665a:	d002      	beq.n	8006662 <ifx_i2c_pl_guard_time_callback+0x92>
 800665c:	88a2      	ldrh	r2, [r4, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d25f      	bcs.n	8006722 <ifx_i2c_pl_guard_time_callback+0x152>
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8006662:	f7fe fd61 	bl	8005128 <pal_os_timer_get_time_in_milliseconds>
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8006666:	6fa3      	ldr	r3, [r4, #120]	; 0x78
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8006668:	6ea2      	ldr	r2, [r4, #104]	; 0x68
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800666a:	1ac0      	subs	r0, r0, r3
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 800666c:	4290      	cmp	r0, r2
 800666e:	d247      	bcs.n	8006700 <ifx_i2c_pl_guard_time_callback+0x130>
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8006670:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8006674:	4937      	ldr	r1, [pc, #220]	; (8006754 <ifx_i2c_pl_guard_time_callback+0x184>)
 8006676:	4622      	mov	r2, r4
 8006678:	f241 3388 	movw	r3, #5000	; 0x1388
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800667c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8006680:	f7fe bd1a 	b.w	80050b8 <pal_os_event_register_callback_oneshot>
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8006684:	f894 519e 	ldrb.w	r5, [r4, #414]	; 0x19e
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8006688:	2303      	movs	r3, #3
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 800668a:	2d02      	cmp	r5, #2
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 800668c:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8006690:	d038      	beq.n	8006704 <ifx_i2c_pl_guard_time_callback+0x134>
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
                        }
                    }
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8006692:	2d01      	cmp	r5, #1
 8006694:	d1e5      	bne.n	8006662 <ifx_i2c_pl_guard_time_callback+0x92>
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
                    ifx_i2c_pl_write_register(p_ctx,
 8006696:	f8b4 61a4 	ldrh.w	r6, [r4, #420]	; 0x1a4
                                              PL_REG_DATA,
                                              p_ctx->pl.tx_frame_len,
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 800669a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800669e:	2380      	movs	r3, #128	; 0x80
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 80066a0:	2004      	movs	r0, #4
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80066a2:	4632      	mov	r2, r6
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 80066a4:	f884 019f 	strb.w	r0, [r4, #415]	; 0x19f
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80066a8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80066ac:	f104 0081 	add.w	r0, r4, #129	; 0x81
 80066b0:	f006 ff74 	bl	800d59c <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80066b4:	1c72      	adds	r2, r6, #1
 80066b6:	b292      	uxth	r2, r2

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80066b8:	2102      	movs	r1, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80066ba:	23c8      	movs	r3, #200	; 0xc8
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80066bc:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80066c0:	f884 519b 	strb.w	r5, [r4, #411]	; 0x19b
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80066c4:	f884 119a 	strb.w	r1, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80066c8:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80066cc:	6920      	ldr	r0, [r4, #16]
 80066ce:	f104 0180 	add.w	r1, r4, #128	; 0x80
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80066d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80066d6:	f7fe bb65 	b.w	8004da4 <pal_i2c_write>
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 80066da:	4620      	mov	r0, r4
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80066dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 80066e0:	f7ff bd86 	b.w	80061f0 <ifx_i2c_pl_negotiation_event_handler>
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80066e4:	2301      	movs	r3, #1
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80066e6:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80066ea:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80066ee:	2200      	movs	r2, #0
 80066f0:	4620      	mov	r0, r4
 80066f2:	46ac      	mov	ip, r5
 80066f4:	4613      	mov	r3, r2
 80066f6:	f44f 7181 	mov.w	r1, #258	; 0x102
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80066fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80066fe:	4760      	bx	ip
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8006700:	2302      	movs	r3, #2
 8006702:	e7f0      	b.n	80066e6 <ifx_i2c_pl_guard_time_callback+0x116>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006704:	2201      	movs	r2, #1
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006706:	2082      	movs	r0, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006708:	2104      	movs	r1, #4
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800670a:	23c8      	movs	r3, #200	; 0xc8
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800670c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
 8006710:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006714:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006718:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800671c:	f8a4 1198 	strh.w	r1, [r4, #408]	; 0x198
 8006720:	e7d2      	b.n	80066c8 <ifx_i2c_pl_guard_time_callback+0xf8>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006722:	2201      	movs	r2, #1
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8006724:	2504      	movs	r5, #4
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006726:	2080      	movs	r0, #128	; 0x80
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006728:	21c8      	movs	r1, #200	; 0xc8
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800672a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 800672e:	f884 519f 	strb.w	r5, [r4, #415]	; 0x19f
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006732:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006736:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800673a:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800673e:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006742:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006746:	6920      	ldr	r0, [r4, #16]
 8006748:	f104 0180 	add.w	r1, r4, #128	; 0x80
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800674c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006750:	f7fe bb28 	b.w	8004da4 <pal_i2c_write>
 8006754:	08006199 	.word	0x08006199

08006758 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006758:	b510      	push	{r4, lr}
 800675a:	4604      	mov	r4, r0
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800675c:	2000      	movs	r0, #0
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	7822      	ldrb	r2, [r4, #0]

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8006762:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8006766:	21bb      	movs	r1, #187	; 0xbb
optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8006768:	f884 019f 	strb.w	r0, [r4, #415]	; 0x19f
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 800676c:	f884 11ac 	strb.w	r1, [r4, #428]	; 0x1ac
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8006770:	711a      	strb	r2, [r3, #4]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
 8006772:	6920      	ldr	r0, [r4, #16]
 8006774:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <ifx_i2c_pl_init+0x6c>)
 8006776:	60c3      	str	r3, [r0, #12]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
    if (TRUE == p_ctx->do_pal_init)
 8006778:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 800677c:	22c8      	movs	r2, #200	; 0xc8
    if (TRUE == p_ctx->do_pal_init)
 800677e:	2b01      	cmp	r3, #1
    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8006780:	f8a4 219c 	strh.w	r2, [r4, #412]	; 0x19c
    if (TRUE == p_ctx->do_pal_init)
 8006784:	d016      	beq.n	80067b4 <ifx_i2c_pl_init+0x5c>
        {
            return (IFX_I2C_STACK_ERROR);
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8006786:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
 800678a:	2b01      	cmp	r3, #1
 800678c:	d007      	beq.n	800679e <ifx_i2c_pl_init+0x46>
 800678e:	2301      	movs	r3, #1
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8006790:	4620      	mov	r0, r4
 8006792:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
 8006796:	f7ff fd2b 	bl	80061f0 <ifx_i2c_pl_negotiation_event_handler>
        p_ctx->pl.frame_state = PL_STATE_INIT;
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);

    return (IFX_I2C_STACK_SUCCESS);
 800679a:	2000      	movs	r0, #0
}
 800679c:	bd10      	pop	{r4, pc}
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 800679e:	2299      	movs	r2, #153	; 0x99
 80067a0:	2305      	movs	r3, #5
        switch (p_ctx->pl.frame_state)
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 80067a2:	4620      	mov	r0, r4
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 80067a4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
 80067a8:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
        switch (p_ctx->pl.frame_state)
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 80067ac:	f7ff fe9e 	bl	80064ec <ifx_i2c_pl_soft_reset>
        p_ctx->pl.frame_state = PL_STATE_INIT;
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);

    return (IFX_I2C_STACK_SUCCESS);
 80067b0:	2000      	movs	r0, #0
 80067b2:	bd10      	pop	{r4, pc}
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
    if (TRUE == p_ctx->do_pal_init)
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 80067b4:	f7fe faf2 	bl	8004d9c <pal_i2c_init>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d0e4      	beq.n	8006786 <ifx_i2c_pl_init+0x2e>
        {
            return (IFX_I2C_STACK_ERROR);
 80067bc:	f44f 7081 	mov.w	r0, #258	; 0x102
 80067c0:	bd10      	pop	{r4, pc}
 80067c2:	bf00      	nop
 80067c4:	08006499 	.word	0x08006499

080067c8 <ifx_i2c_pl_send_frame>:

    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80067c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80067cc:	f890 519f 	ldrb.w	r5, [r0, #415]	; 0x19f
 80067d0:	1e6b      	subs	r3, r5, #1
 80067d2:	2b01      	cmp	r3, #1

    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80067d4:	4604      	mov	r4, r0
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80067d6:	d903      	bls.n	80067e0 <ifx_i2c_pl_send_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 80067d8:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->pl.p_tx_frame   = p_frame;
    p_ctx->pl.tx_frame_len = frame_len;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}
 80067dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 80067e0:	f04f 0801 	mov.w	r8, #1
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 80067e4:	2d02      	cmp	r5, #2
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 80067e6:	f8c4 11a0 	str.w	r1, [r4, #416]	; 0x1a0
    p_ctx->pl.tx_frame_len = frame_len;
 80067ea:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
 80067ee:	4616      	mov	r6, r2
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 80067f0:	f880 819e 	strb.w	r8, [r0, #414]	; 0x19e
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 80067f4:	d11c      	bne.n	8006830 <ifx_i2c_pl_send_frame+0x68>
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80067f6:	2380      	movs	r3, #128	; 0x80
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 80067f8:	2004      	movs	r0, #4
 80067fa:	f884 019f 	strb.w	r0, [r4, #415]	; 0x19f
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80067fe:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006802:	f104 0081 	add.w	r0, r4, #129	; 0x81
 8006806:	f006 fec9 	bl	800d59c <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 800680a:	1c72      	adds	r2, r6, #1
 800680c:	b292      	uxth	r2, r2

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800680e:	23c8      	movs	r3, #200	; 0xc8
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006810:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8006814:	f884 519a 	strb.w	r5, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006818:	f884 819b 	strb.w	r8, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800681c:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006820:	6920      	ldr	r0, [r4, #16]
 8006822:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8006826:	f7fe fabd 	bl	8004da4 <pal_i2c_write>
    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
    p_ctx->pl.tx_frame_len = frame_len;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 800682a:	2000      	movs	r0, #0
 800682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8006830:	f7ff fcde 	bl	80061f0 <ifx_i2c_pl_negotiation_event_handler>
    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
    p_ctx->pl.tx_frame_len = frame_len;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 8006834:	2000      	movs	r0, #0
 8006836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800683a:	bf00      	nop

0800683c <ifx_i2c_pl_receive_frame>:
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800683c:	b538      	push	{r3, r4, r5, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 800683e:	f890 319f 	ldrb.w	r3, [r0, #415]	; 0x19f
 8006842:	1e5a      	subs	r2, r3, #1
 8006844:	2a01      	cmp	r2, #1
    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8006846:	4601      	mov	r1, r0
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8006848:	d902      	bls.n	8006850 <ifx_i2c_pl_receive_frame+0x14>
    {
        return (IFX_I2C_STACK_ERROR);
 800684a:	f44f 7081 	mov.w	r0, #258	; 0x102
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}
 800684e:	bd38      	pop	{r3, r4, r5, pc}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8006850:	2202      	movs	r2, #2
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 8006852:	4293      	cmp	r3, r2
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8006854:	f880 219e 	strb.w	r2, [r0, #414]	; 0x19e
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 8006858:	d118      	bne.n	800688c <ifx_i2c_pl_receive_frame+0x50>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 800685a:	2201      	movs	r2, #1

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800685c:	23c8      	movs	r3, #200	; 0xc8
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 800685e:	2503      	movs	r5, #3
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006860:	2482      	movs	r4, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006862:	2004      	movs	r0, #4
 8006864:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8006868:	f881 519f 	strb.w	r5, [r1, #415]	; 0x19f
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800686c:	f881 4080 	strb.w	r4, [r1, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
 8006870:	f8a1 2196 	strh.w	r2, [r1, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006874:	f881 219a 	strb.w	r2, [r1, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006878:	f881 219b 	strb.w	r2, [r1, #411]	; 0x19b
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800687c:	f8a1 319c 	strh.w	r3, [r1, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006880:	6908      	ldr	r0, [r1, #16]
 8006882:	3180      	adds	r1, #128	; 0x80
 8006884:	f7fe fa8e 	bl	8004da4 <pal_i2c_write>
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 8006888:	2000      	movs	r0, #0
 800688a:	bd38      	pop	{r3, r4, r5, pc}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 800688c:	f7ff fcb0 	bl	80061f0 <ifx_i2c_pl_negotiation_event_handler>
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 8006890:	2000      	movs	r0, #0
 8006892:	bd38      	pop	{r3, r4, r5, pc}

08006894 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8006894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8006898:	f411 7f83 	tst.w	r1, #262	; 0x106

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 800689c:	469a      	mov	sl, r3
 800689e:	b0b1      	sub	sp, #196	; 0xc4
 80068a0:	4604      	mov	r4, r0
 80068a2:	4691      	mov	r9, r2

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 80068a4:	f890 31b0 	ldrb.w	r3, [r0, #432]	; 0x1b0
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 80068a8:	d00f      	beq.n	80068ca <ifx_i2c_prl_event_handler+0x36>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80068aa:	22ff      	movs	r2, #255	; 0xff
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 80068ac:	2b05      	cmp	r3, #5
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80068ae:	f880 21d2 	strb.w	r2, [r0, #466]	; 0x1d2
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 80068b2:	f000 8439 	beq.w	8007128 <ifx_i2c_prl_event_handler+0x894>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 80068b6:	f890 31b2 	ldrb.w	r3, [r0, #434]	; 0x1b2
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	f000 84f1 	beq.w	80072a2 <ifx_i2c_prl_event_handler+0xa0e>
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        }
        else
        {
            p_ctx->prl.return_status = event;
 80068c0:	f8a4 1264 	strh.w	r1, [r4, #612]	; 0x264
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 80068c4:	2307      	movs	r3, #7
 80068c6:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_SUCCESS != return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80068ca:	f04f 0b55 	mov.w	fp, #85	; 0x55
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 80068ce:	3b01      	subs	r3, #1
 80068d0:	2b07      	cmp	r3, #7
 80068d2:	f200 8223 	bhi.w	8006d1c <ifx_i2c_prl_event_handler+0x488>
 80068d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80068da:	011f      	.short	0x011f
 80068dc:	0051012a 	.word	0x0051012a
 80068e0:	007800da 	.word	0x007800da
 80068e4:	00390111 	.word	0x00390111
 80068e8:	0008      	.short	0x0008
{
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 80068ea:	f894 21b3 	ldrb.w	r2, [r4, #435]	; 0x1b3
 80068ee:	2a01      	cmp	r2, #1
 80068f0:	f000 8345 	beq.w	8006f7e <ifx_i2c_prl_event_handler+0x6ea>
 80068f4:	2a02      	cmp	r2, #2
 80068f6:	d119      	bne.n	800692c <ifx_i2c_prl_event_handler+0x98>
        }
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 80068f8:	f899 3000 	ldrb.w	r3, [r9]
 80068fc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8006900:	2b6c      	cmp	r3, #108	; 0x6c
 8006902:	f000 8493 	beq.w	800722c <ifx_i2c_prl_event_handler+0x998>
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8006906:	2b64      	cmp	r3, #100	; 0x64
 8006908:	d104      	bne.n	8006914 <ifx_i2c_prl_event_handler+0x80>
 800690a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800690e:	2b22      	cmp	r3, #34	; 0x22
 8006910:	f000 8416 	beq.w	8007140 <ifx_i2c_prl_event_handler+0x8ac>
                CLEAR_SESSION_CONTEXT(p_ctx);
                p_ctx->prl.state = PRL_STATE_IDLE;
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8006914:	f504 751a 	add.w	r5, r4, #616	; 0x268
 8006918:	4628      	mov	r0, r5
 800691a:	2100      	movs	r1, #0
 800691c:	2234      	movs	r2, #52	; 0x34
 800691e:	f006 fe48 	bl	800d5b2 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006922:	6963      	ldr	r3, [r4, #20]
 8006924:	8898      	ldrh	r0, [r3, #4]
 8006926:	2800      	cmp	r0, #0
 8006928:	f040 8404 	bne.w	8007134 <ifx_i2c_prl_event_handler+0x8a0>
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800692c:	2200      	movs	r2, #0
 800692e:	20ff      	movs	r0, #255	; 0xff
 8006930:	2307      	movs	r3, #7
 8006932:	f44f 7184 	mov.w	r1, #264	; 0x108
 8006936:	f884 01d2 	strb.w	r0, [r4, #466]	; 0x1d2
 800693a:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 800693e:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
 8006942:	f884 22a0 	strb.w	r2, [r4, #672]	; 0x2a0
 8006946:	f8a4 1264 	strh.w	r1, [r4, #612]	; 0x264
                        break;
 800694a:	e7c0      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                }
            }
            break;
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 800694c:	f894 31d2 	ldrb.w	r3, [r4, #466]	; 0x1d2
 8006950:	2bff      	cmp	r3, #255	; 0xff
 8006952:	f000 827a 	beq.w	8006e4a <ifx_i2c_prl_event_handler+0x5b6>
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8006956:	2201      	movs	r2, #1
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8006958:	2b04      	cmp	r3, #4
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 800695a:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 800695e:	f000 84ca 	beq.w	80072f6 <ifx_i2c_prl_event_handler+0xa62>
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8006962:	f44f 7284 	mov.w	r2, #264	; 0x108
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006966:	2300      	movs	r3, #0
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8006968:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800696c:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8006970:	23ff      	movs	r3, #255	; 0xff
 8006972:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006976:	b031      	add	sp, #196	; 0xc4
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                exit_machine = FALSE;
            }
            break;
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 800697c:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8006980:	3001      	adds	r0, #1
 8006982:	f001 f8dd 	bl	8007b40 <optiga_common_get_uint32>
 8006986:	4605      	mov	r5, r0
 8006988:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
                if (0 == data_len)
 800698c:	f1ba 0f00 	cmp.w	sl, #0
 8006990:	d0cc      	beq.n	800692c <ifx_i2c_prl_event_handler+0x98>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                    break;
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8006992:	f899 3000 	ldrb.w	r3, [r9]
 8006996:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800699a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 800699e:	2a00      	cmp	r2, #0
 80069a0:	f000 8284 	beq.w	8006eac <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80069a4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	f000 8425 	beq.w	80071f8 <ifx_i2c_prl_event_handler+0x964>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80069ae:	f44f 7284 	mov.w	r2, #264	; 0x108
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80069b2:	2300      	movs	r3, #0
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80069b4:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80069b8:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 80069bc:	2306      	movs	r3, #6
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80069be:	22ff      	movs	r2, #255	; 0xff
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 80069c0:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80069c4:	f884 21d2 	strb.w	r2, [r4, #466]	; 0x1d2
 80069c8:	e781      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 80069ca:	f504 701a 	add.w	r0, r4, #616	; 0x268
 80069ce:	2100      	movs	r1, #0
 80069d0:	2228      	movs	r2, #40	; 0x28
 80069d2:	f006 fdee 	bl	800d5b2 <memset>
 80069d6:	2500      	movs	r5, #0
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80069d8:	6963      	ldr	r3, [r4, #20]
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 80069da:	f884 5292 	strb.w	r5, [r4, #658]	; 0x292
 80069de:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
 80069e2:	f884 5291 	strb.w	r5, [r4, #657]	; 0x291
 80069e6:	f884 5293 	strb.w	r5, [r4, #659]	; 0x293
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 80069ea:	9513      	str	r5, [sp, #76]	; 0x4c
 80069ec:	9514      	str	r5, [sp, #80]	; 0x50
 80069ee:	9515      	str	r5, [sp, #84]	; 0x54
 80069f0:	9516      	str	r5, [sp, #88]	; 0x58
 80069f2:	9517      	str	r5, [sp, #92]	; 0x5c
 80069f4:	9518      	str	r5, [sp, #96]	; 0x60
 80069f6:	9519      	str	r5, [sp, #100]	; 0x64
 80069f8:	951a      	str	r5, [sp, #104]	; 0x68
 80069fa:	951b      	str	r5, [sp, #108]	; 0x6c
 80069fc:	951c      	str	r5, [sp, #112]	; 0x70
 80069fe:	951d      	str	r5, [sp, #116]	; 0x74
 8006a00:	951e      	str	r5, [sp, #120]	; 0x78
 8006a02:	951f      	str	r5, [sp, #124]	; 0x7c
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006a04:	8898      	ldrh	r0, [r3, #4]
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8006a06:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
 8006a0a:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006a0e:	b130      	cbz	r0, 8006a1e <ifx_i2c_prl_event_handler+0x18a>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8006a10:	a913      	add	r1, sp, #76	; 0x4c
 8006a12:	2234      	movs	r2, #52	; 0x34
 8006a14:	f7fe fab0 	bl	8004f78 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f040 8238 	bne.w	8006e8e <ifx_i2c_prl_event_handler+0x5fa>
 8006a1e:	f894 31b1 	ldrb.w	r3, [r4, #433]	; 0x1b1
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
                        break;
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8006a22:	2500      	movs	r5, #0
 8006a24:	f44f 7781 	mov.w	r7, #258	; 0x102
 8006a28:	e015      	b.n	8006a56 <ifx_i2c_prl_event_handler+0x1c2>
    uint32_t exit_machine = FALSE;
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8006a2a:	2b11      	cmp	r3, #17
 8006a2c:	f000 80f6 	beq.w	8006c1c <ifx_i2c_prl_event_handler+0x388>
 8006a30:	2b22      	cmp	r3, #34	; 0x22
 8006a32:	f040 80ed 	bne.w	8006c10 <ifx_i2c_prl_event_handler+0x37c>
            break;
            case PRL_HS_VERIFY_HELLO:
            {
                exit_machine = TRUE;
                 //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8006a36:	f899 2000 	ldrb.w	r2, [r9]
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
                    (1 == p_ctx->prl.prl_receive_length)))
 8006a3a:	f8b4 3260 	ldrh.w	r3, [r4, #608]	; 0x260
            break;
            case PRL_HS_VERIFY_HELLO:
            {
                exit_machine = TRUE;
                 //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8006a3e:	f012 0f44 	tst.w	r2, #68	; 0x44
 8006a42:	d001      	beq.n	8006a48 <ifx_i2c_prl_event_handler+0x1b4>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d00f      	beq.n	8006a68 <ifx_i2c_prl_event_handler+0x1d4>
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                    break;
                }
                //Check valid message type and protocol version
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8006a48:	2b26      	cmp	r3, #38	; 0x26
 8006a4a:	f000 824a 	beq.w	8006ee2 <ifx_i2c_prl_event_handler+0x64e>
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8006a4e:	f884 b1b1 	strb.w	fp, [r4, #433]	; 0x1b1
 8006a52:	2355      	movs	r3, #85	; 0x55
 8006a54:	2501      	movs	r5, #1
    uint32_t exit_machine = FALSE;
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8006a56:	2b33      	cmp	r3, #51	; 0x33
 8006a58:	f000 80ff 	beq.w	8006c5a <ifx_i2c_prl_event_handler+0x3c6>
 8006a5c:	d9e5      	bls.n	8006a2a <ifx_i2c_prl_event_handler+0x196>
 8006a5e:	2b44      	cmp	r3, #68	; 0x44
 8006a60:	d079      	beq.n	8006b56 <ifx_i2c_prl_event_handler+0x2c2>
 8006a62:	2b55      	cmp	r3, #85	; 0x55
 8006a64:	f040 80d4 	bne.w	8006c10 <ifx_i2c_prl_event_handler+0x37c>
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8006a68:	23ff      	movs	r3, #255	; 0xff
 8006a6a:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 8006a6e:	f240 1707 	movw	r7, #263	; 0x107
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
                        break;
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8006a72:	f240 1307 	movw	r3, #263	; 0x107
 8006a76:	429f      	cmp	r7, r3
 8006a78:	f000 82fb 	beq.w	8007072 <ifx_i2c_prl_event_handler+0x7de>
                    p_ctx->prl.return_status = return_status;
                    p_ctx->prl.state = PRL_STATE_ERROR;
                    break;
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8006a7c:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	f47f af78 	bne.w	8006976 <ifx_i2c_prl_event_handler+0xe2>
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                }
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8006a86:	2304      	movs	r3, #4
 8006a88:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006a8c:	e71f      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
            }
            break;
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8006a8e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006a92:	f002 0303 	and.w	r3, r2, #3
 8006a96:	f043 0020 	orr.w	r0, r3, #32
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006a9a:	3b02      	subs	r3, #2
 8006a9c:	2b01      	cmp	r3, #1
            }
            break;
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8006a9e:	f884 01d0 	strb.w	r0, [r4, #464]	; 0x1d0
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006aa2:	f240 82d2 	bls.w	800704a <ifx_i2c_prl_event_handler+0x7b6>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006aa6:	07d3      	lsls	r3, r2, #31
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8006aa8:	f884 01d1 	strb.w	r0, [r4, #465]	; 0x1d1

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006aac:	f100 8142 	bmi.w	8006d34 <ifx_i2c_prl_event_handler+0x4a0>
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8006ab0:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f884 21d3 	strb.w	r2, [r4, #467]	; 0x1d3
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8006aba:	7118      	strb	r0, [r3, #4]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8006abc:	f894 01d3 	ldrb.w	r0, [r4, #467]	; 0x1d3
 8006ac0:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
 8006ac4:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8006ac8:	f8d4 51cc 	ldr.w	r5, [r4, #460]	; 0x1cc
 8006acc:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8006ad0:	9500      	str	r5, [sp, #0]
 8006ad2:	4402      	add	r2, r0
 8006ad4:	b292      	uxth	r2, r2
 8006ad6:	3104      	adds	r1, #4
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 ff4d 	bl	8007978 <ifx_i2c_tl_transceive>
                                                          p_ctx->prl.actual_payload_length + 
                                                          p_ctx->prl.prl_header_offset,
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8006ade:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8006ae2:	f000 81a4 	beq.w	8006e2e <ifx_i2c_prl_event_handler+0x59a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    break;
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8006ae6:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 8006aea:	8812      	ldrh	r2, [r2, #0]
 8006aec:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8006af0:	2303      	movs	r3, #3
 8006af2:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006af6:	b031      	add	sp, #196	; 0xc4
 8006af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }
            }
            break;
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8006afc:	f899 3000 	ldrb.w	r3, [r9]
 8006b00:	2b44      	cmp	r3, #68	; 0x44
 8006b02:	f000 8287 	beq.w	8007014 <ifx_i2c_prl_event_handler+0x780>
                      p_ctx->prl.state = PRL_STATE_ERROR;
                    }
                }
                else
                {
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8006b06:	f894 3262 	ldrb.w	r3, [r4, #610]	; 0x262
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	f000 82b7 	beq.w	800707e <ifx_i2c_prl_event_handler+0x7ea>
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
                        p_ctx->prl.state = PRL_STATE_TXRX;
                    }
                    else
                    {
                      p_ctx->prl.state = PRL_STATE_ERROR;
 8006b10:	2307      	movs	r3, #7
 8006b12:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006b16:	e6da      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
        switch (p_ctx->prl.state)
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 8006b20:	f8b4 1264 	ldrh.w	r1, [r4, #612]	; 0x264
 8006b24:	4620      	mov	r0, r4
 8006b26:	47a8      	blx	r5
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006b28:	b031      	add	sp, #196	; 0xc4
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }
            }
            break;
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8006b2e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006b32:	061a      	lsls	r2, r3, #24
 8006b34:	d405      	bmi.n	8006b42 <ifx_i2c_prl_event_handler+0x2ae>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0a5      	beq.n	8006a86 <ifx_i2c_prl_event_handler+0x1f2>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8006b3a:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1a1      	bne.n	8006a86 <ifx_i2c_prl_event_handler+0x1f2>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8006b42:	2305      	movs	r3, #5
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8006b44:	2111      	movs	r1, #17
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006b46:	2200      	movs	r2, #0
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8006b48:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8006b4c:	f884 11b1 	strb.w	r1, [r4, #433]	; 0x1b1
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006b50:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
 8006b54:	e6bb      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
            }
            break;
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 8006b56:	f899 6000 	ldrb.w	r6, [r9]
 8006b5a:	2e08      	cmp	r6, #8
 8006b5c:	f47f af77 	bne.w	8006a4e <ifx_i2c_prl_event_handler+0x1ba>
 8006b60:	f8b4 3260 	ldrh.w	r3, [r4, #608]	; 0x260
 8006b64:	2b31      	cmp	r3, #49	; 0x31
 8006b66:	f47f af72 	bne.w	8006a4e <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8006b6a:	f109 0001 	add.w	r0, r9, #1
 8006b6e:	f000 ffe7 	bl	8007b40 <optiga_common_get_uint32>
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8006b72:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8006b76:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
 8006b7a:	4607      	mov	r7, r0
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006b7c:	4601      	mov	r1, r0
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8006b7e:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006b82:	f204 2059 	addw	r0, r4, #601	; 0x259
 8006b86:	f000 ffcf 	bl	8007b28 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8006b8a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006b8e:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8006b92:	f204 205e 	addw	r0, r4, #606	; 0x25e
 8006b96:	2124      	movs	r1, #36	; 0x24
 8006b98:	f000 ffc2 	bl	8007b20 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8006b9c:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
 8006ba0:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	a821      	add	r0, sp, #132	; 0x84
 8006ba6:	f000 ffbf 	bl	8007b28 <optiga_common_set_uint32>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
 8006baa:	f504 7707 	add.w	r7, r4, #540	; 0x21c
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8006bae:	f504 7316 	add.w	r3, r4, #600	; 0x258
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8006bb2:	f10d 0880 	add.w	r8, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	9601      	str	r6, [sp, #4]
 8006bba:	9603      	str	r6, [sp, #12]
 8006bbc:	9604      	str	r6, [sp, #16]
 8006bbe:	9705      	str	r7, [sp, #20]
 8006bc0:	f8cd 8000 	str.w	r8, [sp]
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	f109 0105 	add.w	r1, r9, #5
 8006bca:	222c      	movs	r2, #44	; 0x2c
 8006bcc:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8006bd0:	f7fd fff8 	bl	8004bc4 <pal_crypt_decrypt_aes128_ccm>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	f040 809b 	bne.w	8006d10 <ifx_i2c_prl_event_handler+0x47c>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8006bda:	a80d      	add	r0, sp, #52	; 0x34
 8006bdc:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
 8006be0:	f000 ffa2 	bl	8007b28 <optiga_common_set_uint32>
                ///Validating decrpt data
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8006be4:	4639      	mov	r1, r7
 8006be6:	f504 70fe 	add.w	r0, r4, #508	; 0x1fc
 8006bea:	2220      	movs	r2, #32
 8006bec:	f006 fcc6 	bl	800d57c <memcmp>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f040 81be 	bne.w	8006f72 <ifx_i2c_prl_event_handler+0x6de>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                ///Validating sequence number
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8006bf6:	a80d      	add	r0, sp, #52	; 0x34
 8006bf8:	f504 710f 	add.w	r1, r4, #572	; 0x23c
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	f006 fcbd 	bl	800d57c <memcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f040 81b5 	bne.w	8006f72 <ifx_i2c_prl_event_handler+0x6de>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8006c08:	2301      	movs	r3, #1
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8006c0a:	4607      	mov	r7, r0
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8006c0c:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
            break;
            default:
            break;
        }

    } while (TRUE == exit_machine);
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	f43f af2e 	beq.w	8006a72 <ifx_i2c_prl_event_handler+0x1de>
 8006c16:	f894 31b1 	ldrb.w	r3, [r4, #433]	; 0x1b1
 8006c1a:	e71b      	b.n	8006a54 <ifx_i2c_prl_event_handler+0x1c0>
        {
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8006c1c:	2300      	movs	r3, #0
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8006c1e:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
        {
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8006c22:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8006c26:	2026      	movs	r0, #38	; 0x26
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
 8006c28:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006c2c:	f504 7218 	add.w	r2, r4, #608	; 0x260
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8006c30:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8006c34:	f8a4 0260 	strh.w	r0, [r4, #608]	; 0x260
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8006c38:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	9200      	str	r2, [sp, #0]
 8006c40:	4620      	mov	r0, r4
 8006c42:	2202      	movs	r2, #2
 8006c44:	f000 fe98 	bl	8007978 <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
 8006c48:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006c4c:	4607      	mov	r7, r0
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
 8006c4e:	f43f aefe 	beq.w	8006a4e <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8006c52:	2322      	movs	r3, #34	; 0x22
 8006c54:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8006c58:	e7da      	b.n	8006c10 <ifx_i2c_prl_event_handler+0x37c>
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8006c5a:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
 8006c5e:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8006c62:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8006c66:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 8006c6a:	f8c4 0221 	str.w	r0, [r4, #545]	; 0x221
            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8006c6e:	2608      	movs	r6, #8
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8006c70:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8006c74:	f8c4 1225 	str.w	r1, [r4, #549]	; 0x225
 8006c78:	f8c4 2229 	str.w	r2, [r4, #553]	; 0x229
 8006c7c:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8006c80:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8006c84:	f8c4 722d 	str.w	r7, [r4, #557]	; 0x22d
 8006c88:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
 8006c8c:	f8c4 2239 	str.w	r2, [r4, #569]	; 0x239
 8006c90:	f8c4 723d 	str.w	r7, [r4, #573]	; 0x23d
 8006c94:	f8c4 0231 	str.w	r0, [r4, #561]	; 0x231
 8006c98:	f8c4 1235 	str.w	r1, [r4, #565]	; 0x235
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 8006c9c:	f204 2041 	addw	r0, r4, #577	; 0x241
 8006ca0:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8006ca4:	f884 61d0 	strb.w	r6, [r4, #464]	; 0x1d0
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 8006ca8:	f000 ff3e 	bl	8007b28 <optiga_common_set_uint32>
                                         p_ctx->prl.slave_sequence_number);

                //Preparing encryption data
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8006cac:	f8d4 71b8 	ldr.w	r7, [r4, #440]	; 0x1b8
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8006cb0:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
 8006cb4:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006cb8:	4639      	mov	r1, r7
 8006cba:	f204 2059 	addw	r0, r4, #601	; 0x259
 8006cbe:	f000 ff33 	bl	8007b28 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8006cc2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006cc6:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8006cca:	f204 205e 	addw	r0, r4, #606	; 0x25e
 8006cce:	2124      	movs	r1, #36	; 0x24
 8006cd0:	f000 ff26 	bl	8007b20 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8006cd4:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
 8006cd8:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8006cda:	4639      	mov	r1, r7
 8006cdc:	a821      	add	r0, sp, #132	; 0x84
 8006cde:	f000 ff23 	bl	8007b28 <optiga_common_set_uint32>
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8006ce2:	f204 2521 	addw	r5, r4, #545	; 0x221
                                                                data_len,
                                                                &p_ctx->prl.
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8006ce6:	f504 7316 	add.w	r3, r4, #600	; 0x258
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8006cea:	f10d 0880 	add.w	r8, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	9601      	str	r6, [sp, #4]
 8006cf2:	9603      	str	r6, [sp, #12]
 8006cf4:	9604      	str	r6, [sp, #16]
 8006cf6:	9505      	str	r5, [sp, #20]
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f8cd 8000 	str.w	r8, [sp]
 8006cfe:	2000      	movs	r0, #0
 8006d00:	2224      	movs	r2, #36	; 0x24
 8006d02:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 8006d06:	f7fd ff1d 	bl	8004b44 <pal_crypt_encrypt_aes128_ccm>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f000 80a1 	beq.w	8006e52 <ifx_i2c_prl_event_handler+0x5be>
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8006d10:	f884 b1b1 	strb.w	fp, [r4, #433]	; 0x1b1
 8006d14:	2355      	movs	r3, #85	; 0x55
 8006d16:	f44f 7781 	mov.w	r7, #258	; 0x102
 8006d1a:	e69b      	b.n	8006a54 <ifx_i2c_prl_event_handler+0x1c0>
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8006d1c:	2301      	movs	r3, #1
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8006d1e:	2200      	movs	r2, #0
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8006d20:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8006d24:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006d30:	47a8      	blx	r5
                exit_machine = FALSE;
            }
            break;
 8006d32:	e620      	b.n	8006976 <ifx_i2c_prl_event_handler+0xe2>
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8006d34:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 8006d38:	1c69      	adds	r1, r5, #1
 8006d3a:	f111 0f10 	cmn.w	r1, #16
 8006d3e:	d90c      	bls.n	8006d5a <ifx_i2c_prl_event_handler+0x4c6>
 8006d40:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006d44:	b94b      	cbnz	r3, 8006d5a <ifx_i2c_prl_event_handler+0x4c6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
                        (FALSE == p_ctx->prl.trans_repeat_status))
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8006d46:	2100      	movs	r1, #0
 8006d48:	2305      	movs	r3, #5
 8006d4a:	2211      	movs	r2, #17
 8006d4c:	f884 11b2 	strb.w	r1, [r4, #434]	; 0x1b2
 8006d50:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006d54:	f884 21b1 	strb.w	r2, [r4, #433]	; 0x1b1
                        break;
 8006d58:	e5b9      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8006d5a:	f894 31d2 	ldrb.w	r3, [r4, #466]	; 0x1d2
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	f000 819a 	beq.w	8007098 <ifx_i2c_prl_event_handler+0x804>
 8006d64:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8006d6e:	9308      	str	r3, [sp, #32]
 8006d70:	f504 7316 	add.w	r3, r4, #600	; 0x258
 8006d74:	9309      	str	r3, [sp, #36]	; 0x24
 8006d76:	ab21      	add	r3, sp, #132	; 0x84
 8006d78:	f204 2659 	addw	r6, r4, #601	; 0x259
 8006d7c:	f204 285e 	addw	r8, r4, #606	; 0x25e
 8006d80:	ad20      	add	r5, sp, #128	; 0x80
 8006d82:	930a      	str	r3, [sp, #40]	; 0x28
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8006d84:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8006d88:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8006d8c:	2305      	movs	r3, #5
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8006d8e:	3001      	adds	r0, #1
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8006d90:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8006d94:	f000 fec8 	bl	8007b28 <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8006d98:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 8006d9c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8006da0:	f894 11d1 	ldrb.w	r1, [r4, #465]	; 0x1d1
 8006da4:	f884 1258 	strb.w	r1, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006da8:	4630      	mov	r0, r6
 8006daa:	4611      	mov	r1, r2

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8006dac:	f8b4 61c4 	ldrh.w	r6, [r4, #452]	; 0x1c4
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006db0:	920b      	str	r2, [sp, #44]	; 0x2c

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8006db2:	1d5f      	adds	r7, r3, #5
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006db4:	f000 feb8 	bl	8007b28 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8006db8:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8006dbc:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	f000 feac 	bl	8007b20 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8006dc8:	9b08      	ldr	r3, [sp, #32]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8006dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	6028      	str	r0, [r5, #0]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006dd4:	f000 fea8 	bl	8007b28 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8006dd8:	2008      	movs	r0, #8
 8006dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ddc:	9302      	str	r3, [sp, #8]
 8006dde:	9001      	str	r0, [sp, #4]
 8006de0:	9003      	str	r0, [sp, #12]
 8006de2:	9004      	str	r0, [sp, #16]
 8006de4:	9705      	str	r7, [sp, #20]
 8006de6:	4639      	mov	r1, r7
 8006de8:	4632      	mov	r2, r6
 8006dea:	9500      	str	r5, [sp, #0]
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	2000      	movs	r0, #0
 8006df0:	f7fd fea8 	bl	8004b44 <pal_crypt_encrypt_aes128_ccm>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f47f ad99 	bne.w	800692c <ifx_i2c_prl_event_handler+0x98>
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8006dfa:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8006dfe:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8006e08:	f894 01d3 	ldrb.w	r0, [r4, #467]	; 0x1d3
 8006e0c:	f8d4 51cc 	ldr.w	r5, [r4, #460]	; 0x1cc
 8006e10:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8006e14:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8006e18:	9500      	str	r5, [sp, #0]
 8006e1a:	3208      	adds	r2, #8
 8006e1c:	4402      	add	r2, r0
 8006e1e:	b292      	uxth	r2, r2
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 fda9 	bl	8007978 <ifx_i2c_tl_transceive>
                                                          p_ctx->prl.actual_payload_length + 
                                                          p_ctx->prl.prl_header_offset,
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8006e26:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8006e2a:	f47f ae5c 	bne.w	8006ae6 <ifx_i2c_prl_event_handler+0x252>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8006e2e:	2200      	movs	r2, #0
 8006e30:	21ff      	movs	r1, #255	; 0xff
 8006e32:	2307      	movs	r3, #7
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8006e34:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8006e38:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
 8006e3c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006e40:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
 8006e44:	f884 22a0 	strb.w	r2, [r4, #672]	; 0x2a0
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    break;
 8006e48:	e541      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                }
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006e50:	e53d      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                    exit_machine = TRUE;
                    break;
                }

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8006e52:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
 8006e56:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 8006e5a:	f204 201d 	addw	r0, r4, #541	; 0x21d
 8006e5e:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
 8006e62:	f000 fe61 	bl	8007b28 <optiga_common_set_uint32>

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8006e66:	2231      	movs	r2, #49	; 0x31
                return_status = ifx_i2c_tl_transceive(p_ctx,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
 8006e68:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006e6c:	f504 7018 	add.w	r0, r4, #608	; 0x260

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8006e70:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006e74:	460b      	mov	r3, r1
 8006e76:	9000      	str	r0, [sp, #0]
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fd7d 	bl	8007978 <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8006e7e:	4607      	mov	r7, r0
 8006e80:	2800      	cmp	r0, #0
 8006e82:	f47f ade4 	bne.w	8006a4e <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 8006e86:	2344      	movs	r3, #68	; 0x44
 8006e88:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8006e8c:	e5f1      	b.n	8006a72 <ifx_i2c_prl_event_handler+0x1de>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8006e8e:	21ff      	movs	r1, #255	; 0xff
 8006e90:	2307      	movs	r3, #7
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8006e92:	f240 1207 	movw	r2, #263	; 0x107
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8006e96:	f884 51b2 	strb.w	r5, [r4, #434]	; 0x1b2
 8006e9a:	f884 52a0 	strb.w	r5, [r4, #672]	; 0x2a0
 8006e9e:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
 8006ea2:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8006ea6:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
                        break;
 8006eaa:	e510      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                }
                ///Sctr value mismatch
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8006eac:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	f47f ad3b 	bne.w	800692c <ifx_i2c_prl_event_handler+0x98>
                {
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    break;
                }
                ///For slave encrypted message
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8006eb6:	f002 0303 	and.w	r3, r2, #3
 8006eba:	3b02      	subs	r3, #2
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f240 825a 	bls.w	8007376 <ifx_i2c_prl_event_handler+0xae2>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                        p_ctx->prl.state = PRL_STATE_IDLE;
                    }
                }
                else if (data_len <= 1)
 8006ec2:	f1ba 0f01 	cmp.w	sl, #1
 8006ec6:	f240 8237 	bls.w	8007338 <ifx_i2c_prl_event_handler+0xaa4>
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 8006eca:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
 8006ece:	880b      	ldrh	r3, [r1, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8006ed0:	2201      	movs	r2, #1
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	800b      	strh	r3, [r1, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8006ed6:	4613      	mov	r3, r2
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8006ed8:	f8a4 6264 	strh.w	r6, [r4, #612]	; 0x264
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8006edc:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
 8006ee0:	e4f5      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                    break;
                }
                //Check valid message type and protocol version
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	f47f adb3 	bne.w	8006a4e <ifx_i2c_prl_event_handler+0x1ba>
 8006ee8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	f47f adae 	bne.w	8006a4e <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8006ef2:	f109 0022 	add.w	r0, r9, #34	; 0x22
 8006ef6:	f000 fe23 	bl	8007b40 <optiga_common_get_uint32>
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8006efa:	4ecb      	ldr	r6, [pc, #812]	; (8007228 <ifx_i2c_prl_event_handler+0x994>)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8006efc:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f00:	464d      	mov	r5, r9
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8006f02:	4607      	mov	r7, r0
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8006f04:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8006f08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f0a:	f855 cf02 	ldr.w	ip, [r5, #2]!
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8006f0e:	6836      	ldr	r6, [r6, #0]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f10:	68af      	ldr	r7, [r5, #8]
 8006f12:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8006f16:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006f1a:	f8c4 7204 	str.w	r7, [r4, #516]	; 0x204
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8006f1e:	af0e      	add	r7, sp, #56	; 0x38
 8006f20:	c70f      	stmia	r7!, {r0, r1, r2, r3}
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f22:	f8c4 c1fc 	str.w	ip, [r4, #508]	; 0x1fc
 8006f26:	f8c4 e200 	str.w	lr, [r4, #512]	; 0x200
 8006f2a:	f8c4 8208 	str.w	r8, [r4, #520]	; 0x208
 8006f2e:	69ab      	ldr	r3, [r5, #24]
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8006f30:	9607      	str	r6, [sp, #28]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f32:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8006f36:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006f3a:	f8d5 e014 	ldr.w	lr, [r5, #20]
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8006f3e:	f89d 201c 	ldrb.w	r2, [sp, #28]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f42:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8006f46:	6963      	ldr	r3, [r4, #20]
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8006f48:	703a      	strb	r2, [r7, #0]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f4a:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
 8006f4e:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
 8006f52:	f8c4 e210 	str.w	lr, [r4, #528]	; 0x210
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8006f56:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 8006f5a:	8858      	ldrh	r0, [r3, #2]
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8006f62:	f7fe f82f 	bl	8004fc4 <pal_os_datastore_read>
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8006f66:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f000 827d 	beq.w	800746c <ifx_i2c_prl_event_handler+0xbd8>

                //Generating session key
                return_status = ifx_i2c_prl_prf(p_ctx);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8006f72:	f884 b1b1 	strb.w	fp, [r4, #433]	; 0x1b1
 8006f76:	2355      	movs	r3, #85	; 0x55
 8006f78:	f240 1707 	movw	r7, #263	; 0x107
 8006f7c:	e56a      	b.n	8006a54 <ifx_i2c_prl_event_handler+0x1c0>
    switch (p_ctx->prl.mc_state)
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8006f7e:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f2c0 81b2 	blt.w	80072ec <ifx_i2c_prl_event_handler+0xa58>
                p_ctx->prl.state = PRL_STATE_START;
                return_status = IFX_I2C_STACK_SUCCESS;
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8006f88:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006f8c:	2b22      	cmp	r3, #34	; 0x22
 8006f8e:	f000 8195 	beq.w	80072bc <ifx_i2c_prl_event_handler+0xa28>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
                p_ctx->prl.prl_receive_length = 1;
                p_ctx->prl.prl_txrx_receive_length = 1;
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8006f92:	2b11      	cmp	r3, #17
 8006f94:	f47f acca 	bne.w	800692c <ifx_i2c_prl_event_handler+0x98>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006f98:	6963      	ldr	r3, [r4, #20]
 8006f9a:	8898      	ldrh	r0, [r3, #4]
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f040 823d 	bne.w	800741c <ifx_i2c_prl_event_handler+0xb88>
                        break;
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8006fa2:	f894 3293 	ldrb.w	r3, [r4, #659]	; 0x293
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 824d 	beq.w	8007446 <ifx_i2c_prl_event_handler+0xbb2>
                        return_status = IFX_I2C_STACK_SUCCESS;
                        break;
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8006fac:	f894 3292 	ldrb.w	r3, [r4, #658]	; 0x292
 8006fb0:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8006fb4:	2368      	movs	r3, #104	; 0x68
 8006fb6:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8006fba:	f204 201d 	addw	r0, r4, #541	; 0x21d
 8006fbe:	f8d4 1298 	ldr.w	r1, [r4, #664]	; 0x298
 8006fc2:	f000 fdb1 	bl	8007b28 <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
 8006fc6:	2300      	movs	r3, #0
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006fc8:	6961      	ldr	r1, [r4, #20]
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
 8006fca:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8006fce:	f884 3293 	strb.w	r3, [r4, #659]	; 0x293
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006fd2:	8888      	ldrh	r0, [r1, #4]
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8006fd4:	2205      	movs	r2, #5
 8006fd6:	f8a4 2256 	strh.w	r2, [r4, #598]	; 0x256
                prl_saved_ctx.stored_context_flag = FALSE;
                p_ctx->prl.prl_receive_length = 5;
 8006fda:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f000 8173 	beq.w	80072ca <ifx_i2c_prl_event_handler+0xa36>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8006fe4:	9320      	str	r3, [sp, #128]	; 0x80
 8006fe6:	9321      	str	r3, [sp, #132]	; 0x84
 8006fe8:	9322      	str	r3, [sp, #136]	; 0x88
 8006fea:	9323      	str	r3, [sp, #140]	; 0x8c
 8006fec:	9324      	str	r3, [sp, #144]	; 0x90
 8006fee:	9325      	str	r3, [sp, #148]	; 0x94
 8006ff0:	9326      	str	r3, [sp, #152]	; 0x98
 8006ff2:	9327      	str	r3, [sp, #156]	; 0x9c
 8006ff4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ff6:	9329      	str	r3, [sp, #164]	; 0xa4
 8006ff8:	932a      	str	r3, [sp, #168]	; 0xa8
 8006ffa:	932b      	str	r3, [sp, #172]	; 0xac
 8006ffc:	932c      	str	r3, [sp, #176]	; 0xb0
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8006ffe:	8888      	ldrh	r0, [r1, #4]
 8007000:	2234      	movs	r2, #52	; 0x34
 8007002:	a920      	add	r1, sp, #128	; 0x80
 8007004:	f7fd ffb8 	bl	8004f78 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8007008:	2801      	cmp	r0, #1
 800700a:	f43f ac8f 	beq.w	800692c <ifx_i2c_prl_event_handler+0x98>
 800700e:	f8b4 2256 	ldrh.w	r2, [r4, #598]	; 0x256
 8007012:	e15a      	b.n	80072ca <ifx_i2c_prl_event_handler+0xa36>
            break;
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8007014:	f1ba 0f01 	cmp.w	sl, #1
 8007018:	f47f ac88 	bne.w	800692c <ifx_i2c_prl_event_handler+0x98>
 800701c:	f894 3263 	ldrb.w	r3, [r4, #611]	; 0x263
 8007020:	2b02      	cmp	r3, #2
 8007022:	f63f ac83 	bhi.w	800692c <ifx_i2c_prl_event_handler+0x98>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8007026:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800702a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800702e:	2a01      	cmp	r2, #1
 8007030:	f47f ad6e 	bne.w	8006b10 <ifx_i2c_prl_event_handler+0x27c>
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8007034:	1c5a      	adds	r2, r3, #1
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8007036:	2304      	movs	r3, #4
                        break;
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8007038:	f884 2263 	strb.w	r2, [r4, #611]	; 0x263
                        p_ctx->prl.trans_repeat_status = TRUE;
 800703c:	f884 a2a0 	strb.w	sl, [r4, #672]	; 0x2a0
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8007040:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                        p_ctx->prl.state = PRL_STATE_TXRX;
 8007044:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8007048:	e441      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 800704a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800704e:	3301      	adds	r3, #1
 8007050:	3310      	adds	r3, #16
 8007052:	d904      	bls.n	800705e <ifx_i2c_prl_event_handler+0x7ca>
 8007054:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007058:	2b00      	cmp	r3, #0
 800705a:	f43f ae74 	beq.w	8006d46 <ifx_i2c_prl_event_handler+0x4b2>
                        (FALSE == p_ctx->prl.trans_repeat_status))
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 800705e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 8007062:	8813      	ldrh	r3, [r2, #0]
 8007064:	330d      	adds	r3, #13
 8007066:	8013      	strh	r3, [r2, #0]
 8007068:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
 800706c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8007070:	e519      	b.n	8006aa6 <ifx_i2c_prl_event_handler+0x212>
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.return_status = return_status;
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8007072:	2307      	movs	r3, #7
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.return_status = return_status;
 8007074:	f8a4 7264 	strh.w	r7, [r4, #612]	; 0x264
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8007078:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    break;
 800707c:	e427      	b.n	80068ce <ifx_i2c_prl_event_handler+0x3a>
                }
                else
                {
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
                    {
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800707e:	2300      	movs	r3, #0
 8007080:	21ff      	movs	r1, #255	; 0xff
 8007082:	f44f 7284 	mov.w	r2, #264	; 0x108
 8007086:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
 800708a:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 800708e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 8007092:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8007096:	e53b      	b.n	8006b10 <ifx_i2c_prl_event_handler+0x27c>
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8007098:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800709c:	f8b4 71c4 	ldrh.w	r7, [r4, #452]	; 0x1c4
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 80070a0:	f884 0258 	strb.w	r0, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80070a4:	f204 2659 	addw	r6, r4, #601	; 0x259
 80070a8:	4629      	mov	r1, r5
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80070aa:	3305      	adds	r3, #5
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80070ac:	4630      	mov	r0, r6
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80070ae:	930b      	str	r3, [sp, #44]	; 0x2c
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80070b0:	f204 285e 	addw	r8, r4, #606	; 0x25e
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80070b4:	f000 fd38 	bl	8007b28 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80070b8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80070bc:	f884 225d 	strb.w	r2, [r4, #605]	; 0x25d
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80070c0:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80070c4:	4639      	mov	r1, r7
 80070c6:	4640      	mov	r0, r8
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80070c8:	9308      	str	r3, [sp, #32]
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80070ca:	f000 fd29 	bl	8007b20 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80070ce:	9b08      	ldr	r3, [sp, #32]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80070d0:	aa21      	add	r2, sp, #132	; 0x84
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80070d6:	4629      	mov	r1, r5
 80070d8:	4610      	mov	r0, r2
 80070da:	920a      	str	r2, [sp, #40]	; 0x28
 80070dc:	f000 fd24 	bl	8007b28 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 80070e0:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 80070e4:	9307      	str	r3, [sp, #28]
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80070e6:	f504 7316 	add.w	r3, r4, #600	; 0x258
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80070ea:	f107 0208 	add.w	r2, r7, #8
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80070ee:	9309      	str	r3, [sp, #36]	; 0x24
 80070f0:	461f      	mov	r7, r3
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80070f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f4:	9305      	str	r3, [sp, #20]
 80070f6:	2008      	movs	r0, #8
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80070f8:	ad20      	add	r5, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80070fa:	4619      	mov	r1, r3
 80070fc:	9001      	str	r0, [sp, #4]
 80070fe:	9003      	str	r0, [sp, #12]
 8007100:	9004      	str	r0, [sp, #16]
 8007102:	b292      	uxth	r2, r2
 8007104:	9500      	str	r5, [sp, #0]
 8007106:	9b07      	ldr	r3, [sp, #28]
 8007108:	9702      	str	r7, [sp, #8]
 800710a:	2000      	movs	r0, #0
 800710c:	f7fd fd5a 	bl	8004bc4 <pal_crypt_decrypt_aes128_ccm>
 8007110:	2800      	cmp	r0, #0
 8007112:	f47f ac0b 	bne.w	800692c <ifx_i2c_prl_event_handler+0x98>
 8007116:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
                        if (IFX_I2C_STACK_ERROR == return_status)
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 800711a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800711e:	f8b4 2260 	ldrh.w	r2, [r4, #608]	; 0x260
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	3101      	adds	r1, #1
 8007126:	e62d      	b.n	8006d84 <ifx_i2c_prl_event_handler+0x4f0>
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8007128:	f240 1307 	movw	r3, #263	; 0x107
 800712c:	f8a0 3264 	strh.w	r3, [r0, #612]	; 0x264
 8007130:	f7ff bbc8 	b.w	80068c4 <ifx_i2c_prl_event_handler+0x30>
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8007134:	4629      	mov	r1, r5
 8007136:	2234      	movs	r2, #52	; 0x34
 8007138:	f7fd ff1e 	bl	8004f78 <pal_os_datastore_write>
 800713c:	f7ff bbf6 	b.w	800692c <ifx_i2c_prl_event_handler+0x98>
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8007140:	f1ba 0f01 	cmp.w	sl, #1
 8007144:	f47f abe6 	bne.w	8006914 <ifx_i2c_prl_event_handler+0x80>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8007148:	f504 711a 	add.w	r1, r4, #616	; 0x268
 800714c:	f504 75ea 	add.w	r5, r4, #468	; 0x1d4
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8007150:	f884 a293 	strb.w	sl, [r4, #659]	; 0x293
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8007154:	460a      	mov	r2, r1
 8007156:	462b      	mov	r3, r5
 8007158:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 800715c:	f8d3 e000 	ldr.w	lr, [r3]
 8007160:	685f      	ldr	r7, [r3, #4]
 8007162:	689e      	ldr	r6, [r3, #8]
 8007164:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8007168:	f8c2 c00c 	str.w	ip, [r2, #12]
 800716c:	3310      	adds	r3, #16
 800716e:	4283      	cmp	r3, r0
 8007170:	f8c2 e000 	str.w	lr, [r2]
 8007174:	6057      	str	r7, [r2, #4]
 8007176:	6096      	str	r6, [r2, #8]
 8007178:	f102 0210 	add.w	r2, r2, #16
 800717c:	d1ee      	bne.n	800715c <ifx_i2c_prl_event_handler+0x8c8>
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	6053      	str	r3, [r2, #4]
 8007184:	6010      	str	r0, [r2, #0]
 8007186:	f894 0263 	ldrb.w	r0, [r4, #611]	; 0x263
 800718a:	f894 21b2 	ldrb.w	r2, [r4, #434]	; 0x1b2
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 800718e:	6963      	ldr	r3, [r4, #20]
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8007190:	f894 6262 	ldrb.w	r6, [r4, #610]	; 0x262
 8007194:	f884 2292 	strb.w	r2, [r4, #658]	; 0x292
 8007198:	f884 6290 	strb.w	r6, [r4, #656]	; 0x290
 800719c:	f884 0291 	strb.w	r0, [r4, #657]	; 0x291
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80071a0:	8898      	ldrh	r0, [r3, #4]
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 80071a2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 80071a6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80071aa:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
 80071ae:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80071b2:	b138      	cbz	r0, 80071c4 <ifx_i2c_prl_event_handler+0x930>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80071b4:	2234      	movs	r2, #52	; 0x34
 80071b6:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80071ba:	f7fd fedd 	bl	8004f78 <pal_os_datastore_write>
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 80071be:	2800      	cmp	r0, #0
 80071c0:	f47f abb4 	bne.w	800692c <ifx_i2c_prl_event_handler+0x98>
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
                        break;
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 80071c4:	2228      	movs	r2, #40	; 0x28
 80071c6:	4628      	mov	r0, r5
 80071c8:	2100      	movs	r1, #0
 80071ca:	f006 f9f2 	bl	800d5b2 <memset>
 80071ce:	2200      	movs	r2, #0
 80071d0:	2301      	movs	r3, #1
 80071d2:	f8c4 21b4 	str.w	r2, [r4, #436]	; 0x1b4
 80071d6:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
 80071da:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
 80071de:	f884 2262 	strb.w	r2, [r4, #610]	; 0x262
 80071e2:	f884 2263 	strb.w	r2, [r4, #611]	; 0x263
 80071e6:	f884 22a0 	strb.w	r2, [r4, #672]	; 0x2a0
 80071ea:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 80071f4:	f7ff bb6b 	b.w	80068ce <ifx_i2c_prl_event_handler+0x3a>
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80071f8:	f1ba 0f01 	cmp.w	sl, #1
 80071fc:	d004      	beq.n	8007208 <ifx_i2c_prl_event_handler+0x974>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80071fe:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8007202:	2b01      	cmp	r3, #1
 8007204:	f43f abd3 	beq.w	80069ae <ifx_i2c_prl_event_handler+0x11a>
 8007208:	f894 3263 	ldrb.w	r3, [r4, #611]	; 0x263
 800720c:	2b03      	cmp	r3, #3
 800720e:	f43f abce 	beq.w	80069ae <ifx_i2c_prl_event_handler+0x11a>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8007212:	f894 3266 	ldrb.w	r3, [r4, #614]	; 0x266
 8007216:	2b01      	cmp	r3, #1
 8007218:	f000 809f 	beq.w	800735a <ifx_i2c_prl_event_handler+0xac6>
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800721c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007220:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
 8007224:	f7ff bbca 	b.w	80069bc <ifx_i2c_prl_event_handler+0x128>
 8007228:	0800dabc 	.word	0x0800dabc
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 800722c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007230:	2b11      	cmp	r3, #17
 8007232:	f47f ab6f 	bne.w	8006914 <ifx_i2c_prl_event_handler+0x80>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8007236:	f1ba 0f05 	cmp.w	sl, #5
 800723a:	f47f ab6b 	bne.w	8006914 <ifx_i2c_prl_event_handler+0x80>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 800723e:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007242:	f504 72ea 	add.w	r2, r4, #468	; 0x1d4
 8007246:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800724a:	681e      	ldr	r6, [r3, #0]
 800724c:	685d      	ldr	r5, [r3, #4]
 800724e:	6898      	ldr	r0, [r3, #8]
 8007250:	68df      	ldr	r7, [r3, #12]
 8007252:	60d7      	str	r7, [r2, #12]
 8007254:	3310      	adds	r3, #16
 8007256:	428b      	cmp	r3, r1
 8007258:	6016      	str	r6, [r2, #0]
 800725a:	6055      	str	r5, [r2, #4]
 800725c:	6090      	str	r0, [r2, #8]
 800725e:	f102 0210 	add.w	r2, r2, #16
 8007262:	d1f2      	bne.n	800724a <ifx_i2c_prl_event_handler+0x9b6>
 8007264:	6819      	ldr	r1, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	6053      	str	r3, [r2, #4]
 800726a:	6011      	str	r1, [r2, #0]
 800726c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8007270:	f8d4 5298 	ldr.w	r5, [r4, #664]	; 0x298
 8007274:	f894 6290 	ldrb.w	r6, [r4, #656]	; 0x290
 8007278:	f894 0291 	ldrb.w	r0, [r4, #657]	; 0x291
 800727c:	f894 1292 	ldrb.w	r1, [r4, #658]	; 0x292
 8007280:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8007284:	2201      	movs	r2, #1
                p_ctx->prl.state = PRL_STATE_TXRX;
 8007286:	2304      	movs	r3, #4
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8007288:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
 800728c:	f884 6262 	strb.w	r6, [r4, #610]	; 0x262
 8007290:	f884 0263 	strb.w	r0, [r4, #611]	; 0x263
 8007294:	f884 11b2 	strb.w	r1, [r4, #434]	; 0x1b2
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8007298:	f884 2266 	strb.w	r2, [r4, #614]	; 0x266
                p_ctx->prl.state = PRL_STATE_TXRX;
 800729c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 80072a0:	e7a5      	b.n	80071ee <ifx_i2c_prl_event_handler+0x95a>
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 80072a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80072a6:	f43f ab0b 	beq.w	80068c0 <ifx_i2c_prl_event_handler+0x2c>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80072aa:	f44f 7284 	mov.w	r2, #264	; 0x108
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80072ae:	2300      	movs	r3, #0
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80072b0:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80072b4:	f880 31b2 	strb.w	r3, [r0, #434]	; 0x1b2
 80072b8:	f7ff bb04 	b.w	80068c4 <ifx_i2c_prl_event_handler+0x30>
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 80072bc:	2360      	movs	r3, #96	; 0x60
                p_ctx->prl.prl_receive_length = 1;
 80072be:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                p_ctx->prl.prl_txrx_receive_length = 1;
 80072c2:	f8a4 2256 	strh.w	r2, [r4, #598]	; 0x256
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 80072c6:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                p_ctx->prl.state = PRL_STATE_ERROR;
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80072ca:	f504 7018 	add.w	r0, r4, #608	; 0x260
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 80072ce:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                p_ctx->prl.state = PRL_STATE_ERROR;
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80072d2:	9000      	str	r0, [sp, #0]
 80072d4:	460b      	mov	r3, r1
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 fb4e 	bl	8007978 <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 80072dc:	2800      	cmp	r0, #0
 80072de:	f47f ab25 	bne.w	800692c <ifx_i2c_prl_event_handler+0x98>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80072e2:	2302      	movs	r3, #2
 80072e4:	f884 31b3 	strb.w	r3, [r4, #435]	; 0x1b3
 80072e8:	f7ff bb45 	b.w	8006976 <ifx_i2c_prl_event_handler+0xe2>
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
            {
                p_ctx->prl.state = PRL_STATE_START;
 80072ec:	2302      	movs	r3, #2
 80072ee:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 80072f2:	f7ff baec 	b.w	80068ce <ifx_i2c_prl_event_handler+0x3a>
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
 80072f6:	f894 0262 	ldrb.w	r0, [r4, #610]	; 0x262
            p_ctx->prl.state = PRL_STATE_VERIFY;
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80072fa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
 80072fe:	4410      	add	r0, r2
            p_ctx->prl.state = PRL_STATE_VERIFY;
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 8007300:	2544      	movs	r5, #68	; 0x44
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8007302:	f504 7118 	add.w	r1, r4, #608	; 0x260
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
            p_ctx->prl.state = PRL_STATE_VERIFY;
 8007306:	2703      	movs	r7, #3
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8007308:	2600      	movs	r6, #0
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
 800730a:	f884 0262 	strb.w	r0, [r4, #610]	; 0x262
            p_ctx->prl.state = PRL_STATE_VERIFY;
 800730e:	f884 71b0 	strb.w	r7, [r4, #432]	; 0x1b0
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8007312:	f8a4 6264 	strh.w	r6, [r4, #612]	; 0x264
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 8007316:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 800731a:	f884 521c 	strb.w	r5, [r4, #540]	; 0x21c
            return_status = ifx_i2c_tl_transceive(p_ctx,
 800731e:	4620      	mov	r0, r4
 8007320:	9100      	str	r1, [sp, #0]
 8007322:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 8007326:	f000 fb27 	bl	8007978 <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 800732a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800732e:	f8b4 2260 	ldrh.w	r2, [r4, #608]	; 0x260
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	f7ff bb1c 	b.w	8006970 <ifx_i2c_prl_event_handler+0xdc>
                }
                else if (data_len <= 1)
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8007338:	f894 21b2 	ldrb.w	r2, [r4, #434]	; 0x1b2
                        p_ctx->prl.state = PRL_STATE_IDLE;
                    }
                }
                else if (data_len <= 1)
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
 800733c:	2307      	movs	r3, #7
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800733e:	21ff      	movs	r1, #255	; 0xff
                        p_ctx->prl.state = PRL_STATE_IDLE;
                    }
                }
                else if (data_len <= 1)
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8007340:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8007344:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8007348:	2a00      	cmp	r2, #0
 800734a:	f040 8087 	bne.w	800745c <ifx_i2c_prl_event_handler+0xbc8>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800734e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007352:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8007356:	f7ff baba 	b.w	80068ce <ifx_i2c_prl_event_handler+0x3a>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 800735a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800735e:	2b11      	cmp	r3, #17
 8007360:	f47f af5c 	bne.w	800721c <ifx_i2c_prl_event_handler+0x988>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8007364:	2200      	movs	r2, #0
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8007366:	f44f 7384 	mov.w	r3, #264	; 0x108
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800736a:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800736e:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
 8007372:	f7ff bb23 	b.w	80069bc <ifx_i2c_prl_event_handler+0x128>
                }
                ///For slave encrypted message
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
                {
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8007376:	f1ba 0f0d 	cmp.w	sl, #13
 800737a:	f67f aad7 	bls.w	800692c <ifx_i2c_prl_event_handler+0x98>
                    {
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                        break;
                    }
                    //Check invalid sequence number
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 800737e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8007382:	1cda      	adds	r2, r3, #3
 8007384:	4290      	cmp	r0, r2
 8007386:	f63f aad1 	bhi.w	800692c <ifx_i2c_prl_event_handler+0x98>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 800738a:	4298      	cmp	r0, r3
 800738c:	f67f aace 	bls.w	800692c <ifx_i2c_prl_event_handler+0x98>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8007390:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8007394:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8007398:	f8b2 8000 	ldrh.w	r8, [r2]
                                                               (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800739c:	f8d4 71c8 	ldr.w	r7, [r4, #456]	; 0x1c8
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 80073a0:	f1a8 030d 	sub.w	r3, r8, #13
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 80073a8:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 80073ac:	f884 2258 	strb.w	r2, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80073b0:	4629      	mov	r1, r5
 80073b2:	f204 2059 	addw	r0, r4, #601	; 0x259
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 80073b6:	9307      	str	r3, [sp, #28]
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80073b8:	f000 fbb6 	bl	8007b28 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80073bc:	9b07      	ldr	r3, [sp, #28]
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80073be:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80073c2:	f884 225d 	strb.w	r2, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80073c6:	4619      	mov	r1, r3
 80073c8:	f204 205e 	addw	r0, r4, #606	; 0x25e
 80073cc:	f000 fba8 	bl	8007b20 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80073d0:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
 80073d4:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80073d6:	4629      	mov	r1, r5
 80073d8:	a821      	add	r0, sp, #132	; 0x84
 80073da:	f000 fba5 	bl	8007b28 <optiga_common_set_uint32>
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
                                                               (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80073de:	3705      	adds	r7, #5
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80073e0:	2308      	movs	r3, #8
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80073e2:	ad20      	add	r5, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80073e4:	f1a8 0205 	sub.w	r2, r8, #5
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80073e8:	f504 7e16 	add.w	lr, r4, #600	; 0x258
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	b292      	uxth	r2, r2
 80073f4:	9705      	str	r7, [sp, #20]
 80073f6:	4639      	mov	r1, r7
 80073f8:	4630      	mov	r0, r6
 80073fa:	9500      	str	r5, [sp, #0]
 80073fc:	f8cd e008 	str.w	lr, [sp, #8]
 8007400:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8007404:	f7fd fbde 	bl	8004bc4 <pal_crypt_decrypt_aes128_ccm>
 8007408:	2800      	cmp	r0, #0
 800740a:	d054      	beq.n	80074b6 <ifx_i2c_prl_event_handler+0xc22>
                                                            PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                            PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        p_ctx->prl.state = PRL_STATE_ALERT;
 800740c:	2306      	movs	r3, #6
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800740e:	2204      	movs	r2, #4
                                                            PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                            PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8007410:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8007414:	f884 21d2 	strb.w	r2, [r4, #466]	; 0x1d2
                        break;
 8007418:	f7ff ba59 	b.w	80068ce <ifx_i2c_prl_event_handler+0x3a>
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 800741c:	2334      	movs	r3, #52	; 0x34
 800741e:	f8a4 3260 	strh.w	r3, [r4, #608]	; 0x260
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8007422:	f504 711a 	add.w	r1, r4, #616	; 0x268
 8007426:	f504 7218 	add.w	r2, r4, #608	; 0x260
 800742a:	f7fd fdcb 	bl	8004fc4 <pal_os_datastore_read>
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 800742e:	2801      	cmp	r0, #1
 8007430:	f43f aa7c 	beq.w	800692c <ifx_i2c_prl_event_handler+0x98>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8007434:	f894 3293 	ldrb.w	r3, [r4, #659]	; 0x293
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8007438:	f894 2292 	ldrb.w	r2, [r4, #658]	; 0x292
 800743c:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8007440:	2b00      	cmp	r3, #0
 8007442:	f47f adb7 	bne.w	8006fb4 <ifx_i2c_prl_event_handler+0x720>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8007446:	2302      	movs	r3, #2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8007448:	2100      	movs	r1, #0
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800744a:	2201      	movs	r2, #1
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 800744c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8007450:	f884 11b2 	strb.w	r1, [r4, #434]	; 0x1b2
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8007454:	f884 2266 	strb.w	r2, [r4, #614]	; 0x266
 8007458:	f7ff ba39 	b.w	80068ce <ifx_i2c_prl_event_handler+0x3a>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800745c:	f44f 7284 	mov.w	r2, #264	; 0x108
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8007460:	f884 61b2 	strb.w	r6, [r4, #434]	; 0x1b2
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8007464:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8007468:	f7ff ba31 	b.w	80068ce <ifx_i2c_prl_event_handler+0x3a>
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 800746c:	2128      	movs	r1, #40	; 0x28
 800746e:	9601      	str	r6, [sp, #4]
 8007470:	f04f 0e10 	mov.w	lr, #16
 8007474:	2620      	movs	r6, #32
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8007476:	f504 75ea 	add.w	r5, r4, #468	; 0x1d4
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 800747a:	9104      	str	r1, [sp, #16]
 800747c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8007480:	f8cd e000 	str.w	lr, [sp]
 8007484:	ab0e      	add	r3, sp, #56	; 0x38
 8007486:	9602      	str	r6, [sp, #8]
 8007488:	9503      	str	r5, [sp, #12]
 800748a:	4641      	mov	r1, r8
 800748c:	f7fd fab8 	bl	8004a00 <pal_crypt_tls_prf_sha256>
 8007490:	b130      	cbz	r0, 80074a0 <ifx_i2c_prl_event_handler+0xc0c>
                                                           p_ctx->prl.session_key,
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        memset(secret_input, 0, shared_secret_length);
 8007492:	4640      	mov	r0, r8
 8007494:	4639      	mov	r1, r7
 8007496:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800749a:	f006 f88a 	bl	800d5b2 <memset>
 800749e:	e568      	b.n	8006f72 <ifx_i2c_prl_event_handler+0x6de>
 80074a0:	4640      	mov	r0, r8
 80074a2:	4639      	mov	r1, r7
 80074a4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80074a8:	f006 f883 	bl	800d5b2 <memset>
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 80074ac:	2333      	movs	r3, #51	; 0x33
 80074ae:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 80074b2:	f7ff bacf 	b.w	8006a54 <ifx_i2c_prl_event_handler+0x1c0>
                        break;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                        p_ctx->prl.state = PRL_STATE_IDLE;
 80074b6:	2301      	movs	r3, #1
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
                        break;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80074b8:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
                        p_ctx->prl.state = PRL_STATE_IDLE;
 80074bc:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 80074c0:	f7ff ba05 	b.w	80068ce <ifx_i2c_prl_event_handler+0x3a>

080074c4 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80074c4:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 80074c6:	2300      	movs	r3, #0
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80074c8:	460d      	mov	r5, r1
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 80074ca:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 80074ce:	4911      	ldr	r1, [pc, #68]	; (8007514 <ifx_i2c_prl_init+0x50>)
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80074d0:	4604      	mov	r4, r0
    p_ctx->tl.state = PRL_STATE_UNINIT;

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 80074d2:	f000 fa37 	bl	8007944 <ifx_i2c_tl_init>
 80074d6:	b110      	cbz	r0, 80074de <ifx_i2c_prl_init+0x1a>
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80074d8:	f44f 7081 	mov.w	r0, #258	; 0x102
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    
    return (return_status);
}
 80074dc:	bd38      	pop	{r3, r4, r5, pc}
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80074de:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80074e2:	f884 01b2 	strb.w	r0, [r4, #434]	; 0x1b2
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80074e6:	3b11      	subs	r3, #17
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 80074e8:	f04f 0101 	mov.w	r1, #1

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 80074ec:	f04f 0211 	mov.w	r2, #17
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80074f0:	bf18      	it	ne
 80074f2:	2301      	movne	r3, #1
 80074f4:	f884 3266 	strb.w	r3, [r4, #614]	; 0x266
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 80074f8:	f884 11b0 	strb.w	r1, [r4, #432]	; 0x1b0

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80074fc:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8007500:	f884 21b1 	strb.w	r2, [r4, #433]	; 0x1b1
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8007504:	f884 21d2 	strb.w	r2, [r4, #466]	; 0x1d2
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8007508:	f8c4 529c 	str.w	r5, [r4, #668]	; 0x29c
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800750c:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
 8007510:	bd38      	pop	{r3, r4, r5, pc}
 8007512:	bf00      	nop
 8007514:	08006895 	.word	0x08006895

08007518 <ifx_i2c_prl_close>:
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8007518:	f890 31b0 	ldrb.w	r3, [r0, #432]	; 0x1b0
 800751c:	2b01      	cmp	r3, #1
 800751e:	d002      	beq.n	8007526 <ifx_i2c_prl_close+0xe>
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8007520:	f44f 7081 	mov.w	r0, #258	; 0x102
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }
    } while (FALSE);
    return (return_status);
}
 8007524:	4770      	bx	lr
    
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8007526:	b510      	push	{r4, lr}
 8007528:	460c      	mov	r4, r1
        if (PRL_STATE_IDLE != p_ctx->prl.state)
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 800752a:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 800752e:	f8c0 429c 	str.w	r4, [r0, #668]	; 0x29c
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8007532:	2933      	cmp	r1, #51	; 0x33
 8007534:	d014      	beq.n	8007560 <ifx_i2c_prl_close+0x48>
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8007536:	f890 31b2 	ldrb.w	r3, [r0, #434]	; 0x1b2
 800753a:	2b01      	cmp	r3, #1
 800753c:	d002      	beq.n	8007544 <ifx_i2c_prl_close+0x2c>
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800753e:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007542:	bd10      	pop	{r4, pc}
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8007544:	2922      	cmp	r1, #34	; 0x22
 8007546:	d1fa      	bne.n	800753e <ifx_i2c_prl_close+0x26>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8007548:	2108      	movs	r1, #8
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 800754a:	f880 31b3 	strb.w	r3, [r0, #435]	; 0x1b3
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 800754e:	f880 11b0 	strb.w	r1, [r0, #432]	; 0x1b0
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8007552:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8007556:	2100      	movs	r1, #0
 8007558:	f7ff f99c 	bl	8006894 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 800755c:	2000      	movs	r0, #0
            break;
        }
    } while (FALSE);
    return (return_status);
}
 800755e:	bd10      	pop	{r4, pc}
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8007560:	2100      	movs	r1, #0
 8007562:	460a      	mov	r2, r1
 8007564:	460b      	mov	r3, r1
 8007566:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 8007568:	2000      	movs	r0, #0
            break;
 800756a:	bd10      	pop	{r4, pc}

0800756c <ifx_i2c_prl_transceive>:
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 800756c:	b3a1      	cbz	r1, 80075d8 <ifx_i2c_prl_transceive+0x6c>
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 800756e:	b570      	push	{r4, r5, r6, lr}
 8007570:	4615      	mov	r5, r2
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8007572:	b912      	cbnz	r2, 800757a <ifx_i2c_prl_transceive+0xe>
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8007574:	f44f 7081 	mov.w	r0, #258	; 0x102
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;

    } while (FALSE);
    return (return_status);
}
 8007578:	bd70      	pop	{r4, r5, r6, pc}
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 800757a:	f890 21b0 	ldrb.w	r2, [r0, #432]	; 0x1b0
 800757e:	2a01      	cmp	r2, #1
 8007580:	d1f8      	bne.n	8007574 <ifx_i2c_prl_transceive+0x8>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8007582:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 8007586:	2c11      	cmp	r4, #17
 8007588:	d029      	beq.n	80075de <ifx_i2c_prl_transceive+0x72>
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 800758a:	2402      	movs	r4, #2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
        p_ctx->prl.actual_payload_length = tx_data_len;

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 800758c:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 8007590:	f880 41b0 	strb.w	r4, [r0, #432]	; 0x1b0
 8007594:	f002 0203 	and.w	r2, r2, #3
 8007598:	3a02      	subs	r2, #2
 800759a:	2a01      	cmp	r2, #1
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 800759c:	bf88      	it	hi
 800759e:	3304      	addhi	r3, #4
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
 80075a0:	2400      	movs	r4, #0
 80075a2:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80075a6:	2611      	movs	r6, #17
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80075a8:	9b04      	ldr	r3, [sp, #16]
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 80075aa:	f8c0 11c0 	str.w	r1, [r0, #448]	; 0x1c0
        p_ctx->prl.actual_payload_length = tx_data_len;
 80075ae:	f8a0 51c4 	strh.w	r5, [r0, #452]	; 0x1c4
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80075b2:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;

        ifx_i2c_prl_event_handler(p_ctx,
 80075b6:	460a      	mov	r2, r1
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
 80075b8:	f880 4263 	strb.w	r4, [r0, #611]	; 0x263
        p_ctx->prl.trans_repeat_status = FALSE;
 80075bc:	f880 42a0 	strb.w	r4, [r0, #672]	; 0x2a0
        p_ctx->prl.decryption_failure_counter = 0;
 80075c0:	f880 4262 	strb.w	r4, [r0, #610]	; 0x262
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80075c4:	f8a0 4264 	strh.w	r4, [r0, #612]	; 0x264
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80075c8:	f880 61d2 	strb.w	r6, [r0, #466]	; 0x1d2

        ifx_i2c_prl_event_handler(p_ctx,
 80075cc:	462b      	mov	r3, r5
 80075ce:	4621      	mov	r1, r4
 80075d0:	f7ff f960 	bl	8006894 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 80075d4:	4620      	mov	r0, r4
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80075d8:	f44f 7081 	mov.w	r0, #258	; 0x102
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;

    } while (FALSE);
    return (return_status);
}
 80075dc:	4770      	bx	lr
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 80075de:	f890 4266 	ldrb.w	r4, [r0, #614]	; 0x266
 80075e2:	2c00      	cmp	r4, #0
 80075e4:	d1d1      	bne.n	800758a <ifx_i2c_prl_transceive+0x1e>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80075e6:	f880 21b3 	strb.w	r2, [r0, #435]	; 0x1b3
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80075ea:	2408      	movs	r4, #8
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80075ec:	e7ce      	b.n	800758c <ifx_i2c_prl_transceive+0x20>
 80075ee:	bf00      	nop

080075f0 <ifx_i2c_dl_event_handler>:
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 80075f4:	f001 0502 	and.w	r5, r1, #2
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80075f8:	b085      	sub	sp, #20
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80075fa:	f001 0b04 	and.w	fp, r1, #4
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t pctr = 0;
    uint8_t chaining = 0;
 80075fe:	f04f 0800 	mov.w	r8, #0
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8007602:	461f      	mov	r7, r3
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8007604:	b2ab      	uxth	r3, r5
 8007606:	9301      	str	r3, [sp, #4]
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8007608:	4604      	mov	r4, r0
 800760a:	4616      	mov	r6, r2
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 800760c:	fa1f fb8b 	uxth.w	fp, fp
 8007610:	f001 0301 	and.w	r3, r1, #1
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t pctr = 0;
 8007614:	4645      	mov	r5, r8
            chaining = pctr & TL_PCTR_CHAIN_MASK;
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 8007616:	f04f 0906 	mov.w	r9, #6
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800761a:	f44f 7a81 	mov.w	sl, #258	; 0x102
    uint8_t pctr = 0;
    uint8_t chaining = 0;
    uint8_t exit_machine = TRUE;
    do
    {
        if (NULL != p_data)
 800761e:	b116      	cbz	r6, 8007626 <ifx_i2c_dl_event_handler+0x36>
        {
            pctr = p_data[0];
 8007620:	7835      	ldrb	r5, [r6, #0]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 8007622:	f005 0807 	and.w	r8, r5, #7
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 8007626:	b11b      	cbz	r3, 8007630 <ifx_i2c_dl_event_handler+0x40>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 8007628:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800762c:	f8a4 a054 	strh.w	sl, [r4, #84]	; 0x54
        }
        if (0 != data_len)
 8007630:	b13f      	cbz	r7, 8007642 <ifx_i2c_dl_event_handler+0x52>

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8007632:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8007636:	b922      	cbnz	r2, 8007642 <ifx_i2c_dl_event_handler+0x52>
 8007638:	f005 0107 	and.w	r1, r5, #7
 800763c:	2901      	cmp	r1, #1
 800763e:	f240 809c 	bls.w	800777a <ifx_i2c_dl_event_handler+0x18a>
 8007642:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8007646:	2100      	movs	r1, #0
        switch (p_ctx->tl.state)
 8007648:	3a01      	subs	r2, #1
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 800764a:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
        switch (p_ctx->tl.state)
 800764e:	2a07      	cmp	r2, #7
 8007650:	f200 80ac 	bhi.w	80077ac <ifx_i2c_dl_event_handler+0x1bc>
 8007654:	e8df f002 	tbb	[pc, r2]
 8007658:	38aa5287 	.word	0x38aa5287
 800765c:	04159f2e 	.word	0x04159f2e
            break;
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8007660:	2f01      	cmp	r7, #1
 8007662:	d903      	bls.n	800766c <ifx_i2c_dl_event_handler+0x7c>
 8007664:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8007668:	2a01      	cmp	r2, #1
 800766a:	d029      	beq.n	80076c0 <ifx_i2c_dl_event_handler+0xd0>
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
                    break;
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 800766c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8007670:	1c51      	adds	r1, r2, #1
 8007672:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8007676:	2a00      	cmp	r2, #0
 8007678:	f000 80df 	beq.w	800783a <ifx_i2c_dl_event_handler+0x24a>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 800767c:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
                            break;
 8007680:	e7cd      	b.n	800761e <ifx_i2c_dl_event_handler+0x2e>
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8007682:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8007686:	2102      	movs	r1, #2
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8007688:	1c50      	adds	r0, r2, #1
 800768a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 800768e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8007692:	2a00      	cmp	r2, #0
 8007694:	d1f2      	bne.n	800767c <ifx_i2c_dl_event_handler+0x8c>

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
    uint16_t tl_fragment_size = 1;
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 8007696:	2107      	movs	r1, #7
 8007698:	f884 12a7 	strb.w	r1, [r4, #679]	; 0x2a7
    p_ctx->tl.total_recv_length = 0;
 800769c:	87a2      	strh	r2, [r4, #60]	; 0x3c
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 800769e:	4620      	mov	r0, r4
 80076a0:	2101      	movs	r1, #1
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	f7fe fd00 	bl	80060a8 <ifx_i2c_dl_send_frame>
                p_ctx->tl.state = TL_STATE_TX;
                if (0 == (p_ctx->tl.master_chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d1e6      	bne.n	800767c <ifx_i2c_dl_event_handler+0x8c>
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 80076ae:	b005      	add	sp, #20
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 80076b4:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80076b8:	1c51      	adds	r1, r2, #1
 80076ba:	428f      	cmp	r7, r1
 80076bc:	f000 80ab 	beq.w	8007816 <ifx_i2c_dl_event_handler+0x226>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 80076c0:	2207      	movs	r2, #7
 80076c2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                    break;
 80076c6:	e7aa      	b.n	800761e <ifx_i2c_dl_event_handler+0x2e>
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80076c8:	f1bb 0f00 	cmp.w	fp, #0
 80076cc:	d0d6      	beq.n	800767c <ifx_i2c_dl_event_handler+0x8c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	d0d4      	beq.n	800767c <ifx_i2c_dl_event_handler+0x8c>
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 80076d2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80076d6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80076da:	f000 80f3 	beq.w	80078c4 <ifx_i2c_dl_event_handler+0x2d4>

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 80076de:	f1b8 0f07 	cmp.w	r8, #7
                        exit_machine = FALSE;
                        break;
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 80076e2:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 80076e6:	d07e      	beq.n	80077e6 <ifx_i2c_dl_event_handler+0x1f6>
 80076e8:	f1b8 0f02 	cmp.w	r8, #2
 80076ec:	d97b      	bls.n	80077e6 <ifx_i2c_dl_event_handler+0x1f6>
 80076ee:	f1b8 0f04 	cmp.w	r8, #4
 80076f2:	d078      	beq.n	80077e6 <ifx_i2c_dl_event_handler+0x1f6>

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 80076f4:	2208      	movs	r2, #8
 80076f6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                        break;
 80076fa:	e790      	b.n	800761e <ifx_i2c_dl_event_handler+0x2e>
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 80076fc:	9a01      	ldr	r2, [sp, #4]
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d0bc      	beq.n	800767c <ifx_i2c_dl_event_handler+0x8c>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8007702:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
 8007706:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007708:	4594      	cmp	ip, r2
 800770a:	d254      	bcs.n	80077b6 <ifx_i2c_dl_event_handler+0x1c6>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800770c:	f1b8 0f07 	cmp.w	r8, #7
 8007710:	d0f0      	beq.n	80076f4 <ifx_i2c_dl_event_handler+0x104>
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
                            break;
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8007712:	2f00      	cmp	r7, #0
 8007714:	d1b2      	bne.n	800767c <ifx_i2c_dl_event_handler+0x8c>

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8007716:	ebcc 0202 	rsb	r2, ip, r2
 800771a:	b293      	uxth	r3, r2
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 800771c:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 8007720:	f1bc 0f00 	cmp.w	ip, #0
 8007724:	f000 80ec 	beq.w	8007900 <ifx_i2c_dl_event_handler+0x310>
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
    {
        pctr = TL_CHAINING_FIRST;
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 8007728:	429d      	cmp	r5, r3
 800772a:	bf2c      	ite	cs
 800772c:	200c      	movcs	r0, #12
 800772e:	200a      	movcc	r0, #10
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8007730:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8007732:	f884 02a7 	strb.w	r0, [r4, #679]	; 0x2a7

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8007736:	42aa      	cmp	r2, r5
 8007738:	bfb8      	it	lt
 800773a:	461d      	movlt	r5, r3
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800773c:	4461      	add	r1, ip
 800773e:	462a      	mov	r2, r5
 8007740:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 8007744:	f8cd c004 	str.w	ip, [sp, #4]
 8007748:	f005 ff28 	bl	800d59c <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 800774c:	f8dd c004 	ldr.w	ip, [sp, #4]
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007750:	1c69      	adds	r1, r5, #1
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007752:	44ac      	add	ip, r5
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007754:	b289      	uxth	r1, r1
 8007756:	4620      	mov	r0, r4
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007758:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 800775c:	b005      	add	sp, #20
 800775e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007762:	f7fe bca1 	b.w	80060a8 <ifx_i2c_dl_send_frame>
        switch (p_ctx->tl.state)
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8007766:	2100      	movs	r1, #0
 8007768:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 800776a:	460a      	mov	r2, r1
 800776c:	460b      	mov	r3, r1
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 800776e:	4620      	mov	r0, r4
 8007770:	46ac      	mov	ip, r5
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8007772:	b005      	add	sp, #20
 8007774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8007778:	4760      	bx	ip
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 800777a:	f005 01f8 	and.w	r1, r5, #248	; 0xf8
 800777e:	2908      	cmp	r1, #8
 8007780:	f43f af5f 	beq.w	8007642 <ifx_i2c_dl_event_handler+0x52>
        }
        if (0 != data_len)
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8007784:	2006      	movs	r0, #6
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8007786:	f44f 7181 	mov.w	r1, #258	; 0x102
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 800778a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        }
        if (0 != data_len)
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 800778e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8007792:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
            break;
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8007796:	b903      	cbnz	r3, 800779a <ifx_i2c_dl_event_handler+0x1aa>
 8007798:	b117      	cbz	r7, 80077a0 <ifx_i2c_dl_event_handler+0x1b0>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 800779a:	2301      	movs	r3, #1
 800779c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80077a0:	2200      	movs	r2, #0
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80077a2:	4613      	mov	r3, r2
 80077a4:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 80077a6:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 80077aa:	e7e0      	b.n	800776e <ifx_i2c_dl_event_handler+0x17e>
            }
            break;
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 80077ac:	2301      	movs	r3, #1
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80077ae:	2200      	movs	r2, #0
            }
            break;
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 80077b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80077b4:	e7f5      	b.n	80077a2 <ifx_i2c_dl_event_handler+0x1b2>
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
                        p_ctx->tl.total_recv_length = 0;
 80077b6:	2200      	movs	r2, #0
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
 80077b8:	2004      	movs	r0, #4
                        p_ctx->tl.total_recv_length = 0;
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
                        p_ctx->tl.transmission_completed = 1;
 80077ba:	2101      	movs	r1, #1
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
 80077bc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
                        p_ctx->tl.total_recv_length = 0;
 80077c0:	87a2      	strh	r2, [r4, #60]	; 0x3c
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 80077c2:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
                        p_ctx->tl.transmission_completed = 1;
 80077c6:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
                        // if data is received after sending last frame
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80077ca:	f1bb 0f00 	cmp.w	fp, #0
 80077ce:	f47f af26 	bne.w	800761e <ifx_i2c_dl_event_handler+0x2e>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data already received after Tx\n");
                            // Received CTRL frame, trigger reception in Data Link layer
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7fe fcc2 	bl	800615c <ifx_i2c_dl_receive_frame>
 80077d8:	2800      	cmp	r0, #0
 80077da:	f43f af68 	beq.w	80076ae <ifx_i2c_dl_event_handler+0xbe>
                            {
                                LOG_TL("[IFX-TL]: Tx:RX Received CTRL frame fail -> Inform UL\n");
                                p_ctx->tl.state = TL_STATE_ERROR;
 80077de:	2306      	movs	r3, #6
 80077e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80077e4:	e763      	b.n	80076ae <ifx_i2c_dl_event_handler+0xbe>
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80077e6:	4956      	ldr	r1, [pc, #344]	; (8007940 <ifx_i2c_dl_event_handler+0x350>)
 80077e8:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
 80077ec:	4291      	cmp	r1, r2
 80077ee:	d006      	beq.n	80077fe <ifx_i2c_dl_event_handler+0x20e>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 80077f0:	4953      	ldr	r1, [pc, #332]	; (8007940 <ifx_i2c_dl_event_handler+0x350>)
 80077f2:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80077f6:	7849      	ldrb	r1, [r1, #1]
 80077f8:	4291      	cmp	r1, r2
 80077fa:	f47f af7b 	bne.w	80076f4 <ifx_i2c_dl_event_handler+0x104>
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
                        break;
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 80077fe:	f884 8052 	strb.w	r8, [r4, #82]	; 0x52
                    if (NULL == p_data)
 8007802:	2e00      	cmp	r6, #0
 8007804:	f43f af3a 	beq.w	800767c <ifx_i2c_dl_event_handler+0x8c>
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8007808:	f018 0c03 	ands.w	ip, r8, #3
 800780c:	d06a      	beq.n	80078e4 <ifx_i2c_dl_event_handler+0x2f4>
                                                            p_ctx->tl.p_recv_packet_buffer,
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
                    }
                    else
                    {
                        p_ctx->tl.state = TL_STATE_CHAINING;
 800780e:	2205      	movs	r2, #5
 8007810:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8007814:	e703      	b.n	800761e <ifx_i2c_dl_event_handler+0x2e>
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
                    break;
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8007816:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007818:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800781a:	f8b1 e000 	ldrh.w	lr, [r1]
 800781e:	eb07 0c00 	add.w	ip, r7, r0
 8007822:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007826:	4571      	cmp	r1, lr
 8007828:	dd33      	ble.n	8007892 <ifx_i2c_dl_event_handler+0x2a2>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 800782a:	f44f 7182 	mov.w	r1, #260	; 0x104
                    p_ctx->tl.state = TL_STATE_RX;
 800782e:	2204      	movs	r2, #4
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8007830:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
                    p_ctx->tl.state = TL_STATE_RX;
 8007834:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                    break;
 8007838:	e6f1      	b.n	800761e <ifx_i2c_dl_event_handler+0x2e>
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 800783a:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
 800783e:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    if (TL_STATE_IDLE != p_ctx->tl.state)
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
 8007840:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
    {
        pctr = TL_CHAINING_NO;
 8007844:	4584      	cmp	ip, r0
 8007846:	bf2c      	ite	cs
 8007848:	2100      	movcs	r1, #0
 800784a:	2101      	movcc	r1, #1
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 800784c:	4584      	cmp	ip, r0
 800784e:	bfa8      	it	ge
 8007850:	4684      	movge	ip, r0
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8007852:	f041 0108 	orr.w	r1, r1, #8
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
    p_ctx->tl.total_recv_length = 0;
    p_ctx->tl.state = TL_STATE_TX;
 8007856:	2002      	movs	r0, #2
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
    p_ctx->tl.total_recv_length = 0;
 8007858:	87a2      	strh	r2, [r4, #60]	; 0x3c
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 800785a:	f884 12a7 	strb.w	r1, [r4, #679]	; 0x2a7
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800785e:	4662      	mov	r2, ip
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
    p_ctx->tl.total_recv_length = 0;
    p_ctx->tl.state = TL_STATE_TX;
 8007860:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8007864:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 800786c:	f8cd c008 	str.w	ip, [sp, #8]
 8007870:	f005 fe94 	bl	800d59c <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007874:	f8dd c008 	ldr.w	ip, [sp, #8]
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007878:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800787c:	f10c 0101 	add.w	r1, ip, #1
 8007880:	b289      	uxth	r1, r1
 8007882:	4620      	mov	r0, r4
 8007884:	f7fe fc10 	bl	80060a8 <ifx_i2c_dl_send_frame>
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	2800      	cmp	r0, #0
 800788c:	f47f aef6 	bne.w	800767c <ifx_i2c_dl_event_handler+0x8c>
 8007890:	e70d      	b.n	80076ae <ifx_i2c_dl_event_handler+0xbe>
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
                    p_ctx->tl.state = TL_STATE_RX;
                    break;
                }
                if (NULL == p_data)
 8007892:	2e00      	cmp	r6, #0
 8007894:	f43f aef2 	beq.w	800767c <ifx_i2c_dl_event_handler+0x8c>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8007898:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800789a:	1c71      	adds	r1, r6, #1
 800789c:	4418      	add	r0, r3
 800789e:	f005 fe7d 	bl	800d59c <memcpy>
 80078a2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80078a4:	3b01      	subs	r3, #1
                p_ctx->tl.total_recv_length += (data_len - 1);
 80078a6:	441f      	add	r7, r3

                p_ctx->tl.previous_chaining = pctr & 0x07;
 80078a8:	f005 0507 	and.w	r5, r5, #7
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 80078ac:	2304      	movs	r3, #4
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);

                p_ctx->tl.previous_chaining = pctr & 0x07;
 80078ae:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);
 80078b2:	87a7      	strh	r7, [r4, #60]	; 0x3c

                p_ctx->tl.previous_chaining = pctr & 0x07;
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 80078b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80078b8:	4620      	mov	r0, r4
 80078ba:	f7fe fc4f 	bl	800615c <ifx_i2c_dl_receive_frame>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d18d      	bne.n	80077de <ifx_i2c_dl_event_handler+0x1ee>
 80078c2:	e6f4      	b.n	80076ae <ifx_i2c_dl_event_handler+0xbe>
                        break;
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 80078c4:	f1b8 0f04 	cmp.w	r8, #4
 80078c8:	f43f aed8 	beq.w	800767c <ifx_i2c_dl_event_handler+0x8c>
 80078cc:	4620      	mov	r0, r4
 80078ce:	9302      	str	r3, [sp, #8]
 80078d0:	f7fe fc44 	bl	800615c <ifx_i2c_dl_receive_frame>
 80078d4:	9b02      	ldr	r3, [sp, #8]
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f47f aed0 	bne.w	800767c <ifx_i2c_dl_event_handler+0x8c>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 80078dc:	2304      	movs	r3, #4
 80078de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        exit_machine = FALSE;
                        break;
 80078e2:	e6e4      	b.n	80076ae <ifx_i2c_dl_event_handler+0xbe>
                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 80078e4:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80078e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80078e8:	19c2      	adds	r2, r0, r7
 80078ea:	8809      	ldrh	r1, [r1, #0]
 80078ec:	3a01      	subs	r2, #1
 80078ee:	428a      	cmp	r2, r1
 80078f0:	dd0b      	ble.n	800790a <ifx_i2c_dl_event_handler+0x31a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 80078f2:	f44f 7282 	mov.w	r2, #260	; 0x104
                            p_ctx->tl.state = TL_STATE_ERROR;
 80078f6:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 80078fa:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
 80078fe:	e68e      	b.n	800761e <ifx_i2c_dl_event_handler+0x2e>
 8007900:	429d      	cmp	r5, r3
 8007902:	bf34      	ite	cc
 8007904:	2009      	movcc	r0, #9
 8007906:	2008      	movcs	r0, #8
 8007908:	e712      	b.n	8007730 <ifx_i2c_dl_event_handler+0x140>
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 800790a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800790c:	f8cd c004 	str.w	ip, [sp, #4]
 8007910:	1c71      	adds	r1, r6, #1
 8007912:	4418      	add	r0, r3
 8007914:	1e7a      	subs	r2, r7, #1
 8007916:	f005 fe41 	bl	800d59c <memcpy>
 800791a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800791c:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 800791e:	f8dd c004 	ldr.w	ip, [sp, #4]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8007922:	6ca5      	ldr	r5, [r4, #72]	; 0x48
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8007924:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007926:	3801      	subs	r0, #1
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8007928:	4438      	add	r0, r7
 800792a:	b280      	uxth	r0, r0
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 800792c:	2301      	movs	r3, #1
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
 800792e:	87a0      	strh	r0, [r4, #60]	; 0x3c
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8007930:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8007934:	4661      	mov	r1, ip
 8007936:	4603      	mov	r3, r0
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8007938:	8028      	strh	r0, [r5, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800793a:	46b4      	mov	ip, r6
 800793c:	4620      	mov	r0, r4
 800793e:	e718      	b.n	8007772 <ifx_i2c_dl_event_handler+0x182>
 8007940:	0800dad0 	.word	0x0800dad0

08007944 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8007944:	b538      	push	{r3, r4, r5, lr}
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8007946:	2300      	movs	r3, #0
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8007948:	460d      	mov	r5, r1
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 800794a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800794e:	4909      	ldr	r1, [pc, #36]	; (8007974 <ifx_i2c_tl_init+0x30>)
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8007950:	4604      	mov	r4, r0
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 8007952:	f7fe fb85 	bl	8006060 <ifx_i2c_dl_init>
 8007956:	b110      	cbz	r0, 800795e <ifx_i2c_tl_init+0x1a>
    {
        return (IFX_I2C_STACK_ERROR);
 8007958:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);

    return (IFX_I2C_STACK_SUCCESS);
}
 800795c:	bd38      	pop	{r3, r4, r5, pc}
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800795e:	88a3      	ldrh	r3, [r4, #4]
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
    p_ctx->tl.upper_layer_event_handler = handler;
 8007960:	65e5      	str	r5, [r4, #92]	; 0x5c
    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
 8007962:	2201      	movs	r2, #1
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 8007964:	3b06      	subs	r3, #6
    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
 8007966:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
 800796a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800796e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42

    return (IFX_I2C_STACK_SUCCESS);
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	080075f1 	.word	0x080075f1

08007978 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 8007978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800797a:	b085      	sub	sp, #20
 800797c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 800797e:	b101      	cbz	r1, 8007982 <ifx_i2c_tl_transceive+0xa>
 8007980:	b91a      	cbnz	r2, 800798a <ifx_i2c_tl_transceive+0x12>
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
    } while (FALSE);
    return (status);
}
 8007982:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007986:	b005      	add	sp, #20
 8007988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800798a:	4604      	mov	r4, r0
        if ((NULL == p_packet) || (0 == packet_len))
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 800798c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8007990:	2801      	cmp	r0, #1
 8007992:	d1f6      	bne.n	8007982 <ifx_i2c_tl_transceive+0xa>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8007994:	2002      	movs	r0, #2
 8007996:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	9202      	str	r2, [sp, #8]
 800799e:	9101      	str	r1, [sp, #4]
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 80079a0:	f7fd fbc2 	bl	8005128 <pal_os_timer_get_time_in_milliseconds>
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 80079a4:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
    {
        pctr = TL_CHAINING_NO;
 80079a8:	9a02      	ldr	r2, [sp, #8]
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
 80079aa:	9901      	ldr	r1, [sp, #4]
        if (TL_STATE_IDLE != p_ctx->tl.state)
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 80079ac:	64e0      	str	r0, [r4, #76]	; 0x4c
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
    {
        pctr = TL_CHAINING_NO;
 80079ae:	42b2      	cmp	r2, r6
 80079b0:	bf94      	ite	ls
 80079b2:	2700      	movls	r7, #0
 80079b4:	2701      	movhi	r7, #1
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 80079b6:	4296      	cmp	r6, r2
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
 80079b8:	f04f 0000 	mov.w	r0, #0
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 80079bc:	bfa8      	it	ge
 80079be:	4616      	movge	r6, r2
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80079c0:	f44f 7e81 	mov.w	lr, #258	; 0x102
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 80079c4:	9b03      	ldr	r3, [sp, #12]
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
 80079c6:	63a1      	str	r1, [r4, #56]	; 0x38
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 80079c8:	f047 0708 	orr.w	r7, r7, #8
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
 80079cc:	87e2      	strh	r2, [r4, #62]	; 0x3e
        p_ctx->tl.packet_offset = 0;
 80079ce:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
 80079d2:	87a0      	strh	r0, [r4, #60]	; 0x3c
        p_ctx->tl.chaining_error_count = 0;
 80079d4:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        p_ctx->tl.master_chaining_error_count = 0;
 80079d8:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
        p_ctx->tl.transmission_completed = 0;
 80079dc:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 80079e0:	6463      	str	r3, [r4, #68]	; 0x44
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 80079e2:	64a5      	str	r5, [r4, #72]	; 0x48
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 80079e4:	f884 72a7 	strb.w	r7, [r4, #679]	; 0x2a7
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 80079e8:	4632      	mov	r2, r6
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80079ea:	f8a4 e054 	strh.w	lr, [r4, #84]	; 0x54
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 80079ee:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 80079f2:	f005 fdd3 	bl	800d59c <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 80079f6:	1c71      	adds	r1, r6, #1
 80079f8:	b289      	uxth	r1, r1
 80079fa:	4620      	mov	r0, r4
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 80079fc:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
    } while (FALSE);
    return (status);
}
 8007a00:	b005      	add	sp, #20
 8007a02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007a06:	f7fe bb4f 	b.w	80060a8 <ifx_i2c_dl_send_frame>
 8007a0a:	bf00      	nop

08007a0c <ifx_i2c_event_handler>:
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8007a0c:	b510      	push	{r4, lr}
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8007a0e:	6883      	ldr	r3, [r0, #8]
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8007a10:	4604      	mov	r4, r0
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8007a12:	6840      	ldr	r0, [r0, #4]
 8007a14:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	7363      	strb	r3, [r4, #13]
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
 8007a1e:	4c09      	ldr	r4, [pc, #36]	; (8007a44 <optiga_comms_create+0x28>)
 8007a20:	7b27      	ldrb	r7, [r4, #12]
 8007a22:	b10f      	cbz	r7, 8007a28 <optiga_comms_create+0xc>
{
    optiga_comms_t * p_optiga_comms = NULL;

    do
    {
        p_optiga_comms = &optiga_comms;
 8007a24:	4620      	mov	r0, r4
 8007a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a28:	460d      	mov	r5, r1
 8007a2a:	4606      	mov	r6, r0

        if (FALSE == p_optiga_comms->instance_init_state)
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8007a2c:	f7fc ffe6 	bl	80049fc <pal_init>
 8007a30:	b928      	cbnz	r0, 8007a3e <optiga_comms_create+0x22>
                break;
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
            p_optiga_comms->p_upper_layer_ctx = context;
            p_optiga_comms->instance_init_state = TRUE;
 8007a32:	2301      	movs	r3, #1
 8007a34:	7323      	strb	r3, [r4, #12]
            {
                p_optiga_comms = NULL;
                break;
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8007a36:	60a6      	str	r6, [r4, #8]
            p_optiga_comms->p_upper_layer_ctx = context;
 8007a38:	6065      	str	r5, [r4, #4]
{
    optiga_comms_t * p_optiga_comms = NULL;

    do
    {
        p_optiga_comms = &optiga_comms;
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (FALSE == p_optiga_comms->instance_init_state)
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
            {
                p_optiga_comms = NULL;
 8007a3e:	4638      	mov	r0, r7
            p_optiga_comms->p_upper_layer_ctx = context;
            p_optiga_comms->instance_init_state = TRUE;
        }
    } while (FALSE);
    return (p_optiga_comms);
}
 8007a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a42:	bf00      	nop
 8007a44:	1ffed6dc 	.word	0x1ffed6dc

08007a48 <optiga_comms_set_callback_context>:
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
    p_optiga_comms->p_upper_layer_ctx = context;
 8007a48:	6041      	str	r1, [r0, #4]
    return (0);
}
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <optiga_comms_open>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007a50:	b1c0      	cbz	r0, 8007a84 <optiga_comms_open+0x34>
 8007a52:	7b43      	ldrb	r3, [r0, #13]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d015      	beq.n	8007a84 <optiga_comms_open+0x34>


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8007a58:	b510      	push	{r4, lr}
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007a5a:	6803      	ldr	r3, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007a5c:	4a0b      	ldr	r2, [pc, #44]	; (8007a8c <optiga_comms_open+0x3c>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8007a5e:	2101      	movs	r1, #1
 8007a60:	7341      	strb	r1, [r0, #13]
optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007a62:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007a64:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8007a66:	7c02      	ldrb	r2, [r0, #16]
 8007a68:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8007a6c:	4604      	mov	r4, r0
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8007a6e:	6800      	ldr	r0, [r0, #0]
 8007a70:	6963      	ldr	r3, [r4, #20]
 8007a72:	f8c0 34d0 	str.w	r3, [r0, #1232]	; 0x4d0

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8007a76:	f7fd ffbf 	bl	80059f8 <ifx_i2c_open>
        if (IFX_I2C_STACK_SUCCESS != status)
 8007a7a:	b110      	cbz	r0, 8007a82 <optiga_comms_open+0x32>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	7363      	strb	r3, [r4, #13]
 8007a80:	bd10      	pop	{r4, pc}
        }
    }
    return (status);
}
 8007a82:	bd10      	pop	{r4, pc}

/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007a84:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	08007a0d 	.word	0x08007a0d

08007a90 <optiga_comms_transceive>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007a90:	b320      	cbz	r0, 8007adc <optiga_comms_transceive+0x4c>
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8007a92:	b570      	push	{r4, r5, r6, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007a94:	7b44      	ldrb	r4, [r0, #13]
 8007a96:	2c01      	cmp	r4, #1
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8007a98:	b082      	sub	sp, #8

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007a9a:	d01b      	beq.n	8007ad4 <optiga_comms_transceive+0x44>
 8007a9c:	4604      	mov	r4, r0
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007a9e:	6800      	ldr	r0, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007aa0:	4d10      	ldr	r5, [pc, #64]	; (8007ae4 <optiga_comms_transceive+0x54>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8007aa2:	2601      	movs	r6, #1
 8007aa4:	7366      	strb	r6, [r4, #13]
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007aa6:	61c4      	str	r4, [r0, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007aa8:	6185      	str	r5, [r0, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8007aaa:	7ba5      	ldrb	r5, [r4, #14]
 8007aac:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8007ab0:	6820      	ldr	r0, [r4, #0]
 8007ab2:	7be5      	ldrb	r5, [r4, #15]
 8007ab4:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	7c25      	ldrb	r5, [r4, #16]
 8007abc:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8007ac0:	9d06      	ldr	r5, [sp, #24]
 8007ac2:	6820      	ldr	r0, [r4, #0]
 8007ac4:	9500      	str	r5, [sp, #0]
 8007ac6:	f7fd ffc5 	bl	8005a54 <ifx_i2c_transceive>
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8007aca:	b108      	cbz	r0, 8007ad0 <optiga_comms_transceive+0x40>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	7363      	strb	r3, [r4, #13]
        }
    }
    return (status);
}
 8007ad0:	b002      	add	sp, #8
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007ad4:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
 8007ad8:	b002      	add	sp, #8
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007adc:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	08007a0d 	.word	0x08007a0d

08007ae8 <optiga_comms_close>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007ae8:	b1a8      	cbz	r0, 8007b16 <optiga_comms_close+0x2e>
 8007aea:	7b43      	ldrb	r3, [r0, #13]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d012      	beq.n	8007b16 <optiga_comms_close+0x2e>
    return (status);
}


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8007af0:	b510      	push	{r4, lr}
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007af2:	6803      	ldr	r3, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007af4:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <optiga_comms_close+0x34>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8007af6:	2101      	movs	r1, #1
 8007af8:	7341      	strb	r1, [r0, #13]
optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007afa:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007afc:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8007afe:	7c02      	ldrb	r2, [r0, #16]
 8007b00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8007b04:	4604      	mov	r4, r0
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8007b06:	6800      	ldr	r0, [r0, #0]
 8007b08:	f7fd ffc2 	bl	8005a90 <ifx_i2c_close>
        if (IFX_I2C_STACK_SUCCESS != status)
 8007b0c:	b110      	cbz	r0, 8007b14 <optiga_comms_close+0x2c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	7363      	strb	r3, [r4, #13]
 8007b12:	bd10      	pop	{r4, pc}
        }
    }
    return (status);
}
 8007b14:	bd10      	pop	{r4, pc}
}


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007b16:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007b1a:	4770      	bx	lr
 8007b1c:	08007a0d 	.word	0x08007a0d

08007b20 <optiga_common_set_uint16>:
#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8007b20:	0a0b      	lsrs	r3, r1, #8
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8007b22:	7041      	strb	r1, [r0, #1]
#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8007b24:	7003      	strb	r3, [r0, #0]
 8007b26:	4770      	bx	lr

08007b28 <optiga_common_set_uint32>:
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8007b28:	b410      	push	{r4}
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8007b2a:	0c0a      	lsrs	r2, r1, #16
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8007b2c:	0e0c      	lsrs	r4, r1, #24
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8007b2e:	0a0b      	lsrs	r3, r1, #8
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8007b30:	7004      	strb	r4, [r0, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8007b32:	70c1      	strb	r1, [r0, #3]
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8007b34:	7042      	strb	r2, [r0, #1]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8007b36:	7083      	strb	r3, [r0, #2]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
}
 8007b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop

08007b40 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8007b40:	7842      	ldrb	r2, [r0, #1]
 8007b42:	7803      	ldrb	r3, [r0, #0]
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8007b44:	78c1      	ldrb	r1, [r0, #3]
 8007b46:	7880      	ldrb	r0, [r0, #2]
}

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8007b48:	0412      	lsls	r2, r2, #16
 8007b4a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8007b4e:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));

    return (four_byte_value);
}
 8007b50:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop

08007b58 <optiga_common_get_uint16>:

void optiga_common_get_uint16 (const uint8_t * p_input_buffer,uint16_t* p_two_byte_value)
{
    *p_two_byte_value = (uint16_t)(*p_input_buffer << 8);
 8007b58:	7803      	ldrb	r3, [r0, #0]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	800b      	strh	r3, [r1, #0]
    *p_two_byte_value |= (uint16_t)(*(p_input_buffer+1));
 8007b5e:	7842      	ldrb	r2, [r0, #1]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	800b      	strh	r3, [r1, #0]
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop

08007b68 <optiga_lib_print_bytes>:
    pal_logger_write(&logger_console, new_line_characters, 2);

}

void optiga_lib_print_bytes(const uint8_t buff[], const uint8_t size)
{
 8007b68:	460a      	mov	r2, r1
//	   index += sprintf(&str[index], "%d", buff[i]);
//	}
//	memcpy(str, buff, size);
//	optiga_lib_print_string(str);

	pal_logger_write(&logger_console, buff, size);
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <optiga_lib_print_bytes+0xc>)
 8007b6e:	f7fd b9c3 	b.w	8004ef8 <pal_logger_write>
 8007b72:	bf00      	nop
 8007b74:	1ffed1b4 	.word	0x1ffed1b4

08007b78 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	4602      	mov	r2, r0
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
            }
            break;
            case OPTIGA_CMD_QUEUE_SLOT_STATE:
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 8007b7e:	f890 0639 	ldrb.w	r0, [r0, #1593]	; 0x639
 8007b82:	f892 5645 	ldrb.w	r5, [r2, #1605]	; 0x645
 8007b86:	f892 8651 	ldrb.w	r8, [r2, #1617]	; 0x651
 8007b8a:	f892 c65d 	ldrb.w	ip, [r2, #1629]	; 0x65d
 8007b8e:	f892 e669 	ldrb.w	lr, [r2, #1641]	; 0x669
 8007b92:	f892 4675 	ldrb.w	r4, [r2, #1653]	; 0x675
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8007b96:	f8d2 1678 	ldr.w	r1, [r2, #1656]	; 0x678
 8007b9a:	f1a0 0302 	sub.w	r3, r0, #2
 8007b9e:	fab3 f383 	clz	r3, r3
 8007ba2:	095b      	lsrs	r3, r3, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007ba4:	1c5e      	adds	r6, r3, #1
 8007ba6:	b2f6      	uxtb	r6, r6
 8007ba8:	2d02      	cmp	r5, #2
 8007baa:	bf08      	it	eq
 8007bac:	4633      	moveq	r3, r6
 8007bae:	1c5e      	adds	r6, r3, #1
 8007bb0:	b2f6      	uxtb	r6, r6
 8007bb2:	f1b8 0f02 	cmp.w	r8, #2
 8007bb6:	bf08      	it	eq
 8007bb8:	4633      	moveq	r3, r6
 8007bba:	1c5e      	adds	r6, r3, #1
 8007bbc:	b2f6      	uxtb	r6, r6
 8007bbe:	f1bc 0f02 	cmp.w	ip, #2
 8007bc2:	bf08      	it	eq
 8007bc4:	4633      	moveq	r3, r6
 8007bc6:	1c5e      	adds	r6, r3, #1
 8007bc8:	b2f6      	uxtb	r6, r6
 8007bca:	f1be 0f02 	cmp.w	lr, #2
 8007bce:	bf08      	it	eq
 8007bd0:	4633      	moveq	r3, r6
 8007bd2:	1c5e      	adds	r6, r3, #1
 8007bd4:	b2f6      	uxtb	r6, r6
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8007bd6:	2c02      	cmp	r4, #2
 8007bd8:	bf08      	it	eq
 8007bda:	4633      	moveq	r3, r6
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8007bdc:	b085      	sub	sp, #20
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8007bde:	bb1b      	cbnz	r3, 8007c28 <optiga_cmd_queue_scheduler+0xb0>
 8007be0:	f1a0 0308 	sub.w	r3, r0, #8
 8007be4:	fab3 f383 	clz	r3, r3
 8007be8:	095b      	lsrs	r3, r3, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007bea:	1c5e      	adds	r6, r3, #1
 8007bec:	b2f6      	uxtb	r6, r6
 8007bee:	2d08      	cmp	r5, #8
 8007bf0:	bf08      	it	eq
 8007bf2:	4633      	moveq	r3, r6
 8007bf4:	1c5e      	adds	r6, r3, #1
 8007bf6:	b2f6      	uxtb	r6, r6
 8007bf8:	f1b8 0f08 	cmp.w	r8, #8
 8007bfc:	bf08      	it	eq
 8007bfe:	4633      	moveq	r3, r6
 8007c00:	1c5e      	adds	r6, r3, #1
 8007c02:	b2f6      	uxtb	r6, r6
 8007c04:	f1bc 0f08 	cmp.w	ip, #8
 8007c08:	bf08      	it	eq
 8007c0a:	4633      	moveq	r3, r6
 8007c0c:	1c5e      	adds	r6, r3, #1
 8007c0e:	b2f6      	uxtb	r6, r6
 8007c10:	f1be 0f08 	cmp.w	lr, #8
 8007c14:	bf08      	it	eq
 8007c16:	4633      	moveq	r3, r6
 8007c18:	1c5e      	adds	r6, r3, #1
 8007c1a:	b2f6      	uxtb	r6, r6
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8007c1c:	2c08      	cmp	r4, #8
 8007c1e:	bf08      	it	eq
 8007c20:	4633      	moveq	r3, r6
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80ed 	beq.w	8007e02 <optiga_cmd_queue_scheduler+0x28a>
 8007c28:	f1a0 0704 	sub.w	r7, r0, #4
 8007c2c:	fab7 f787 	clz	r7, r7
 8007c30:	097f      	lsrs	r7, r7, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007c32:	1c7e      	adds	r6, r7, #1
 8007c34:	b2f6      	uxtb	r6, r6
 8007c36:	2d04      	cmp	r5, #4
 8007c38:	bf18      	it	ne
 8007c3a:	463e      	movne	r6, r7
 8007c3c:	1c70      	adds	r0, r6, #1
 8007c3e:	b2c0      	uxtb	r0, r0
 8007c40:	f1b8 0f04 	cmp.w	r8, #4
 8007c44:	bf14      	ite	ne
 8007c46:	4635      	movne	r5, r6
 8007c48:	4605      	moveq	r5, r0
 8007c4a:	1c6b      	adds	r3, r5, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f1bc 0f04 	cmp.w	ip, #4
 8007c52:	bf14      	ite	ne
 8007c54:	4628      	movne	r0, r5
 8007c56:	4618      	moveq	r0, r3
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f1be 0f04 	cmp.w	lr, #4
 8007c60:	bf18      	it	ne
 8007c62:	4603      	movne	r3, r0
 8007c64:	1c58      	adds	r0, r3, #1
 8007c66:	b2c0      	uxtb	r0, r0

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8007c68:	2c04      	cmp	r4, #4
 8007c6a:	bf08      	it	eq
 8007c6c:	4603      	moveq	r3, r0
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	f000 8098 	beq.w	8007da4 <optiga_cmd_queue_scheduler+0x22c>
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
                                               p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
    }
    else
    {
        pal_os_event_stop(my_os_event);
 8007c74:	4608      	mov	r0, r1
 8007c76:	9101      	str	r1, [sp, #4]
 8007c78:	4614      	mov	r4, r2
 8007c7a:	f7fd f9e3 	bl	8005044 <pal_os_event_stop>
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8007c7e:	f8df c230 	ldr.w	ip, [pc, #560]	; 8007eb0 <optiga_cmd_queue_scheduler+0x338>
 8007c82:	9901      	ldr	r1, [sp, #4]
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8007c84:	f04f 39ff 	mov.w	r9, #4294967295
 8007c88:	f04f 0b00 	mov.w	fp, #0
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4626      	mov	r6, r4
 8007c92:	f04f 08ff 	mov.w	r8, #255	; 0xff
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8007c96:	f104 0a08 	add.w	sl, r4, #8
 8007c9a:	e008      	b.n	8007cae <optiga_cmd_queue_scheduler+0x136>

                }
                else
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8007c9c:	f896 3639 	ldrb.w	r3, [r6, #1593]	; 0x639
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d05f      	beq.n	8007d64 <optiga_cmd_queue_scheduler+0x1ec>
 8007ca4:	3501      	adds	r5, #1
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8007ca6:	2d06      	cmp	r5, #6
 8007ca8:	f106 060c 	add.w	r6, r6, #12
 8007cac:	d067      	beq.n	8007d7e <optiga_cmd_queue_scheduler+0x206>
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007cae:	f894 0645 	ldrb.w	r0, [r4, #1605]	; 0x645
 8007cb2:	f894 3639 	ldrb.w	r3, [r4, #1593]	; 0x639
 8007cb6:	2808      	cmp	r0, #8
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
 8007cb8:	f1a3 0308 	sub.w	r3, r3, #8
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007cbc:	f894 0651 	ldrb.w	r0, [r4, #1617]	; 0x651
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
 8007cc0:	fab3 f383 	clz	r3, r3
 8007cc4:	ea4f 1353 	mov.w	r3, r3, lsr #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007cc8:	bf04      	itt	eq
 8007cca:	3301      	addeq	r3, #1
 8007ccc:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007cce:	2808      	cmp	r0, #8
 8007cd0:	f894 065d 	ldrb.w	r0, [r4, #1629]	; 0x65d
        {
            count++;
 8007cd4:	bf04      	itt	eq
 8007cd6:	3301      	addeq	r3, #1
 8007cd8:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007cda:	2808      	cmp	r0, #8
 8007cdc:	f894 0669 	ldrb.w	r0, [r4, #1641]	; 0x669
        {
            count++;
 8007ce0:	bf04      	itt	eq
 8007ce2:	3301      	addeq	r3, #1
 8007ce4:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007ce6:	2808      	cmp	r0, #8
 8007ce8:	f894 0675 	ldrb.w	r0, [r4, #1653]	; 0x675
        {
            count++;
 8007cec:	bf04      	itt	eq
 8007cee:	3301      	addeq	r3, #1
 8007cf0:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007cf2:	2808      	cmp	r0, #8
        {
            count++;
 8007cf4:	bf04      	itt	eq
 8007cf6:	3301      	addeq	r3, #1
 8007cf8:	b2db      	uxtbeq	r3, r3
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);

                // if any slot has acquired strict lock, highest priority is given to it
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	b2ef      	uxtb	r7, r5
 8007cfe:	d1cd      	bne.n	8007c9c <optiga_cmd_queue_scheduler+0x124>
                {
                    // Select the slot which has acquired strict lock
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8007d00:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8007d04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d08:	f640 0023 	movw	r0, #2083	; 0x823
 8007d0c:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 8007d10:	4283      	cmp	r3, r0
 8007d12:	d1c7      	bne.n	8007ca4 <optiga_cmd_queue_scheduler+0x12c>
 8007d14:	3501      	adds	r5, #1
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8007d16:	2d06      	cmp	r5, #6
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
                        {
                            reference_time_stamp = p_queue_entry->arrival_time;
 8007d18:	f8d6 9634 	ldr.w	r9, [r6, #1588]	; 0x634
 8007d1c:	46b8      	mov	r8, r7
 8007d1e:	f106 060c 	add.w	r6, r6, #12
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8007d22:	d1c4      	bne.n	8007cae <optiga_cmd_queue_scheduler+0x136>
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8007d24:	ea4f 0548 	mov.w	r5, r8, lsl #1
 8007d28:	eb05 0308 	add.w	r3, r5, r8
 8007d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d30:	f893 2638 	ldrb.w	r2, [r3, #1592]	; 0x638
 8007d34:	2a22      	cmp	r2, #34	; 0x22
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8007d36:	f8d3 2630 	ldr.w	r2, [r3, #1584]	; 0x630
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8007d3a:	f000 8087 	beq.w	8007e4c <optiga_cmd_queue_scheduler+0x2d4>
 8007d3e:	6813      	ldr	r3, [r2, #0]
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
            pal_os_event_register_callback_oneshot(my_os_event,
 8007d40:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8007d44:	4958      	ldr	r1, [pc, #352]	; (8007ea8 <optiga_cmd_queue_scheduler+0x330>)
 8007d46:	2332      	movs	r3, #50	; 0x32
 8007d48:	f7fd f9b6 	bl	80050b8 <pal_os_event_register_callback_oneshot>
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8007d4c:	eb05 0308 	add.w	r3, r5, r8
 8007d50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d54:	2204      	movs	r2, #4
 8007d56:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8007d5a:	f8c4 967c 	str.w	r9, [r4, #1660]	; 0x67c
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8007d5e:	b005      	add	sp, #20
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8007d64:	f8d6 0634 	ldr.w	r0, [r6, #1588]	; 0x634
 8007d68:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
 8007d6c:	4298      	cmp	r0, r3
 8007d6e:	d20e      	bcs.n	8007d8e <optiga_cmd_queue_scheduler+0x216>
 8007d70:	3501      	adds	r5, #1
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8007d72:	2d06      	cmp	r5, #6
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
                        {
                            overflow_detected = TRUE;
 8007d74:	f04f 0201 	mov.w	r2, #1
 8007d78:	f106 060c 	add.w	r6, r6, #12
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8007d7c:	d197      	bne.n	8007cae <optiga_cmd_queue_scheduler+0x136>
                            prefered_index = index;
                        }
                    }
                }
            }
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 8007d7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8007d82:	d1cf      	bne.n	8007d24 <optiga_cmd_queue_scheduler+0x1ac>
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	d05e      	beq.n	8007e46 <optiga_cmd_queue_scheduler+0x2ce>
        do
        {
            //reset overflow detected flag and the last_time stamp
            if(overflow_detected == TRUE)
            {
                p_optiga_ctx->last_time_stamp = 0;
 8007d88:	f8c4 b67c 	str.w	fp, [r4, #1660]	; 0x67c
 8007d8c:	e77e      	b.n	8007c8c <optiga_cmd_queue_scheduler+0x114>
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8007d8e:	4548      	cmp	r0, r9
 8007d90:	d888      	bhi.n	8007ca4 <optiga_cmd_queue_scheduler+0x12c>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8007d92:	f896 3638 	ldrb.w	r3, [r6, #1592]	; 0x638
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8007d96:	2b22      	cmp	r3, #34	; 0x22
 8007d98:	d03c      	beq.n	8007e14 <optiga_cmd_queue_scheduler+0x29c>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8007d9a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8007d9e:	2b21      	cmp	r3, #33	; 0x21
 8007da0:	d180      	bne.n	8007ca4 <optiga_cmd_queue_scheduler+0x12c>
 8007da2:	e7b7      	b.n	8007d14 <optiga_cmd_queue_scheduler+0x19c>
 8007da4:	f892 6638 	ldrb.w	r6, [r2, #1592]	; 0x638
 8007da8:	f892 4644 	ldrb.w	r4, [r2, #1604]	; 0x644
 8007dac:	f892 0650 	ldrb.w	r0, [r2, #1616]	; 0x650
 8007db0:	f892 e65c 	ldrb.w	lr, [r2, #1628]	; 0x65c
 8007db4:	f892 3668 	ldrb.w	r3, [r2, #1640]	; 0x668
 8007db8:	f892 7674 	ldrb.w	r7, [r2, #1652]	; 0x674
 8007dbc:	f1a6 0623 	sub.w	r6, r6, #35	; 0x23
 8007dc0:	fab6 f686 	clz	r6, r6
 8007dc4:	0976      	lsrs	r6, r6, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007dc6:	1c75      	adds	r5, r6, #1
 8007dc8:	b2ed      	uxtb	r5, r5
 8007dca:	2c23      	cmp	r4, #35	; 0x23
 8007dcc:	bf18      	it	ne
 8007dce:	4635      	movne	r5, r6
 8007dd0:	1c6c      	adds	r4, r5, #1
 8007dd2:	b2e4      	uxtb	r4, r4
 8007dd4:	2823      	cmp	r0, #35	; 0x23
 8007dd6:	bf18      	it	ne
 8007dd8:	462c      	movne	r4, r5
 8007dda:	1c60      	adds	r0, r4, #1
 8007ddc:	b2c0      	uxtb	r0, r0
 8007dde:	f1be 0f23 	cmp.w	lr, #35	; 0x23
 8007de2:	bf18      	it	ne
 8007de4:	4620      	movne	r0, r4
 8007de6:	1c44      	adds	r4, r0, #1
 8007de8:	b2e4      	uxtb	r4, r4
 8007dea:	2b23      	cmp	r3, #35	; 0x23
 8007dec:	bf14      	ite	ne
 8007dee:	4603      	movne	r3, r0
 8007df0:	4623      	moveq	r3, r4
 8007df2:	1c58      	adds	r0, r3, #1
 8007df4:	b2c0      	uxtb	r0, r0
    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8007df6:	2f23      	cmp	r7, #35	; 0x23
 8007df8:	bf08      	it	eq
 8007dfa:	4603      	moveq	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f43f af39 	beq.w	8007c74 <optiga_cmd_queue_scheduler+0xfc>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 8007e02:	4608      	mov	r0, r1
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8007e04:	4929      	ldr	r1, [pc, #164]	; (8007eac <optiga_cmd_queue_scheduler+0x334>)
 8007e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8007e0a:	b005      	add	sp, #20
 8007e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8007e10:	f7fd b952 	b.w	80050b8 <pal_os_event_register_callback_oneshot>
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8007e14:	4650      	mov	r0, sl
 8007e16:	f8cd c00c 	str.w	ip, [sp, #12]
 8007e1a:	9102      	str	r1, [sp, #8]
 8007e1c:	9201      	str	r2, [sp, #4]
 8007e1e:	f7ff fe8f 	bl	8007b40 <optiga_common_get_uint32>
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8007e22:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007e26:	9a01      	ldr	r2, [sp, #4]
 8007e28:	9902      	ldr	r1, [sp, #8]
 8007e2a:	4560      	cmp	r0, ip
 8007e2c:	f67f af72 	bls.w	8007d14 <optiga_cmd_queue_scheduler+0x19c>
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8007e30:	f896 3638 	ldrb.w	r3, [r6, #1592]	; 0x638
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8007e34:	2b22      	cmp	r3, #34	; 0x22
 8007e36:	d1b0      	bne.n	8007d9a <optiga_cmd_queue_scheduler+0x222>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8007e38:	f8d6 3630 	ldr.w	r3, [r6, #1584]	; 0x630
 8007e3c:	8a9b      	ldrh	r3, [r3, #20]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f47f af68 	bne.w	8007d14 <optiga_cmd_queue_scheduler+0x19c>
 8007e44:	e72e      	b.n	8007ca4 <optiga_cmd_queue_scheduler+0x12c>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8007e46:	4608      	mov	r0, r1
 8007e48:	4622      	mov	r2, r4
 8007e4a:	e7db      	b.n	8007e04 <optiga_cmd_queue_scheduler+0x28c>
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8007e4c:	8a91      	ldrh	r1, [r2, #20]
 8007e4e:	6813      	ldr	r3, [r2, #0]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	f47f af75 	bne.w	8007d40 <optiga_cmd_queue_scheduler+0x1c8>
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8007e56:	7a1e      	ldrb	r6, [r3, #8]
 8007e58:	2e10      	cmp	r6, #16
/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8007e5a:	f103 0008 	add.w	r0, r3, #8
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8007e5e:	d112      	bne.n	8007e86 <optiga_cmd_queue_scheduler+0x30e>
 8007e60:	7a59      	ldrb	r1, [r3, #9]
 8007e62:	2910      	cmp	r1, #16
 8007e64:	f103 0009 	add.w	r0, r3, #9
 8007e68:	d11c      	bne.n	8007ea4 <optiga_cmd_queue_scheduler+0x32c>
 8007e6a:	7a99      	ldrb	r1, [r3, #10]
 8007e6c:	2910      	cmp	r1, #16
 8007e6e:	f103 000a 	add.w	r0, r3, #10
 8007e72:	d115      	bne.n	8007ea0 <optiga_cmd_queue_scheduler+0x328>
 8007e74:	7ad9      	ldrb	r1, [r3, #11]
 8007e76:	2910      	cmp	r1, #16
 8007e78:	f103 000b 	add.w	r0, r3, #11
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8007e7c:	bf18      	it	ne
 8007e7e:	2303      	movne	r3, #3
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8007e80:	f43f af5e 	beq.w	8007d40 <optiga_cmd_queue_scheduler+0x1c8>
 8007e84:	e000      	b.n	8007e88 <optiga_cmd_queue_scheduler+0x310>
 8007e86:	460b      	mov	r3, r1
 8007e88:	eb05 0108 	add.w	r1, r5, r8
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8007e8c:	f443 4361 	orr.w	r3, r3, #57600	; 0xe100
 8007e90:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8007e94:	2610      	movs	r6, #16
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8007e96:	8293      	strh	r3, [r2, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8007e98:	7006      	strb	r6, [r0, #0]
 8007e9a:	f8d1 2630 	ldr.w	r2, [r1, #1584]	; 0x630
 8007e9e:	e74e      	b.n	8007d3e <optiga_cmd_queue_scheduler+0x1c6>
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e7f1      	b.n	8007e88 <optiga_cmd_queue_scheduler+0x310>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e7ef      	b.n	8007e88 <optiga_cmd_queue_scheduler+0x310>
 8007ea8:	080091a1 	.word	0x080091a1
 8007eac:	08007b79 	.word	0x08007b79
 8007eb0:	1010100f 	.word	0x1010100f

08007eb4 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 8007eb6:	7d86      	ldrb	r6, [r0, #22]
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 8007eb8:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 8007eba:	2e02      	cmp	r6, #2

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8007ebc:	4604      	mov	r4, r0
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 8007ebe:	d01a      	beq.n	8007ef6 <optiga_cmd_get_data_object_handler+0x42>
 8007ec0:	2e03      	cmp	r6, #3
 8007ec2:	d115      	bne.n	8007ef0 <optiga_cmd_get_data_object_handler+0x3c>
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
 8007ec4:	2300      	movs	r3, #0
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8007ec6:	6801      	ldr	r1, [r0, #0]
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
 8007ec8:	7603      	strb	r3, [r0, #24]
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8007eca:	7c8f      	ldrb	r7, [r1, #18]
 8007ecc:	2f00      	cmp	r7, #0
 8007ece:	d137      	bne.n	8007f40 <optiga_cmd_get_data_object_handler+0x8c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                }
                return_status = OPTIGA_CMD_ERROR;
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 8007ed0:	8c02      	ldrh	r2, [r0, #32]
 8007ed2:	f248 0308 	movw	r3, #32776	; 0x8008
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d054      	beq.n	8007f84 <optiga_cmd_get_data_object_handler+0xd0>
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8007eda:	88ce      	ldrh	r6, [r1, #6]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
 8007edc:	88ab      	ldrh	r3, [r5, #4]
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8007ede:	3e04      	subs	r6, #4
 8007ee0:	b2b6      	uxth	r6, r6

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
 8007ee2:	42b3      	cmp	r3, r6
 8007ee4:	d253      	bcs.n	8007f8e <optiga_cmd_get_data_object_handler+0xda>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8007ee6:	68eb      	ldr	r3, [r5, #12]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8007ee8:	f44f 7001 	mov.w	r0, #516	; 0x204
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8007eec:	801f      	strh	r7, [r3, #0]
                    break;
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8007ef0:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 8007ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8007ef6:	6800      	ldr	r0, [r0, #0]
 8007ef8:	8829      	ldrh	r1, [r5, #0]
 8007efa:	3016      	adds	r0, #22
 8007efc:	f7ff fe10 	bl	8007b20 <optiga_common_set_uint16>
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8007f00:	88ea      	ldrh	r2, [r5, #6]
 8007f02:	88ab      	ldrh	r3, [r5, #4]
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 8007f04:	7aa9      	ldrb	r1, [r5, #10]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	f240 6011 	movw	r0, #1553	; 0x611
 8007f0c:	4283      	cmp	r3, r0
 8007f0e:	bfa8      	it	ge
 8007f10:	4603      	movge	r3, r0
 8007f12:	b29f      	uxth	r7, r3
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 8007f14:	b1e9      	cbz	r1, 8007f52 <optiga_cmd_get_data_object_handler+0x9e>
 8007f16:	f04f 0e06 	mov.w	lr, #6
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 8007f1a:	6823      	ldr	r3, [r4, #0]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
 8007f1c:	7e61      	ldrb	r1, [r4, #25]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8007f1e:	882a      	ldrh	r2, [r5, #0]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8007f20:	74d9      	strb	r1, [r3, #19]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8007f22:	f24f 11c2 	movw	r1, #61890	; 0xf1c2
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 8007f26:	428a      	cmp	r2, r1
 8007f28:	bf14      	ite	ne
 8007f2a:	2281      	movne	r2, #129	; 0x81
 8007f2c:	2201      	moveq	r2, #1
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8007f2e:	2000      	movs	r0, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8007f30:	749a      	strb	r2, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8007f32:	755e      	strb	r6, [r3, #21]
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8007f34:	7518      	strb	r0, [r3, #20]
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f8a3 e004 	strh.w	lr, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 8007f3c:	812f      	strh	r7, [r5, #8]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 8007f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 8007f40:	88eb      	ldrh	r3, [r5, #6]
 8007f42:	b1b3      	cbz	r3, 8007f72 <optiga_cmd_get_data_object_handler+0xbe>
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8007f44:	7f43      	ldrb	r3, [r0, #29]
 8007f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f4a:	7743      	strb	r3, [r0, #29]
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                }
                return_status = OPTIGA_CMD_ERROR;
 8007f4c:	f240 2002 	movw	r0, #514	; 0x202
 8007f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
            {
                //offset
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8007f52:	8869      	ldrh	r1, [r5, #2]
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	4411      	add	r1, r2
 8007f58:	b289      	uxth	r1, r1
 8007f5a:	3018      	adds	r0, #24
 8007f5c:	f7ff fde0 	bl	8007b20 <optiga_common_set_uint16>
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                //length
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8007f60:	6820      	ldr	r0, [r4, #0]
 8007f62:	4639      	mov	r1, r7
 8007f64:	301a      	adds	r0, #26
 8007f66:	f7ff fddb 	bl	8007b20 <optiga_common_set_uint16>
 8007f6a:	2606      	movs	r6, #6
 8007f6c:	f04f 0e0a 	mov.w	lr, #10
 8007f70:	e7d3      	b.n	8007f1a <optiga_cmd_get_data_object_handler+0x66>
                //flag used to setting the received buffer length to 0, in case unexpected error
                else
                {
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8007f72:	7f42      	ldrb	r2, [r0, #29]
 8007f74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f78:	7742      	strb	r2, [r0, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8007f7a:	68ea      	ldr	r2, [r5, #12]
                }
                return_status = OPTIGA_CMD_ERROR;
 8007f7c:	f240 2002 	movw	r0, #514	; 0x202
                else
                {
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8007f80:	8013      	strh	r3, [r2, #0]
 8007f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                }
                return_status = OPTIGA_CMD_ERROR;
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
            {
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8007f84:	68eb      	ldr	r3, [r5, #12]
 8007f86:	88ea      	ldrh	r2, [r5, #6]
 8007f88:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                    break;
                }

                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8007f8e:	88eb      	ldrh	r3, [r5, #6]
 8007f90:	6928      	ldr	r0, [r5, #16]
 8007f92:	4632      	mov	r2, r6
 8007f94:	4418      	add	r0, r3
 8007f96:	3116      	adds	r1, #22
 8007f98:	f7fd f8a8 	bl	80050ec <pal_os_memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8007f9c:	88eb      	ldrh	r3, [r5, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8007f9e:	892a      	ldrh	r2, [r5, #8]
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8007fa0:	4433      	add	r3, r6
 8007fa2:	b29b      	uxth	r3, r3

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8007fa4:	42b2      	cmp	r2, r6
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8007fa6:	80eb      	strh	r3, [r5, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8007fa8:	d806      	bhi.n	8007fb8 <optiga_cmd_get_data_object_handler+0x104>
 8007faa:	88aa      	ldrh	r2, [r5, #4]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d003      	beq.n	8007fb8 <optiga_cmd_get_data_object_handler+0x104>
                    p_optiga_read_data->accumulated_size = 0;
                    p_optiga_read_data->last_read_size = 0;
                }
                else
                {
                    me->chaining_ongoing = TRUE;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	7623      	strb	r3, [r4, #24]
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
                return_status = OPTIGA_LIB_SUCCESS;
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                p_optiga_read_data->accumulated_size += data_read;

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8007fb8:	68e9      	ldr	r1, [r5, #12]
                    p_optiga_read_data->accumulated_size = 0;
 8007fba:	2200      	movs	r2, #0
                p_optiga_read_data->accumulated_size += data_read;

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8007fbc:	800b      	strh	r3, [r1, #0]
                else
                {
                    me->chaining_ongoing = TRUE;
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
                return_status = OPTIGA_LIB_SUCCESS;
 8007fbe:	4610      	mov	r0, r2

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
                    p_optiga_read_data->accumulated_size = 0;
 8007fc0:	80ea      	strh	r2, [r5, #6]
                    p_optiga_read_data->last_read_size = 0;
 8007fc2:	812a      	strh	r2, [r5, #8]
 8007fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc6:	bf00      	nop

08007fc8 <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007fca:	7d83      	ldrb	r3, [r0, #22]
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
 8007fcc:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d00e      	beq.n	8007ff0 <optiga_cmd_set_data_object_handler+0x28>
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d109      	bne.n	8007fea <optiga_cmd_set_data_object_handler+0x22>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8007fd6:	6803      	ldr	r3, [r0, #0]
 8007fd8:	7c9b      	ldrb	r3, [r3, #18]
 8007fda:	b363      	cbz	r3, 8008036 <optiga_cmd_set_data_object_handler+0x6e>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8007fdc:	7f43      	ldrb	r3, [r0, #29]
 8007fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe2:	7743      	strb	r3, [r0, #29]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8007fe4:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 8007fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8007fea:	f240 2002 	movw	r0, #514	; 0x202
 8007fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff0:	4604      	mov	r4, r0
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
 8007ff2:	2300      	movs	r3, #0
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8007ff4:	6800      	ldr	r0, [r0, #0]
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
 8007ff6:	7623      	strb	r3, [r4, #24]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8007ff8:	8829      	ldrh	r1, [r5, #0]
 8007ffa:	3016      	adds	r0, #22
 8007ffc:	f7ff fd90 	bl	8007b20 <optiga_common_set_uint16>
                                     p_optiga_write_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            //offset
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8008000:	886b      	ldrh	r3, [r5, #2]
 8008002:	88e9      	ldrh	r1, [r5, #6]
 8008004:	6820      	ldr	r0, [r4, #0]
 8008006:	4419      	add	r1, r3
 8008008:	b289      	uxth	r1, r1
 800800a:	3018      	adds	r0, #24
 800800c:	f7ff fd88 	bl	8007b20 <optiga_common_set_uint16>
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
 8008010:	88ab      	ldrh	r3, [r5, #4]
 8008012:	88ea      	ldrh	r2, [r5, #6]
 8008014:	f240 610d 	movw	r1, #1549	; 0x60d
 8008018:	1a9a      	subs	r2, r3, r2
 800801a:	428a      	cmp	r2, r1
 800801c:	bfa8      	it	ge
 800801e:	460a      	movge	r2, r1
 8008020:	b296      	uxth	r6, r2
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8008022:	f106 0708 	add.w	r7, r6, #8
 8008026:	b2bf      	uxth	r7, r7
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8008028:	f240 6315 	movw	r3, #1557	; 0x615
 800802c:	429f      	cmp	r7, r3
 800802e:	d904      	bls.n	800803a <optiga_cmd_set_data_object_handler+0x72>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8008030:	f44f 7001 	mov.w	r0, #516	; 0x204
        break;
        default:
            break;
    }
    return (return_status);
}
 8008034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            {
                me->chaining_ongoing = TRUE;
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
            }
            return_status = OPTIGA_LIB_SUCCESS;
 8008036:	2000      	movs	r0, #0
 8008038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800803a:	6823      	ldr	r3, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 800803c:	7e61      	ldrb	r1, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 800803e:	74d9      	strb	r1, [r3, #19]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 8008040:	1d32      	adds	r2, r6, #4
 8008042:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008044:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008046:	2182      	movs	r1, #130	; 0x82
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008048:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 800804a:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800804c:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
            //data to be written
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
 800804e:	7e63      	ldrb	r3, [r4, #25]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d110      	bne.n	8008076 <optiga_cmd_set_data_object_handler+0xae>
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	7baa      	ldrb	r2, [r5, #14]
 8008058:	769a      	strb	r2, [r3, #26]
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 800805a:	88ea      	ldrh	r2, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 800805c:	88ab      	ldrh	r3, [r5, #4]
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 800805e:	6821      	ldr	r1, [r4, #0]
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 8008060:	4432      	add	r2, r6
 8008062:	b292      	uxth	r2, r2

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 8008064:	4293      	cmp	r3, r2
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 8008066:	80ea      	strh	r2, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 8008068:	808f      	strh	r7, [r1, #4]

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 800806a:	d0e4      	beq.n	8008036 <optiga_cmd_set_data_object_handler+0x6e>
            {
                me->chaining_ongoing = TRUE;
 800806c:	2301      	movs	r3, #1
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 800806e:	2000      	movs	r0, #0
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
            {
                me->chaining_ongoing = TRUE;
 8008070:	7623      	strb	r3, [r4, #24]
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 8008072:	7660      	strb	r0, [r4, #25]
 8008074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
            }
            else
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008076:	6820      	ldr	r0, [r4, #0]
 8008078:	88eb      	ldrh	r3, [r5, #6]
 800807a:	68a9      	ldr	r1, [r5, #8]
 800807c:	301a      	adds	r0, #26
 800807e:	4419      	add	r1, r3
 8008080:	4632      	mov	r2, r6
 8008082:	f7fd f833 	bl	80050ec <pal_os_memcpy>
 8008086:	e7e8      	b.n	800805a <optiga_cmd_set_data_object_handler+0x92>

08008088 <optiga_cmd_get_random_handler>:
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8008088:	7d83      	ldrb	r3, [r0, #22]
 800808a:	2b02      	cmp	r3, #2
#if defined (OPTIGA_CRYPT_RANDOM_ENABLED) || defined (OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED) || defined (OPTIGA_CRYPT_GENERATE_AUTH_CODE_ENABLED)
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4604      	mov	r4, r0
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
 8008090:	6886      	ldr	r6, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8008092:	d00e      	beq.n	80080b2 <optiga_cmd_get_random_handler+0x2a>
 8008094:	2b03      	cmp	r3, #3
 8008096:	d109      	bne.n	80080ac <optiga_cmd_get_random_handler+0x24>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for get random command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8008098:	6801      	ldr	r1, [r0, #0]
 800809a:	7c8d      	ldrb	r5, [r1, #18]
 800809c:	b315      	cbz	r5, 80080e4 <optiga_cmd_get_random_handler+0x5c>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800809e:	7f43      	ldrb	r3, [r0, #29]
 80080a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a4:	7743      	strb	r3, [r0, #29]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80080a6:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80080ac:	f240 2002 	movw	r0, #514	; 0x202
 80080b0:	bd70      	pop	{r4, r5, r6, pc}
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");
            /// APDU header size + length of random
            /// OID size in case of param 0x04
            /// 0x41, Length and prepending optional data
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            total_apdu_length += ((TRUE == p_random_params->store_in_session) ?
 80080b2:	7b33      	ldrb	r3, [r6, #12]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d01f      	beq.n	80080f8 <optiga_cmd_get_random_handler+0x70>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80080b8:	6820      	ldr	r0, [r4, #0]
 80080ba:	8831      	ldrh	r1, [r6, #0]
 80080bc:	3016      	adds	r0, #22
 80080be:	f7ff fd2f 	bl	8007b20 <optiga_common_set_uint16>
                                     p_random_params->random_data_length);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            if (TRUE == p_random_params->store_in_session)
 80080c2:	7b33      	ldrb	r3, [r6, #12]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d021      	beq.n	800810c <optiga_cmd_get_random_handler+0x84>
 80080c8:	2002      	movs	r0, #2
 80080ca:	2100      	movs	r1, #0
 80080cc:	2206      	movs	r2, #6
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80080ce:	6823      	ldr	r3, [r4, #0]
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
 80080d0:	7e65      	ldrb	r5, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80080d2:	74dd      	strb	r5, [r3, #19]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80080d4:	258c      	movs	r5, #140	; 0x8c
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80080d6:	7558      	strb	r0, [r3, #21]
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80080d8:	7519      	strb	r1, [r3, #20]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80080da:	749d      	strb	r5, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80080dc:	6823      	ldr	r3, [r4, #0]

            return_status = OPTIGA_LIB_SUCCESS;
 80080de:	2000      	movs	r0, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80080e0:	809a      	strh	r2, [r3, #4]

            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if (OPTIGA_CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET != (uint8_t)me->cmd_param)
 80080e4:	7e43      	ldrb	r3, [r0, #25]
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d02e      	beq.n	8008148 <optiga_cmd_get_random_handler+0xc0>
            {
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_random_params->random_data,
 80080ea:	6870      	ldr	r0, [r6, #4]
 80080ec:	8832      	ldrh	r2, [r6, #0]
 80080ee:	3116      	adds	r1, #22
 80080f0:	f7fc fffc 	bl	80050ec <pal_os_memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              p_random_params->random_data_length);
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 80080f4:	4628      	mov	r0, r5
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");
            /// APDU header size + length of random
            /// OID size in case of param 0x04
            /// 0x41, Length and prepending optional data
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            total_apdu_length += ((TRUE == p_random_params->store_in_session) ?
 80080f8:	8873      	ldrh	r3, [r6, #2]
 80080fa:	330b      	adds	r3, #11
                                (OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_TAG_LENGTH_SIZE + p_random_params->optional_data_length) : 0x00);

            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	f240 6215 	movw	r2, #1557	; 0x615
 8008102:	4293      	cmp	r3, r2
 8008104:	d9d8      	bls.n	80080b8 <optiga_cmd_get_random_handler+0x30>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8008106:	f44f 7001 	mov.w	r0, #516	; 0x204
 800810a:	bd70      	pop	{r4, r5, r6, pc}
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            if (TRUE == p_random_params->store_in_session)
            {
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	8aa1      	ldrh	r1, [r4, #20]
 8008110:	3018      	adds	r0, #24
 8008112:	f7ff fd05 	bl	8007b20 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                /// TLV formation for key usage
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
 8008116:	68b3      	ldr	r3, [r6, #8]
 8008118:	b1db      	cbz	r3, 8008152 <optiga_cmd_get_random_handler+0xca>
 800811a:	8873      	ldrh	r3, [r6, #2]
 800811c:	0a18      	lsrs	r0, r3, #8
 800811e:	b2db      	uxtb	r3, r3
                                              ((NULL != p_random_params->optional_data) ?
                                              p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
 8008120:	6822      	ldr	r2, [r4, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008122:	2141      	movs	r1, #65	; 0x41
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008124:	76d0      	strb	r0, [r2, #27]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008126:	7713      	strb	r3, [r2, #28]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008128:	7691      	strb	r1, [r2, #26]
                                              ((NULL != p_random_params->optional_data) ?
                                              p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                if ((NULL != p_random_params->optional_data))
 800812a:	68b1      	ldr	r1, [r6, #8]
 800812c:	b171      	cbz	r1, 800814c <optiga_cmd_get_random_handler+0xc4>
                {
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	8872      	ldrh	r2, [r6, #2]
 8008132:	301d      	adds	r0, #29
 8008134:	f7fc ffda 	bl	80050ec <pal_os_memcpy>
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
 8008138:	8873      	ldrh	r3, [r6, #2]
 800813a:	1dd8      	adds	r0, r3, #7
 800813c:	b280      	uxth	r0, r0
 800813e:	330b      	adds	r3, #11
 8008140:	0a01      	lsrs	r1, r0, #8
 8008142:	b29a      	uxth	r2, r3
 8008144:	b2c0      	uxtb	r0, r0
 8008146:	e7c2      	b.n	80080ce <optiga_cmd_get_random_handler+0x46>
                pal_os_memcpy(p_random_params->random_data,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              p_random_params->random_data_length);
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008148:	4628      	mov	r0, r5
        default:
            break;
    }

    return (return_status);
}
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	2007      	movs	r0, #7
 800814e:	220b      	movs	r2, #11
 8008150:	e7bd      	b.n	80080ce <optiga_cmd_get_random_handler+0x46>
 8008152:	4618      	mov	r0, r3
 8008154:	e7e4      	b.n	8008120 <optiga_cmd_get_random_handler+0x98>
 8008156:	bf00      	nop

08008158 <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 8008158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 800815c:	7d83      	ldrb	r3, [r0, #22]
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 800815e:	6884      	ldr	r4, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8008160:	2b02      	cmp	r3, #2
 8008162:	d00c      	beq.n	800817e <optiga_cmd_verify_sign_handler+0x26>
 8008164:	2b03      	cmp	r3, #3
 8008166:	d106      	bne.n	8008176 <optiga_cmd_verify_sign_handler+0x1e>
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8008168:	6803      	ldr	r3, [r0, #0]
 800816a:	7c9b      	ldrb	r3, [r3, #18]
 800816c:	2bff      	cmp	r3, #255	; 0xff
 800816e:	d01e      	beq.n	80081ae <optiga_cmd_verify_sign_handler+0x56>
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008170:	2000      	movs	r0, #0
        default:
            break;
    }

    return (return_status);
}
 8008172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8008176:	f240 2002 	movw	r0, #514	; 0x202
 800817a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800817e:	89a3      	ldrh	r3, [r4, #12]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8008180:	7925      	ldrb	r5, [r4, #4]
 8008182:	7ba1      	ldrb	r1, [r4, #14]
 8008184:	330a      	adds	r3, #10
 8008186:	b29b      	uxth	r3, r3
 8008188:	b2aa      	uxth	r2, r5
 800818a:	b959      	cbnz	r1, 80081a4 <optiga_cmd_verify_sign_handler+0x4c>
 800818c:	2105      	movs	r1, #5
 800818e:	4413      	add	r3, r2
 8008190:	440b      	add	r3, r1
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8008192:	b29b      	uxth	r3, r3
 8008194:	f240 6215 	movw	r2, #1557	; 0x615
 8008198:	4293      	cmp	r3, r2
 800819a:	d910      	bls.n	80081be <optiga_cmd_verify_sign_handler+0x66>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800819c:	f44f 7001 	mov.w	r0, #516	; 0x204
 80081a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
 80081a4:	6921      	ldr	r1, [r4, #16]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 80081a6:	8889      	ldrh	r1, [r1, #4]
 80081a8:	3109      	adds	r1, #9
 80081aa:	b289      	uxth	r1, r1
 80081ac:	e7ef      	b.n	800818e <optiga_cmd_verify_sign_handler+0x36>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80081ae:	7f43      	ldrb	r3, [r0, #29]
 80081b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b4:	7743      	strb	r3, [r0, #29]
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80081b6:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 80081ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
 80081be:	6803      	ldr	r3, [r0, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80081c0:	2701      	movs	r7, #1
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80081c2:	f04f 0800 	mov.w	r8, #0
    buffer[start_position++] = (uint8_t )(tag_length);
 80081c6:	761d      	strb	r5, [r3, #24]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80081c8:	759f      	strb	r7, [r3, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80081ca:	f883 8017 	strb.w	r8, [r3, #23]
 80081ce:	4606      	mov	r6, r0
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80081d0:	6800      	ldr	r0, [r0, #0]
 80081d2:	6821      	ldr	r1, [r4, #0]
 80081d4:	7922      	ldrb	r2, [r4, #4]
 80081d6:	3019      	adds	r0, #25
 80081d8:	f7fc ff88 	bl	80050ec <pal_os_memcpy>
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
 80081dc:	7923      	ldrb	r3, [r4, #4]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
 80081de:	6832      	ldr	r2, [r6, #0]
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 80081e0:	89a1      	ldrh	r1, [r4, #12]
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
 80081e2:	320d      	adds	r2, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80081e4:	f103 050d 	add.w	r5, r3, #13
    buffer[start_position++] = (uint8_t )(tag_length);
 80081e8:	f103 000e 	add.w	r0, r3, #14
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80081ec:	f103 0c0c 	add.w	ip, r3, #12
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80081f0:	ea4f 2e11 	mov.w	lr, r1, lsr #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80081f4:	f04f 0902 	mov.w	r9, #2
 80081f8:	f802 900c 	strb.w	r9, [r2, ip]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80081fc:	f802 e005 	strb.w	lr, [r2, r5]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008200:	5411      	strb	r1, [r2, r0]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008202:	6830      	ldr	r0, [r6, #0]
 8008204:	89a2      	ldrh	r2, [r4, #12]
 8008206:	68a1      	ldr	r1, [r4, #8]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008208:	f103 050f 	add.w	r5, r3, #15
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800820c:	4428      	add	r0, r5
 800820e:	300d      	adds	r0, #13
 8008210:	f7fc ff6c 	bl	80050ec <pal_os_memcpy>
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
 8008214:	89a3      	ldrh	r3, [r4, #12]

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 8008216:	7ba2      	ldrb	r2, [r4, #14]
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
 8008218:	441d      	add	r5, r3
 800821a:	b2ad      	uxth	r5, r5
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 800821c:	6833      	ldr	r3, [r6, #0]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 800821e:	2a00      	cmp	r2, #0
 8008220:	d042      	beq.n	80082a8 <optiga_cmd_verify_sign_handler+0x150>
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008222:	1c69      	adds	r1, r5, #1
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008224:	1caa      	adds	r2, r5, #2
            else
            {
                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 8008226:	330d      	adds	r3, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008228:	b289      	uxth	r1, r1
    buffer[start_position++] = (uint8_t )(tag_length);
 800822a:	b292      	uxth	r2, r2
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800822c:	2005      	movs	r0, #5
 800822e:	5558      	strb	r0, [r3, r5]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008230:	f803 8001 	strb.w	r8, [r3, r1]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008234:	549f      	strb	r7, [r3, r2]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 8008236:	6831      	ldr	r1, [r6, #0]
 8008238:	6922      	ldr	r2, [r4, #16]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 800823a:	1ceb      	adds	r3, r5, #3
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 800823c:	fa11 f383 	uxtah	r3, r1, r3
 8008240:	7992      	ldrb	r2, [r2, #6]
 8008242:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8008244:	6922      	ldr	r2, [r4, #16]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
 8008246:	6833      	ldr	r3, [r6, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8008248:	8897      	ldrh	r7, [r2, #4]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 800824a:	1d28      	adds	r0, r5, #4
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800824c:	1d69      	adds	r1, r5, #5
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800824e:	1daa      	adds	r2, r5, #6

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
 8008250:	330d      	adds	r3, #13
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008252:	b280      	uxth	r0, r0
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008254:	b289      	uxth	r1, r1
    buffer[start_position++] = (uint8_t )(tag_length);
 8008256:	b292      	uxth	r2, r2
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008258:	ea4f 2e17 	mov.w	lr, r7, lsr #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800825c:	f04f 0c06 	mov.w	ip, #6
 8008260:	f803 c000 	strb.w	ip, [r3, r0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008264:	f803 e001 	strb.w	lr, [r3, r1]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008268:	549f      	strb	r7, [r3, r2]
 800826a:	3507      	adds	r5, #7
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800826c:	6830      	ldr	r0, [r6, #0]
                              p_optiga_verify_sign->public_key->public_key,
 800826e:	6923      	ldr	r3, [r4, #16]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008270:	b2ad      	uxth	r5, r5
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008272:	4428      	add	r0, r5
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	889a      	ldrh	r2, [r3, #4]
 8008278:	300d      	adds	r0, #13
 800827a:	f7fc ff37 	bl	80050ec <pal_os_memcpy>
                              p_optiga_verify_sign->public_key->public_key,
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	889b      	ldrh	r3, [r3, #4]
 8008282:	441d      	add	r5, r3
 8008284:	b2ad      	uxth	r5, r5

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8008286:	6833      	ldr	r3, [r6, #0]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8008288:	7e71      	ldrb	r1, [r6, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 800828a:	74d9      	strb	r1, [r3, #19]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 800828c:	f1a5 0209 	sub.w	r2, r5, #9
 8008290:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008292:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008294:	21b2      	movs	r1, #178	; 0xb2
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008296:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8008298:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800829a:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800829c:	6833      	ldr	r3, [r6, #0]
 800829e:	3d05      	subs	r5, #5
 80082a0:	809d      	strh	r5, [r3, #4]

            return_status = OPTIGA_LIB_SUCCESS;
 80082a2:	2000      	movs	r0, #0
        }
        break;
 80082a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80082a8:	19e8      	adds	r0, r5, r7
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80082aa:	eb05 0109 	add.w	r1, r5, r9
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 80082ae:	330d      	adds	r3, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80082b0:	b280      	uxth	r0, r0
    buffer[start_position++] = (uint8_t )(tag_length);
 80082b2:	b289      	uxth	r1, r1
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80082b4:	2704      	movs	r7, #4
 80082b6:	555f      	strb	r7, [r3, r5]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80082b8:	541a      	strb	r2, [r3, r0]
    buffer[start_position++] = (uint8_t )(tag_length);
 80082ba:	f803 9001 	strb.w	r9, [r3, r1]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80082be:	6830      	ldr	r0, [r6, #0]
 80082c0:	8aa1      	ldrh	r1, [r4, #20]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80082c2:	1ceb      	adds	r3, r5, #3
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80082c4:	fa10 f083 	uxtah	r0, r0, r3
 80082c8:	300d      	adds	r0, #13
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80082ca:	3505      	adds	r5, #5
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80082cc:	f7ff fc28 	bl	8007b20 <optiga_common_set_uint16>
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80082d0:	b2ad      	uxth	r5, r5
 80082d2:	e7d8      	b.n	8008286 <optiga_cmd_verify_sign_handler+0x12e>

080082d4 <optiga_cmd_encrypt_asym_handler>:

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
 80082d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
 80082d8:	7d83      	ldrb	r3, [r0, #22]
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
 80082da:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
 80082dc:	2b02      	cmp	r3, #2

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
 80082de:	b083      	sub	sp, #12
 80082e0:	4604      	mov	r4, r0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
 80082e2:	d017      	beq.n	8008314 <optiga_cmd_encrypt_asym_handler+0x40>
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d110      	bne.n	800830a <optiga_cmd_encrypt_asym_handler+0x36>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for asymmetric encryption command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80082e8:	6800      	ldr	r0, [r0, #0]
 80082ea:	7c86      	ldrb	r6, [r0, #18]
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	f000 808f 	beq.w	8008410 <optiga_cmd_encrypt_asym_handler+0x13c>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 80082f2:	686b      	ldr	r3, [r5, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	801a      	strh	r2, [r3, #0]
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80082f8:	7f63      	ldrb	r3, [r4, #29]
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80082fa:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80082fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008302:	7763      	strb	r3, [r4, #29]
        default:
            break;
    }

    return (return_status);
}
 8008304:	b003      	add	sp, #12
 8008306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800830a:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 800830e:	b003      	add	sp, #12
 8008310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric encryption command..");
            // APDU header length + default TLV of OID of session + default TLV of OID of public key
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_TAG_LENGTH_SIZE +
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
 8008314:	68ab      	ldr	r3, [r5, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 809c 	beq.w	8008454 <optiga_cmd_encrypt_asym_handler+0x180>
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
 800831c:	8829      	ldrh	r1, [r5, #0]
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
 800831e:	7b2a      	ldrb	r2, [r5, #12]
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_TAG_LENGTH_SIZE +
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
 8008320:	f101 030c 	add.w	r3, r1, #12
 8008324:	b29b      	uxth	r3, r3
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
 8008326:	b122      	cbz	r2, 8008332 <optiga_cmd_encrypt_asym_handler+0x5e>
            {
                // Add TLV of public key and reduce 1 because alg id is only 1 byte
                total_apdu_length += (OPTIGA_CMD_TAG_LENGTH_SIZE +(PUBLIC_KEY_HOST->length));
 8008328:	692a      	ldr	r2, [r5, #16]
 800832a:	8892      	ldrh	r2, [r2, #4]
 800832c:	3202      	adds	r2, #2
                total_apdu_length--;
 800832e:	4413      	add	r3, r2
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8008330:	b29b      	uxth	r3, r3
 8008332:	f240 6215 	movw	r2, #1557	; 0x615
 8008336:	4293      	cmp	r3, r2
 8008338:	d907      	bls.n	800834a <optiga_cmd_encrypt_asym_handler+0x76>
            {
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 800833a:	686b      	ldr	r3, [r5, #4]
 800833c:	2200      	movs	r2, #0
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800833e:	f44f 7001 	mov.w	r0, #516	; 0x204
                total_apdu_length += (OPTIGA_CMD_TAG_LENGTH_SIZE +(PUBLIC_KEY_HOST->length));
                total_apdu_length--;
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 8008342:	801a      	strh	r2, [r3, #0]
        default:
            break;
    }

    return (return_status);
}
 8008344:	b003      	add	sp, #12
 8008346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else
            {
                //TLV formation for message
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_MESSAGE_TAG,
                                              p_optiga_encrypt_asym->message_length,
                                              me->p_optiga->optiga_comms_buffer,
 800834a:	6823      	ldr	r3, [r4, #0]
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800834c:	0a08      	lsrs	r0, r1, #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800834e:	2261      	movs	r2, #97	; 0x61
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008350:	7619      	strb	r1, [r3, #24]
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008352:	75d8      	strb	r0, [r3, #23]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008354:	759a      	strb	r2, [r3, #22]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_MESSAGE_TAG,
                                              p_optiga_encrypt_asym->message_length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	68a9      	ldr	r1, [r5, #8]
 800835a:	882a      	ldrh	r2, [r5, #0]
 800835c:	3019      	adds	r0, #25
 800835e:	f7fc fec5 	bl	80050ec <pal_os_memcpy>
                                p_optiga_encrypt_asym->message,
                                p_optiga_encrypt_asym->message_length);
                index_for_data += p_optiga_encrypt_asym->message_length;
 8008362:	882a      	ldrh	r2, [r5, #0]
 8008364:	f102 030c 	add.w	r3, r2, #12
 8008368:	f102 010f 	add.w	r1, r2, #15
 800836c:	f102 070d 	add.w	r7, r2, #13
 8008370:	f102 000e 	add.w	r0, r2, #14
 8008374:	b29b      	uxth	r3, r3
 8008376:	3211      	adds	r2, #17
 8008378:	469e      	mov	lr, r3
 800837a:	b289      	uxth	r1, r1
 800837c:	b2bf      	uxth	r7, r7
 800837e:	b280      	uxth	r0, r0
 8008380:	b296      	uxth	r6, r2

            }

            // key for encryption

            if (p_optiga_encrypt_asym->public_key_source_type)
 8008382:	7b2a      	ldrb	r2, [r5, #12]
 8008384:	2a00      	cmp	r2, #0
 8008386:	d052      	beq.n	800842e <optiga_cmd_encrypt_asym_handler+0x15a>
            {

                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	320d      	adds	r2, #13
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 800838c:	f04f 0c01 	mov.w	ip, #1
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008390:	f04f 0905 	mov.w	r9, #5
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008394:	f04f 0800 	mov.w	r8, #0
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008398:	f802 900e 	strb.w	r9, [r2, lr]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800839c:	f802 8007 	strb.w	r8, [r2, r7]
    buffer[start_position++] = (uint8_t )(tag_length);
 80083a0:	f802 c000 	strb.w	ip, [r2, r0]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	6928      	ldr	r0, [r5, #16]
 80083a8:	4411      	add	r1, r2
 80083aa:	7982      	ldrb	r2, [r0, #6]
 80083ac:	734a      	strb	r2, [r1, #13]

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
 80083ae:	6929      	ldr	r1, [r5, #16]
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
 80083b0:	6822      	ldr	r2, [r4, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
 80083b2:	888f      	ldrh	r7, [r1, #4]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
 80083b4:	1d18      	adds	r0, r3, #4
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80083b6:	1d99      	adds	r1, r3, #6

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
 80083b8:	320d      	adds	r2, #13
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80083ba:	b280      	uxth	r0, r0
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80083bc:	b289      	uxth	r1, r1
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80083be:	ea4f 2e17 	mov.w	lr, r7, lsr #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80083c2:	f04f 0c06 	mov.w	ip, #6
 80083c6:	f802 c000 	strb.w	ip, [r2, r0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80083ca:	f802 e006 	strb.w	lr, [r2, r6]
    buffer[start_position++] = (uint8_t )(tag_length);
 80083ce:	5457      	strb	r7, [r2, r1]
 80083d0:	3307      	adds	r3, #7
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80083d2:	6820      	ldr	r0, [r4, #0]
                              PUBLIC_KEY_HOST->public_key,
 80083d4:	692a      	ldr	r2, [r5, #16]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80083d6:	b29e      	uxth	r6, r3
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80083d8:	4430      	add	r0, r6
 80083da:	6811      	ldr	r1, [r2, #0]
 80083dc:	8892      	ldrh	r2, [r2, #4]
 80083de:	300d      	adds	r0, #13
 80083e0:	f7fc fe84 	bl	80050ec <pal_os_memcpy>
                              PUBLIC_KEY_HOST->public_key,
                              PUBLIC_KEY_HOST->length);

                index_for_data += PUBLIC_KEY_HOST->length;
 80083e4:	692b      	ldr	r3, [r5, #16]
 80083e6:	889b      	ldrh	r3, [r3, #4]
 80083e8:	441e      	add	r6, r3
 80083ea:	b2b6      	uxth	r6, r6

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80083ec:	6823      	ldr	r3, [r4, #0]
                index_for_data += OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
 80083ee:	7e61      	ldrb	r1, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80083f0:	74d9      	strb	r1, [r3, #19]
                index_for_data += OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
 80083f2:	f1a6 0209 	sub.w	r2, r6, #9
 80083f6:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80083f8:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80083fa:	219e      	movs	r1, #158	; 0x9e
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80083fc:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80083fe:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008400:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	3e05      	subs	r6, #5

            return_status = OPTIGA_LIB_SUCCESS;
 8008406:	2000      	movs	r0, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8008408:	809e      	strh	r6, [r3, #4]
        default:
            break;
    }

    return (return_status);
}
 800840a:	b003      	add	sp, #12
 800840c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
 8008410:	f10d 0106 	add.w	r1, sp, #6
 8008414:	3017      	adds	r0, #23
 8008416:	f7ff fb9f 	bl	8007b58 <optiga_common_get_uint16>
                                     &out_data_size);
            if ((*(p_optiga_encrypt_asym->processed_message_length )) < out_data_size)
 800841a:	686b      	ldr	r3, [r5, #4]
 800841c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008420:	8819      	ldrh	r1, [r3, #0]
 8008422:	4291      	cmp	r1, r2
 8008424:	d238      	bcs.n	8008498 <optiga_cmd_encrypt_asym_handler+0x1c4>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 8008426:	801e      	strh	r6, [r3, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8008428:	f44f 7001 	mov.w	r0, #516	; 0x204
                break;
 800842c:	e76f      	b.n	800830e <optiga_cmd_encrypt_asym_handler+0x3a>
            else
            {
                //TLV for public key from OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	330d      	adds	r3, #13
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008432:	f04f 0804 	mov.w	r8, #4
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008436:	f04f 0c02 	mov.w	ip, #2
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800843a:	f803 800e 	strb.w	r8, [r3, lr]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800843e:	55da      	strb	r2, [r3, r7]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008440:	f803 c000 	strb.w	ip, [r3, r0]
                                              OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	692b      	ldr	r3, [r5, #16]
 8008448:	4408      	add	r0, r1
 800844a:	300d      	adds	r0, #13
 800844c:	8819      	ldrh	r1, [r3, #0]
 800844e:	f7ff fb67 	bl	8007b20 <optiga_common_set_uint16>
 8008452:	e7cb      	b.n	80083ec <optiga_cmd_encrypt_asym_handler+0x118>
            if (NULL != p_optiga_encrypt_asym->message)
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
 8008454:	7b2b      	ldrb	r3, [r5, #12]
 8008456:	b9ab      	cbnz	r3, 8008484 <optiga_cmd_encrypt_asym_handler+0x1b0>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // message for encryption
            if ((NULL == p_optiga_encrypt_asym->message) && (0 == p_optiga_encrypt_asym->message_length))
 8008458:	8829      	ldrh	r1, [r5, #0]
 800845a:	2900      	cmp	r1, #0
 800845c:	f47f af75 	bne.w	800834a <optiga_cmd_encrypt_asym_handler+0x76>
            {
                //TLV formation for session
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_SESSION_OID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 8008460:	6823      	ldr	r3, [r4, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008462:	2202      	movs	r2, #2
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008464:	75d9      	strb	r1, [r3, #23]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008466:	759a      	strb	r2, [r3, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008468:	761a      	strb	r2, [r3, #24]
                                              OPTIGA_CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data ), (me->session_oid));
 800846a:	6820      	ldr	r0, [r4, #0]
 800846c:	8aa1      	ldrh	r1, [r4, #20]
 800846e:	3019      	adds	r0, #25
 8008470:	f7ff fb56 	bl	8007b20 <optiga_common_set_uint16>
                index_for_data += 2;
 8008474:	f04f 0e0e 	mov.w	lr, #14
 8008478:	4673      	mov	r3, lr
 800847a:	2613      	movs	r6, #19
 800847c:	2010      	movs	r0, #16
 800847e:	270f      	movs	r7, #15
 8008480:	2111      	movs	r1, #17
 8008482:	e77e      	b.n	8008382 <optiga_cmd_encrypt_asym_handler+0xae>
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
            {
                // Add TLV of public key and reduce 1 because alg id is only 1 byte
                total_apdu_length += (OPTIGA_CMD_TAG_LENGTH_SIZE +(PUBLIC_KEY_HOST->length));
 8008484:	692b      	ldr	r3, [r5, #16]
 8008486:	889b      	ldrh	r3, [r3, #4]
                total_apdu_length--;
 8008488:	3310      	adds	r3, #16
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800848a:	b29b      	uxth	r3, r3
 800848c:	f240 6215 	movw	r2, #1557	; 0x615
 8008490:	4293      	cmp	r3, r2
 8008492:	f63f af52 	bhi.w	800833a <optiga_cmd_encrypt_asym_handler+0x66>
 8008496:	e7df      	b.n	8008458 <optiga_cmd_encrypt_asym_handler+0x184>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8008498:	6821      	ldr	r1, [r4, #0]
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
 800849a:	6968      	ldr	r0, [r5, #20]
 800849c:	3119      	adds	r1, #25
 800849e:	f7fc fe25 	bl	80050ec <pal_os_memcpy>
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                          OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            *(p_optiga_encrypt_asym->processed_message_length) = out_data_size ;
 80084a2:	686b      	ldr	r3, [r5, #4]
 80084a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80084a8:	801a      	strh	r2, [r3, #0]
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric encryption command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 80084aa:	4630      	mov	r0, r6
        }
        break;
 80084ac:	e72f      	b.n	800830e <optiga_cmd_encrypt_asym_handler+0x3a>
 80084ae:	bf00      	nop

080084b0 <optiga_cmd_calc_hash_handler>:

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 80084b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 80084b2:	7d83      	ldrb	r3, [r0, #22]
/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
 80084b4:	6885      	ldr	r5, [r0, #8]
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 80084b6:	2b02      	cmp	r3, #2

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 80084b8:	b083      	sub	sp, #12
 80084ba:	4604      	mov	r4, r0
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 80084bc:	d02a      	beq.n	8008514 <optiga_cmd_calc_hash_handler+0x64>
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d003      	beq.n	80084ca <optiga_cmd_calc_hash_handler+0x1a>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80084c2:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 80084c6:	b003      	add	sp, #12
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate hash command...");
            // check for response status code
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80084ca:	6803      	ldr	r3, [r0, #0]
 80084cc:	7c9a      	ldrb	r2, [r3, #18]
 80084ce:	2aff      	cmp	r2, #255	; 0xff
 80084d0:	d069      	beq.n	80085a6 <optiga_cmd_calc_hash_handler+0xf6>
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            // Copy the digest to buffer, if chaining is false and digest out buffer is not NULL
            if((FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_out_digest))
 80084d2:	7e07      	ldrb	r7, [r0, #24]
 80084d4:	2f00      	cmp	r7, #0
 80084d6:	f040 80ab 	bne.w	8008630 <optiga_cmd_calc_hash_handler+0x180>
 80084da:	696e      	ldr	r6, [r5, #20]
 80084dc:	2e00      	cmp	r6, #0
 80084de:	f000 80d0 	beq.w	8008682 <optiga_cmd_calc_hash_handler+0x1d2>
            {
                // If the out data tag is not the digest out then return failure
                if (OPTIGA_CRYPT_HASH_START_FINAL != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 80084e2:	7d9a      	ldrb	r2, [r3, #22]
 80084e4:	2a01      	cmp	r2, #1
 80084e6:	d1ec      	bne.n	80084c2 <optiga_cmd_calc_hash_handler+0x12>
                {
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80084e8:	f103 0017 	add.w	r0, r3, #23
 80084ec:	f10d 0106 	add.w	r1, sp, #6
 80084f0:	f7ff fb32 	bl	8007b58 <optiga_common_get_uint16>

_STATIC_H uint16_t optiga_cmd_check_hash_alg_length(uint8_t algo_identifier)
{
    uint16_t hash_output_len = 0;    

    switch(algo_identifier)
 80084f4:	7e63      	ldrb	r3, [r4, #25]
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
 80084f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    }
}

_STATIC_H uint16_t optiga_cmd_check_hash_alg_length(uint8_t algo_identifier)
{
    uint16_t hash_output_len = 0;    
 80084fa:	2be2      	cmp	r3, #226	; 0xe2
 80084fc:	bf0c      	ite	eq
 80084fe:	2320      	moveq	r3, #32
 8008500:	2300      	movne	r3, #0
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
 8008502:	429a      	cmp	r2, r3
 8008504:	d1dd      	bne.n	80084c2 <optiga_cmd_calc_hash_handler+0x12>
                {
                    break;
                }
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8008506:	6821      	ldr	r1, [r4, #0]

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
                {
                    break;
                }
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 8008508:	6968      	ldr	r0, [r5, #20]
 800850a:	3119      	adds	r1, #25
 800850c:	f7fc fdee 	bl	80050ec <pal_os_memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008510:	4638      	mov	r0, r7

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
                {
                    break;
                }
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 8008512:	e7d8      	b.n	80084c6 <optiga_cmd_calc_hash_handler+0x16>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint32_t apparent_comms_buffer_size = (OPTIGA_MAX_COMMS_BUFFER_SIZE - (OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_HASH_HEADER_SIZE \
                                          + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER));

    p_optiga_calc_hash->current_hash_sequence = p_optiga_calc_hash->hash_sequence;
 8008514:	7b2a      	ldrb	r2, [r5, #12]
 8008516:	736a      	strb	r2, [r5, #13]

    // Check for hash sequence as S&F
    if(OPTIGA_CRYPT_HASH_START_FINAL == p_optiga_calc_hash->hash_sequence)
 8008518:	2a01      	cmp	r2, #1
 800851a:	d05c      	beq.n	80085d6 <optiga_cmd_calc_hash_handler+0x126>
        {
            optiga_cmd_calc_hash_set_current_hash_sequence(me);
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate hash command..");
            //Hash Input
            // tag setting
            me->chaining_ongoing = FALSE;
 800851c:	2300      	movs	r3, #0
 800851e:	7623      	strb	r3, [r4, #24]

            // add data if available
            if (NULL != p_optiga_calc_hash->p_hash_data)
 8008520:	686a      	ldr	r2, [r5, #4]
 8008522:	2a00      	cmp	r2, #0
 8008524:	d067      	beq.n	80085f6 <optiga_cmd_calc_hash_handler+0x146>
            {
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 8008526:	69eb      	ldr	r3, [r5, #28]
 8008528:	6852      	ldr	r2, [r2, #4]
 800852a:	692f      	ldr	r7, [r5, #16]
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;
 800852c:	6821      	ldr	r1, [r4, #0]
 800852e:	7b68      	ldrb	r0, [r5, #13]
 8008530:	7588      	strb	r0, [r1, #22]
            if (NULL != p_optiga_calc_hash->p_hash_data)
            {
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 8008532:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8008536:	1bd7      	subs	r7, r2, r7
 8008538:	3303      	adds	r3, #3
 800853a:	429f      	cmp	r7, r3
 800853c:	bf28      	it	cs
 800853e:	461f      	movcs	r7, r3
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	b2be      	uxth	r6, r7
 8008544:	4631      	mov	r1, r6
 8008546:	3017      	adds	r0, #23
 8008548:	f7ff faea 	bl	8007b20 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
 800854c:	686a      	ldr	r2, [r5, #4]

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800854e:	692b      	ldr	r3, [r5, #16]
 8008550:	6811      	ldr	r1, [r2, #0]
 8008552:	6820      	ldr	r0, [r4, #0]
 8008554:	463a      	mov	r2, r7
 8008556:	4419      	add	r1, r3
 8008558:	3019      	adds	r0, #25
 800855a:	f7fc fdc7 	bl	80050ec <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 800855e:	686a      	ldr	r2, [r5, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
 8008560:	692b      	ldr	r3, [r5, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 8008562:	6852      	ldr	r2, [r2, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
 8008564:	441f      	add	r7, r3
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 8008566:	360c      	adds	r6, #12

                p_optiga_calc_hash->data_sent += length_to_hash;
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 8008568:	4297      	cmp	r7, r2
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 800856a:	b2b6      	uxth	r6, r6

                p_optiga_calc_hash->data_sent += length_to_hash;
 800856c:	612f      	str	r7, [r5, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 800856e:	d001      	beq.n	8008574 <optiga_cmd_calc_hash_handler+0xc4>
                {
                    me->chaining_ongoing = TRUE;
 8008570:	2301      	movs	r3, #1
 8008572:	7623      	strb	r3, [r4, #24]
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
                                               (uint16_t*)&index_for_data);
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
 8008574:	68ab      	ldr	r3, [r5, #8]
 8008576:	b113      	cbz	r3, 800857e <optiga_cmd_calc_hash_handler+0xce>
 8008578:	69eb      	ldr	r3, [r5, #28]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d15a      	bne.n	8008634 <optiga_cmd_calc_hash_handler+0x184>
                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
                p_optiga_calc_hash->apparent_context_size = 0;
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
 800857e:	7e2b      	ldrb	r3, [r5, #24]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d018      	beq.n	80085b6 <optiga_cmd_calc_hash_handler+0x106>

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8008584:	6823      	ldr	r3, [r4, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 8008586:	7e61      	ldrb	r1, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8008588:	74d9      	strb	r1, [r3, #19]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 800858a:	f1a6 0209 	sub.w	r2, r6, #9
 800858e:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008590:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008592:	21b0      	movs	r1, #176	; 0xb0
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008594:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8008596:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008598:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	3e05      	subs	r6, #5
            return_status = OPTIGA_LIB_SUCCESS;
 800859e:	2000      	movs	r0, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80085a0:	809e      	strh	r6, [r3, #4]
        default:
            break;
    }

    return (return_status);
}
 80085a2:	b003      	add	sp, #12
 80085a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80085a6:	7f43      	ldrb	r3, [r0, #29]
 80085a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ac:	7743      	strb	r3, [r0, #29]
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80085ae:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 80085b2:	b003      	add	sp, #12
 80085b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
                p_optiga_calc_hash->apparent_context_size = 0;
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
 80085b6:	7e22      	ldrb	r2, [r4, #24]
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d1e3      	bne.n	8008584 <optiga_cmd_calc_hash_handler+0xd4>
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
 80085bc:	6823      	ldr	r3, [r4, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80085be:	1c70      	adds	r0, r6, #1
            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
 80085c0:	330d      	adds	r3, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80085c2:	1cb1      	adds	r1, r6, #2
 80085c4:	b280      	uxth	r0, r0
 80085c6:	b289      	uxth	r1, r1
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80085c8:	2507      	movs	r5, #7
 80085ca:	559d      	strb	r5, [r3, r6]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80085cc:	3603      	adds	r6, #3
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80085ce:	541a      	strb	r2, [r3, r0]
    buffer[start_position++] = (uint8_t )(tag_length);
 80085d0:	b2b6      	uxth	r6, r6
 80085d2:	545a      	strb	r2, [r3, r1]
 80085d4:	e7d6      	b.n	8008584 <optiga_cmd_calc_hash_handler+0xd4>

    // Check for hash sequence as S&F
    if(OPTIGA_CRYPT_HASH_START_FINAL == p_optiga_calc_hash->hash_sequence)
    {
        // Calculate the apparent comms buffer size and compare with hash data length
        if(apparent_comms_buffer_size < p_optiga_calc_hash->p_hash_data->length)
 80085d6:	686a      	ldr	r2, [r5, #4]
 80085d8:	6851      	ldr	r1, [r2, #4]
 80085da:	f240 6203 	movw	r2, #1539	; 0x603
 80085de:	4291      	cmp	r1, r2
 80085e0:	d99c      	bls.n	800851c <optiga_cmd_calc_hash_handler+0x6c>
        {
            // sent data is 0 hence change the hash sequence to S
            if( 0 == p_optiga_calc_hash->data_sent)
 80085e2:	692a      	ldr	r2, [r5, #16]
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	d043      	beq.n	8008670 <optiga_cmd_calc_hash_handler+0x1c0>
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_START;
            }
            // sent data is greater than 0 and next fragment is greater than apparent_comms_buffer_size hence change the hash sequence to C
            else if((p_optiga_calc_hash->data_sent + apparent_comms_buffer_size) < p_optiga_calc_hash->p_hash_data->length)
 80085e8:	f202 6203 	addw	r2, r2, #1539	; 0x603
 80085ec:	4291      	cmp	r1, r2
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
            }
            // sent data is greater than 0 and next fragment is less than apparent_comms_buffer_size hence change the hash sequence to F
            else
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
 80085ee:	bf98      	it	ls
 80085f0:	2303      	movls	r3, #3
 80085f2:	736b      	strb	r3, [r5, #13]
 80085f4:	e792      	b.n	800851c <optiga_cmd_calc_hash_handler+0x6c>
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
                {
                    me->chaining_ongoing = TRUE;
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d03b      	beq.n	8008674 <optiga_cmd_calc_hash_handler+0x1c4>
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 80085fc:	6823      	ldr	r3, [r4, #0]
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
 80085fe:	7b69      	ldrb	r1, [r5, #13]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008600:	7599      	strb	r1, [r3, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008602:	2106      	movs	r1, #6
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008604:	75da      	strb	r2, [r3, #23]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008606:	7619      	strb	r1, [r3, #24]
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	6820      	ldr	r0, [r4, #0]
 800860c:	8819      	ldrh	r1, [r3, #0]
 800860e:	3019      	adds	r0, #25
 8008610:	f7ff fa86 	bl	8007b20 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	8859      	ldrh	r1, [r3, #2]
 800861a:	301b      	adds	r0, #27
 800861c:	f7ff fa80 	bl	8007b20 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	301d      	adds	r0, #29
 8008626:	8899      	ldrh	r1, [r3, #4]
 8008628:	f7ff fa7a 	bl	8007b20 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800862c:	2612      	movs	r6, #18
 800862e:	e7a1      	b.n	8008574 <optiga_cmd_calc_hash_handler+0xc4>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008630:	2000      	movs	r0, #0
 8008632:	e748      	b.n	80084c6 <optiga_cmd_calc_hash_handler+0x16>
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	4433      	add	r3, r6
 8008638:	2206      	movs	r2, #6
 800863a:	735a      	strb	r2, [r3, #13]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	68aa      	ldr	r2, [r5, #8]
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 8008640:	1c73      	adds	r3, r6, #1
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008642:	fa10 f083 	uxtah	r0, r0, r3
 8008646:	8891      	ldrh	r1, [r2, #4]
 8008648:	300d      	adds	r0, #13
 800864a:	f7ff fa69 	bl	8007b20 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800864e:	3603      	adds	r6, #3

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008650:	6820      	ldr	r0, [r4, #0]
                              p_optiga_calc_hash->p_hash_context->context_buffer,
 8008652:	68ab      	ldr	r3, [r5, #8]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8008654:	b2b6      	uxth	r6, r6

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008656:	4430      	add	r0, r6
 8008658:	889a      	ldrh	r2, [r3, #4]
 800865a:	6819      	ldr	r1, [r3, #0]
 800865c:	300d      	adds	r0, #13
 800865e:	f7fc fd45 	bl	80050ec <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
 8008662:	68ab      	ldr	r3, [r5, #8]
 8008664:	889b      	ldrh	r3, [r3, #4]
                p_optiga_calc_hash->apparent_context_size = 0;
 8008666:	2200      	movs	r2, #0

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
 8008668:	441e      	add	r6, r3
 800866a:	b2b6      	uxth	r6, r6
                p_optiga_calc_hash->apparent_context_size = 0;
 800866c:	61ea      	str	r2, [r5, #28]
 800866e:	e786      	b.n	800857e <optiga_cmd_calc_hash_handler+0xce>
        if(apparent_comms_buffer_size < p_optiga_calc_hash->p_hash_data->length)
        {
            // sent data is 0 hence change the hash sequence to S
            if( 0 == p_optiga_calc_hash->data_sent)
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_START;
 8008670:	736a      	strb	r2, [r5, #13]
 8008672:	e753      	b.n	800851c <optiga_cmd_calc_hash_handler+0x6c>
            else
            {
                // Tag header in case of sequence as START
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
 8008674:	6822      	ldr	r2, [r4, #0]
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            else
            {
                // Tag header in case of sequence as START
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
 8008676:	7b69      	ldrb	r1, [r5, #13]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008678:	7591      	strb	r1, [r2, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800867a:	75d3      	strb	r3, [r2, #23]
    buffer[start_position++] = (uint8_t )(tag_length);
 800867c:	7613      	strb	r3, [r2, #24]

    *position = start_position;
 800867e:	260c      	movs	r6, #12
 8008680:	e778      	b.n	8008574 <optiga_cmd_calc_hash_handler+0xc4>
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            // Copy the intermediate hash context
            else if ((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_hash_context))
 8008682:	7e2a      	ldrb	r2, [r5, #24]
 8008684:	2a01      	cmp	r2, #1
 8008686:	d001      	beq.n	800868c <optiga_cmd_calc_hash_handler+0x1dc>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008688:	4630      	mov	r0, r6
 800868a:	e71c      	b.n	80084c6 <optiga_cmd_calc_hash_handler+0x16>
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            // Copy the intermediate hash context
            else if ((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_hash_context))
 800868c:	68a8      	ldr	r0, [r5, #8]
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f af19 	beq.w	80084c6 <optiga_cmd_calc_hash_handler+0x16>
            {
                // If the out data tag is not the intermediate tag then return failure
                if (OPTIGA_CRYPT_INTERMEDIATE != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 8008694:	7d9a      	ldrb	r2, [r3, #22]
 8008696:	2a06      	cmp	r2, #6
 8008698:	f47f af13 	bne.w	80084c2 <optiga_cmd_calc_hash_handler+0x12>
                {
                    break;
                }

                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800869c:	f103 0017 	add.w	r0, r3, #23
 80086a0:	f10d 0106 	add.w	r1, sp, #6
 80086a4:	f7ff fa58 	bl	8007b58 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
 80086a8:	68ab      	ldr	r3, [r5, #8]
 80086aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80086ae:	8899      	ldrh	r1, [r3, #4]
 80086b0:	4291      	cmp	r1, r2
 80086b2:	d202      	bcs.n	80086ba <optiga_cmd_calc_hash_handler+0x20a>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80086b4:	f44f 7001 	mov.w	r0, #516	; 0x204
 80086b8:	e705      	b.n	80084c6 <optiga_cmd_calc_hash_handler+0x16>
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80086ba:	6821      	ldr	r1, [r4, #0]
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	3119      	adds	r1, #25
 80086c0:	f7fc fd14 	bl	80050ec <pal_os_memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
 80086c4:	68ab      	ldr	r3, [r5, #8]
 80086c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80086ca:	809a      	strh	r2, [r3, #4]
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 80086cc:	4630      	mov	r0, r6
 80086ce:	e6fa      	b.n	80084c6 <optiga_cmd_calc_hash_handler+0x16>

080086d0 <optiga_cmd_close_application_handler>:

/*
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
 80086d0:	b538      	push	{r3, r4, r5, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 80086d2:	7d83      	ldrb	r3, [r0, #22]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d025      	beq.n	8008724 <optiga_cmd_close_application_handler+0x54>
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d120      	bne.n	800871e <optiga_cmd_close_application_handler+0x4e>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for close app command...");
            // check if the close app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80086dc:	6801      	ldr	r1, [r0, #0]
 80086de:	7c8d      	ldrb	r5, [r1, #18]
 80086e0:	b36d      	cbz	r5, 800873e <optiga_cmd_close_application_handler+0x6e>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing close app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80086e2:	7f43      	ldrb	r3, [r0, #29]
 80086e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e8:	7743      	strb	r3, [r0, #29]
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80086ea:	f240 2002 	movw	r0, #514	; 0x202
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	4604      	mov	r4, r0
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
            {
                pal_os_memcpy(me->p_optiga->optiga_context_handle_buffer,
 80086f2:	2208      	movs	r2, #8
 80086f4:	f501 60d0 	add.w	r0, r1, #1664	; 0x680
 80086f8:	3116      	adds	r1, #22
 80086fa:	f7fc fcf7 	bl	80050ec <pal_os_memcpy>
 80086fe:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8008700:	6821      	ldr	r1, [r4, #0]
_STATIC_H optiga_lib_status_t optiga_cmd_store_context(const optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8008702:	b1f8      	cbz	r0, 8008744 <optiga_cmd_close_application_handler+0x74>
        {
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8008704:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8008708:	2208      	movs	r2, #8
 800870a:	f7fc fc35 	bl	8004f78 <pal_os_datastore_write>
                                                   me->p_optiga->optiga_context_handle_buffer,
                                                   sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != return_status)
 800870e:	b1c8      	cbz	r0, 8008744 <optiga_cmd_close_application_handler+0x74>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
                ///Optiga context store operation
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_store_context(me))
                {
                    pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	4629      	mov	r1, r5
 8008714:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8008718:	2208      	movs	r2, #8
 800871a:	f7fc fce9 	bl	80050f0 <pal_os_memset>
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800871e:	f240 2002 	movw	r0, #514	; 0x202
 8008722:	bd38      	pop	{r3, r4, r5, pc}
                break;
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8008724:	6802      	ldr	r2, [r0, #0]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
 8008726:	7e43      	ldrb	r3, [r0, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8008728:	74d3      	strb	r3, [r2, #19]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800872a:	21f1      	movs	r1, #241	; 0xf1
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 800872c:	2300      	movs	r3, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800872e:	7491      	strb	r1, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008730:	7513      	strb	r3, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8008732:	7553      	strb	r3, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = OPTIGA_CMD_APDU_HEADER_SIZE;
 8008734:	6802      	ldr	r2, [r0, #0]
 8008736:	2104      	movs	r1, #4
            return_status = OPTIGA_LIB_SUCCESS;
 8008738:	4618      	mov	r0, r3
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = OPTIGA_CMD_APDU_HEADER_SIZE;
 800873a:	8091      	strh	r1, [r2, #4]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 800873c:	bd38      	pop	{r3, r4, r5, pc}
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 800873e:	7e43      	ldrb	r3, [r0, #25]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1d5      	bne.n	80086f0 <optiga_cmd_close_application_handler+0x20>
                                    sizeof(me->p_optiga->optiga_context_handle_buffer));
                    break;
                }
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of close app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008744:	2000      	movs	r0, #0
        default:
            break;
    }

    return (return_status);
}
 8008746:	bd38      	pop	{r3, r4, r5, pc}

08008748 <optiga_cmd_open_application_handler>:
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8008748:	7d83      	ldrb	r3, [r0, #22]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d00f      	beq.n	800876e <optiga_cmd_open_application_handler+0x26>
 800874e:	2b03      	cmp	r3, #3
 8008750:	d10a      	bne.n	8008768 <optiga_cmd_open_application_handler+0x20>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");

            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8008752:	6802      	ldr	r2, [r0, #0]
 8008754:	7c93      	ldrb	r3, [r2, #18]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d047      	beq.n	80087ea <optiga_cmd_open_application_handler+0xa2>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800875a:	7f43      	ldrb	r3, [r0, #29]
 800875c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008760:	7743      	strb	r3, [r0, #29]
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8008762:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 8008766:	4770      	bx	lr
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8008768:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 800876c:	4770      	bx	lr

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 800876e:	b530      	push	{r4, r5, lr}
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending open app command...");

            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8008770:	7e42      	ldrb	r2, [r0, #25]

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8008772:	b083      	sub	sp, #12
 8008774:	4604      	mov	r4, r0
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8008776:	2a00      	cmp	r2, #0
 8008778:	d13c      	bne.n	80087f4 <optiga_cmd_open_application_handler+0xac>
 800877a:	2010      	movs	r0, #16
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800877c:	6823      	ldr	r3, [r4, #0]

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800877e:	492f      	ldr	r1, [pc, #188]	; (800883c <optiga_cmd_open_application_handler+0xf4>)
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8008780:	74da      	strb	r2, [r3, #19]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008782:	25f0      	movs	r5, #240	; 0xf0
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008784:	2200      	movs	r2, #0
 8008786:	751a      	strb	r2, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8008788:	7558      	strb	r0, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800878a:	749d      	strb	r5, [r3, #18]
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	2210      	movs	r2, #16
 8008790:	3016      	adds	r0, #22
 8008792:	f7fc fcab 	bl	80050ec <pal_os_memcpy>
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8008796:	7e63      	ldrb	r3, [r4, #25]
 8008798:	b9c3      	cbnz	r3, 80087cc <optiga_cmd_open_application_handler+0x84>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 800879a:	6820      	ldr	r0, [r4, #0]
 800879c:	2314      	movs	r3, #20
 800879e:	8083      	strh	r3, [r0, #4]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 80087a0:	2100      	movs	r1, #0
 80087a2:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 80087a6:	2208      	movs	r2, #8
 80087a8:	f7fc fca2 	bl	80050f0 <pal_os_memset>
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80087ac:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80087ae:	b158      	cbz	r0, 80087c8 <optiga_cmd_open_application_handler+0x80>
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                       me->p_optiga->optiga_context_handle_buffer,
 80087b0:	6821      	ldr	r1, [r4, #0]
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80087b2:	2208      	movs	r2, #8
 80087b4:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 80087b8:	f7fc fbde 	bl	8004f78 <pal_os_datastore_write>
                {
                    return_status = OPTIGA_CMD_ERROR;
                    break;
                }
            }
            return_status = OPTIGA_LIB_SUCCESS;
 80087bc:	f240 2302 	movw	r3, #514	; 0x202
 80087c0:	2800      	cmp	r0, #0
 80087c2:	bf14      	ite	ne
 80087c4:	4618      	movne	r0, r3
 80087c6:	2000      	moveq	r0, #0
        default:
            break;
    }

    return (return_status);
}
 80087c8:	b003      	add	sp, #12
 80087ca:	bd30      	pop	{r4, r5, pc}
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
            {
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80087cc:	6821      	ldr	r1, [r4, #0]
 80087ce:	2208      	movs	r2, #8
 80087d0:	f101 0026 	add.w	r0, r1, #38	; 0x26
 80087d4:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 80087d8:	f7fc fc88 	bl	80050ec <pal_os_memcpy>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 80087dc:	7e63      	ldrb	r3, [r4, #25]
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bf0c      	ite	eq
 80087e4:	2314      	moveq	r3, #20
 80087e6:	231c      	movne	r3, #28
 80087e8:	e7d9      	b.n	800879e <optiga_cmd_open_application_handler+0x56>
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	2133      	movs	r1, #51	; 0x33
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 80087ee:	4618      	mov	r0, r3
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 80087f0:	7411      	strb	r1, [r2, #16]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
 80087f2:	4770      	bx	lr
 80087f4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80087f6:	b160      	cbz	r0, 8008812 <optiga_cmd_open_application_handler+0xca>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 80087f8:	aa02      	add	r2, sp, #8
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
                                                  me->p_optiga->optiga_context_handle_buffer,
 80087fa:	6821      	ldr	r1, [r4, #0]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 80087fc:	2308      	movs	r3, #8
 80087fe:	f822 3d02 	strh.w	r3, [r2, #-2]!
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8008802:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8008806:	f7fc fbdd 	bl	8004fc4 <pal_os_datastore_read>
                                                  me->p_optiga->optiga_context_handle_buffer,
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 800880a:	b110      	cbz	r0, 8008812 <optiga_cmd_open_application_handler+0xca>
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800880c:	f240 2002 	movw	r0, #514	; 0x202
 8008810:	e7da      	b.n	80087c8 <optiga_cmd_open_application_handler+0x80>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8008812:	6820      	ldr	r0, [r4, #0]
 8008814:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8008818:	f7ff f992 	bl	8007b40 <optiga_common_get_uint32>
 800881c:	b128      	cbz	r0, 800882a <optiga_cmd_open_application_handler+0xe2>
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800881e:	7e62      	ldrb	r2, [r4, #25]
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8008820:	2a00      	cmp	r2, #0
 8008822:	bf0c      	ite	eq
 8008824:	2010      	moveq	r0, #16
 8008826:	2018      	movne	r0, #24
 8008828:	e7a8      	b.n	800877c <optiga_cmd_open_application_handler+0x34>
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 800882a:	6820      	ldr	r0, [r4, #0]
 800882c:	f200 6084 	addw	r0, r0, #1668	; 0x684
 8008830:	f7ff f986 	bl	8007b40 <optiga_common_get_uint32>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8008834:	2800      	cmp	r0, #0
 8008836:	d0e9      	beq.n	800880c <optiga_cmd_open_application_handler+0xc4>
 8008838:	e7f1      	b.n	800881e <optiga_cmd_open_application_handler+0xd6>
 800883a:	bf00      	nop
 800883c:	0800dae0 	.word	0x0800dae0

08008840 <optiga_cmd_execute_process_response>:
        }
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008844:	4604      	mov	r4, r0
 8008846:	b082      	sub	sp, #8
 8008848:	460d      	mov	r5, r1
                me->handler(me->caller_context, me->exit_status);
                *exit_loop = TRUE;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800884a:	2604      	movs	r6, #4

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        switch (me->cmd_sub_execution_state)
 800884c:	7de3      	ldrb	r3, [r4, #23]
 800884e:	3b0a      	subs	r3, #10
 8008850:	2b04      	cmp	r3, #4
 8008852:	d878      	bhi.n	8008946 <optiga_cmd_execute_process_response+0x106>
 8008854:	e8df f003 	tbb	[pc, r3]
 8008858:	0c285f54 	.word	0x0c285f54
 800885c:	03          	.byte	0x03
 800885d:	00          	.byte	0x00
                *exit_loop = FALSE;
                break;
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 800885e:	6923      	ldr	r3, [r4, #16]
 8008860:	68e0      	ldr	r0, [r4, #12]
 8008862:	8c21      	ldrh	r1, [r4, #32]
 8008864:	4798      	blx	r3
                *exit_loop = TRUE;
 8008866:	2301      	movs	r3, #1
 8008868:	702b      	strb	r3, [r5, #0]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
}
 800886a:	b002      	add	sp, #8
 800886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8008870:	8aa3      	ldrh	r3, [r4, #20]
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	b12b      	cbz	r3, 8008882 <optiga_cmd_execute_process_response+0x42>
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	4413      	add	r3, r2
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 800887c:	2200      	movs	r2, #0
 800887e:	82a2      	strh	r2, [r4, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8008880:	721a      	strb	r2, [r3, #8]
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8008882:	8c23      	ldrh	r3, [r4, #32]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d077      	beq.n	8008978 <optiga_cmd_execute_process_response+0x138>
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008888:	7f63      	ldrb	r3, [r4, #29]
 800888a:	f023 0303 	bic.w	r3, r3, #3
 800888e:	f043 0301 	orr.w	r3, r3, #1
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008892:	220b      	movs	r2, #11
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008894:	7763      	strb	r3, [r4, #29]
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008896:	75e2      	strb	r2, [r4, #23]
                {
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
                    {
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                    }
                    *exit_loop = FALSE;
 8008898:	2300      	movs	r3, #0
 800889a:	702b      	strb	r3, [r5, #0]
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 800889c:	7da3      	ldrb	r3, [r4, #22]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d0d4      	beq.n	800884c <optiga_cmd_execute_process_response+0xc>
}
 80088a2:	b002      	add	sp, #8
 80088a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80088a8:	7fa3      	ldrb	r3, [r4, #30]
 80088aa:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80088ac:	498a      	ldr	r1, [pc, #552]	; (8008ad8 <optiga_cmd_execute_process_response+0x298>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80088ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80088b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ba:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80088be:	7fa3      	ldrb	r3, [r4, #30]
 80088c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80088c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088c8:	2700      	movs	r7, #0
 80088ca:	f8c3 7630 	str.w	r7, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80088ce:	7fa3      	ldrb	r3, [r4, #30]
 80088d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80088d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80088d8:	2001      	movs	r0, #1
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80088da:	f882 7638 	strb.w	r7, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80088de:	7fa3      	ldrb	r3, [r4, #30]
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80088e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088ea:	f883 0639 	strb.w	r0, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 80088f4:	f7fc fb90 	bl	8005018 <pal_os_event_start>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 80088f8:	230e      	movs	r3, #14
 80088fa:	75e3      	strb	r3, [r4, #23]
                *exit_loop = FALSE;
 80088fc:	702f      	strb	r7, [r5, #0]
                break;
 80088fe:	e7cd      	b.n	800889c <optiga_cmd_execute_process_response+0x5c>
_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
    do
    {
        *exit_loop = TRUE;
 8008900:	2701      	movs	r7, #1
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8008902:	6862      	ldr	r2, [r4, #4]
    do
    {
        *exit_loop = TRUE;
 8008904:	702f      	strb	r7, [r5, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8008906:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800890a:	2b00      	cmp	r3, #0
 800890c:	db22      	blt.n	8008954 <optiga_cmd_execute_process_response+0x114>
            me->exit_status = optiga_cmd_handler(me);
        }
        else
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
 800890e:	2300      	movs	r3, #0
        {
            me->exit_status = optiga_cmd_handler(me);
        }
        else
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8008910:	75a6      	strb	r6, [r4, #22]
            *exit_loop = FALSE;
 8008912:	702b      	strb	r3, [r5, #0]
 8008914:	e7c2      	b.n	800889c <optiga_cmd_execute_process_response+0x5c>

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	702b      	strb	r3, [r5, #0]
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 800891a:	7f67      	ldrb	r7, [r4, #29]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 800891c:	f8d4 8000 	ldr.w	r8, [r4]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8008920:	f007 0703 	and.w	r7, r7, #3
 8008924:	2f02      	cmp	r7, #2
 8008926:	d02a      	beq.n	800897e <optiga_cmd_execute_process_response+0x13e>
 8008928:	2f03      	cmp	r7, #3
 800892a:	f000 8081 	beq.w	8008a30 <optiga_cmd_execute_process_response+0x1f0>
 800892e:	429f      	cmp	r7, r3
 8008930:	d04a      	beq.n	80089c8 <optiga_cmd_execute_process_response+0x188>
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8008932:	f44f 4700 	mov.w	r7, #32768	; 0x8000
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8008936:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 800893a:	8427      	strh	r7, [r4, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 800893c:	d072      	beq.n	8008a24 <optiga_cmd_execute_process_response+0x1e4>
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 800893e:	782b      	ldrb	r3, [r5, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0ab      	beq.n	800889c <optiga_cmd_execute_process_response+0x5c>
 8008944:	e791      	b.n	800886a <optiga_cmd_execute_process_response+0x2a>
                me->handler(me->caller_context, me->exit_status);
                *exit_loop = TRUE;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008946:	f240 2202 	movw	r2, #514	; 0x202
 800894a:	2300      	movs	r3, #0
 800894c:	75a6      	strb	r6, [r4, #22]
 800894e:	8422      	strh	r2, [r4, #32]
 8008950:	702b      	strb	r3, [r5, #0]
            break;
 8008952:	e7a3      	b.n	800889c <optiga_cmd_execute_process_response+0x5c>
    do
    {
        *exit_loop = TRUE;
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
        {
            me->exit_status = optiga_cmd_handler(me);
 8008954:	4620      	mov	r0, r4
 8008956:	4790      	blx	r2
 8008958:	8420      	strh	r0, [r4, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 800895a:	2800      	cmp	r0, #0
 800895c:	d17d      	bne.n	8008a5a <optiga_cmd_execute_process_response+0x21a>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 800895e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008962:	2bf1      	cmp	r3, #241	; 0xf1
 8008964:	f000 80aa 	beq.w	8008abc <optiga_cmd_execute_process_response+0x27c>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
            }
            else
            {
                if (FALSE == me->chaining_ongoing)
 8008968:	7e23      	ldrb	r3, [r4, #24]
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 8093 	bne.w	8008a96 <optiga_cmd_execute_process_response+0x256>
                {
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8008970:	7de3      	ldrb	r3, [r4, #23]
 8008972:	3b0d      	subs	r3, #13
 8008974:	2b01      	cmp	r3, #1
 8008976:	d98f      	bls.n	8008898 <optiga_cmd_execute_process_response+0x58>
                    {
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8008978:	230c      	movs	r3, #12
 800897a:	75e3      	strb	r3, [r4, #23]
 800897c:	e78c      	b.n	8008898 <optiga_cmd_execute_process_response+0x58>
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 800897e:	f240 6322 	movw	r3, #1570	; 0x622
 8008982:	f8a8 3006 	strh.w	r3, [r8, #6]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8008986:	f8d8 3000 	ldr.w	r3, [r8]
 800898a:	7ea2      	ldrb	r2, [r4, #26]
 800898c:	739a      	strb	r2, [r3, #14]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	7ee2      	ldrb	r2, [r4, #27]
 8008992:	681b      	ldr	r3, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8008994:	4647      	mov	r7, r8
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008996:	73da      	strb	r2, [r3, #15]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8008998:	f857 0b0d 	ldr.w	r0, [r7], #13
 800899c:	4621      	mov	r1, r4
 800899e:	f7ff f853 	bl	8007a48 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80089a2:	f108 0806 	add.w	r8, r8, #6
 80089a6:	f858 0c06 	ldr.w	r0, [r8, #-6]
 80089aa:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 80089ae:	f8cd 8000 	str.w	r8, [sp]
 80089b2:	4639      	mov	r1, r7
 80089b4:	463b      	mov	r3, r7
 80089b6:	f7ff f86b 	bl	8007a90 <optiga_comms_transceive>
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
 80089ba:	4607      	mov	r7, r0
 80089bc:	2800      	cmp	r0, #0
 80089be:	d05e      	beq.n	8008a7e <optiga_cmd_execute_process_response+0x23e>
_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 80089c0:	f240 2302 	movw	r3, #514	; 0x202
 80089c4:	8423      	strh	r3, [r4, #32]
 80089c6:	e7a2      	b.n	800890e <optiga_cmd_execute_process_response+0xce>

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
    {
        case OPTIGA_CMD_ERROR_CODE_PREPARE:
        {
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 80089c8:	f108 0016 	add.w	r0, r8, #22
 80089cc:	f24f 11c2 	movw	r1, #61890	; 0xf1c2
 80089d0:	f7ff f8a6 	bl	8007b20 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	2100      	movs	r1, #0
 80089d8:	3018      	adds	r0, #24
 80089da:	f7ff f8a1 	bl	8007b20 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	4639      	mov	r1, r7
 80089e2:	301a      	adds	r0, #26
 80089e4:	f7ff f89c 	bl	8007b20 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80089e8:	6823      	ldr	r3, [r4, #0]

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80089ea:	493c      	ldr	r1, [pc, #240]	; (8008adc <optiga_cmd_execute_process_response+0x29c>)
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80089ec:	749f      	strb	r7, [r3, #18]
    p_apdu_buffer [1] = param;
 80089ee:	2200      	movs	r2, #0
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80089f0:	2006      	movs	r0, #6
 80089f2:	7558      	strb	r0, [r3, #21]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80089f4:	74da      	strb	r2, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80089f6:	751a      	strb	r2, [r3, #20]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80089f8:	6822      	ldr	r2, [r4, #0]
 80089fa:	230a      	movs	r3, #10
 80089fc:	8093      	strh	r3, [r2, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 80089fe:	7f63      	ldrb	r3, [r4, #29]
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	f043 0302 	orr.w	r3, r3, #2
 8008a08:	7763      	strb	r3, [r4, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008a0a:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8008a0e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008a12:	4622      	mov	r2, r4
 8008a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a18:	f7fc fb4e 	bl	80050b8 <pal_os_event_register_callback_oneshot>
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8008a1c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8008a20:	8427      	strh	r7, [r4, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8008a22:	d18c      	bne.n	800893e <optiga_cmd_execute_process_response+0xfe>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8008a24:	7f63      	ldrb	r3, [r4, #29]
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d187      	bne.n	800893e <optiga_cmd_execute_process_response+0xfe>
 8008a2e:	e76e      	b.n	800890e <optiga_cmd_execute_process_response+0xce>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_RX:
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8008a30:	f898 3012 	ldrb.w	r3, [r8, #18]
 8008a34:	2bff      	cmp	r3, #255	; 0xff
 8008a36:	f43f af7c 	beq.w	8008932 <optiga_cmd_execute_process_response+0xf2>
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8008a3a:	f898 3016 	ldrb.w	r3, [r8, #22]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008a3e:	f8d8 0678 	ldr.w	r0, [r8, #1656]	; 0x678
 8008a42:	4926      	ldr	r1, [pc, #152]	; (8008adc <optiga_cmd_execute_process_response+0x29c>)
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8008a44:	75a7      	strb	r7, [r4, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008a46:	220a      	movs	r2, #10
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8008a48:	f443 4700 	orr.w	r7, r3, #32768	; 0x8000
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008a4c:	75e2      	strb	r2, [r4, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a52:	4622      	mov	r2, r4
 8008a54:	f7fc fb30 	bl	80050b8 <pal_os_event_register_callback_oneshot>
 8008a58:	e76d      	b.n	8008936 <optiga_cmd_execute_process_response+0xf6>
            }
        }
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8008a5a:	f5b0 7f01 	cmp.w	r0, #516	; 0x204
 8008a5e:	d015      	beq.n	8008a8c <optiga_cmd_execute_process_response+0x24c>
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                *exit_loop = FALSE;
                break;
            }
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8008a60:	7de3      	ldrb	r3, [r4, #23]
 8008a62:	2b0d      	cmp	r3, #13
 8008a64:	f43f af18 	beq.w	8008898 <optiga_cmd_execute_process_response+0x58>
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008a68:	7f63      	ldrb	r3, [r4, #29]
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
                *exit_loop = FALSE;
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008a72:	210b      	movs	r1, #11
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
 8008a74:	2200      	movs	r2, #0
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008a76:	7763      	strb	r3, [r4, #29]
                *exit_loop = FALSE;
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008a78:	75e1      	strb	r1, [r4, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
 8008a7a:	702a      	strb	r2, [r5, #0]
 8008a7c:	e70e      	b.n	800889c <optiga_cmd_execute_process_response+0x5c>
            if (OPTIGA_COMMS_SUCCESS != return_status)
            {
                return_status = OPTIGA_CMD_ERROR;
                break;
            }
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8008a7e:	7f63      	ldrb	r3, [r4, #29]
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	f043 0303 	orr.w	r3, r3, #3
 8008a88:	7763      	strb	r3, [r4, #29]
 8008a8a:	e754      	b.n	8008936 <optiga_cmd_execute_process_response+0xf6>
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8008a8c:	220c      	movs	r2, #12
                *exit_loop = FALSE;
 8008a8e:	2300      	movs	r3, #0
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8008a90:	75e2      	strb	r2, [r4, #23]
                *exit_loop = FALSE;
 8008a92:	702b      	strb	r3, [r5, #0]
 8008a94:	e702      	b.n	800889c <optiga_cmd_execute_process_response+0x5c>
                    break;
                }
                // for chaining, trigger preparing of next command
                else
                {
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	4910      	ldr	r1, [pc, #64]	; (8008adc <optiga_cmd_execute_process_response+0x29c>)
 8008a9a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008aa4:	f7fc fb08 	bl	80050b8 <pal_os_event_register_callback_oneshot>
                                                           (register_callback)optiga_cmd_event_trigger_execute,
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;
 8008aa8:	702f      	strb	r7, [r5, #0]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8008aaa:	7ea3      	ldrb	r3, [r4, #26]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8008aac:	2102      	movs	r1, #2
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8008aae:	f003 0303 	and.w	r3, r3, #3
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008ab2:	2209      	movs	r2, #9
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8008ab4:	76a3      	strb	r3, [r4, #26]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8008ab6:	75a1      	strb	r1, [r4, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008ab8:	75e2      	strb	r2, [r4, #23]
 8008aba:	e740      	b.n	800893e <optiga_cmd_execute_process_response+0xfe>
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	4907      	ldr	r1, [pc, #28]	; (8008adc <optiga_cmd_execute_process_response+0x29c>)
 8008ac0:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008aca:	f7fc faf5 	bl	80050b8 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8008ace:	2303      	movs	r3, #3
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8008ad0:	702f      	strb	r7, [r5, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8008ad2:	75a7      	strb	r7, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8008ad4:	75e3      	strb	r3, [r4, #23]
 8008ad6:	e732      	b.n	800893e <optiga_cmd_execute_process_response+0xfe>
 8008ad8:	08007b79 	.word	0x08007b79
 8008adc:	080091a1 	.word	0x080091a1

08008ae0 <optiga_cmd_execute_prepare_command>:
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
}

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8008ae4:	f8d0 8004 	ldr.w	r8, [r0, #4]
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
}

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008ae8:	b083      	sub	sp, #12
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008aee:	2604      	movs	r6, #4
 8008af0:	f240 2702 	movw	r7, #514	; 0x202
 8008af4:	f04f 0900 	mov.w	r9, #0
_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
    do
    {
        switch (me->cmd_sub_execution_state)
 8008af8:	7de3      	ldrb	r3, [r4, #23]
 8008afa:	3b05      	subs	r3, #5
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	f200 8094 	bhi.w	8008c2a <optiga_cmd_execute_prepare_command+0x14a>
 8008b02:	e8df f003 	tbb	[pc, r3]
 8008b06:	4a4a      	.short	0x4a4a
 8008b08:	157c      	.short	0x157c
 8008b0a:	03          	.byte	0x03
 8008b0b:	00          	.byte	0x00
                *exit_loop = TRUE;
                break;
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	702b      	strb	r3, [r5, #0]
                me->exit_status = optiga_cmd_handler(me);
 8008b10:	4620      	mov	r0, r4
 8008b12:	47c0      	blx	r8
 8008b14:	4682      	mov	sl, r0
 8008b16:	8420      	strh	r0, [r4, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f000 808b 	beq.w	8008c34 <optiga_cmd_execute_prepare_command+0x154>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8008b1e:	75a6      	strb	r6, [r4, #22]
                    *exit_loop = FALSE;
 8008b20:	f885 9000 	strb.w	r9, [r5]
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8008b24:	7da3      	ldrb	r3, [r4, #22]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d0e6      	beq.n	8008af8 <optiga_cmd_execute_prepare_command+0x18>
}
 8008b2a:	b003      	add	sp, #12
 8008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8008b30:	7fa3      	ldrb	r3, [r4, #30]
 8008b32:	6822      	ldr	r2, [r4, #0]
 8008b34:	0059      	lsls	r1, r3, #1
 8008b36:	18ce      	adds	r6, r1, r3
 8008b38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b3c:	f896 0638 	ldrb.w	r0, [r6, #1592]	; 0x638
 8008b40:	2823      	cmp	r0, #35	; 0x23
 8008b42:	d006      	beq.n	8008b52 <optiga_cmd_execute_prepare_command+0x72>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008b44:	f7fc fae8 	bl	8005118 <pal_os_timer_get_time_in_microseconds>
 8008b48:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
 8008b4c:	7fa3      	ldrb	r3, [r4, #30]
 8008b4e:	6822      	ldr	r2, [r4, #0]
 8008b50:	0059      	lsls	r1, r3, #1
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008b52:	440b      	add	r3, r1
 8008b54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008b58:	2023      	movs	r0, #35	; 0x23
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008b5a:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008b5e:	7fa3      	ldrb	r3, [r4, #30]
 8008b60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
                *exit_loop = FALSE;
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8008b68:	2600      	movs	r6, #0
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008b6a:	f892 3638 	ldrb.w	r3, [r2, #1592]	; 0x638
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008b6e:	4283      	cmp	r3, r0
 8008b70:	bf0c      	ite	eq
 8008b72:	2308      	moveq	r3, #8
 8008b74:	2302      	movne	r3, #2
 8008b76:	f882 3639 	strb.w	r3, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008b7a:	7fa3      	ldrb	r3, [r4, #30]
 8008b7c:	6822      	ldr	r2, [r4, #0]
 8008b7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008b86:	2109      	movs	r1, #9
                *exit_loop = TRUE;
 8008b88:	2201      	movs	r2, #1
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008b8a:	f883 0638 	strb.w	r0, [r3, #1592]	; 0x638
                *exit_loop = FALSE;
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8008b8e:	8426      	strh	r6, [r4, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008b90:	75e1      	strb	r1, [r4, #23]
                *exit_loop = TRUE;
 8008b92:	702a      	strb	r2, [r5, #0]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
}
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (me->cmd_sub_execution_state)
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	702b      	strb	r3, [r5, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8008b9e:	7de3      	ldrb	r3, [r4, #23]
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8008ba0:	f894 a01e 	ldrb.w	sl, [r4, #30]
 8008ba4:	f8d4 b000 	ldr.w	fp, [r4]
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8008ba8:	2b05      	cmp	r3, #5
 8008baa:	d06b      	beq.n	8008c84 <optiga_cmd_execute_prepare_command+0x1a4>
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008bac:	f7fc fab4 	bl	8005118 <pal_os_timer_get_time_in_microseconds>
 8008bb0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8008bb4:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008bb8:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008bba:	f8ca 0634 	str.w	r0, [sl, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008bbe:	7fa3      	ldrb	r3, [r4, #30]
 8008bc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008bc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008bc8:	2002      	movs	r0, #2
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008bca:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008bce:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008bd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008bd4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008bd8:	2121      	movs	r1, #33	; 0x21
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008bda:	f882 0639 	strb.w	r0, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008bde:	7fa3      	ldrb	r3, [r4, #30]
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008be6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bea:	f883 1638 	strb.w	r1, [r3, #1592]	; 0x638
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008bee:	2309      	movs	r3, #9
                {
                    me->exit_status = optiga_cmd_request_session(me);
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8008bf0:	f8a4 9020 	strh.w	r9, [r4, #32]
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008bf4:	75e3      	strb	r3, [r4, #23]
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8008bf6:	782b      	ldrb	r3, [r5, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d093      	beq.n	8008b24 <optiga_cmd_execute_prepare_command+0x44>
 8008bfc:	e7ca      	b.n	8008b94 <optiga_cmd_execute_prepare_command+0xb4>
/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008bfe:	7fa3      	ldrb	r3, [r4, #30]
 8008c00:	6822      	ldr	r2, [r4, #0]
 8008c02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008c06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8008c10:	7fa3      	ldrb	r3, [r4, #30]
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008c18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                break;
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8008c1c:	2208      	movs	r2, #8
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8008c1e:	f883 9638 	strb.w	r9, [r3, #1592]	; 0x638
                break;
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8008c22:	75e2      	strb	r2, [r4, #23]
                *exit_loop = FALSE;
 8008c24:	f885 9000 	strb.w	r9, [r5]
                break;
 8008c28:	e77c      	b.n	8008b24 <optiga_cmd_execute_prepare_command+0x44>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008c2a:	75a6      	strb	r6, [r4, #22]
 8008c2c:	8427      	strh	r7, [r4, #32]
 8008c2e:	f885 9000 	strb.w	r9, [r5]
            break;
 8008c32:	e777      	b.n	8008b24 <optiga_cmd_execute_prepare_command+0x44>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
                    *exit_loop = FALSE;
                    break;
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	f240 6222 	movw	r2, #1570	; 0x622
 8008c3a:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	7ea2      	ldrb	r2, [r4, #26]
 8008c40:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	7ee2      	ldrb	r2, [r4, #27]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	73da      	strb	r2, [r3, #15]
                me->p_optiga->protection_level_state |= me->protection_level;
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	7ea1      	ldrb	r1, [r4, #26]
 8008c4e:	f892 3688 	ldrb.w	r3, [r2, #1672]	; 0x688
 8008c52:	430b      	orrs	r3, r1
 8008c54:	f882 3688 	strb.w	r3, [r2, #1672]	; 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f7fe fef3 	bl	8007a48 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
 8008c68:	f103 010d 	add.w	r1, r3, #13
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->protection_level_state |= me->protection_level;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8008c6c:	3306      	adds	r3, #6
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	460b      	mov	r3, r1
 8008c72:	f7fe ff0d 	bl	8007a90 <optiga_comms_transceive>
 8008c76:	8420      	strh	r0, [r4, #32]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
                                                          &(me->p_optiga->comms_rx_size));

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8008c78:	b1e0      	cbz	r0, 8008cb4 <optiga_cmd_execute_prepare_command+0x1d4>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008c7a:	75a6      	strb	r6, [r4, #22]
 8008c7c:	8427      	strh	r7, [r4, #32]
 8008c7e:	f885 a000 	strb.w	sl, [r5]
                    break;
 8008c82:	e74f      	b.n	8008b24 <optiga_cmd_execute_prepare_command+0x44>
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008c84:	f7fc fa48 	bl	8005118 <pal_os_timer_get_time_in_microseconds>
 8008c88:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8008c8c:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008c90:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008c92:	f8ca 0634 	str.w	r0, [sl, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008c96:	7fa3      	ldrb	r3, [r4, #30]
 8008c98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008c9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008ca0:	2002      	movs	r0, #2
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008ca2:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008ca6:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008ca8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008cac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008cb0:	2122      	movs	r1, #34	; 0x22
 8008cb2:	e792      	b.n	8008bda <optiga_cmd_execute_prepare_command+0xfa>
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8008cb4:	7f63      	ldrb	r3, [r4, #29]
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8008cb6:	2103      	movs	r1, #3
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8008cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008cbc:	220a      	movs	r2, #10
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8008cbe:	7763      	strb	r3, [r4, #29]
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8008cc0:	75a1      	strb	r1, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008cc2:	75e2      	strb	r2, [r4, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
                break;
 8008cc4:	e797      	b.n	8008bf6 <optiga_cmd_execute_prepare_command+0x116>
 8008cc6:	bf00      	nop

08008cc8 <optiga_cmd_execute_comms_close>:

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
}

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
    do
    {
        *exit_loop = TRUE;
 8008cd0:	2701      	movs	r7, #1
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
 8008cd2:	f04f 0800 	mov.w	r8, #0
 8008cd6:	e00b      	b.n	8008cf0 <optiga_cmd_execute_comms_close+0x28>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	68e0      	ldr	r0, [r4, #12]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8008ce0:	7f23      	ldrb	r3, [r4, #28]
 8008ce2:	2b22      	cmp	r3, #34	; 0x22
 8008ce4:	d07d      	beq.n	8008de2 <optiga_cmd_execute_comms_close+0x11a>
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8008ce6:	782b      	ldrb	r3, [r5, #0]
 8008ce8:	b993      	cbnz	r3, 8008d10 <optiga_cmd_execute_comms_close+0x48>
 8008cea:	7da3      	ldrb	r3, [r4, #22]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d10f      	bne.n	8008d10 <optiga_cmd_execute_comms_close+0x48>

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8008cf0:	702f      	strb	r7, [r5, #0]
        switch (me->cmd_sub_execution_state)
 8008cf2:	7de3      	ldrb	r3, [r4, #23]
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d00d      	beq.n	8008d14 <optiga_cmd_execute_comms_close+0x4c>
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d0ed      	beq.n	8008cd8 <optiga_cmd_execute_comms_close+0x10>
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008cfc:	f240 2302 	movw	r3, #514	; 0x202
 8008d00:	2204      	movs	r2, #4
 8008d02:	75a2      	strb	r2, [r4, #22]
 8008d04:	8423      	strh	r3, [r4, #32]
 8008d06:	f885 8000 	strb.w	r8, [r5]
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8008d0a:	7da3      	ldrb	r3, [r4, #22]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d0ef      	beq.n	8008cf0 <optiga_cmd_execute_comms_close+0x28>
 8008d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8008d14:	7f23      	ldrb	r3, [r4, #28]
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8008d16:	7ea2      	ldrb	r2, [r4, #26]
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8008d18:	2b22      	cmp	r3, #34	; 0x22
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8008d1a:	bf1c      	itt	ne
 8008d1c:	2304      	movne	r3, #4
 8008d1e:	75e3      	strbne	r3, [r4, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	7ee2      	ldrb	r2, [r4, #27]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	73da      	strb	r2, [r3, #15]
                if (0 != me->p_optiga->protection_level_state)
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f893 2688 	ldrb.w	r2, [r3, #1672]	; 0x688
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8008d34:	681b      	ldr	r3, [r3, #0]
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                if (0 != me->p_optiga->protection_level_state)
 8008d36:	b302      	cbz	r2, 8008d7a <optiga_cmd_execute_comms_close+0xb2>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8008d38:	7f22      	ldrb	r2, [r4, #28]
 8008d3a:	741a      	strb	r2, [r3, #16]
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	f883 8688 	strb.w	r8, [r3, #1672]	; 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	6813      	ldr	r3, [r2, #0]
 8008d46:	f8d2 2678 	ldr.w	r2, [r2, #1656]	; 0x678
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8008d4a:	f04f 0904 	mov.w	r9, #4
 8008d4e:	f884 9017 	strb.w	r9, [r4, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8008d52:	4618      	mov	r0, r3
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8008d54:	615a      	str	r2, [r3, #20]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8008d56:	4621      	mov	r1, r4
 8008d58:	f7fe fe76 	bl	8007a48 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	f7fe fec2 	bl	8007ae8 <optiga_comms_close>
 8008d64:	4606      	mov	r6, r0
 8008d66:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8008d68:	b150      	cbz	r0, 8008d80 <optiga_cmd_execute_comms_close+0xb8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008d6a:	f240 2302 	movw	r3, #514	; 0x202
 8008d6e:	f884 9016 	strb.w	r9, [r4, #22]
 8008d72:	8423      	strh	r3, [r4, #32]
 8008d74:	f885 8000 	strb.w	r8, [r5]
                    break;
 8008d78:	e7b7      	b.n	8008cea <optiga_cmd_execute_comms_close+0x22>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8008d7a:	2233      	movs	r2, #51	; 0x33
 8008d7c:	741a      	strb	r2, [r3, #16]
 8008d7e:	e7dd      	b.n	8008d3c <optiga_cmd_execute_comms_close+0x74>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8008d80:	7f23      	ldrb	r3, [r4, #28]
 8008d82:	2b22      	cmp	r3, #34	; 0x22
 8008d84:	d105      	bne.n	8008d92 <optiga_cmd_execute_comms_close+0xca>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
                    *exit_loop = TRUE;
 8008d86:	2301      	movs	r3, #1
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8008d88:	f884 9017 	strb.w	r9, [r4, #23]
                    *exit_loop = TRUE;
 8008d8c:	702b      	strb	r3, [r5, #0]
 8008d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008d92:	7fa3      	ldrb	r3, [r4, #30]
 8008d94:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008d96:	4927      	ldr	r1, [pc, #156]	; (8008e34 <optiga_cmd_execute_comms_close+0x16c>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008d98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008d9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8008da8:	7fa3      	ldrb	r3, [r4, #30]
 8008daa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008dae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008db2:	f8c3 6630 	str.w	r6, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8008db6:	7fa3      	ldrb	r3, [r4, #30]
 8008db8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008dbc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008dc0:	f882 6638 	strb.w	r6, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008dc4:	7fa3      	ldrb	r3, [r4, #30]
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008dcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dd0:	f883 7639 	strb.w	r7, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008dd4:	6822      	ldr	r2, [r4, #0]
 8008dd6:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8008dda:	f7fc f91d 	bl	8005018 <pal_os_event_start>
                    *exit_loop = TRUE;
                }
                // For synchronous behavior: After exit from optiga_comms_close, release lock
                else
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8008dde:	8426      	strh	r6, [r4, #32]
 8008de0:	e781      	b.n	8008ce6 <optiga_cmd_execute_comms_close+0x1e>
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008de2:	7fa3      	ldrb	r3, [r4, #30]
 8008de4:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008de6:	4913      	ldr	r1, [pc, #76]	; (8008e34 <optiga_cmd_execute_comms_close+0x16c>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008de8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008dec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8008df8:	7fa3      	ldrb	r3, [r4, #30]
 8008dfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008dfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e02:	f8c3 8630 	str.w	r8, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8008e06:	7fa3      	ldrb	r3, [r4, #30]
 8008e08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008e10:	f882 8638 	strb.w	r8, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008e14:	7fa3      	ldrb	r3, [r4, #30]
 8008e16:	6822      	ldr	r2, [r4, #0]
 8008e18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e20:	f883 7639 	strb.w	r7, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008e24:	6822      	ldr	r2, [r4, #0]
 8008e26:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8008e2a:	f7fc f8f5 	bl	8005018 <pal_os_event_start>
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8008e2e:	f8a4 8020 	strh.w	r8, [r4, #32]
 8008e32:	e758      	b.n	8008ce6 <optiga_cmd_execute_comms_close+0x1e>
 8008e34:	08007b79 	.word	0x08007b79

08008e38 <optiga_cmd_execute_handler>:
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	b082      	sub	sp, #8
    uint8_t exit_loop = TRUE;
 8008e3e:	2301      	movs	r3, #1
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8008e40:	4604      	mov	r4, r0
    uint8_t exit_loop = TRUE;
 8008e42:	f88d 3007 	strb.w	r3, [sp, #7]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8008e46:	460d      	mov	r5, r1
 8008e48:	2900      	cmp	r1, #0
 8008e4a:	f040 80c0 	bne.w	8008fce <optiga_cmd_execute_handler+0x196>
 8008e4e:	7d83      	ldrb	r3, [r0, #22]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8008e50:	2601      	movs	r6, #1
        me->exit_status = event;
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d878      	bhi.n	8008f48 <optiga_cmd_execute_handler+0x110>
 8008e56:	e8df f003 	tbb	[pc, r3]
 8008e5a:	8303      	.short	0x8303
 8008e5c:	727d      	.short	0x727d
 8008e5e:	43          	.byte	0x43
 8008e5f:	00          	.byte	0x00
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8008e60:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8008e62:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 8008e66:	2d01      	cmp	r5, #1
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008e68:	f04f 0702 	mov.w	r7, #2
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8008e6c:	d01b      	beq.n	8008ea6 <optiga_cmd_execute_handler+0x6e>
 8008e6e:	f0c0 8087 	bcc.w	8008f80 <optiga_cmd_execute_handler+0x148>
 8008e72:	2d02      	cmp	r5, #2
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008e74:	4963      	ldr	r1, [pc, #396]	; (8009004 <optiga_cmd_execute_handler+0x1cc>)
 8008e76:	4622      	mov	r2, r4
 8008e78:	f04f 0332 	mov.w	r3, #50	; 0x32
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8008e7c:	d176      	bne.n	8008f6c <optiga_cmd_execute_handler+0x134>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008e7e:	6820      	ldr	r0, [r4, #0]
 8008e80:	f8d0 0678 	ldr.w	r0, [r0, #1656]	; 0x678
 8008e84:	f7fc f918 	bl	80050b8 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008e88:	2309      	movs	r3, #9
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8008e8a:	75a5      	strb	r5, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008e8c:	75e3      	strb	r3, [r4, #23]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8008e8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d150      	bne.n	8008f38 <optiga_cmd_execute_handler+0x100>
 8008e96:	7da3      	ldrb	r3, [r4, #22]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1da      	bne.n	8008e52 <optiga_cmd_execute_handler+0x1a>
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8008e9c:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8008e9e:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 8008ea2:	2d01      	cmp	r5, #1
 8008ea4:	d1e3      	bne.n	8008e6e <optiga_cmd_execute_handler+0x36>
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	7ea2      	ldrb	r2, [r4, #26]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	7ee2      	ldrb	r2, [r4, #27]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	73da      	strb	r2, [r3, #15]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	7f22      	ldrb	r2, [r4, #28]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	741a      	strb	r2, [r3, #16]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8008ec6:	6143      	str	r3, [r0, #20]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8008ec8:	4621      	mov	r1, r4
 8008eca:	f7fe fdbd 	bl	8007a48 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f7fe fdbd 	bl	8007a50 <optiga_comms_open>
 8008ed6:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d147      	bne.n	8008f6c <optiga_cmd_execute_handler+0x134>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8008edc:	75e7      	strb	r7, [r4, #23]
 8008ede:	e7d6      	b.n	8008e8e <optiga_cmd_execute_handler+0x56>
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008ee0:	7fa3      	ldrb	r3, [r4, #30]
 8008ee2:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008ee4:	4948      	ldr	r1, [pc, #288]	; (8009008 <optiga_cmd_execute_handler+0x1d0>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008ee6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008eea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef2:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8008ef6:	7fa3      	ldrb	r3, [r4, #30]
 8008ef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008efc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f00:	2000      	movs	r0, #0
 8008f02:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8008f06:	7fa3      	ldrb	r3, [r4, #30]
 8008f08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008f0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008f10:	2501      	movs	r5, #1
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8008f12:	f882 0638 	strb.w	r0, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008f16:	7fa3      	ldrb	r3, [r4, #30]
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f22:	f883 5639 	strb.w	r5, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8008f2c:	f7fc f874 	bl	8005018 <pal_os_event_start>
{
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
        me->handler(me->caller_context, me->exit_status);
 8008f30:	6923      	ldr	r3, [r4, #16]
 8008f32:	68e0      	ldr	r0, [r4, #12]
 8008f34:	8c21      	ldrh	r1, [r4, #32]
 8008f36:	4798      	blx	r3
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
}
 8008f38:	b002      	add	sp, #8
 8008f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                optiga_cmd_execute_prepare_command(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f10d 0107 	add.w	r1, sp, #7
 8008f44:	f7ff fc7c 	bl	8008840 <optiga_cmd_execute_process_response>
            }
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8008f48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1f3      	bne.n	8008f38 <optiga_cmd_execute_handler+0x100>
 8008f50:	7da3      	ldrb	r3, [r4, #22]
 8008f52:	e77e      	b.n	8008e52 <optiga_cmd_execute_handler+0x1a>
                optiga_cmd_execute_comms_close(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8008f54:	4620      	mov	r0, r4
 8008f56:	f10d 0107 	add.w	r1, sp, #7
 8008f5a:	f7ff fdc1 	bl	8008ae0 <optiga_cmd_execute_prepare_command>
                break;
 8008f5e:	e7f3      	b.n	8008f48 <optiga_cmd_execute_handler+0x110>
                optiga_cmd_execute_comms_open(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8008f60:	4620      	mov	r0, r4
 8008f62:	f10d 0107 	add.w	r1, sp, #7
 8008f66:	f7ff feaf 	bl	8008cc8 <optiga_cmd_execute_comms_close>
                break;
 8008f6a:	e7ed      	b.n	8008f48 <optiga_cmd_execute_handler+0x110>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2104      	movs	r1, #4
 8008f70:	f240 2202 	movw	r2, #514	; 0x202
 8008f74:	f88d 3007 	strb.w	r3, [sp, #7]
 8008f78:	75a1      	strb	r1, [r4, #22]
 8008f7a:	8422      	strh	r2, [r4, #32]
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
        me->exit_status = event;
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	e768      	b.n	8008e52 <optiga_cmd_execute_handler+0x1a>
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8008f80:	7fa5      	ldrb	r5, [r4, #30]
 8008f82:	f8d4 8000 	ldr.w	r8, [r4]
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f8a:	f7fc f8c5 	bl	8005118 <pal_os_timer_get_time_in_microseconds>
 8008f8e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008f92:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008f94:	f8c5 0634 	str.w	r0, [r5, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008f98:	7fa3      	ldrb	r3, [r4, #30]
 8008f9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008f9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008fa2:	2021      	movs	r0, #33	; 0x21
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008fa4:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008fa8:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008faa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008fae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8008fb2:	2100      	movs	r1, #0
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008fb4:	f882 7639 	strb.w	r7, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008fb8:	7fa3      	ldrb	r3, [r4, #30]
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fc4:	f883 0638 	strb.w	r0, [r3, #1592]	; 0x638
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8008fc8:	75e6      	strb	r6, [r4, #23]
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8008fca:	8421      	strh	r1, [r4, #32]
 8008fcc:	e75f      	b.n	8008e8e <optiga_cmd_execute_handler+0x56>
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8008fce:	7e43      	ldrb	r3, [r0, #25]
 8008fd0:	b113      	cbz	r3, 8008fd8 <optiga_cmd_execute_handler+0x1a0>
 8008fd2:	7f03      	ldrb	r3, [r0, #28]
 8008fd4:	2b22      	cmp	r3, #34	; 0x22
 8008fd6:	d003      	beq.n	8008fe0 <optiga_cmd_execute_handler+0x1a8>
    if (OPTIGA_LIB_SUCCESS != event)
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8008fd8:	2304      	movs	r3, #4
        me->exit_status = event;
 8008fda:	8425      	strh	r5, [r4, #32]
    if (OPTIGA_LIB_SUCCESS != event)
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8008fdc:	75a3      	strb	r3, [r4, #22]
 8008fde:	e737      	b.n	8008e50 <optiga_cmd_execute_handler+0x18>
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8008fe0:	6800      	ldr	r0, [r0, #0]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8008fe8:	2208      	movs	r2, #8
 8008fea:	f7fc f881 	bl	80050f0 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8008fee:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8008ff0:	2833      	cmp	r0, #51	; 0x33
 8008ff2:	d1f1      	bne.n	8008fd8 <optiga_cmd_execute_handler+0x1a0>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                     me->p_optiga->optiga_context_handle_buffer,
 8008ff4:	6821      	ldr	r1, [r4, #0]
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8008ff6:	2208      	movs	r2, #8
 8008ff8:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8008ffc:	f7fb ffbc 	bl	8004f78 <pal_os_datastore_write>
 8009000:	e7ea      	b.n	8008fd8 <optiga_cmd_execute_handler+0x1a0>
 8009002:	bf00      	nop
 8009004:	080091a1 	.word	0x080091a1
 8009008:	08007b79 	.word	0x08007b79

0800900c <optiga_cmd_execute_handler.constprop.13>:
        me->handler(me->caller_context, me->exit_status);
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
 800900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009010:	b082      	sub	sp, #8
{
    uint8_t exit_loop = TRUE;
 8009012:	2601      	movs	r6, #1
 8009014:	7d83      	ldrb	r3, [r0, #22]
 8009016:	f88d 6007 	strb.w	r6, [sp, #7]
        me->handler(me->caller_context, me->exit_status);
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
 800901a:	4604      	mov	r4, r0
        me->exit_status = event;
    }

    do
    {
        switch (me->cmd_next_execution_state)
 800901c:	2b04      	cmp	r3, #4
 800901e:	d878      	bhi.n	8009112 <optiga_cmd_execute_handler.constprop.13+0x106>
 8009020:	e8df f003 	tbb	[pc, r3]
 8009024:	727d8303 	.word	0x727d8303
 8009028:	43          	.byte	0x43
 8009029:	00          	.byte	0x00
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 800902a:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 800902c:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 8009030:	2d01      	cmp	r5, #1
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8009032:	f04f 0702 	mov.w	r7, #2
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8009036:	d01b      	beq.n	8009070 <optiga_cmd_execute_handler.constprop.13+0x64>
 8009038:	f0c0 8087 	bcc.w	800914a <optiga_cmd_execute_handler.constprop.13+0x13e>
 800903c:	2d02      	cmp	r5, #2
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800903e:	4956      	ldr	r1, [pc, #344]	; (8009198 <optiga_cmd_execute_handler.constprop.13+0x18c>)
 8009040:	4622      	mov	r2, r4
 8009042:	f04f 0332 	mov.w	r3, #50	; 0x32
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8009046:	d176      	bne.n	8009136 <optiga_cmd_execute_handler.constprop.13+0x12a>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8009048:	6820      	ldr	r0, [r4, #0]
 800904a:	f8d0 0678 	ldr.w	r0, [r0, #1656]	; 0x678
 800904e:	f7fc f833 	bl	80050b8 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8009052:	2309      	movs	r3, #9
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8009054:	75a5      	strb	r5, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8009056:	75e3      	strb	r3, [r4, #23]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8009058:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d150      	bne.n	8009102 <optiga_cmd_execute_handler.constprop.13+0xf6>
 8009060:	7da3      	ldrb	r3, [r4, #22]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1da      	bne.n	800901c <optiga_cmd_execute_handler.constprop.13+0x10>
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8009066:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8009068:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 800906c:	2d01      	cmp	r5, #1
 800906e:	d1e3      	bne.n	8009038 <optiga_cmd_execute_handler.constprop.13+0x2c>
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	7ea2      	ldrb	r2, [r4, #26]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	7ee2      	ldrb	r2, [r4, #27]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	73da      	strb	r2, [r3, #15]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	7f22      	ldrb	r2, [r4, #28]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	741a      	strb	r2, [r3, #16]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8009090:	6143      	str	r3, [r0, #20]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8009092:	4621      	mov	r1, r4
 8009094:	f7fe fcd8 	bl	8007a48 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	f7fe fcd8 	bl	8007a50 <optiga_comms_open>
 80090a0:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d147      	bne.n	8009136 <optiga_cmd_execute_handler.constprop.13+0x12a>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 80090a6:	75e7      	strb	r7, [r4, #23]
 80090a8:	e7d6      	b.n	8009058 <optiga_cmd_execute_handler.constprop.13+0x4c>
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80090aa:	7fa3      	ldrb	r3, [r4, #30]
 80090ac:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80090ae:	493b      	ldr	r1, [pc, #236]	; (800919c <optiga_cmd_execute_handler.constprop.13+0x190>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80090b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80090b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80090c0:	7fa3      	ldrb	r3, [r4, #30]
 80090c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80090c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090ca:	2000      	movs	r0, #0
 80090cc:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80090d0:	7fa3      	ldrb	r3, [r4, #30]
 80090d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80090d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80090da:	2501      	movs	r5, #1
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80090dc:	f882 0638 	strb.w	r0, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80090e0:	7fa3      	ldrb	r3, [r4, #30]
 80090e2:	6822      	ldr	r2, [r4, #0]
 80090e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80090e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090ec:	f883 5639 	strb.w	r5, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 80090f6:	f7fb ff8f 	bl	8005018 <pal_os_event_start>
{
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
        me->handler(me->caller_context, me->exit_status);
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	68e0      	ldr	r0, [r4, #12]
 80090fe:	8c21      	ldrh	r1, [r4, #32]
 8009100:	4798      	blx	r3
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
}
 8009102:	b002      	add	sp, #8
 8009104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                optiga_cmd_execute_prepare_command(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8009108:	4620      	mov	r0, r4
 800910a:	f10d 0107 	add.w	r1, sp, #7
 800910e:	f7ff fb97 	bl	8008840 <optiga_cmd_execute_process_response>
            }
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8009112:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1f3      	bne.n	8009102 <optiga_cmd_execute_handler.constprop.13+0xf6>
 800911a:	7da3      	ldrb	r3, [r4, #22]
 800911c:	e77e      	b.n	800901c <optiga_cmd_execute_handler.constprop.13+0x10>
                optiga_cmd_execute_comms_close(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 800911e:	4620      	mov	r0, r4
 8009120:	f10d 0107 	add.w	r1, sp, #7
 8009124:	f7ff fcdc 	bl	8008ae0 <optiga_cmd_execute_prepare_command>
 8009128:	e7f3      	b.n	8009112 <optiga_cmd_execute_handler.constprop.13+0x106>
                optiga_cmd_execute_comms_open(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 800912a:	4620      	mov	r0, r4
 800912c:	f10d 0107 	add.w	r1, sp, #7
 8009130:	f7ff fdca 	bl	8008cc8 <optiga_cmd_execute_comms_close>
 8009134:	e7ed      	b.n	8009112 <optiga_cmd_execute_handler.constprop.13+0x106>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8009136:	2300      	movs	r3, #0
 8009138:	2104      	movs	r1, #4
 800913a:	f240 2202 	movw	r2, #514	; 0x202
 800913e:	f88d 3007 	strb.w	r3, [sp, #7]
 8009142:	75a1      	strb	r1, [r4, #22]
 8009144:	8422      	strh	r2, [r4, #32]
        me->handler(me->caller_context, me->exit_status);
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
 8009146:	2304      	movs	r3, #4
 8009148:	e768      	b.n	800901c <optiga_cmd_execute_handler.constprop.13+0x10>
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 800914a:	7fa5      	ldrb	r5, [r4, #30]
 800914c:	f8d4 8000 	ldr.w	r8, [r4]
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8009150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009154:	f7fb ffe0 	bl	8005118 <pal_os_timer_get_time_in_microseconds>
 8009158:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 800915c:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 800915e:	f8c5 0634 	str.w	r0, [r5, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8009162:	7fa3      	ldrb	r3, [r4, #30]
 8009164:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 800916c:	2021      	movs	r0, #33	; 0x21
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 800916e:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8009172:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8009174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009178:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800917c:	2100      	movs	r1, #0
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 800917e:	f882 7639 	strb.w	r7, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8009182:	7fa3      	ldrb	r3, [r4, #30]
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800918a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800918e:	f883 0638 	strb.w	r0, [r3, #1592]	; 0x638
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8009192:	75e6      	strb	r6, [r4, #23]
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8009194:	8421      	strh	r1, [r4, #32]
 8009196:	e75f      	b.n	8009058 <optiga_cmd_execute_handler.constprop.13+0x4c>
 8009198:	080091a1 	.word	0x080091a1
 800919c:	08007b79 	.word	0x08007b79

080091a0 <optiga_cmd_event_trigger_execute>:
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 80091a0:	f7ff bf34 	b.w	800900c <optiga_cmd_execute_handler.constprop.13>

080091a4 <optiga_cmd_set_shielded_connection_option>:
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
    switch (shielded_connection_option)
 80091a4:	2a01      	cmp	r2, #1
 80091a6:	d007      	beq.n	80091b8 <optiga_cmd_set_shielded_connection_option+0x14>
 80091a8:	d304      	bcc.n	80091b4 <optiga_cmd_set_shielded_connection_option+0x10>
 80091aa:	2a02      	cmp	r2, #2
 80091ac:	d101      	bne.n	80091b2 <optiga_cmd_set_shielded_connection_option+0xe>
        }
        break;
        // Manage Context
        case OPTIGA_SET_MANAGE_CONTEXT:
        {
            me->manage_context_operation = value;
 80091ae:	7701      	strb	r1, [r0, #28]
 80091b0:	4770      	bx	lr
 80091b2:	4770      	bx	lr
    switch (shielded_connection_option)
    {
        // Protection Level
        case OPTIGA_SET_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80091b4:	7681      	strb	r1, [r0, #26]
        }
        break;
 80091b6:	4770      	bx	lr
        // Protocol Version
        case OPTIGA_SET_PROTECTION_VERSION:
        {
            me->protocol_version = value;
 80091b8:	76c1      	strb	r1, [r0, #27]
        }
        break;
 80091ba:	4770      	bx	lr

080091bc <optiga_cmd_create>:
        }
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	4606      	mov	r6, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	4615      	mov	r5, r2
    optiga_cmd_t * me = NULL;

    pal_os_lock_enter_critical_section();
 80091c4:	f7fb ff8a 	bl	80050dc <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 80091c8:	2e00      	cmp	r6, #0
 80091ca:	d153      	bne.n	8009274 <optiga_cmd_create+0xb8>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
            }
            break;
            case OPTIGA_CMD_QUEUE_SLOT_STATE:
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 80091cc:	4e47      	ldr	r6, [pc, #284]	; (80092ec <optiga_cmd_create+0x130>)
 80091ce:	f896 3639 	ldrb.w	r3, [r6, #1593]	; 0x639
 80091d2:	fab3 f383 	clz	r3, r3
 80091d6:	095b      	lsrs	r3, r3, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 80091d8:	1c58      	adds	r0, r3, #1
 80091da:	f896 1645 	ldrb.w	r1, [r6, #1605]	; 0x645
 80091de:	f896 2651 	ldrb.w	r2, [r6, #1617]	; 0x651
 80091e2:	f896 c65d 	ldrb.w	ip, [r6, #1629]	; 0x65d
 80091e6:	f896 e669 	ldrb.w	lr, [r6, #1641]	; 0x669
 80091ea:	f896 7675 	ldrb.w	r7, [r6, #1653]	; 0x675
 80091ee:	b2c0      	uxtb	r0, r0
 80091f0:	2900      	cmp	r1, #0
 80091f2:	bf18      	it	ne
 80091f4:	4618      	movne	r0, r3
 80091f6:	1c41      	adds	r1, r0, #1
 80091f8:	b2c9      	uxtb	r1, r1
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	bf18      	it	ne
 80091fe:	4601      	movne	r1, r0
 8009200:	1c4a      	adds	r2, r1, #1
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	f1bc 0f00 	cmp.w	ip, #0
 8009208:	bf18      	it	ne
 800920a:	460a      	movne	r2, r1
 800920c:	1c51      	adds	r1, r2, #1
 800920e:	b2c9      	uxtb	r1, r1
 8009210:	f1be 0f00 	cmp.w	lr, #0
 8009214:	bf14      	ite	ne
 8009216:	4613      	movne	r3, r2
 8009218:	460b      	moveq	r3, r1
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	b2d2      	uxtb	r2, r2
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 800921e:	2f00      	cmp	r7, #0
 8009220:	bf08      	it	eq
 8009222:	4613      	moveq	r3, r2
 8009224:	b333      	cbz	r3, 8009274 <optiga_cmd_create+0xb8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 8009226:	2001      	movs	r0, #1
 8009228:	2128      	movs	r1, #40	; 0x28
 800922a:	f7fb ff5b 	bl	80050e4 <pal_os_calloc>
        if (NULL == me)
 800922e:	4607      	mov	r7, r0
 8009230:	b300      	cbz	r0, 8009274 <optiga_cmd_create+0xb8>
        {
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
 8009232:	60c5      	str	r5, [r0, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8009234:	6006      	str	r6, [r0, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
 8009236:	7b33      	ldrb	r3, [r6, #12]
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 8009238:	6104      	str	r4, [r0, #16]
        me->caller_context = caller_context;

        me->p_optiga = g_optiga_list[optiga_instance_id];
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 800923a:	2233      	movs	r2, #51	; 0x33
 800923c:	8442      	strh	r2, [r0, #34]	; 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 800923e:	b1f3      	cbz	r3, 800927e <optiga_cmd_create+0xc2>
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8009240:	f896 3639 	ldrb.w	r3, [r6, #1593]	; 0x639
 8009244:	2b00      	cmp	r3, #0
 8009246:	d033      	beq.n	80092b0 <optiga_cmd_create+0xf4>
 8009248:	f896 3645 	ldrb.w	r3, [r6, #1605]	; 0x645
 800924c:	2b00      	cmp	r3, #0
 800924e:	d03f      	beq.n	80092d0 <optiga_cmd_create+0x114>
 8009250:	f896 3651 	ldrb.w	r3, [r6, #1617]	; 0x651
 8009254:	2b00      	cmp	r3, #0
 8009256:	d03e      	beq.n	80092d6 <optiga_cmd_create+0x11a>
 8009258:	f896 365d 	ldrb.w	r3, [r6, #1629]	; 0x65d
 800925c:	2b00      	cmp	r3, #0
 800925e:	d03d      	beq.n	80092dc <optiga_cmd_create+0x120>
 8009260:	f896 3669 	ldrb.w	r3, [r6, #1641]	; 0x669
 8009264:	b31b      	cbz	r3, 80092ae <optiga_cmd_create+0xf2>
 8009266:	f896 3675 	ldrb.w	r3, [r6, #1653]	; 0x675
 800926a:	b373      	cbz	r3, 80092ca <optiga_cmd_create+0x10e>
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 800926c:	f7fb ff38 	bl	80050e0 <pal_os_lock_exit_critical_section>
    return (me);
}
 8009270:	4638      	mov	r0, r7
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
    optiga_cmd_t * me = NULL;
 8009274:	2700      	movs	r7, #0
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8009276:	f7fb ff33 	bl	80050e0 <pal_os_lock_exit_critical_section>
    return (me);
}
 800927a:	4638      	mov	r0, r7
 800927c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 800927e:	4631      	mov	r1, r6
 8009280:	481b      	ldr	r0, [pc, #108]	; (80092f0 <optiga_cmd_create+0x134>)
 8009282:	f7fb fee3 	bl	800504c <pal_os_event_create>
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8009286:	4639      	mov	r1, r7
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8009288:	f8c6 0678 	str.w	r0, [r6, #1656]	; 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 800928c:	4819      	ldr	r0, [pc, #100]	; (80092f4 <optiga_cmd_create+0x138>)
 800928e:	683c      	ldr	r4, [r7, #0]
 8009290:	f7fe fbc4 	bl	8007a1c <optiga_comms_create>
            if (NULL == me->p_optiga->p_optiga_comms)
 8009294:	683b      	ldr	r3, [r7, #0]

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8009296:	6020      	str	r0, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8009298:	681c      	ldr	r4, [r3, #0]
 800929a:	b314      	cbz	r4, 80092e2 <optiga_cmd_create+0x126>
            {
                pal_os_free(me);
                me = NULL;
                break;
            }
            me->p_optiga->instance_init_state = TRUE;
 800929c:	2201      	movs	r2, #1
 800929e:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80092a8:	6153      	str	r3, [r2, #20]
 80092aa:	683e      	ldr	r6, [r7, #0]
 80092ac:	e7c8      	b.n	8009240 <optiga_cmd_create+0x84>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80092ae:	2304      	movs	r3, #4
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80092b0:	461a      	mov	r2, r3
        {
            * queue_index_store =  index;
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80092b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80092b6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80092ba:	2201      	movs	r2, #1
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
        {
            * queue_index_store =  index;
 80092bc:	77bb      	strb	r3, [r7, #30]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80092be:	f886 2639 	strb.w	r2, [r6, #1593]	; 0x639
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 80092c2:	f7fb ff0d 	bl	80050e0 <pal_os_lock_exit_critical_section>
    return (me);
}
 80092c6:	4638      	mov	r0, r7
 80092c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80092ca:	2305      	movs	r3, #5
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80092cc:	461a      	mov	r2, r3
 80092ce:	e7f0      	b.n	80092b2 <optiga_cmd_create+0xf6>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80092d0:	2301      	movs	r3, #1
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80092d2:	461a      	mov	r2, r3
 80092d4:	e7ed      	b.n	80092b2 <optiga_cmd_create+0xf6>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80092d6:	2302      	movs	r3, #2
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80092d8:	461a      	mov	r2, r3
 80092da:	e7ea      	b.n	80092b2 <optiga_cmd_create+0xf6>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80092dc:	2303      	movs	r3, #3
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80092de:	461a      	mov	r2, r3
 80092e0:	e7e7      	b.n	80092b2 <optiga_cmd_create+0xf6>
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
            if (NULL == me->p_optiga->p_optiga_comms)
            {
                pal_os_free(me);
 80092e2:	4638      	mov	r0, r7
 80092e4:	f7fb ff00 	bl	80050e8 <pal_os_free>
                me = NULL;
 80092e8:	4627      	mov	r7, r4
                break;
 80092ea:	e7bf      	b.n	800926c <optiga_cmd_create+0xb0>
 80092ec:	1ffed804 	.word	0x1ffed804
 80092f0:	08007b79 	.word	0x08007b79
 80092f4:	08008e39 	.word	0x08008e39

080092f8 <optiga_cmd_destroy>:
optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (NULL != me)
 80092f8:	b300      	cbz	r0, 800933c <optiga_cmd_destroy+0x44>
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 80092fa:	8a83      	ldrh	r3, [r0, #20]
 80092fc:	6802      	ldr	r2, [r0, #0]
    pal_os_lock_exit_critical_section();
    return (me);
}

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 80092fe:	b510      	push	{r4, lr}
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8009300:	b133      	cbz	r3, 8009310 <optiga_cmd_destroy+0x18>
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	441a      	add	r2, r3
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8009308:	2300      	movs	r3, #0
 800930a:	8283      	strh	r3, [r0, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 800930c:	7213      	strb	r3, [r2, #8]
 800930e:	6802      	ldr	r2, [r0, #0]
/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 8009310:	7f81      	ldrb	r1, [r0, #30]
 8009312:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009316:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800931a:	2400      	movs	r4, #0
 800931c:	f882 4639 	strb.w	r4, [r2, #1593]	; 0x639
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8009320:	7f82      	ldrb	r2, [r0, #30]
 8009322:	6801      	ldr	r1, [r0, #0]
 8009324:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009328:	4603      	mov	r3, r0
 800932a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800932e:	f882 4638 	strb.w	r4, [r2, #1592]	; 0x638
    me->queue_id = 0;
 8009332:	779c      	strb	r4, [r3, #30]
        if (NULL != me)
        {
            return_status = optiga_cmd_release_session(me);
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
            pal_os_free(me);
 8009334:	f7fb fed8 	bl	80050e8 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 8009338:	4620      	mov	r0, r4
 800933a:	bd10      	pop	{r4, pc}
    return (me);
}

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800933c:	f240 2002 	movw	r0, #514	; 0x202
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop

08009344 <optiga_cmd_open_application>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8009344:	b538      	push	{r3, r4, r5, lr}
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009346:	2400      	movs	r4, #0
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8009348:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 800934a:	4d06      	ldr	r5, [pc, #24]	; (8009364 <optiga_cmd_open_application+0x20>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 800934c:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 800934e:	22f0      	movs	r2, #240	; 0xf0
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 8009350:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009352:	8482      	strh	r2, [r0, #36]	; 0x24
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009354:	7584      	strb	r4, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8009356:	75c4      	strb	r4, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009358:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 800935a:	f7ff fe57 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 800935e:	4620      	mov	r0, r4
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	08008749 	.word	0x08008749

08009368 <optiga_cmd_close_application>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_close_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 800936a:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 800936c:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 800936e:	22f1      	movs	r2, #241	; 0xf1
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009370:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 8009372:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 8009374:	4d05      	ldr	r5, [pc, #20]	; (800938c <optiga_cmd_close_application+0x24>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 8009376:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009378:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 800937a:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 800937c:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 800937e:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009380:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8009382:	f7ff fe43 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CLOSE_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8009386:	4620      	mov	r0, r4
 8009388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938a:	bf00      	nop
 800938c:	080086d1 	.word	0x080086d1

08009390 <optiga_cmd_get_data_object>:
    return (return_status);
}

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8009392:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009394:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009396:	2281      	movs	r2, #129	; 0x81
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009398:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 800939a:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 800939c:	4d05      	ldr	r5, [pc, #20]	; (80093b4 <optiga_cmd_get_data_object+0x24>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 800939e:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80093a0:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80093a2:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80093a4:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80093a6:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80093a8:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80093aa:	f7ff fe2f 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 80093ae:	4620      	mov	r0, r4
 80093b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b2:	bf00      	nop
 80093b4:	08007eb5 	.word	0x08007eb5

080093b8 <optiga_cmd_set_data_object>:
}


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 80093ba:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80093bc:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80093be:	2282      	movs	r2, #130	; 0x82
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80093c0:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 80093c2:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 80093c4:	4d05      	ldr	r5, [pc, #20]	; (80093dc <optiga_cmd_set_data_object+0x24>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 80093c6:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80093c8:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80093ca:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80093cc:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80093ce:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80093d0:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80093d2:	f7ff fe1b 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_SET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 80093d6:	4620      	mov	r0, r4
 80093d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093da:	bf00      	nop
 80093dc:	08007fc9 	.word	0x08007fc9

080093e0 <optiga_cmd_get_random>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (TRUE == params->store_in_session)
 80093e2:	7b14      	ldrb	r4, [r2, #12]
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 80093e4:	4d09      	ldr	r5, [pc, #36]	; (800940c <optiga_cmd_get_random+0x2c>)
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 80093e6:	6082      	str	r2, [r0, #8]

optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (TRUE == params->store_in_session)
 80093e8:	2c01      	cmp	r4, #1
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
 80093ea:	bf14      	ite	ne
 80093ec:	2606      	movne	r6, #6
 80093ee:	2605      	moveq	r6, #5
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80093f0:	228c      	movs	r2, #140	; 0x8c
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80093f2:	2400      	movs	r4, #0
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80093f4:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 80093f6:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80093f8:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80093fa:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80093fc:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80093fe:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009400:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8009402:	f7ff fe03 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_RANDOM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8009406:	4620      	mov	r0, r4
 8009408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940a:	bf00      	nop
 800940c:	08008089 	.word	0x08008089

08009410 <optiga_cmd_verify_sign>:
}

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8009412:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009414:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009416:	22b2      	movs	r2, #178	; 0xb2
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009418:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 800941a:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 800941c:	4d05      	ldr	r5, [pc, #20]	; (8009434 <optiga_cmd_verify_sign+0x24>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 800941e:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009420:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8009422:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8009424:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009426:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009428:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 800942a:	f7ff fdef 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 800942e:	4620      	mov	r0, r4
 8009430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009432:	bf00      	nop
 8009434:	08008159 	.word	0x08008159

08009438 <optiga_cmd_encrypt_asym>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
 800943a:	6893      	ldr	r3, [r2, #8]
 800943c:	b17b      	cbz	r3, 800945e <optiga_cmd_encrypt_asym+0x26>
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 800943e:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009440:	239e      	movs	r3, #158	; 0x9e
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009442:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 8009444:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 8009446:	4d0a      	ldr	r5, [pc, #40]	; (8009470 <optiga_cmd_encrypt_asym+0x38>)
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8009448:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 800944a:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 800944c:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 800944e:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8009450:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
 8009452:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009454:	8483      	strh	r3, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8009456:	f7ff fdd9 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                           OPTIGA_CMD_EXEC_REQUEST_LOCK,
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_ENCRYPT_ASYM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
 800945a:	4620      	mov	r0, r4
 800945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
 800945e:	8813      	ldrh	r3, [r2, #0]
 8009460:	b913      	cbnz	r3, 8009468 <optiga_cmd_encrypt_asym+0x30>
 8009462:	8a83      	ldrh	r3, [r0, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1ea      	bne.n	800943e <optiga_cmd_encrypt_asym+0x6>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
 8009468:	f240 2003 	movw	r0, #515	; 0x203
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_ENCRYPT_ASYM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
    }
    return (return_status);
}
 800946c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800946e:	bf00      	nop
 8009470:	080082d5 	.word	0x080082d5

08009474 <optiga_cmd_calc_hash>:
}

optiga_lib_status_t optiga_cmd_calc_hash(optiga_cmd_t * me,
                                         uint8_t cmd_param,
                                         optiga_calc_hash_params_t * params)
{
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    p_optiga_calc_hash->data_sent = 0;
 8009476:	2400      	movs	r4, #0
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009478:	f04f 0e02 	mov.w	lr, #2
    me->cmd_sub_execution_state = sub_state;
 800947c:	2706      	movs	r7, #6
    me->cmd_hdlrs = cmd_hdlrs;
 800947e:	4e07      	ldr	r6, [pc, #28]	; (800949c <optiga_cmd_calc_hash+0x28>)
                                         optiga_calc_hash_params_t * params)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    p_optiga_calc_hash->data_sent = 0;
 8009480:	6114      	str	r4, [r2, #16]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009482:	25b0      	movs	r5, #176	; 0xb0
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8009484:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009486:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8009488:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 800948a:	f880 e016 	strb.w	lr, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 800948e:	75c7      	strb	r7, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8009490:	6046      	str	r6, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009492:	8485      	strh	r5, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8009494:	f7ff fdba 	bl	800900c <optiga_cmd_execute_handler.constprop.13>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_HASH, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8009498:	4620      	mov	r0, r4
 800949a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800949c:	080084b1 	.word	0x080084b1

080094a0 <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 80094a8:	2300      	movs	r3, #0
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 80094aa:	2101      	movs	r1, #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80094ac:	4618      	mov	r0, r3
    {
        pow[i] = x;
        log[x] = i;
 80094ae:	f8cd 341c 	str.w	r3, [sp, #1052]	; 0x41c
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 80094b2:	9106      	str	r1, [sp, #24]
 80094b4:	ac06      	add	r4, sp, #24
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80094b6:	2202      	movs	r2, #2
 80094b8:	e00a      	b.n	80094d0 <aes_gen_tables+0x30>
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 80094ba:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80094be:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 80094c2:	f844 1f04 	str.w	r1, [r4, #4]!
        log[x] = i;
 80094c6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80094ca:	bf18      	it	ne
 80094cc:	231b      	movne	r3, #27
 80094ce:	004a      	lsls	r2, r1, #1
 80094d0:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80094d2:	3001      	adds	r0, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80094d4:	4053      	eors	r3, r2
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80094d6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80094da:	b2d9      	uxtb	r1, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80094dc:	d1ed      	bne.n	80094ba <aes_gen_tables+0x1a>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80094de:	4b7a      	ldr	r3, [pc, #488]	; (80096c8 <aes_gen_tables+0x228>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80094e0:	4e7a      	ldr	r6, [pc, #488]	; (80096cc <aes_gen_tables+0x22c>)
    RSb[0x63] = 0x00;
 80094e2:	f8df e20c 	ldr.w	lr, [pc, #524]	; 80096f0 <aes_gen_tables+0x250>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80094e6:	2502      	movs	r5, #2
 80094e8:	2104      	movs	r1, #4
 80094ea:	2208      	movs	r2, #8
 80094ec:	2780      	movs	r7, #128	; 0x80
 80094ee:	f04f 0910 	mov.w	r9, #16
 80094f2:	f04f 0820 	mov.w	r8, #32
 80094f6:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80094fa:	241b      	movs	r4, #27
 80094fc:	2036      	movs	r0, #54	; 0x36
 80094fe:	605d      	str	r5, [r3, #4]
 8009500:	6099      	str	r1, [r3, #8]
 8009502:	2501      	movs	r5, #1
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8009504:	2163      	movs	r1, #99	; 0x63
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 8009506:	60da      	str	r2, [r3, #12]

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;
 8009508:	2200      	movs	r2, #0
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 800950a:	61df      	str	r7, [r3, #28]
 800950c:	f8c3 9010 	str.w	r9, [r3, #16]
 8009510:	f8c3 8014 	str.w	r8, [r3, #20]
 8009514:	f8c3 c018 	str.w	ip, [r3, #24]
 8009518:	621c      	str	r4, [r3, #32]
 800951a:	6258      	str	r0, [r3, #36]	; 0x24
 800951c:	601d      	str	r5, [r3, #0]
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 800951e:	7031      	strb	r1, [r6, #0]
    RSb[0x63] = 0x00;
 8009520:	f88e 2063 	strb.w	r2, [lr, #99]	; 0x63
 8009524:	f50d 6783 	add.w	r7, sp, #1048	; 0x418

    for( i = 1; i < 256; i++ )
    {
        x = pow[255 - log[i]];
 8009528:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800952c:	aa06      	add	r2, sp, #24
 800952e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009532:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8009536:	0041      	lsls	r1, r0, #1
 8009538:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
 800953c:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800953e:	004a      	lsls	r2, r1, #1
 8009540:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
 8009544:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8009546:	0053      	lsls	r3, r2, #1
 8009548:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f080 0063 	eor.w	r0, r0, #99	; 0x63
 8009552:	4041      	eors	r1, r0
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8009554:	0058      	lsls	r0, r3, #1
 8009556:	404a      	eors	r2, r1
 8009558:	ea40 11d3 	orr.w	r1, r0, r3, lsr #7
 800955c:	4053      	eors	r3, r2
 800955e:	b2ca      	uxtb	r2, r1
        x ^= y ^ 0x63;
 8009560:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 8009562:	f806 3f01 	strb.w	r3, [r6, #1]!
        RSb[x] = (unsigned char) i;
 8009566:	f80e 5003 	strb.w	r5, [lr, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 800956a:	3501      	adds	r5, #1
 800956c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009570:	d1da      	bne.n	8009528 <aes_gen_tables+0x88>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009572:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
 8009576:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8009578:	f8dd 343c 	ldr.w	r3, [sp, #1084]	; 0x43c
 800957c:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800957e:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80096f4 <aes_gen_tables+0x254>
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009588:	f8dd 3444 	ldr.w	r3, [sp, #1092]	; 0x444
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	4c50      	ldr	r4, [pc, #320]	; (80096d0 <aes_gen_tables+0x230>)
 8009590:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <aes_gen_tables+0x234>)
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	f8df c160 	ldr.w	ip, [pc, #352]	; 80096f8 <aes_gen_tables+0x258>
 8009598:	f8df e160 	ldr.w	lr, [pc, #352]	; 80096fc <aes_gen_tables+0x25c>
 800959c:	4d4e      	ldr	r5, [pc, #312]	; (80096d8 <aes_gen_tables+0x238>)
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800959e:	484f      	ldr	r0, [pc, #316]	; (80096dc <aes_gen_tables+0x23c>)
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80095a0:	9401      	str	r4, [sp, #4]
 80095a2:	2100      	movs	r1, #0
 80095a4:	46d3      	mov	fp, sl
 80095a6:	e05d      	b.n	8009664 <aes_gen_tables+0x1c4>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80095a8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80095ac:	9c03      	ldr	r4, [sp, #12]
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80095ae:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80095b2:	9b04      	ldr	r3, [sp, #16]
 80095b4:	eb06 0a03 	add.w	sl, r6, r3
 80095b8:	fb8a 2300 	smull	r2, r3, sl, r0
 80095bc:	eb0a 0803 	add.w	r8, sl, r3
 80095c0:	ea4f 73ea 	mov.w	r3, sl, asr #31
 80095c4:	ebc3 18e8 	rsb	r8, r3, r8, asr #7
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80095c8:	9a02      	ldr	r2, [sp, #8]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80095ca:	9b05      	ldr	r3, [sp, #20]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80095cc:	eb06 0904 	add.w	r9, r6, r4
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80095d0:	4432      	add	r2, r6
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80095d2:	18f3      	adds	r3, r6, r3

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80095d4:	ebc8 2808 	rsb	r8, r8, r8, lsl #8
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80095d8:	fb89 6700 	smull	r6, r7, r9, r0
 80095dc:	eb09 0607 	add.w	r6, r9, r7
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80095e0:	ebc8 080a 	rsb	r8, r8, sl
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80095e4:	ea4f 7ae9 	mov.w	sl, r9, asr #31
 80095e8:	ebca 1ae6 	rsb	sl, sl, r6, asr #7
 80095ec:	ebca 2a0a 	rsb	sl, sl, sl, lsl #8
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80095f0:	fb82 6700 	smull	r6, r7, r2, r0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80095f4:	ac06      	add	r4, sp, #24
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80095f6:	19d6      	adds	r6, r2, r7
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80095f8:	ebca 0909 	rsb	r9, sl, r9
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80095fc:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 8009600:	ebca 1ae6 	rsb	sl, sl, r6, asr #7
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009604:	fb83 6700 	smull	r6, r7, r3, r0
 8009608:	19de      	adds	r6, r3, r7

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800960a:	f854 7028 	ldr.w	r7, [r4, r8, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800960e:	f854 8029 	ldr.w	r8, [r4, r9, lsl #2]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009612:	ea4f 79e3 	mov.w	r9, r3, asr #31
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009616:	ebca 2a0a 	rsb	sl, sl, sl, lsl #8
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800961a:	ebc9 16e6 	rsb	r6, r9, r6, asr #7
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800961e:	ebca 0a02 	rsb	sl, sl, r2
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009622:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 8009626:	1b9e      	subs	r6, r3, r6
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8009628:	f854 202a 	ldr.w	r2, [r4, sl, lsl #2]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800962c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8009630:	043b      	lsls	r3, r7, #16
 8009632:	ea83 2708 	eor.w	r7, r3, r8, lsl #8
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8009636:	4057      	eors	r7, r2
 8009638:	ea87 6706 	eor.w	r7, r7, r6, lsl #24
 800963c:	ea4f 6637 	mov.w	r6, r7, ror #24
 8009640:	ea4f 6236 	mov.w	r2, r6, ror #24
 8009644:	ea4f 6332 	mov.w	r3, r2, ror #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
 8009648:	f845 2f04 	str.w	r2, [r5, #4]!
        RT3[i] = ROTL8( RT2[i] );
 800964c:	9a01      	ldr	r2, [sp, #4]
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800964e:	f84c 7f04 	str.w	r7, [ip, #4]!
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8009652:	3101      	adds	r1, #1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 8009654:	f842 3f04 	str.w	r3, [r2, #4]!
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8009658:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 800965c:	f84e 6f04 	str.w	r6, [lr, #4]!
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 8009660:	9201      	str	r2, [sp, #4]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8009662:	d02d      	beq.n	80096c0 <aes_gen_tables+0x220>
    {
        x = FSb[i];
 8009664:	9a00      	ldr	r2, [sp, #0]
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
 8009666:	4c1e      	ldr	r4, [pc, #120]	; (80096e0 <aes_gen_tables+0x240>)
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 8009668:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800966c:	9200      	str	r2, [sp, #0]
        y = XTIME( x ) & 0xFF;
 800966e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009672:	bf14      	ite	ne
 8009674:	221b      	movne	r2, #27
 8009676:	2200      	moveq	r2, #0
 8009678:	ea82 0243 	eor.w	r2, r2, r3, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 800967c:	021f      	lsls	r7, r3, #8
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8009684:	4057      	eors	r7, r2
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;
 8009686:	4053      	eors	r3, r2

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 8009688:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
 800968c:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 8009690:	4c14      	ldr	r4, [pc, #80]	; (80096e4 <aes_gen_tables+0x244>)
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8009692:	f81b 6f01 	ldrb.w	r6, [fp, #1]!
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 8009696:	ea4f 6733 	mov.w	r7, r3, ror #24
 800969a:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 800969e:	4c12      	ldr	r4, [pc, #72]	; (80096e8 <aes_gen_tables+0x248>)
 80096a0:	ea4f 6237 	mov.w	r2, r7, ror #24
        FT3[i] = ROTL8( FT2[i] );
 80096a4:	ea4f 6332 	mov.w	r3, r2, ror #24
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
        FT2[i] = ROTL8( FT1[i] );
 80096a8:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80096ac:	4a0f      	ldr	r2, [pc, #60]	; (80096ec <aes_gen_tables+0x24c>)
 80096ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	f47f af78 	bne.w	80095a8 <aes_gen_tables+0x108>
 80096b8:	4633      	mov	r3, r6
 80096ba:	4632      	mov	r2, r6
 80096bc:	461f      	mov	r7, r3
 80096be:	e7c3      	b.n	8009648 <aes_gen_tables+0x1a8>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 80096c0:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	1ffeee90 	.word	0x1ffeee90
 80096cc:	1ffeeebc 	.word	0x1ffeeebc
 80096d0:	1ffefcb8 	.word	0x1ffefcb8
 80096d4:	1ffeeebb 	.word	0x1ffeeebb
 80096d8:	1ffef7b8 	.word	0x1ffef7b8
 80096dc:	80808081 	.word	0x80808081
 80096e0:	1ffede90 	.word	0x1ffede90
 80096e4:	1ffee290 	.word	0x1ffee290
 80096e8:	1ffee690 	.word	0x1ffee690
 80096ec:	1ffeea90 	.word	0x1ffeea90
 80096f0:	1ffefbbc 	.word	0x1ffefbbc
 80096f4:	1ffefbbb 	.word	0x1ffefbbb
 80096f8:	1ffeefb8 	.word	0x1ffeefb8
 80096fc:	1ffef3b8 	.word	0x1ffef3b8

08009700 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8009700:	2100      	movs	r1, #0
 8009702:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009706:	f003 bf54 	b.w	800d5b2 <memset>
 800970a:	bf00      	nop

0800970c <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 800970c:	b118      	cbz	r0, 8009716 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 800970e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8009712:	f001 bfa9 	b.w	800b668 <mbedtls_platform_zeroize>
 8009716:	4770      	bx	lr

08009718 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 800971c:	2ac0      	cmp	r2, #192	; 0xc0
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800971e:	b083      	sub	sp, #12
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8009720:	d04d      	beq.n	80097be <mbedtls_aes_setkey_enc+0xa6>
 8009722:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009726:	d036      	beq.n	8009796 <mbedtls_aes_setkey_enc+0x7e>
 8009728:	2a80      	cmp	r2, #128	; 0x80
 800972a:	d004      	beq.n	8009736 <mbedtls_aes_setkey_enc+0x1e>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 800972c:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
 8009730:	b003      	add	sp, #12
 8009732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
 8009736:	230a      	movs	r3, #10
 8009738:	6003      	str	r3, [r0, #0]
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 800973a:	4c89      	ldr	r4, [pc, #548]	; (8009960 <mbedtls_aes_setkey_enc+0x248>)
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	4689      	mov	r9, r1
 8009740:	4680      	mov	r8, r0
 8009742:	4616      	mov	r6, r2
 8009744:	b383      	cbz	r3, 80097a8 <mbedtls_aes_setkey_enc+0x90>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8009746:	f108 0308 	add.w	r3, r8, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800974a:	ea4f 1c56 	mov.w	ip, r6, lsr #5

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800974e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009752:	f1a3 0e04 	sub.w	lr, r3, #4
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8009756:	2700      	movs	r7, #0
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8009758:	eb09 0487 	add.w	r4, r9, r7, lsl #2
 800975c:	f819 1027 	ldrb.w	r1, [r9, r7, lsl #2]
 8009760:	78a0      	ldrb	r0, [r4, #2]
 8009762:	7862      	ldrb	r2, [r4, #1]
 8009764:	78e4      	ldrb	r4, [r4, #3]
 8009766:	0400      	lsls	r0, r0, #16
 8009768:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800976c:	430a      	orrs	r2, r1
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800976e:	3701      	adds	r7, #1
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8009770:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8009774:	4567      	cmp	r7, ip
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8009776:	f84e 2f04 	str.w	r2, [lr, #4]!
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800977a:	d3ed      	bcc.n	8009758 <mbedtls_aes_setkey_enc+0x40>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 800977c:	f8d8 2000 	ldr.w	r2, [r8]
 8009780:	2a0c      	cmp	r2, #12
 8009782:	d01f      	beq.n	80097c4 <mbedtls_aes_setkey_enc+0xac>
 8009784:	2a0e      	cmp	r2, #14
 8009786:	f000 8089 	beq.w	800989c <mbedtls_aes_setkey_enc+0x184>
 800978a:	2a0a      	cmp	r2, #10
 800978c:	d05a      	beq.n	8009844 <mbedtls_aes_setkey_enc+0x12c>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 800978e:	2000      	movs	r0, #0
}
 8009790:	b003      	add	sp, #12
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8009796:	4c72      	ldr	r4, [pc, #456]	; (8009960 <mbedtls_aes_setkey_enc+0x248>)

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
 8009798:	230e      	movs	r3, #14
 800979a:	6003      	str	r3, [r0, #0]
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	4689      	mov	r9, r1
 80097a0:	4680      	mov	r8, r0
 80097a2:	4616      	mov	r6, r2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1ce      	bne.n	8009746 <mbedtls_aes_setkey_enc+0x2e>
    {
        aes_gen_tables();
 80097a8:	f7ff fe7a 	bl	80094a0 <aes_gen_tables>
        aes_init_done = 1;
 80097ac:	2501      	movs	r5, #1

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80097ae:	f108 0308 	add.w	r3, r8, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80097b2:	ea4f 1c56 	mov.w	ip, r6, lsr #5

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
    {
        aes_gen_tables();
        aes_init_done = 1;
 80097b6:	6025      	str	r5, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80097b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80097bc:	e7c9      	b.n	8009752 <mbedtls_aes_setkey_enc+0x3a>
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
 80097be:	230c      	movs	r3, #12
 80097c0:	6003      	str	r3, [r0, #0]
 80097c2:	e7ba      	b.n	800973a <mbedtls_aes_setkey_enc+0x22>
 80097c4:	4967      	ldr	r1, [pc, #412]	; (8009964 <mbedtls_aes_setkey_enc+0x24c>)
 80097c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80097ca:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80097ce:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80097d2:	685f      	ldr	r7, [r3, #4]
 80097d4:	695d      	ldr	r5, [r3, #20]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8009968 <mbedtls_aes_setkey_enc+0x250>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80097dc:	4608      	mov	r0, r1
 80097de:	2600      	movs	r6, #0
 80097e0:	4661      	mov	r1, ip
 80097e2:	4684      	mov	ip, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80097e4:	0e2c      	lsrs	r4, r5, #24
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80097e6:	f3c5 2007 	ubfx	r0, r5, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80097ea:	f81c a004 	ldrb.w	sl, [ip, r4]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80097ee:	f81c 0000 	ldrb.w	r0, [ip, r0]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80097f2:	f859 4026 	ldr.w	r4, [r9, r6, lsl #2]
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80097f6:	fa5f fb85 	uxtb.w	fp, r5
 80097fa:	ea40 400a 	orr.w	r0, r0, sl, lsl #16

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80097fe:	f3c5 4a07 	ubfx	sl, r5, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8009802:	f81c b00b 	ldrb.w	fp, [ip, fp]

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8009806:	f81c a00a 	ldrb.w	sl, [ip, sl]
 800980a:	4050      	eors	r0, r2
 800980c:	ea80 620b 	eor.w	r2, r0, fp, lsl #24
 8009810:	ea82 220a 	eor.w	r2, r2, sl, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009814:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 8009816:	4057      	eors	r7, r2
                RK[8]  = RK[2] ^ RK[7];
 8009818:	ea8e 0e07 	eor.w	lr, lr, r7
                RK[9]  = RK[3] ^ RK[8];
 800981c:	ea81 010e 	eor.w	r1, r1, lr
                RK[10] = RK[4] ^ RK[9];
 8009820:	ea88 0801 	eor.w	r8, r8, r1
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8009824:	3601      	adds	r6, #1

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
                RK[11] = RK[5] ^ RK[10];
 8009826:	ea85 0508 	eor.w	r5, r5, r8
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800982a:	2e08      	cmp	r6, #8

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
                RK[11] = RK[5] ^ RK[10];
 800982c:	62dd      	str	r5, [r3, #44]	; 0x2c
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
 800982e:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 8009832:	6259      	str	r1, [r3, #36]	; 0x24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 8009834:	f8c3 e020 	str.w	lr, [r3, #32]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 8009838:	61df      	str	r7, [r3, #28]

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 800983a:	619a      	str	r2, [r3, #24]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800983c:	f103 0318 	add.w	r3, r3, #24
 8009840:	d1d0      	bne.n	80097e4 <mbedtls_aes_setkey_enc+0xcc>
 8009842:	e7a4      	b.n	800978e <mbedtls_aes_setkey_enc+0x76>
 8009844:	4698      	mov	r8, r3
 8009846:	689f      	ldr	r7, [r3, #8]
 8009848:	f858 2ba0 	ldr.w	r2, [r8], #160
 800984c:	685e      	ldr	r6, [r3, #4]
 800984e:	68dd      	ldr	r5, [r3, #12]
 8009850:	f8df e114 	ldr.w	lr, [pc, #276]	; 8009968 <mbedtls_aes_setkey_enc+0x250>
 8009854:	4943      	ldr	r1, [pc, #268]	; (8009964 <mbedtls_aes_setkey_enc+0x24c>)
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8009856:	f85e cb04 	ldr.w	ip, [lr], #4
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800985a:	f3c5 2407 	ubfx	r4, r5, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800985e:	0e28      	lsrs	r0, r5, #24
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8009860:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009862:	5c08      	ldrb	r0, [r1, r0]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8009864:	fa5f f985 	uxtb.w	r9, r5

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8009868:	f3c5 4a07 	ubfx	sl, r5, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800986c:	f811 9009 	ldrb.w	r9, [r1, r9]
 8009870:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 8009874:	4050      	eors	r0, r2

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8009876:	f811 400a 	ldrb.w	r4, [r1, sl]
 800987a:	ea80 6209 	eor.w	r2, r0, r9, lsl #24
 800987e:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009882:	ea82 020c 	eor.w	r2, r2, ip
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 8009886:	4056      	eors	r6, r2
                RK[6]  = RK[2] ^ RK[5];
 8009888:	4077      	eors	r7, r6
                RK[7]  = RK[3] ^ RK[6];
 800988a:	407d      	eors	r5, r7
 800988c:	61dd      	str	r5, [r3, #28]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
                RK[6]  = RK[2] ^ RK[5];
 800988e:	619f      	str	r7, [r3, #24]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 8009890:	615e      	str	r6, [r3, #20]
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8009892:	611a      	str	r2, [r3, #16]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8009894:	3310      	adds	r3, #16
 8009896:	4543      	cmp	r3, r8
 8009898:	d1dd      	bne.n	8009856 <mbedtls_aes_setkey_enc+0x13e>
 800989a:	e778      	b.n	800978e <mbedtls_aes_setkey_enc+0x76>
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80098a2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8009968 <mbedtls_aes_setkey_enc+0x250>
 80098a6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80098aa:	6918      	ldr	r0, [r3, #16]
 80098ac:	68de      	ldr	r6, [r3, #12]
 80098ae:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80098b2:	69dd      	ldr	r5, [r3, #28]
 80098b4:	492b      	ldr	r1, [pc, #172]	; (8009964 <mbedtls_aes_setkey_enc+0x24c>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80098b6:	f8cd c000 	str.w	ip, [sp]
 80098ba:	4614      	mov	r4, r2
 80098bc:	2700      	movs	r7, #0
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80098c4:	46bc      	mov	ip, r7
 80098c6:	46a1      	mov	r9, r4
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80098c8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80098cc:	0e2c      	lsrs	r4, r5, #24
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80098ce:	f811 a00a 	ldrb.w	sl, [r1, sl]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80098d2:	5d0c      	ldrb	r4, [r1, r4]
 80098d4:	9f01      	ldr	r7, [sp, #4]
 80098d6:	ea4a 4404 	orr.w	r4, sl, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80098da:	fa5f fa85 	uxtb.w	sl, r5
 80098de:	4062      	eors	r2, r4

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80098e0:	f3c5 4407 	ubfx	r4, r5, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80098e4:	f811 a00a 	ldrb.w	sl, [r1, sl]

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80098e8:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80098ea:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
 80098ee:	ea82 620a 	eor.w	r2, r2, sl, lsl #24
 80098f2:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
 80098f6:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 80098f8:	ea89 0902 	eor.w	r9, r9, r2
                RK[10] = RK[2] ^ RK[9];
 80098fc:	ea8e 0e09 	eor.w	lr, lr, r9
                RK[11] = RK[3] ^ RK[10];
 8009900:	ea86 060e 	eor.w	r6, r6, lr

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8009904:	b2f4      	uxtb	r4, r6
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 8009906:	62de      	str	r6, [r3, #44]	; 0x2c
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 8009908:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 800990c:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8009910:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8009912:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8009914:	ea4f 6a16 	mov.w	sl, r6, lsr #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8009918:	f3c6 2b07 	ubfx	fp, r6, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800991c:	f811 a00a 	ldrb.w	sl, [r1, sl]
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8009920:	f811 b00b 	ldrb.w	fp, [r1, fp]
 8009924:	4044      	eors	r4, r0
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8009926:	f3c6 4007 	ubfx	r0, r6, #16, #8
 800992a:	ea84 640a 	eor.w	r4, r4, sl, lsl #24
 800992e:	5c08      	ldrb	r0, [r1, r0]
 8009930:	ea84 2b0b 	eor.w	fp, r4, fp, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8009934:	9c00      	ldr	r4, [sp, #0]
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8009936:	ea8b 4000 	eor.w	r0, fp, r0, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 800993a:	4044      	eors	r4, r0
                RK[14] = RK[6] ^ RK[13];
 800993c:	ea88 0804 	eor.w	r8, r8, r4
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8009940:	f10c 0c01 	add.w	ip, ip, #1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
                RK[14] = RK[6] ^ RK[13];
                RK[15] = RK[7] ^ RK[14];
 8009944:	ea85 0508 	eor.w	r5, r5, r8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8009948:	f1bc 0f07 	cmp.w	ip, #7
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
                RK[14] = RK[6] ^ RK[13];
                RK[15] = RK[7] ^ RK[14];
 800994c:	63dd      	str	r5, [r3, #60]	; 0x3c
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
                RK[14] = RK[6] ^ RK[13];
 800994e:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8009952:	635c      	str	r4, [r3, #52]	; 0x34

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
 8009954:	6318      	str	r0, [r3, #48]	; 0x30
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8009956:	9400      	str	r4, [sp, #0]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8009958:	f103 0320 	add.w	r3, r3, #32
 800995c:	d1b4      	bne.n	80098c8 <mbedtls_aes_setkey_enc+0x1b0>
 800995e:	e716      	b.n	800978e <mbedtls_aes_setkey_enc+0x76>
 8009960:	1ffeeeb8 	.word	0x1ffeeeb8
 8009964:	1ffeeebc 	.word	0x1ffeeebc
 8009968:	1ffeee90 	.word	0x1ffeee90

0800996c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	b0cb      	sub	sp, #300	; 0x12c
 8009972:	4605      	mov	r5, r0
 8009974:	460e      	mov	r6, r1
 8009976:	4614      	mov	r4, r2

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8009978:	2100      	movs	r1, #0
 800997a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800997e:	a804      	add	r0, sp, #16
 8009980:	f003 fe17 	bl	800d5b2 <memset>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8009984:	f105 0308 	add.w	r3, r5, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8009988:	4631      	mov	r1, r6
 800998a:	4622      	mov	r2, r4

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800998c:	606b      	str	r3, [r5, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800998e:	a804      	add	r0, sp, #16
 8009990:	f7ff fec2 	bl	8009718 <mbedtls_aes_setkey_enc>
 8009994:	9001      	str	r0, [sp, #4]
 8009996:	2800      	cmp	r0, #0
 8009998:	f040 80a2 	bne.w	8009ae0 <mbedtls_aes_setkey_dec+0x174>
        goto exit;

    ctx->nr = cty.nr;
 800999c:	9b04      	ldr	r3, [sp, #16]
 800999e:	9302      	str	r3, [sp, #8]
 80099a0:	461a      	mov	r2, r3
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80099a2:	0111      	lsls	r1, r2, #4
 80099a4:	9b05      	ldr	r3, [sp, #20]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 80099a6:	602a      	str	r2, [r5, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80099a8:	185e      	adds	r6, r3, r1

    *RK++ = *SK++;
 80099aa:	585b      	ldr	r3, [r3, r1]
 80099ac:	60ab      	str	r3, [r5, #8]
    *RK++ = *SK++;
 80099ae:	6873      	ldr	r3, [r6, #4]
 80099b0:	60eb      	str	r3, [r5, #12]
    *RK++ = *SK++;
 80099b2:	68b3      	ldr	r3, [r6, #8]
 80099b4:	612b      	str	r3, [r5, #16]
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80099b6:	f102 39ff 	add.w	r9, r2, #4294967295
    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 80099ba:	68f3      	ldr	r3, [r6, #12]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80099bc:	9103      	str	r1, [sp, #12]
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80099be:	f1b9 0f00 	cmp.w	r9, #0
    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 80099c2:	616b      	str	r3, [r5, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80099c4:	f1a6 0b10 	sub.w	fp, r6, #16
    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 80099c8:	f105 0a18 	add.w	sl, r5, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80099cc:	dd78      	ble.n	8009ac0 <mbedtls_aes_setkey_dec+0x154>
 80099ce:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8009afc <mbedtls_aes_setkey_dec+0x190>
 80099d2:	4b48      	ldr	r3, [pc, #288]	; (8009af4 <mbedtls_aes_setkey_dec+0x188>)
 80099d4:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009b00 <mbedtls_aes_setkey_dec+0x194>
 80099d8:	f8df e128 	ldr.w	lr, [pc, #296]	; 8009b04 <mbedtls_aes_setkey_dec+0x198>
 80099dc:	4f46      	ldr	r7, [pc, #280]	; (8009af8 <mbedtls_aes_setkey_dec+0x18c>)
 80099de:	3e20      	subs	r6, #32
 80099e0:	3528      	adds	r5, #40	; 0x28
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80099e2:	6932      	ldr	r2, [r6, #16]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80099e4:	0e14      	lsrs	r4, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80099e6:	b2d0      	uxtb	r0, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80099e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80099ec:	5d1c      	ldrb	r4, [r3, r4]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80099ee:	5c18      	ldrb	r0, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80099f0:	5c59      	ldrb	r1, [r3, r1]
 80099f2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80099f6:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80099fa:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80099fe:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009a02:	4060      	eors	r0, r4
 8009a04:	5c9a      	ldrb	r2, [r3, r2]
 8009a06:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009a0a:	4041      	eors	r1, r0
 8009a0c:	4051      	eors	r1, r2

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a0e:	f845 1c10 	str.w	r1, [r5, #-16]
 8009a12:	6972      	ldr	r2, [r6, #20]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009a14:	0e14      	lsrs	r4, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a16:	b2d0      	uxtb	r0, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009a18:	f3c2 2107 	ubfx	r1, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009a1c:	5d1c      	ldrb	r4, [r3, r4]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a1e:	5c18      	ldrb	r0, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009a20:	5c59      	ldrb	r1, [r3, r1]
 8009a22:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009a26:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8009a2a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009a2e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009a32:	4060      	eors	r0, r4
 8009a34:	5c9a      	ldrb	r2, [r3, r2]
 8009a36:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009a3a:	4041      	eors	r1, r0
 8009a3c:	4051      	eors	r1, r2

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a3e:	f845 1c0c 	str.w	r1, [r5, #-12]
 8009a42:	69b2      	ldr	r2, [r6, #24]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009a44:	0e14      	lsrs	r4, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a46:	b2d0      	uxtb	r0, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009a48:	f3c2 2107 	ubfx	r1, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009a4c:	5d1c      	ldrb	r4, [r3, r4]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a4e:	5c18      	ldrb	r0, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009a50:	5c59      	ldrb	r1, [r3, r1]
 8009a52:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009a56:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8009a5a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009a5e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009a62:	4060      	eors	r0, r4
 8009a64:	5c9a      	ldrb	r2, [r3, r2]
 8009a66:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009a6a:	4041      	eors	r1, r0
 8009a6c:	4051      	eors	r1, r2

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a6e:	f845 1c08 	str.w	r1, [r5, #-8]
 8009a72:	69f2      	ldr	r2, [r6, #28]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009a74:	0e10      	lsrs	r0, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a76:	b2d1      	uxtb	r1, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009a78:	f3c2 2407 	ubfx	r4, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009a7c:	5c18      	ldrb	r0, [r3, r0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009a7e:	5c59      	ldrb	r1, [r3, r1]
 8009a80:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009a84:	5d1c      	ldrb	r4, [r3, r4]
 8009a86:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8009a8a:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009a8e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009a92:	4041      	eors	r1, r0
 8009a94:	5c9a      	ldrb	r2, [r3, r2]
 8009a96:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009a9a:	4061      	eors	r1, r4
 8009a9c:	4051      	eors	r1, r2
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009a9e:	f1b9 0901 	subs.w	r9, r9, #1
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009aa2:	f845 1c04 	str.w	r1, [r5, #-4]
 8009aa6:	f1a6 0610 	sub.w	r6, r6, #16
 8009aaa:	f105 0510 	add.w	r5, r5, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009aae:	d198      	bne.n	80099e2 <mbedtls_aes_setkey_dec+0x76>
 8009ab0:	9b02      	ldr	r3, [sp, #8]
 8009ab2:	9a03      	ldr	r2, [sp, #12]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	f1c3 0310 	rsb	r3, r3, #16
 8009aba:	3a10      	subs	r2, #16
 8009abc:	449b      	add	fp, r3
 8009abe:	4492      	add	sl, r2
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
 8009ac0:	f8db 3000 	ldr.w	r3, [fp]
 8009ac4:	f8ca 3000 	str.w	r3, [sl]
    *RK++ = *SK++;
 8009ac8:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009acc:	f8ca 3004 	str.w	r3, [sl, #4]
    *RK++ = *SK++;
 8009ad0:	f8db 3008 	ldr.w	r3, [fp, #8]
 8009ad4:	f8ca 3008 	str.w	r3, [sl, #8]
    *RK++ = *SK++;
 8009ad8:	f8db 300c 	ldr.w	r3, [fp, #12]
 8009adc:	f8ca 300c 	str.w	r3, [sl, #12]
void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8009ae0:	a804      	add	r0, sp, #16
 8009ae2:	f44f 718c 	mov.w	r1, #280	; 0x118
 8009ae6:	f001 fdbf 	bl	800b668 <mbedtls_platform_zeroize>

exit:
    mbedtls_aes_free( &cty );

    return( ret );
}
 8009aea:	9801      	ldr	r0, [sp, #4]
 8009aec:	b04b      	add	sp, #300	; 0x12c
 8009aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af2:	bf00      	nop
 8009af4:	1ffeeebc 	.word	0x1ffeeebc
 8009af8:	1ffef7bc 	.word	0x1ffef7bc
 8009afc:	1ffefcbc 	.word	0x1ffefcbc
 8009b00:	1ffeefbc 	.word	0x1ffeefbc
 8009b04:	1ffef3bc 	.word	0x1ffef3bc

08009b08 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	b08d      	sub	sp, #52	; 0x34
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8009b0e:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b10:	f891 a00e 	ldrb.w	sl, [r1, #14]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009b14:	6806      	ldr	r6, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b16:	f891 8002 	ldrb.w	r8, [r1, #2]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b1a:	7908      	ldrb	r0, [r1, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b1c:	784c      	ldrb	r4, [r1, #1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b1e:	f891 900d 	ldrb.w	r9, [r1, #13]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b22:	798d      	ldrb	r5, [r1, #6]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b24:	f891 e00a 	ldrb.w	lr, [r1, #10]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b28:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b2a:	7a08      	ldrb	r0, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b2c:	794f      	ldrb	r7, [r1, #5]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b2e:	f891 b009 	ldrb.w	fp, [r1, #9]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b32:	f891 c000 	ldrb.w	ip, [r1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b36:	9002      	str	r0, [sp, #8]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b38:	ea4f 4808 	mov.w	r8, r8, lsl #16
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b3c:	ea4f 400a 	mov.w	r0, sl, lsl #16
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b40:	042d      	lsls	r5, r5, #16
 8009b42:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b46:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8009b4a:	ea40 2409 	orr.w	r4, r0, r9, lsl #8
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b4e:	f891 9003 	ldrb.w	r9, [r1, #3]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b52:	7bc8      	ldrb	r0, [r1, #15]
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009b54:	920a      	str	r2, [sp, #40]	; 0x28
 8009b56:	ea45 2a07 	orr.w	sl, r5, r7, lsl #8
 8009b5a:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b5e:	7b0d      	ldrb	r5, [r1, #12]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b60:	79cf      	ldrb	r7, [r1, #7]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b62:	f891 b00b 	ldrb.w	fp, [r1, #11]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b66:	681a      	ldr	r2, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009b68:	1071      	asrs	r1, r6, #1
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b6a:	ea48 0c0c 	orr.w	ip, r8, ip
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b6e:	9e01      	ldr	r6, [sp, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009b70:	910b      	str	r1, [sp, #44]	; 0x2c
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b72:	ea4c 6c09 	orr.w	ip, ip, r9, lsl #24
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b76:	ea4a 0a06 	orr.w	sl, sl, r6
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b7a:	432c      	orrs	r4, r5

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b7c:	9e02      	ldr	r6, [sp, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b7e:	68d9      	ldr	r1, [r3, #12]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b80:	ea8c 0c02 	eor.w	ip, ip, r2
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b84:	685a      	ldr	r2, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b86:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b8a:	ea4a 6707 	orr.w	r7, sl, r7, lsl #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009b8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b90:	ea4e 0e06 	orr.w	lr, lr, r6
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b94:	4057      	eors	r7, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b96:	689a      	ldr	r2, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009b98:	3c01      	subs	r4, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b9a:	ea4e 660b 	orr.w	r6, lr, fp, lsl #24
 8009b9e:	4056      	eors	r6, r2
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009ba0:	2c00      	cmp	r4, #0
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009ba2:	f103 0210 	add.w	r2, r3, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009ba6:	9405      	str	r4, [sp, #20]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009ba8:	ea80 0901 	eor.w	r9, r0, r1
 8009bac:	9209      	str	r2, [sp, #36]	; 0x24

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009bae:	f340 821d 	ble.w	8009fec <mbedtls_internal_aes_encrypt+0x4e4>
 8009bb2:	4ad3      	ldr	r2, [pc, #844]	; (8009f00 <mbedtls_internal_aes_encrypt+0x3f8>)
 8009bb4:	9203      	str	r2, [sp, #12]
 8009bb6:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8009f0c <mbedtls_internal_aes_encrypt+0x404>
 8009bba:	4ad2      	ldr	r2, [pc, #840]	; (8009f04 <mbedtls_internal_aes_encrypt+0x3fc>)
 8009bbc:	f8df e350 	ldr.w	lr, [pc, #848]	; 8009f10 <mbedtls_internal_aes_encrypt+0x408>
 8009bc0:	9201      	str	r2, [sp, #4]
 8009bc2:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8009bc6:	9604      	str	r6, [sp, #16]
 8009bc8:	f8cd 8008 	str.w	r8, [sp, #8]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009bcc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009bd0:	9e03      	ldr	r6, [sp, #12]
 8009bd2:	fa5f f089 	uxtb.w	r0, r9
 8009bd6:	b2f9      	uxtb	r1, r7
 8009bd8:	fa5f f28a 	uxtb.w	r2, sl
 8009bdc:	fa5f f48c 	uxtb.w	r4, ip
 8009be0:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
 8009be4:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8009be8:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 8009bec:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 8009bf0:	9e01      	ldr	r6, [sp, #4]
 8009bf2:	f85b 2c14 	ldr.w	r2, [fp, #-20]
 8009bf6:	ea4f 6319 	mov.w	r3, r9, lsr #24
 8009bfa:	406a      	eors	r2, r5
 8009bfc:	f856 8023 	ldr.w	r8, [r6, r3, lsl #2]
 8009c00:	f85b 3c1c 	ldr.w	r3, [fp, #-28]
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	f85b 3c20 	ldr.w	r3, [fp, #-32]
 8009c0a:	405c      	eors	r4, r3
 8009c0c:	4653      	mov	r3, sl
 8009c0e:	0e1d      	lsrs	r5, r3, #24
 8009c10:	9b01      	ldr	r3, [sp, #4]
 8009c12:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009c16:	9601      	str	r6, [sp, #4]
 8009c18:	4043      	eors	r3, r0
 8009c1a:	0e38      	lsrs	r0, r7, #24
 8009c1c:	ea84 0408 	eor.w	r4, r4, r8
 8009c20:	f856 a020 	ldr.w	sl, [r6, r0, lsl #2]
 8009c24:	f85b 0c18 	ldr.w	r0, [fp, #-24]
 8009c28:	9406      	str	r4, [sp, #24]
 8009c2a:	4041      	eors	r1, r0
 8009c2c:	ea4f 601c 	mov.w	r0, ip, lsr #24
 8009c30:	9c02      	ldr	r4, [sp, #8]
 8009c32:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009c36:	9e04      	ldr	r6, [sp, #16]
 8009c38:	ea81 010a 	eor.w	r1, r1, sl
 8009c3c:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 8009c40:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8009c44:	406a      	eors	r2, r5
 8009c46:	4043      	eors	r3, r0
 8009c48:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8009c4c:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8009c50:	f854 602a 	ldr.w	r6, [r4, sl, lsl #2]
 8009c54:	f854 8028 	ldr.w	r8, [r4, r8, lsl #2]
 8009c58:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8009c5c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009c60:	f3c9 2a07 	ubfx	sl, r9, #8, #8
 8009c64:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8009c68:	f854 a02a 	ldr.w	sl, [r4, sl, lsl #2]
 8009c6c:	9c06      	ldr	r4, [sp, #24]
 8009c6e:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009c72:	ea84 0408 	eor.w	r4, r4, r8
 8009c76:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8009c7a:	4044      	eors	r4, r0
 8009c7c:	4073      	eors	r3, r6
 8009c7e:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009c82:	9404      	str	r4, [sp, #16]
 8009c84:	0e26      	lsrs	r6, r4, #24
 8009c86:	406a      	eors	r2, r5
 8009c88:	b2e0      	uxtb	r0, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009c8a:	f3c9 4907 	ubfx	r9, r9, #16, #8
 8009c8e:	9c03      	ldr	r4, [sp, #12]
 8009c90:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
 8009c94:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009c98:	9c01      	ldr	r4, [sp, #4]
 8009c9a:	407a      	eors	r2, r7
 8009c9c:	ea81 010a 	eor.w	r1, r1, sl
 8009ca0:	ea81 0c0c 	eor.w	ip, r1, ip
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009ca4:	0e11      	lsrs	r1, r2, #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009ca6:	ea83 0909 	eor.w	r9, r3, r9
 8009caa:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8009cae:	9c02      	ldr	r4, [sp, #8]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009cb0:	f3c9 2807 	ubfx	r8, r9, #8, #8
 8009cb4:	46a2      	mov	sl, r4
 8009cb6:	f3cc 4707 	ubfx	r7, ip, #16, #8
 8009cba:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8009cbe:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
 8009cc2:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 8009cc6:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009cca:	9406      	str	r4, [sp, #24]
 8009ccc:	9707      	str	r7, [sp, #28]
 8009cce:	9c03      	ldr	r4, [sp, #12]
 8009cd0:	9f01      	ldr	r7, [sp, #4]
 8009cd2:	9508      	str	r5, [sp, #32]
 8009cd4:	fa5f f389 	uxtb.w	r3, r9
 8009cd8:	f85b 5c10 	ldr.w	r5, [fp, #-16]
 8009cdc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009ce0:	4041      	eors	r1, r0
 8009ce2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009ce6:	46b8      	mov	r8, r7
 8009ce8:	f85e a020 	ldr.w	sl, [lr, r0, lsl #2]
 8009cec:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
 8009cf0:	4069      	eors	r1, r5
 8009cf2:	fa5f f08c 	uxtb.w	r0, ip
 8009cf6:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8009cfa:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009cfe:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
 8009d02:	9d02      	ldr	r5, [sp, #8]
 8009d04:	405f      	eors	r7, r3
 8009d06:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8009d0a:	407b      	eors	r3, r7
 8009d0c:	4647      	mov	r7, r8
 8009d0e:	ea80 0806 	eor.w	r8, r0, r6
 8009d12:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8009d1c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d20:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 8009d24:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 8009d28:	f857 002c 	ldr.w	r0, [r7, ip, lsl #2]
 8009d2c:	9f02      	ldr	r7, [sp, #8]
 8009d2e:	ea88 0804 	eor.w	r8, r8, r4
 8009d32:	9c04      	ldr	r4, [sp, #16]
 8009d34:	4042      	eors	r2, r0
 8009d36:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8009d3a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8009d3e:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
 8009d42:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8009d46:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8009d4a:	4042      	eors	r2, r0
 8009d4c:	9806      	ldr	r0, [sp, #24]
 8009d4e:	4041      	eors	r1, r0
 8009d50:	9808      	ldr	r0, [sp, #32]
 8009d52:	407a      	eors	r2, r7
 8009d54:	9f07      	ldr	r7, [sp, #28]
 8009d56:	f3c9 4907 	ubfx	r9, r9, #16, #8
 8009d5a:	4043      	eors	r3, r0
 8009d5c:	ea88 0606 	eor.w	r6, r8, r6
 8009d60:	ea81 0c07 	eor.w	ip, r1, r7
 8009d64:	ea83 070a 	eor.w	r7, r3, sl
 8009d68:	ea86 0304 	eor.w	r3, r6, r4
 8009d6c:	f85e 5029 	ldr.w	r5, [lr, r9, lsl #2]
 8009d70:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009d72:	9b05      	ldr	r3, [sp, #20]
 8009d74:	3b01      	subs	r3, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009d76:	ea82 0905 	eor.w	r9, r2, r5
 8009d7a:	f10b 0b20 	add.w	fp, fp, #32
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	f47f af24 	bne.w	8009bcc <mbedtls_internal_aes_encrypt+0xc4>
 8009d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d88:	9e04      	ldr	r6, [sp, #16]
 8009d8a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d8e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8009d92:	3b01      	subs	r3, #1
 8009d94:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009d98:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9a:	9b03      	ldr	r3, [sp, #12]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009d9c:	fa5f f58c 	uxtb.w	r5, ip
 8009da0:	ea4f 6019 	mov.w	r0, r9, lsr #24
 8009da4:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	fa5f f489 	uxtb.w	r4, r9
 8009dae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8009db8:	9404      	str	r4, [sp, #16]
 8009dba:	9b01      	ldr	r3, [sp, #4]
 8009dbc:	9c03      	ldr	r4, [sp, #12]
 8009dbe:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 8009dc2:	0e32      	lsrs	r2, r6, #24
 8009dc4:	b2f9      	uxtb	r1, r7
 8009dc6:	f853 a02b 	ldr.w	sl, [r3, fp, lsl #2]
 8009dca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dce:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8009dd2:	461c      	mov	r4, r3
 8009dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd6:	ea85 0b00 	eor.w	fp, r5, r0
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	9302      	str	r3, [sp, #8]
 8009dde:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8009de2:	ea4f 631c 	mov.w	r3, ip, lsr #24
 8009de6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8009dea:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009dee:	9001      	str	r0, [sp, #4]
 8009df0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009dfa:	9705      	str	r7, [sp, #20]
 8009dfc:	b2f0      	uxtb	r0, r6
 8009dfe:	9f04      	ldr	r7, [sp, #16]
 8009e00:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009e06:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8009e0a:	407a      	eors	r2, r7
 8009e0c:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
 8009e10:	9703      	str	r7, [sp, #12]
 8009e12:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8009e16:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8009e1a:	4069      	eors	r1, r5
 8009e1c:	ea80 0a0a 	eor.w	sl, r0, sl
 8009e20:	68e5      	ldr	r5, [r4, #12]
 8009e22:	f85e 0026 	ldr.w	r0, [lr, r6, lsl #2]
 8009e26:	6866      	ldr	r6, [r4, #4]
 8009e28:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8009e2c:	4634      	mov	r4, r6
 8009e2e:	406a      	eors	r2, r5
 8009e30:	f3c9 2607 	ubfx	r6, r9, #8, #8
 8009e34:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8009e38:	f85e 702c 	ldr.w	r7, [lr, ip, lsl #2]
 8009e3c:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
 8009e40:	f858 c023 	ldr.w	ip, [r8, r3, lsl #2]
 8009e44:	9b02      	ldr	r3, [sp, #8]
 8009e46:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8009e4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e4c:	68ad      	ldr	r5, [r5, #8]
 8009e4e:	ea8a 0a05 	eor.w	sl, sl, r5
 8009e52:	9d01      	ldr	r5, [sp, #4]
 8009e54:	ea8b 0303 	eor.w	r3, fp, r3
 8009e58:	406b      	eors	r3, r5
 8009e5a:	9d03      	ldr	r5, [sp, #12]
 8009e5c:	4058      	eors	r0, r3
 8009e5e:	ea8a 0a09 	eor.w	sl, sl, r9
 8009e62:	9b05      	ldr	r3, [sp, #20]
 8009e64:	4061      	eors	r1, r4
 8009e66:	ea8a 0707 	eor.w	r7, sl, r7
 8009e6a:	ea81 010c 	eor.w	r1, r1, ip
 8009e6e:	406a      	eors	r2, r5
 8009e70:	ea82 0503 	eor.w	r5, r2, r3
 8009e74:	ea81 0306 	eor.w	r3, r1, r6
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8009e78:	b2f9      	uxtb	r1, r7
 8009e7a:	9107      	str	r1, [sp, #28]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009e7c:	0e39      	lsrs	r1, r7, #24
 8009e7e:	460c      	mov	r4, r1
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8009e80:	fa5f fb80 	uxtb.w	fp, r0
 8009e84:	4920      	ldr	r1, [pc, #128]	; (8009f08 <mbedtls_internal_aes_encrypt+0x400>)
 8009e86:	f811 b00b 	ldrb.w	fp, [r1, fp]
 8009e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e8c:	6909      	ldr	r1, [r1, #16]
 8009e8e:	9101      	str	r1, [sp, #4]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8009e90:	0e2a      	lsrs	r2, r5, #24
 8009e92:	491d      	ldr	r1, [pc, #116]	; (8009f08 <mbedtls_internal_aes_encrypt+0x400>)

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009e94:	f3c3 2a07 	ubfx	sl, r3, #8, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8009e98:	5c8a      	ldrb	r2, [r1, r2]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009e9a:	f811 a00a 	ldrb.w	sl, [r1, sl]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009e9e:	491a      	ldr	r1, [pc, #104]	; (8009f08 <mbedtls_internal_aes_encrypt+0x400>)

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ea0:	f8cd a008 	str.w	sl, [sp, #8]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009ea4:	f3c7 4907 	ubfx	r9, r7, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8009ea8:	fa5f f883 	uxtb.w	r8, r3
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009eac:	f811 9009 	ldrb.w	r9, [r1, r9]
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8009eb0:	4915      	ldr	r1, [pc, #84]	; (8009f08 <mbedtls_internal_aes_encrypt+0x400>)
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009eb2:	f8cd 900c 	str.w	r9, [sp, #12]

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8009eb6:	ea4f 6c10 	mov.w	ip, r0, lsr #24
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8009eba:	f811 8008 	ldrb.w	r8, [r1, r8]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8009ebe:	f811 c00c 	ldrb.w	ip, [r1, ip]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ec2:	4911      	ldr	r1, [pc, #68]	; (8009f08 <mbedtls_internal_aes_encrypt+0x400>)
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8009ec4:	f8cd c010 	str.w	ip, [sp, #16]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ec8:	f3c7 2e07 	ubfx	lr, r7, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009ecc:	f3c5 4607 	ubfx	r6, r5, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ed0:	f811 e00e 	ldrb.w	lr, [r1, lr]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009ed4:	490c      	ldr	r1, [pc, #48]	; (8009f08 <mbedtls_internal_aes_encrypt+0x400>)
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ed6:	f8cd e014 	str.w	lr, [sp, #20]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009eda:	5d8e      	ldrb	r6, [r1, r6]
 8009edc:	9606      	str	r6, [sp, #24]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8009ede:	9e07      	ldr	r6, [sp, #28]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8009ee0:	0e1f      	lsrs	r7, r3, #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8009ee2:	f811 e006 	ldrb.w	lr, [r1, r6]
 8009ee6:	9e09      	ldr	r6, [sp, #36]	; 0x24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8009ee8:	5dcf      	ldrb	r7, [r1, r7]
 8009eea:	6971      	ldr	r1, [r6, #20]
 8009eec:	9e01      	ldr	r6, [sp, #4]
 8009eee:	ea8b 0b06 	eor.w	fp, fp, r6
 8009ef2:	ea8b 6b02 	eor.w	fp, fp, r2, lsl #24
 8009ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ef8:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 8009efc:	6996      	ldr	r6, [r2, #24]
 8009efe:	e009      	b.n	8009f14 <mbedtls_internal_aes_encrypt+0x40c>
 8009f00:	1ffede90 	.word	0x1ffede90
 8009f04:	1ffeea90 	.word	0x1ffeea90
 8009f08:	1ffeeebc 	.word	0x1ffeeebc
 8009f0c:	1ffee290 	.word	0x1ffee290
 8009f10:	1ffee690 	.word	0x1ffee690
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8009f14:	b2ed      	uxtb	r5, r5
 8009f16:	ea88 0101 	eor.w	r1, r8, r1
 8009f1a:	4690      	mov	r8, r2
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f1c:	4a38      	ldr	r2, [pc, #224]	; (800a000 <mbedtls_internal_aes_encrypt+0x4f8>)
 8009f1e:	f812 900c 	ldrb.w	r9, [r2, ip]
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8009f22:	5d52      	ldrb	r2, [r2, r5]
 8009f24:	f8d8 501c 	ldr.w	r5, [r8, #28]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009f28:	46a4      	mov	ip, r4
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8009f2a:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009f2e:	4c34      	ldr	r4, [pc, #208]	; (800a000 <mbedtls_internal_aes_encrypt+0x4f8>)
 8009f30:	4055      	eors	r5, r2
 8009f32:	9a04      	ldr	r2, [sp, #16]
 8009f34:	f814 a00c 	ldrb.w	sl, [r4, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8009f38:	f814 c003 	ldrb.w	ip, [r4, r3]
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f3c:	f3c0 2307 	ubfx	r3, r0, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8009f40:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8009f44:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
 8009f48:	9a02      	ldr	r2, [sp, #8]
 8009f4a:	5c20      	ldrb	r0, [r4, r0]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f4c:	5ce3      	ldrb	r3, [r4, r3]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 8009f4e:	9c03      	ldr	r4, [sp, #12]
 8009f50:	ea8e 0606 	eor.w	r6, lr, r6
 8009f54:	ea85 650a 	eor.w	r5, r5, sl, lsl #24
 8009f58:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
 8009f5c:	ea8b 2202 	eor.w	r2, fp, r2, lsl #8
 8009f60:	9f05      	ldr	r7, [sp, #20]
 8009f62:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
 8009f66:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 8009f6a:	9c06      	ldr	r4, [sp, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 8009f6c:	ea83 430c 	eor.w	r3, r3, ip, lsl #16
 8009f70:	ea81 2107 	eor.w	r1, r1, r7, lsl #8
 8009f74:	ea86 2609 	eor.w	r6, r6, r9, lsl #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 8009f78:	ea81 4404 	eor.w	r4, r1, r4, lsl #16
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
 8009f7c:	ea86 4100 	eor.w	r1, r6, r0, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 8009f80:	0a18      	lsrs	r0, r3, #8
 8009f82:	9001      	str	r0, [sp, #4]
 8009f84:	0c18      	lsrs	r0, r3, #16
 8009f86:	9002      	str	r0, [sp, #8]
 8009f88:	0e18      	lsrs	r0, r3, #24
 8009f8a:	9003      	str	r0, [sp, #12]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 8009f8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f8e:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8009f92:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009f96:	ea4f 6912 	mov.w	r9, r2, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 8009f9a:	0a0f      	lsrs	r7, r1, #8
 8009f9c:	0c0e      	lsrs	r6, r1, #16
 8009f9e:	0e0d      	lsrs	r5, r1, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 8009fa0:	7002      	strb	r2, [r0, #0]
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 8009fa2:	7201      	strb	r1, [r0, #8]
    PUT_UINT32_LE( X3, output, 12 );
 8009fa4:	7303      	strb	r3, [r0, #12]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 8009fa6:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8009faa:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009fae:	ea4f 6e14 	mov.w	lr, r4, lsr #24
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 8009fb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009fb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009fba:	f89d 100c 	ldrb.w	r1, [sp, #12]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 8009fbe:	7104      	strb	r4, [r0, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 8009fc0:	f880 b001 	strb.w	fp, [r0, #1]
 8009fc4:	f880 a002 	strb.w	sl, [r0, #2]
 8009fc8:	f880 9003 	strb.w	r9, [r0, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8009fcc:	f880 8005 	strb.w	r8, [r0, #5]
 8009fd0:	f880 c006 	strb.w	ip, [r0, #6]
 8009fd4:	f880 e007 	strb.w	lr, [r0, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8009fd8:	7247      	strb	r7, [r0, #9]
 8009fda:	7286      	strb	r6, [r0, #10]
 8009fdc:	72c5      	strb	r5, [r0, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8009fde:	7342      	strb	r2, [r0, #13]
 8009fe0:	7383      	strb	r3, [r0, #14]
 8009fe2:	73c1      	strb	r1, [r0, #15]

    return( 0 );
}
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	b00d      	add	sp, #52	; 0x34
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <mbedtls_internal_aes_encrypt+0x4fc>)
 8009fee:	9303      	str	r3, [sp, #12]
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <mbedtls_internal_aes_encrypt+0x500>)
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800a00c <mbedtls_internal_aes_encrypt+0x504>
 8009ff8:	f8df e014 	ldr.w	lr, [pc, #20]	; 800a010 <mbedtls_internal_aes_encrypt+0x508>
 8009ffc:	e6cd      	b.n	8009d9a <mbedtls_internal_aes_encrypt+0x292>
 8009ffe:	bf00      	nop
 800a000:	1ffeeebc 	.word	0x1ffeeebc
 800a004:	1ffede90 	.word	0x1ffede90
 800a008:	1ffeea90 	.word	0x1ffeea90
 800a00c:	1ffee290 	.word	0x1ffee290
 800a010:	1ffee690 	.word	0x1ffee690

0800a014 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a018:	c841      	ldmia	r0, {r0, r6}
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a01a:	b08d      	sub	sp, #52	; 0x34
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a01c:	f891 c00e 	ldrb.w	ip, [r1, #14]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a020:	788b      	ldrb	r3, [r1, #2]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a022:	798f      	ldrb	r7, [r1, #6]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a024:	7a8d      	ldrb	r5, [r1, #10]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a026:	f891 9005 	ldrb.w	r9, [r1, #5]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a02a:	f891 8009 	ldrb.w	r8, [r1, #9]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a02e:	f891 b00d 	ldrb.w	fp, [r1, #13]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a032:	f891 e001 	ldrb.w	lr, [r1, #1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a036:	9001      	str	r0, [sp, #4]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a038:	7908      	ldrb	r0, [r1, #4]
 800a03a:	9000      	str	r0, [sp, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a03c:	041b      	lsls	r3, r3, #16
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a03e:	043f      	lsls	r7, r7, #16
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a040:	ea4f 400c 	mov.w	r0, ip, lsl #16

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a044:	042d      	lsls	r5, r5, #16
 800a046:	f891 a008 	ldrb.w	sl, [r1, #8]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a04a:	780c      	ldrb	r4, [r1, #0]
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a04c:	920a      	str	r2, [sp, #40]	; 0x28
 800a04e:	ea47 2c09 	orr.w	ip, r7, r9, lsl #8
 800a052:	ea43 2e0e 	orr.w	lr, r3, lr, lsl #8
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a056:	f891 9003 	ldrb.w	r9, [r1, #3]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a05a:	7b0b      	ldrb	r3, [r1, #12]

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a05c:	7acf      	ldrb	r7, [r1, #11]
 800a05e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800a062:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a066:	f891 8007 	ldrb.w	r8, [r1, #7]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a06a:	f891 b00f 	ldrb.w	fp, [r1, #15]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a06e:	9901      	ldr	r1, [sp, #4]
 800a070:	1049      	asrs	r1, r1, #1
 800a072:	910b      	str	r1, [sp, #44]	; 0x2c
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a074:	4318      	orrs	r0, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a078:	9900      	ldr	r1, [sp, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a07a:	3b01      	subs	r3, #1
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a07c:	ea40 6b0b 	orr.w	fp, r0, fp, lsl #24

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a080:	9305      	str	r3, [sp, #20]
 800a082:	4618      	mov	r0, r3
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a084:	ea4e 0404 	orr.w	r4, lr, r4
 800a088:	6833      	ldr	r3, [r6, #0]
 800a08a:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a08e:	ea4c 0c01 	orr.w	ip, ip, r1
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a092:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a094:	6873      	ldr	r3, [r6, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a096:	68f1      	ldr	r1, [r6, #12]
 800a098:	f8df 9364 	ldr.w	r9, [pc, #868]	; 800a400 <mbedtls_internal_aes_decrypt+0x3ec>

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a09c:	ea45 050a 	orr.w	r5, r5, sl
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a0a0:	f106 0210 	add.w	r2, r6, #16
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a0a4:	ea4c 6a08 	orr.w	sl, ip, r8, lsl #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a0a8:	9209      	str	r2, [sp, #36]	; 0x24
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a0aa:	ea8a 0a03 	eor.w	sl, sl, r3
 800a0ae:	4ad1      	ldr	r2, [pc, #836]	; (800a3f4 <mbedtls_internal_aes_decrypt+0x3e0>)
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a0b0:	68b3      	ldr	r3, [r6, #8]
 800a0b2:	9202      	str	r2, [sp, #8]
 800a0b4:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 800a0b8:	4acf      	ldr	r2, [pc, #828]	; (800a3f8 <mbedtls_internal_aes_decrypt+0x3e4>)
 800a0ba:	9200      	str	r2, [sp, #0]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a0bc:	2800      	cmp	r0, #0

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a0be:	ea85 0303 	eor.w	r3, r5, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a0c2:	ea8b 0b01 	eor.w	fp, fp, r1
 800a0c6:	f8df 833c 	ldr.w	r8, [pc, #828]	; 800a404 <mbedtls_internal_aes_decrypt+0x3f0>

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a0ca:	f340 80f5 	ble.w	800a2b8 <mbedtls_internal_aes_decrypt+0x2a4>
 800a0ce:	f106 0c30 	add.w	ip, r6, #48	; 0x30
 800a0d2:	9403      	str	r4, [sp, #12]
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	f8cd 8004 	str.w	r8, [sp, #4]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a0da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a0de:	9b02      	ldr	r3, [sp, #8]
 800a0e0:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800a0e4:	f85c 4c20 	ldr.w	r4, [ip, #-32]
 800a0e8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800a0ec:	fa5f f58a 	uxtb.w	r5, sl
 800a0f0:	fa5f f08b 	uxtb.w	r0, fp
 800a0f4:	fa5f f188 	uxtb.w	r1, r8
 800a0f8:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
 800a0fc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800a100:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800a104:	9b00      	ldr	r3, [sp, #0]
 800a106:	f85c 1c1c 	ldr.w	r1, [ip, #-28]
 800a10a:	ea4f 621a 	mov.w	r2, sl, lsr #24
 800a10e:	4066      	eors	r6, r4
 800a110:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
 800a114:	f85c 2c14 	ldr.w	r2, [ip, #-20]
 800a118:	4644      	mov	r4, r8
 800a11a:	4079      	eors	r1, r7
 800a11c:	406a      	eors	r2, r5
 800a11e:	0e27      	lsrs	r7, r4, #24
 800a120:	ea4f 651b 	mov.w	r5, fp, lsr #24
 800a124:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800a128:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
 800a12c:	f85c 5c18 	ldr.w	r5, [ip, #-24]
 800a130:	461c      	mov	r4, r3
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	4068      	eors	r0, r5
 800a136:	0e1d      	lsrs	r5, r3, #24
 800a138:	ea86 060e 	eor.w	r6, r6, lr
 800a13c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800a140:	9b01      	ldr	r3, [sp, #4]
 800a142:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a146:	406a      	eors	r2, r5
 800a148:	9d04      	ldr	r5, [sp, #16]
 800a14a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	4079      	eors	r1, r7
 800a152:	9106      	str	r1, [sp, #24]
 800a154:	ea80 0008 	eor.w	r0, r0, r8
 800a158:	9901      	ldr	r1, [sp, #4]
 800a15a:	f3c5 2807 	ubfx	r8, r5, #8, #8
 800a15e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800a162:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800a166:	f3c3 4407 	ubfx	r4, r3, #16, #8
 800a16a:	f851 3028 	ldr.w	r3, [r1, r8, lsl #2]
 800a16e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800a172:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a176:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800a17a:	f3ca 2807 	ubfx	r8, sl, #8, #8
 800a17e:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 800a182:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a186:	9906      	ldr	r1, [sp, #24]
 800a188:	f859 b02b 	ldr.w	fp, [r9, fp, lsl #2]
 800a18c:	ea86 060e 	eor.w	r6, r6, lr
 800a190:	4075      	eors	r5, r6
 800a192:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 800a196:	4079      	eors	r1, r7
 800a198:	405a      	eors	r2, r3
 800a19a:	9e02      	ldr	r6, [sp, #8]
 800a19c:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a1a0:	9503      	str	r5, [sp, #12]
 800a1a2:	b2eb      	uxtb	r3, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a1a4:	ea81 010b 	eor.w	r1, r1, fp
 800a1a8:	ea80 0008 	eor.w	r0, r0, r8
 800a1ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a1b0:	9e00      	ldr	r6, [sp, #0]
 800a1b2:	4044      	eors	r4, r0
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a1b4:	0e08      	lsrs	r0, r1, #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a1b6:	ea82 020a 	eor.w	r2, r2, sl
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a1ba:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 800a1be:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800a1c2:	9e01      	ldr	r6, [sp, #4]
 800a1c4:	f3c4 4807 	ubfx	r8, r4, #16, #8
 800a1c8:	46b3      	mov	fp, r6
 800a1ca:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
 800a1ce:	9606      	str	r6, [sp, #24]
 800a1d0:	f859 6028 	ldr.w	r6, [r9, r8, lsl #2]
 800a1d4:	9607      	str	r6, [sp, #28]
 800a1d6:	b2cf      	uxtb	r7, r1
 800a1d8:	9e02      	ldr	r6, [sp, #8]
 800a1da:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800a1de:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800a1e2:	9e00      	ldr	r6, [sp, #0]
 800a1e4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800a1e8:	f856 a02e 	ldr.w	sl, [r6, lr, lsl #2]
 800a1ec:	f85b 8025 	ldr.w	r8, [fp, r5, lsl #2]
 800a1f0:	f85c 5c10 	ldr.w	r5, [ip, #-16]
 800a1f4:	9e02      	ldr	r6, [sp, #8]
 800a1f6:	4058      	eors	r0, r3
 800a1f8:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800a1fc:	ea87 0a0a 	eor.w	sl, r7, sl
 800a200:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
 800a204:	9708      	str	r7, [sp, #32]
 800a206:	ea80 0305 	eor.w	r3, r0, r5
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	9800      	ldr	r0, [sp, #0]
 800a20e:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
 800a212:	b2e3      	uxtb	r3, r4
 800a214:	0e15      	lsrs	r5, r2, #24
 800a216:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a21a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 800a21e:	f85c 0c08 	ldr.w	r0, [ip, #-8]
 800a222:	ea83 0e05 	eor.w	lr, r3, r5
 800a226:	ea8e 0e00 	eor.w	lr, lr, r0
 800a22a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a22e:	9803      	ldr	r0, [sp, #12]
 800a230:	f85b 5023 	ldr.w	r5, [fp, r3, lsl #2]
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	0e03      	lsrs	r3, r0, #24
 800a238:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a23c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a240:	9800      	ldr	r0, [sp, #0]
 800a242:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800a246:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a24a:	9804      	ldr	r0, [sp, #16]
 800a24c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a250:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a254:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 800a258:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a25c:	ea82 0b03 	eor.w	fp, r2, r3
 800a260:	9b06      	ldr	r3, [sp, #24]
 800a262:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800a266:	4058      	eors	r0, r3
 800a268:	9b07      	ldr	r3, [sp, #28]
 800a26a:	4043      	eors	r3, r0
 800a26c:	ea8a 0707 	eor.w	r7, sl, r7
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	ea87 0708 	eor.w	r7, r7, r8
 800a278:	ea8e 0e05 	eor.w	lr, lr, r5
 800a27c:	ea87 0a03 	eor.w	sl, r7, r3
 800a280:	ea8e 0306 	eor.w	r3, lr, r6
 800a284:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a286:	9b05      	ldr	r3, [sp, #20]
 800a288:	ea8b 0b02 	eor.w	fp, fp, r2
 800a28c:	ea8b 0b04 	eor.w	fp, fp, r4
 800a290:	3b01      	subs	r3, #1
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a292:	ea8b 0b01 	eor.w	fp, fp, r1
 800a296:	f10c 0c20 	add.w	ip, ip, #32
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	f47f af1d 	bne.w	800a0da <mbedtls_internal_aes_decrypt+0xc6>
 800a2a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2a4:	9c03      	ldr	r4, [sp, #12]
 800a2a6:	9b04      	ldr	r3, [sp, #16]
 800a2a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2ac:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 800a2b0:	3a01      	subs	r2, #1
 800a2b2:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 800a2b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b8:	9a02      	ldr	r2, [sp, #8]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a2ba:	b2e6      	uxtb	r6, r4
 800a2bc:	ea4f 611a 	mov.w	r1, sl, lsr #24
 800a2c0:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 800a2c4:	9a00      	ldr	r2, [sp, #0]
 800a2c6:	fa5f f78a 	uxtb.w	r7, sl
 800a2ca:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a2ce:	9a02      	ldr	r2, [sp, #8]
 800a2d0:	fa5f f08b 	uxtb.w	r0, fp
 800a2d4:	f852 e027 	ldr.w	lr, [r2, r7, lsl #2]
 800a2d8:	9a00      	ldr	r2, [sp, #0]
 800a2da:	9f02      	ldr	r7, [sp, #8]
 800a2dc:	0e1d      	lsrs	r5, r3, #24
 800a2de:	ea4f 6c1b 	mov.w	ip, fp, lsr #24
 800a2e2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 800a2e6:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
 800a2ea:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	9200      	str	r2, [sp, #0]
 800a2f6:	404e      	eors	r6, r1
 800a2f8:	0e22      	lsrs	r2, r4, #24
 800a2fa:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800a2fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a302:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800a306:	9802      	ldr	r0, [sp, #8]
 800a308:	9101      	str	r1, [sp, #4]
 800a30a:	b2d9      	uxtb	r1, r3
 800a30c:	4057      	eors	r7, r2
 800a30e:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800a312:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800a316:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800a31a:	9003      	str	r0, [sp, #12]
 800a31c:	ea8e 0505 	eor.w	r5, lr, r5
 800a320:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800a324:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a326:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 800a32a:	6860      	ldr	r0, [r4, #4]
 800a32c:	9002      	str	r0, [sp, #8]
 800a32e:	ea81 010c 	eor.w	r1, r1, ip
 800a332:	9800      	ldr	r0, [sp, #0]
 800a334:	9104      	str	r1, [sp, #16]
 800a336:	f3ca 2e07 	ubfx	lr, sl, #8, #8
 800a33a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a33e:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 800a342:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a346:	68e4      	ldr	r4, [r4, #12]
 800a348:	f859 b02b 	ldr.w	fp, [r9, fp, lsl #2]
 800a34c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800a350:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a354:	9405      	str	r4, [sp, #20]
 800a356:	4046      	eors	r6, r0
 800a358:	9802      	ldr	r0, [sp, #8]
 800a35a:	f858 c02e 	ldr.w	ip, [r8, lr, lsl #2]
 800a35e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a360:	4045      	eors	r5, r0
 800a362:	68a0      	ldr	r0, [r4, #8]
 800a364:	4604      	mov	r4, r0
 800a366:	9805      	ldr	r0, [sp, #20]
 800a368:	4047      	eors	r7, r0
 800a36a:	9804      	ldr	r0, [sp, #16]
 800a36c:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 800a370:	4686      	mov	lr, r0
 800a372:	9801      	ldr	r0, [sp, #4]
 800a374:	f859 902a 	ldr.w	r9, [r9, sl, lsl #2]
 800a378:	4046      	eors	r6, r0
 800a37a:	9803      	ldr	r0, [sp, #12]
 800a37c:	404f      	eors	r7, r1
 800a37e:	ea8e 0804 	eor.w	r8, lr, r4
 800a382:	4045      	eors	r5, r0
 800a384:	ea87 0409 	eor.w	r4, r7, r9
 800a388:	ea86 0103 	eor.w	r1, r6, r3
 800a38c:	ea85 030b 	eor.w	r3, r5, fp
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800a390:	b2e6      	uxtb	r6, r4
 800a392:	9605      	str	r6, [sp, #20]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a394:	f3c4 2907 	ubfx	r9, r4, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800a398:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 800a39c:	4e17      	ldr	r6, [pc, #92]	; (800a3fc <mbedtls_internal_aes_decrypt+0x3e8>)
 800a39e:	ea88 080c 	eor.w	r8, r8, ip
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a3a2:	ea88 0202 	eor.w	r2, r8, r2

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800a3a6:	f816 a00a 	ldrb.w	sl, [r6, sl]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a3aa:	f816 6009 	ldrb.w	r6, [r6, r9]
 800a3ae:	9600      	str	r6, [sp, #0]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a3b0:	f3c2 4807 	ubfx	r8, r2, #16, #8
 800a3b4:	4e11      	ldr	r6, [pc, #68]	; (800a3fc <mbedtls_internal_aes_decrypt+0x3e8>)
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a3b6:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800a3ba:	9003      	str	r0, [sp, #12]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a3bc:	f816 6008 	ldrb.w	r6, [r6, r8]
 800a3c0:	9601      	str	r6, [sp, #4]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a3c2:	0e20      	lsrs	r0, r4, #24
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800a3c4:	fa5f fb81 	uxtb.w	fp, r1
 800a3c8:	4c0c      	ldr	r4, [pc, #48]	; (800a3fc <mbedtls_internal_aes_decrypt+0x3e8>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800a3ca:	4e0c      	ldr	r6, [pc, #48]	; (800a3fc <mbedtls_internal_aes_decrypt+0x3e8>)
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800a3cc:	f814 b00b 	ldrb.w	fp, [r4, fp]
 800a3d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a3d2:	f3c1 2707 	ubfx	r7, r1, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800a3d6:	b2d5      	uxtb	r5, r2
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a3d8:	5df7      	ldrb	r7, [r6, r7]
 800a3da:	9702      	str	r7, [sp, #8]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800a3dc:	fa5f fc83 	uxtb.w	ip, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a3e0:	9f03      	ldr	r7, [sp, #12]
 800a3e2:	6924      	ldr	r4, [r4, #16]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800a3e4:	f816 c00c 	ldrb.w	ip, [r6, ip]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a3e8:	5df7      	ldrb	r7, [r6, r7]
 800a3ea:	9703      	str	r7, [sp, #12]
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800a3ec:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a3f0:	e00a      	b.n	800a408 <mbedtls_internal_aes_decrypt+0x3f4>
 800a3f2:	bf00      	nop
 800a3f4:	1ffeefbc 	.word	0x1ffeefbc
 800a3f8:	1ffefcbc 	.word	0x1ffefcbc
 800a3fc:	1ffefbbc 	.word	0x1ffefbbc
 800a400:	1ffef7bc 	.word	0x1ffef7bc
 800a404:	1ffef3bc 	.word	0x1ffef3bc
 800a408:	ea8b 0404 	eor.w	r4, fp, r4
 800a40c:	f816 e00e 	ldrb.w	lr, [r6, lr]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800a410:	5d76      	ldrb	r6, [r6, r5]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a412:	4d3b      	ldr	r5, [pc, #236]	; (800a500 <mbedtls_internal_aes_decrypt+0x4ec>)
 800a414:	ea84 6a0a 	eor.w	sl, r4, sl, lsl #24
 800a418:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a41a:	5c2d      	ldrb	r5, [r5, r0]
 800a41c:	9504      	str	r5, [sp, #16]
 800a41e:	6965      	ldr	r5, [r4, #20]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800a420:	4837      	ldr	r0, [pc, #220]	; (800a500 <mbedtls_internal_aes_decrypt+0x4ec>)
 800a422:	69a4      	ldr	r4, [r4, #24]
 800a424:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800a428:	ea8c 0505 	eor.w	r5, ip, r5
 800a42c:	f810 9007 	ldrb.w	r9, [r0, r7]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800a430:	9805      	ldr	r0, [sp, #20]
 800a432:	ea85 6e0e 	eor.w	lr, r5, lr, lsl #24
 800a436:	4d32      	ldr	r5, [pc, #200]	; (800a500 <mbedtls_internal_aes_decrypt+0x4ec>)
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a438:	ea4f 6811 	mov.w	r8, r1, lsr #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800a43c:	5c2d      	ldrb	r5, [r5, r0]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a43e:	4830      	ldr	r0, [pc, #192]	; (800a500 <mbedtls_internal_aes_decrypt+0x4ec>)
 800a440:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a442:	f810 c008 	ldrb.w	ip, [r0, r8]
 800a446:	69ff      	ldr	r7, [r7, #28]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a448:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a44c:	f3c2 2207 	ubfx	r2, r2, #8, #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a450:	f810 8003 	ldrb.w	r8, [r0, r3]
 800a454:	9b00      	ldr	r3, [sp, #0]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a456:	f810 b002 	ldrb.w	fp, [r0, r2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 800a45a:	9a01      	ldr	r2, [sp, #4]
 800a45c:	ea8a 2a03 	eor.w	sl, sl, r3, lsl #8
 800a460:	406f      	eors	r7, r5
 800a462:	9b02      	ldr	r3, [sp, #8]
 800a464:	9d04      	ldr	r5, [sp, #16]
 800a466:	ea87 670c 	eor.w	r7, r7, ip, lsl #24
 800a46a:	ea8e 2e03 	eor.w	lr, lr, r3, lsl #8
 800a46e:	ea87 230b 	eor.w	r3, r7, fp, lsl #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 800a472:	ea83 4308 	eor.w	r3, r3, r8, lsl #16
 800a476:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800a478:	f3c1 4107 	ubfx	r1, r1, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a47c:	0a1c      	lsrs	r4, r3, #8
 800a47e:	9400      	str	r4, [sp, #0]
 800a480:	0c1c      	lsrs	r4, r3, #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800a482:	5c41      	ldrb	r1, [r0, r1]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a484:	9401      	str	r4, [sp, #4]
 800a486:	ea86 6605 	eor.w	r6, r6, r5, lsl #24
 800a48a:	0e1c      	lsrs	r4, r3, #24
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 800a48c:	9f03      	ldr	r7, [sp, #12]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a48e:	9402      	str	r4, [sp, #8]
 800a490:	ea86 2609 	eor.w	r6, r6, r9, lsl #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
 800a496:	ea86 4101 	eor.w	r1, r6, r1, lsl #16
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 800a49a:	ea8e 4007 	eor.w	r0, lr, r7, lsl #16
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 800a49e:	ea8a 4202 	eor.w	r2, sl, r2, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 800a4a2:	0a0f      	lsrs	r7, r1, #8
 800a4a4:	0c0e      	lsrs	r6, r1, #16
 800a4a6:	0e0d      	lsrs	r5, r1, #24
 800a4a8:	7221      	strb	r1, [r4, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800a4aa:	f89d 1000 	ldrb.w	r1, [sp]
 800a4ae:	7361      	strb	r1, [r4, #13]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 800a4b0:	ea4f 2810 	mov.w	r8, r0, lsr #8
 800a4b4:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800a4b8:	ea4f 6e10 	mov.w	lr, r0, lsr #24
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a4bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 800a4c0:	7120      	strb	r0, [r4, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a4c2:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 800a4c6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a4ca:	ea4f 6912 	mov.w	r9, r2, lsr #24
 800a4ce:	7022      	strb	r2, [r4, #0]
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a4d0:	7323      	strb	r3, [r4, #12]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a4d2:	f884 b001 	strb.w	fp, [r4, #1]
 800a4d6:	f884 a002 	strb.w	sl, [r4, #2]
 800a4da:	f884 9003 	strb.w	r9, [r4, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800a4de:	f884 8005 	strb.w	r8, [r4, #5]
 800a4e2:	f884 c006 	strb.w	ip, [r4, #6]
 800a4e6:	f884 e007 	strb.w	lr, [r4, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800a4ea:	7267      	strb	r7, [r4, #9]
 800a4ec:	72a6      	strb	r6, [r4, #10]
 800a4ee:	72e5      	strb	r5, [r4, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800a4f0:	73a1      	strb	r1, [r4, #14]
 800a4f2:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800a4f6:	73e1      	strb	r1, [r4, #15]

    return( 0 );
}
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	b00d      	add	sp, #52	; 0x34
 800a4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a500:	1ffefbbc 	.word	0x1ffefbbc

0800a504 <mbedtls_aes_crypt_ecb>:
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800a504:	2901      	cmp	r1, #1
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800a506:	4611      	mov	r1, r2
 800a508:	461a      	mov	r2, r3
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800a50a:	d001      	beq.n	800a510 <mbedtls_aes_crypt_ecb+0xc>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800a50c:	f7ff bd82 	b.w	800a014 <mbedtls_internal_aes_decrypt>
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800a510:	f7ff bafa 	b.w	8009b08 <mbedtls_internal_aes_encrypt>

0800a514 <ccm_auth_crypt.constprop.0>:
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	b099      	sub	sp, #100	; 0x64
 800a51a:	9305      	str	r3, [sp, #20]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800a51c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800a51e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800a520:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 800a524:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800a526:	9002      	str	r0, [sp, #8]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800a528:	2b02      	cmp	r3, #2
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800a52a:	9204      	str	r2, [sp, #16]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800a52c:	f000 81c2 	beq.w	800a8b4 <ccm_auth_crypt.constprop.0+0x3a0>
 800a530:	2b10      	cmp	r3, #16
 800a532:	f200 81bf 	bhi.w	800a8b4 <ccm_auth_crypt.constprop.0+0x3a0>
 800a536:	f013 0901 	ands.w	r9, r3, #1
 800a53a:	f040 81bb 	bne.w	800a8b4 <ccm_auth_crypt.constprop.0+0x3a0>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
 800a53e:	9d05      	ldr	r5, [sp, #20]
 800a540:	1feb      	subs	r3, r5, #7
 800a542:	2b06      	cmp	r3, #6
 800a544:	f200 81b6 	bhi.w	800a8b4 <ccm_auth_crypt.constprop.0+0x3a0>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
 800a548:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 800a54c:	f200 81b2 	bhi.w	800a8b4 <ccm_auth_crypt.constprop.0+0x3a0>
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a550:	9b27      	ldr	r3, [sp, #156]	; 0x9c
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800a552:	2c00      	cmp	r4, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a554:	f1a3 0202 	sub.w	r2, r3, #2
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800a558:	b2ef      	uxtb	r7, r5
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800a55a:	bf14      	ite	ne
 800a55c:	2340      	movne	r3, #64	; 0x40
 800a55e:	2300      	moveq	r3, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800a560:	f1c7 000e 	rsb	r0, r7, #14
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a564:	0852      	lsrs	r2, r2, #1
    b[0] |= q - 1;
 800a566:	9007      	str	r0, [sp, #28]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a568:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    b[0] |= q - 1;
 800a56c:	b2c0      	uxtb	r0, r0
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800a56e:	f1c7 070f 	rsb	r7, r7, #15
 800a572:	4688      	mov	r8, r1
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800a574:	4303      	orrs	r3, r0
 800a576:	9006      	str	r0, [sp, #24]

    memcpy( b + 1, iv, iv_len );
 800a578:	9904      	ldr	r1, [sp, #16]
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800a57a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

    memcpy( b + 1, iv, iv_len );
 800a57e:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800a582:	462a      	mov	r2, r5
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800a584:	b2ff      	uxtb	r7, r7
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );
 800a586:	f003 f809 	bl	800d59c <memcpy>

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a58a:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800a58e:	2f02      	cmp	r7, #2
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a590:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 800a594:	f88d 803f 	strb.w	r8, [sp, #63]	; 0x3f
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a598:	ea4f 4318 	mov.w	r3, r8, lsr #16
 800a59c:	f000 8187 	beq.w	800a8ae <ccm_auth_crypt.constprop.0+0x39a>
 800a5a0:	2f03      	cmp	r7, #3
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a5a2:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a5a6:	ea4f 6318 	mov.w	r3, r8, lsr #24
 800a5aa:	f000 8180 	beq.w	800a8ae <ccm_auth_crypt.constprop.0+0x39a>
 800a5ae:	2f04      	cmp	r7, #4
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a5b0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a5b4:	d00d      	beq.n	800a5d2 <ccm_auth_crypt.constprop.0+0xbe>
 800a5b6:	2f05      	cmp	r7, #5
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a5b8:	f88d 903b 	strb.w	r9, [sp, #59]	; 0x3b
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a5bc:	d009      	beq.n	800a5d2 <ccm_auth_crypt.constprop.0+0xbe>
 800a5be:	2f06      	cmp	r7, #6
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a5c0:	f88d 903a 	strb.w	r9, [sp, #58]	; 0x3a
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a5c4:	d005      	beq.n	800a5d2 <ccm_auth_crypt.constprop.0+0xbe>
 800a5c6:	2f08      	cmp	r7, #8
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a5c8:	f88d 9039 	strb.w	r9, [sp, #57]	; 0x39
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a5cc:	d101      	bne.n	800a5d2 <ccm_auth_crypt.constprop.0+0xbe>
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a5ce:	f88d 9038 	strb.w	r9, [sp, #56]	; 0x38
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
    UPDATE_CBC_MAC;
 800a5d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5d4:	9200      	str	r2, [sp, #0]
 800a5d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5da:	9211      	str	r2, [sp, #68]	; 0x44
 800a5dc:	a910      	add	r1, sp, #64	; 0x40
 800a5de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e0:	9010      	str	r0, [sp, #64]	; 0x40
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	9212      	str	r2, [sp, #72]	; 0x48
 800a5e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5e8:	9802      	ldr	r0, [sp, #8]
 800a5ea:	9513      	str	r5, [sp, #76]	; 0x4c
 800a5ec:	2210      	movs	r2, #16
 800a5ee:	f000 fddb 	bl	800b1a8 <mbedtls_cipher_update>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	f040 8157 	bne.w	800a8a8 <ccm_auth_crypt.constprop.0+0x394>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
 800a5fa:	2c00      	cmp	r4, #0
 800a5fc:	f040 815f 	bne.w	800a8be <ccm_auth_crypt.constprop.0+0x3aa>
 800a600:	f10d 0930 	add.w	r9, sp, #48	; 0x30
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a604:	ab18      	add	r3, sp, #96	; 0x60
 800a606:	f89d 2018 	ldrb.w	r2, [sp, #24]
    memcpy( ctr + 1, iv, iv_len );
 800a60a:	9d05      	ldr	r5, [sp, #20]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a60c:	f803 2d10 	strb.w	r2, [r3, #-16]!
    memcpy( ctr + 1, iv, iv_len );
 800a610:	9904      	ldr	r1, [sp, #16]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a612:	9304      	str	r3, [sp, #16]
    memcpy( ctr + 1, iv, iv_len );
 800a614:	462a      	mov	r2, r5
 800a616:	f10d 0051 	add.w	r0, sp, #81	; 0x51
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a61a:	461c      	mov	r4, r3
    memcpy( ctr + 1, iv, iv_len );
 800a61c:	f002 ffbe 	bl	800d59c <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 800a620:	4628      	mov	r0, r5
 800a622:	3001      	adds	r0, #1
 800a624:	4420      	add	r0, r4
 800a626:	2100      	movs	r1, #0
 800a628:	463a      	mov	r2, r7
 800a62a:	f002 ffc2 	bl	800d5b2 <memset>
    ctr[15] = 1;
 800a62e:	2301      	movs	r3, #1
 800a630:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800a634:	f1b8 0f00 	cmp.w	r8, #0
 800a638:	f000 810a 	beq.w	800a850 <ccm_auth_crypt.constprop.0+0x33c>
 800a63c:	ab0d      	add	r3, sp, #52	; 0x34
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	ab0e      	add	r3, sp, #56	; 0x38
 800a642:	9305      	str	r3, [sp, #20]
 800a644:	ab0f      	add	r3, sp, #60	; 0x3c
 800a646:	9306      	str	r3, [sp, #24]
    {
        size_t use_len = len_left > 16 ? 16 : len_left;

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
 800a648:	f04f 0a00 	mov.w	sl, #0
 800a64c:	465d      	mov	r5, fp
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	f8c9 a000 	str.w	sl, [r9]
 800a654:	f8c3 a000 	str.w	sl, [r3]
 800a658:	9b05      	ldr	r3, [sp, #20]
    src = input;
    dst = output;

    while( len_left > 0 )
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 800a65a:	4644      	mov	r4, r8
 800a65c:	2c10      	cmp	r4, #16

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
 800a65e:	f8c3 a000 	str.w	sl, [r3]
 800a662:	9b06      	ldr	r3, [sp, #24]
    src = input;
    dst = output;

    while( len_left > 0 )
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 800a664:	bf28      	it	cs
 800a666:	2410      	movcs	r4, #16

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
            memcpy( b, src, use_len );
 800a668:	4622      	mov	r2, r4
 800a66a:	4629      	mov	r1, r5
    {
        size_t use_len = len_left > 16 ? 16 : len_left;

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
 800a66c:	f8c3 a000 	str.w	sl, [r3]
            memcpy( b, src, use_len );
 800a670:	4648      	mov	r0, r9
 800a672:	f002 ff93 	bl	800d59c <memcpy>
            UPDATE_CBC_MAC;
 800a676:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800a67a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a67e:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
 800a682:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800a686:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800a68a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a68e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800a692:	ea8e 0303 	eor.w	r3, lr, r3
 800a696:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800a69a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800a69e:	ea8b 0101 	eor.w	r1, fp, r1
 800a6a2:	ea8c 0202 	eor.w	r2, ip, r2
 800a6a6:	ea80 000e 	eor.w	r0, r0, lr
 800a6aa:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800a6ae:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800a6b2:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800a6b6:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a6ba:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800a6be:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800a6c2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800a6c6:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800a6ca:	ea8c 0c01 	eor.w	ip, ip, r1
 800a6ce:	ea8e 0e02 	eor.w	lr, lr, r2
 800a6d2:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800a6d6:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800a6da:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800a6de:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800a6e2:	4051      	eors	r1, r2
 800a6e4:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800a6e8:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800a6ec:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800a6f0:	405a      	eors	r2, r3
 800a6f2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800a6f6:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800a6fa:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800a6fe:	4058      	eors	r0, r3
 800a700:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800a704:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800a708:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800a70c:	ea8c 0303 	eor.w	r3, ip, r3
 800a710:	ea8e 0e01 	eor.w	lr, lr, r1
 800a714:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800a718:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800a71c:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800a720:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800a724:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800a728:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800a72c:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800a730:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800a734:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800a738:	ab0b      	add	r3, sp, #44	; 0x2c
 800a73a:	ea8c 0000 	eor.w	r0, ip, r0
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800a744:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800a748:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800a74c:	ea81 010b 	eor.w	r1, r1, fp
 800a750:	ea8e 0202 	eor.w	r2, lr, r2
 800a754:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800a758:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800a75c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a760:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800a764:	ea8c 0303 	eor.w	r3, ip, r3
 800a768:	a910      	add	r1, sp, #64	; 0x40
 800a76a:	ea8e 0e00 	eor.w	lr, lr, r0
 800a76e:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800a772:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800a776:	4658      	mov	r0, fp
 800a778:	2210      	movs	r2, #16
 800a77a:	460b      	mov	r3, r1
 800a77c:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800a780:	f000 fd12 	bl	800b1a8 <mbedtls_cipher_update>
 800a784:	2800      	cmp	r0, #0
 800a786:	f040 808f 	bne.w	800a8a8 <ccm_auth_crypt.constprop.0+0x394>
        }

        CTR_CRYPT( dst, src, use_len );
 800a78a:	ab0b      	add	r3, sp, #44	; 0x2c
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	4658      	mov	r0, fp
 800a790:	9904      	ldr	r1, [sp, #16]
 800a792:	2210      	movs	r2, #16
 800a794:	464b      	mov	r3, r9
 800a796:	f000 fd07 	bl	800b1a8 <mbedtls_cipher_update>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	f040 8084 	bne.w	800a8a8 <ccm_auth_crypt.constprop.0+0x394>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	aa18      	add	r2, sp, #96	; 0x60
 800a7a4:	18d1      	adds	r1, r2, r3
 800a7a6:	5c2a      	ldrb	r2, [r5, r0]
 800a7a8:	f811 1c30 	ldrb.w	r1, [r1, #-48]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	404a      	eors	r2, r1
 800a7b2:	429c      	cmp	r4, r3
 800a7b4:	5432      	strb	r2, [r6, r0]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	d8f3      	bhi.n	800a7a2 <ccm_auth_crypt.constprop.0+0x28e>
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800a7ba:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800a7be:	3301      	adds	r3, #1
 800a7c0:	b2db      	uxtb	r3, r3
            memset( b, 0, 16 );
            memcpy( b, dst, use_len );
            UPDATE_CBC_MAC;
        }

        dst += use_len;
 800a7c2:	4426      	add	r6, r4
        src += use_len;
 800a7c4:	4425      	add	r5, r4
        len_left -= use_len;
 800a7c6:	ebc4 0808 	rsb	r8, r4, r8
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800a7ca:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d13a      	bne.n	800a848 <ccm_auth_crypt.constprop.0+0x334>
 800a7d2:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 800a7de:	bb9b      	cbnz	r3, 800a848 <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800a7e0:	2f02      	cmp	r7, #2
 800a7e2:	d031      	beq.n	800a848 <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800a7e4:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800a7f0:	bb53      	cbnz	r3, 800a848 <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800a7f2:	2f03      	cmp	r7, #3
 800a7f4:	d028      	beq.n	800a848 <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800a7f6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800a802:	bb0b      	cbnz	r3, 800a848 <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800a804:	2f04      	cmp	r7, #4
 800a806:	d01f      	beq.n	800a848 <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800a808:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800a80c:	3301      	adds	r3, #1
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800a814:	b9c3      	cbnz	r3, 800a848 <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800a816:	2f05      	cmp	r7, #5
 800a818:	d016      	beq.n	800a848 <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800a81a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800a81e:	3301      	adds	r3, #1
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 800a826:	b97b      	cbnz	r3, 800a848 <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800a828:	2f06      	cmp	r7, #6
 800a82a:	d00d      	beq.n	800a848 <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800a82c:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800a830:	3301      	adds	r3, #1
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 800a838:	b933      	cbnz	r3, 800a848 <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800a83a:	2f08      	cmp	r7, #8
 800a83c:	d104      	bne.n	800a848 <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800a83e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a842:	3301      	adds	r3, #1
 800a844:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800a848:	f1b8 0f00 	cmp.w	r8, #0
 800a84c:	f47f aeff 	bne.w	800a64e <ccm_auth_crypt.constprop.0+0x13a>

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
 800a850:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a854:	9c04      	ldr	r4, [sp, #16]
 800a856:	f1c2 000f 	rsb	r0, r2, #15
 800a85a:	2100      	movs	r1, #0
 800a85c:	3201      	adds	r2, #1
 800a85e:	4420      	add	r0, r4
 800a860:	f002 fea7 	bl	800d5b2 <memset>

    CTR_CRYPT( y, y, 16 );
 800a864:	ab0b      	add	r3, sp, #44	; 0x2c
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	9802      	ldr	r0, [sp, #8]
 800a86a:	4621      	mov	r1, r4
 800a86c:	464b      	mov	r3, r9
 800a86e:	2210      	movs	r2, #16
 800a870:	f000 fc9a 	bl	800b1a8 <mbedtls_cipher_update>
 800a874:	4680      	mov	r8, r0
 800a876:	2800      	cmp	r0, #0
 800a878:	f040 8110 	bne.w	800aa9c <ccm_auth_crypt.constprop.0+0x588>
 800a87c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a87e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a880:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800a882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a884:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a886:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    memcpy( tag, y, tag_len );
 800a888:	9a27      	ldr	r2, [sp, #156]	; 0x9c
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800a88a:	4046      	eors	r6, r0
 800a88c:	405d      	eors	r5, r3
 800a88e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a890:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a892:	9611      	str	r6, [sp, #68]	; 0x44
 800a894:	4043      	eors	r3, r0
    memcpy( tag, y, tag_len );
 800a896:	a910      	add	r1, sp, #64	; 0x40
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800a898:	407c      	eors	r4, r7
    memcpy( tag, y, tag_len );
 800a89a:	9826      	ldr	r0, [sp, #152]	; 0x98
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800a89c:	9410      	str	r4, [sp, #64]	; 0x40
 800a89e:	9512      	str	r5, [sp, #72]	; 0x48
 800a8a0:	9313      	str	r3, [sp, #76]	; 0x4c
    memcpy( tag, y, tag_len );
 800a8a2:	f002 fe7b 	bl	800d59c <memcpy>

    return( 0 );
 800a8a6:	4640      	mov	r0, r8
}
 800a8a8:	b019      	add	sp, #100	; 0x64
 800a8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
        b[15-i] = (unsigned char)( len_left & 0xFF );

    if( len_left > 0 )
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f43f ae8f 	beq.w	800a5d2 <ccm_auth_crypt.constprop.0+0xbe>
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800a8b4:	f06f 000c 	mvn.w	r0, #12

    CTR_CRYPT( y, y, 16 );
    memcpy( tag, y, tag_len );

    return( 0 );
}
 800a8b8:	b019      	add	sp, #100	; 0x64
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 800a8be:	2c0e      	cmp	r4, #14
 800a8c0:	46a1      	mov	r9, r4
 800a8c2:	bf28      	it	cs
 800a8c4:	f04f 090e 	movcs.w	r9, #14
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800a8c8:	ea4f 2e14 	mov.w	lr, r4, lsr #8
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800a8cc:	464a      	mov	r2, r9
 800a8ce:	9922      	ldr	r1, [sp, #136]	; 0x88
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800a8d0:	930c      	str	r3, [sp, #48]	; 0x30
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800a8d2:	f10d 0032 	add.w	r0, sp, #50	; 0x32
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800a8d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8d8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8da:	930f      	str	r3, [sp, #60]	; 0x3c
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800a8dc:	f88d e030 	strb.w	lr, [sp, #48]	; 0x30
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 800a8e0:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800a8e4:	f002 fe5a 	bl	800d59c <memcpy>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;
 800a8e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a8ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8f0:	4043      	eors	r3, r0
 800a8f2:	ad0b      	add	r5, sp, #44	; 0x2c
 800a8f4:	404a      	eors	r2, r1
 800a8f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a8f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a8fa:	9500      	str	r5, [sp, #0]
 800a8fc:	9310      	str	r3, [sp, #64]	; 0x40
 800a8fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a902:	9211      	str	r2, [sp, #68]	; 0x44
 800a904:	ea80 0e01 	eor.w	lr, r0, r1
 800a908:	406b      	eors	r3, r5
 800a90a:	a910      	add	r1, sp, #64	; 0x40
 800a90c:	9312      	str	r3, [sp, #72]	; 0x48
 800a90e:	9802      	ldr	r0, [sp, #8]
 800a910:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 800a914:	2210      	movs	r2, #16
 800a916:	460b      	mov	r3, r1
 800a918:	f000 fc46 	bl	800b1a8 <mbedtls_cipher_update>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d1c3      	bne.n	800a8a8 <ccm_auth_crypt.constprop.0+0x394>

        while( len_left > 0 )
 800a920:	ebb4 0309 	subs.w	r3, r4, r9
 800a924:	461d      	mov	r5, r3
 800a926:	f43f ae6b 	beq.w	800a600 <ccm_auth_crypt.constprop.0+0xec>
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
        src += use_len;
 800a92a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a92c:	9708      	str	r7, [sp, #32]
 800a92e:	aa0d      	add	r2, sp, #52	; 0x34
 800a930:	444b      	add	r3, r9
 800a932:	9203      	str	r2, [sp, #12]
 800a934:	a90f      	add	r1, sp, #60	; 0x3c
 800a936:	aa0e      	add	r2, sp, #56	; 0x38
 800a938:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800a93c:	9625      	str	r6, [sp, #148]	; 0x94

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800a93e:	4604      	mov	r4, r0
 800a940:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a944:	461f      	mov	r7, r3
 800a946:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 800a94a:	462e      	mov	r6, r5
 800a94c:	4690      	mov	r8, r2
 800a94e:	468a      	mov	sl, r1
 800a950:	e002      	b.n	800a958 <ccm_auth_crypt.constprop.0+0x444>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;

        while( len_left > 0 )
 800a952:	1b76      	subs	r6, r6, r5
 800a954:	f000 809b 	beq.w	800aa8e <ccm_auth_crypt.constprop.0+0x57a>
        {
            use_len = len_left > 16 ? 16 : len_left;
 800a958:	2e10      	cmp	r6, #16

            memset( b, 0, 16 );
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	f8c9 4000 	str.w	r4, [r9]

        UPDATE_CBC_MAC;

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;
 800a960:	4635      	mov	r5, r6
 800a962:	bf28      	it	cs
 800a964:	2510      	movcs	r5, #16

            memset( b, 0, 16 );
 800a966:	601c      	str	r4, [r3, #0]
            memcpy( b, src, use_len );
 800a968:	4639      	mov	r1, r7
 800a96a:	462a      	mov	r2, r5

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800a96c:	f8c8 4000 	str.w	r4, [r8]
            memcpy( b, src, use_len );
 800a970:	4648      	mov	r0, r9

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800a972:	f8ca 4000 	str.w	r4, [sl]
            memcpy( b, src, use_len );
 800a976:	f002 fe11 	bl	800d59c <memcpy>
            UPDATE_CBC_MAC;
 800a97a:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800a97e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a982:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
 800a986:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800a98a:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800a98e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a992:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800a996:	ea8e 0303 	eor.w	r3, lr, r3
 800a99a:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800a99e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800a9a2:	ea8b 0101 	eor.w	r1, fp, r1
 800a9a6:	ea8c 0202 	eor.w	r2, ip, r2
 800a9aa:	ea80 000e 	eor.w	r0, r0, lr
 800a9ae:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800a9b2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800a9b6:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800a9ba:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a9be:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800a9c2:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800a9c6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800a9ca:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800a9ce:	ea8c 0c01 	eor.w	ip, ip, r1
 800a9d2:	ea8e 0e02 	eor.w	lr, lr, r2
 800a9d6:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800a9da:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800a9de:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800a9e2:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800a9e6:	4051      	eors	r1, r2
 800a9e8:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800a9ec:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800a9f0:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800a9f4:	405a      	eors	r2, r3
 800a9f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800a9fa:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800a9fe:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800aa02:	4058      	eors	r0, r3
 800aa04:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800aa08:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800aa0c:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800aa10:	ea8c 0303 	eor.w	r3, ip, r3
 800aa14:	ea8e 0e01 	eor.w	lr, lr, r1
 800aa18:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800aa1c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800aa20:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800aa24:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800aa28:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800aa2c:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800aa30:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800aa34:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800aa38:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800aa3c:	ab0b      	add	r3, sp, #44	; 0x2c
 800aa3e:	ea8c 0000 	eor.w	r0, ip, r0
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800aa48:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800aa4c:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800aa50:	ea8e 0202 	eor.w	r2, lr, r2
 800aa54:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800aa58:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800aa5c:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800aa60:	ea81 010b 	eor.w	r1, r1, fp
 800aa64:	ea8c 0303 	eor.w	r3, ip, r3
 800aa68:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800aa6c:	a910      	add	r1, sp, #64	; 0x40
 800aa6e:	ea8e 0e00 	eor.w	lr, lr, r0
 800aa72:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800aa76:	9802      	ldr	r0, [sp, #8]
 800aa78:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800aa7c:	2210      	movs	r2, #16
 800aa7e:	460b      	mov	r3, r1
 800aa80:	f000 fb92 	bl	800b1a8 <mbedtls_cipher_update>

            len_left -= use_len;
            src += use_len;
 800aa84:	442f      	add	r7, r5
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f af63 	beq.w	800a952 <ccm_auth_crypt.constprop.0+0x43e>
 800aa8c:	e70c      	b.n	800a8a8 <ccm_auth_crypt.constprop.0+0x394>
 800aa8e:	9f08      	ldr	r7, [sp, #32]
 800aa90:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800aa94:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 800aa98:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800aa9a:	e5b3      	b.n	800a604 <ccm_auth_crypt.constprop.0+0xf0>
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	e703      	b.n	800a8a8 <ccm_auth_crypt.constprop.0+0x394>

0800aaa0 <ccm_auth_crypt.constprop.1>:
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	b099      	sub	sp, #100	; 0x64
 800aaa6:	9305      	str	r3, [sp, #20]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800aaa8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800aaaa:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800aaac:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800aaae:	9003      	str	r0, [sp, #12]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800aab0:	2b02      	cmp	r3, #2
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800aab2:	9204      	str	r2, [sp, #16]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800aab4:	f000 81b6 	beq.w	800ae24 <ccm_auth_crypt.constprop.1+0x384>
 800aab8:	2b10      	cmp	r3, #16
 800aaba:	f200 81b3 	bhi.w	800ae24 <ccm_auth_crypt.constprop.1+0x384>
 800aabe:	f013 0901 	ands.w	r9, r3, #1
 800aac2:	f040 81af 	bne.w	800ae24 <ccm_auth_crypt.constprop.1+0x384>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
 800aac6:	9d05      	ldr	r5, [sp, #20]
 800aac8:	1feb      	subs	r3, r5, #7
 800aaca:	2b06      	cmp	r3, #6
 800aacc:	f200 81aa 	bhi.w	800ae24 <ccm_auth_crypt.constprop.1+0x384>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
 800aad0:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 800aad4:	f200 81a6 	bhi.w	800ae24 <ccm_auth_crypt.constprop.1+0x384>
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800aad8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800aada:	2c00      	cmp	r4, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800aadc:	f1a3 0202 	sub.w	r2, r3, #2
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800aae0:	b2ef      	uxtb	r7, r5
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800aae2:	bf14      	ite	ne
 800aae4:	2340      	movne	r3, #64	; 0x40
 800aae6:	2300      	moveq	r3, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800aae8:	f1c7 000e 	rsb	r0, r7, #14
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800aaec:	0852      	lsrs	r2, r2, #1
    b[0] |= q - 1;
 800aaee:	9007      	str	r0, [sp, #28]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800aaf0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    b[0] |= q - 1;
 800aaf4:	b2c0      	uxtb	r0, r0
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800aaf6:	f1c7 070f 	rsb	r7, r7, #15
 800aafa:	4688      	mov	r8, r1
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800aafc:	4303      	orrs	r3, r0
 800aafe:	9006      	str	r0, [sp, #24]

    memcpy( b + 1, iv, iv_len );
 800ab00:	9904      	ldr	r1, [sp, #16]
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800ab02:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

    memcpy( b + 1, iv, iv_len );
 800ab06:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800ab0a:	462a      	mov	r2, r5
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800ab0c:	b2ff      	uxtb	r7, r7
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );
 800ab0e:	f002 fd45 	bl	800d59c <memcpy>

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ab12:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800ab16:	2f02      	cmp	r7, #2
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ab18:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 800ab1c:	f88d 803f 	strb.w	r8, [sp, #63]	; 0x3f
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ab20:	ea4f 4318 	mov.w	r3, r8, lsr #16
 800ab24:	f000 817b 	beq.w	800ae1e <ccm_auth_crypt.constprop.1+0x37e>
 800ab28:	2f03      	cmp	r7, #3
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ab2a:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ab2e:	ea4f 6318 	mov.w	r3, r8, lsr #24
 800ab32:	f000 8174 	beq.w	800ae1e <ccm_auth_crypt.constprop.1+0x37e>
 800ab36:	2f04      	cmp	r7, #4
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ab38:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ab3c:	d00d      	beq.n	800ab5a <ccm_auth_crypt.constprop.1+0xba>
 800ab3e:	2f05      	cmp	r7, #5
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ab40:	f88d 903b 	strb.w	r9, [sp, #59]	; 0x3b
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ab44:	d009      	beq.n	800ab5a <ccm_auth_crypt.constprop.1+0xba>
 800ab46:	2f06      	cmp	r7, #6
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ab48:	f88d 903a 	strb.w	r9, [sp, #58]	; 0x3a
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ab4c:	d005      	beq.n	800ab5a <ccm_auth_crypt.constprop.1+0xba>
 800ab4e:	2f08      	cmp	r7, #8
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ab50:	f88d 9039 	strb.w	r9, [sp, #57]	; 0x39
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ab54:	d101      	bne.n	800ab5a <ccm_auth_crypt.constprop.1+0xba>
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ab56:	f88d 9038 	strb.w	r9, [sp, #56]	; 0x38
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
    UPDATE_CBC_MAC;
 800ab5a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab5c:	9200      	str	r2, [sp, #0]
 800ab5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab60:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab62:	9211      	str	r2, [sp, #68]	; 0x44
 800ab64:	a910      	add	r1, sp, #64	; 0x40
 800ab66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab68:	9010      	str	r0, [sp, #64]	; 0x40
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	9212      	str	r2, [sp, #72]	; 0x48
 800ab6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab70:	9803      	ldr	r0, [sp, #12]
 800ab72:	9513      	str	r5, [sp, #76]	; 0x4c
 800ab74:	2210      	movs	r2, #16
 800ab76:	f000 fb17 	bl	800b1a8 <mbedtls_cipher_update>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f040 814b 	bne.w	800ae18 <ccm_auth_crypt.constprop.1+0x378>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	f040 8153 	bne.w	800ae2e <ccm_auth_crypt.constprop.1+0x38e>
 800ab88:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800ab8c:	ab18      	add	r3, sp, #96	; 0x60
 800ab8e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    memcpy( ctr + 1, iv, iv_len );
 800ab92:	9d05      	ldr	r5, [sp, #20]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800ab94:	f803 2d10 	strb.w	r2, [r3, #-16]!
    memcpy( ctr + 1, iv, iv_len );
 800ab98:	9904      	ldr	r1, [sp, #16]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800ab9a:	9304      	str	r3, [sp, #16]
    memcpy( ctr + 1, iv, iv_len );
 800ab9c:	462a      	mov	r2, r5
 800ab9e:	f10d 0051 	add.w	r0, sp, #81	; 0x51
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800aba2:	461c      	mov	r4, r3
    memcpy( ctr + 1, iv, iv_len );
 800aba4:	f002 fcfa 	bl	800d59c <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 800aba8:	4628      	mov	r0, r5
 800abaa:	3001      	adds	r0, #1
 800abac:	4420      	add	r0, r4
 800abae:	2100      	movs	r1, #0
 800abb0:	463a      	mov	r2, r7
 800abb2:	f002 fcfe 	bl	800d5b2 <memset>
    ctr[15] = 1;
 800abb6:	2301      	movs	r3, #1
 800abb8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800abbc:	f1b8 0f00 	cmp.w	r8, #0
 800abc0:	f000 80fe 	beq.w	800adc0 <ccm_auth_crypt.constprop.1+0x320>
            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
        }

        CTR_CRYPT( dst, src, use_len );
 800abc4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	ab0b      	add	r3, sp, #44	; 0x2c
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	9803      	ldr	r0, [sp, #12]
 800abd0:	9904      	ldr	r1, [sp, #16]
 800abd2:	2210      	movs	r2, #16
 800abd4:	4653      	mov	r3, sl
 800abd6:	f000 fae7 	bl	800b1a8 <mbedtls_cipher_update>
    src = input;
    dst = output;

    while( len_left > 0 )
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 800abda:	4644      	mov	r4, r8
 800abdc:	2c10      	cmp	r4, #16
 800abde:	bf28      	it	cs
 800abe0:	2410      	movcs	r4, #16
            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
        }

        CTR_CRYPT( dst, src, use_len );
 800abe2:	2800      	cmp	r0, #0
 800abe4:	f040 8118 	bne.w	800ae18 <ccm_auth_crypt.constprop.1+0x378>
 800abe8:	4603      	mov	r3, r0
 800abea:	aa18      	add	r2, sp, #96	; 0x60
 800abec:	18d1      	adds	r1, r2, r3
 800abee:	5c32      	ldrb	r2, [r6, r0]
 800abf0:	f811 1c30 	ldrb.w	r1, [r1, #-48]
 800abf4:	3301      	adds	r3, #1
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	404a      	eors	r2, r1
 800abfa:	429c      	cmp	r4, r3
 800abfc:	542a      	strb	r2, [r5, r0]
 800abfe:	4618      	mov	r0, r3
 800ac00:	d8f3      	bhi.n	800abea <ccm_auth_crypt.constprop.1+0x14a>

        if( mode == CCM_DECRYPT )
        {
            memset( b, 0, 16 );
            memcpy( b, dst, use_len );
 800ac02:	4629      	mov	r1, r5
 800ac04:	4622      	mov	r2, r4
 800ac06:	4650      	mov	r0, sl

        CTR_CRYPT( dst, src, use_len );

        if( mode == CCM_DECRYPT )
        {
            memset( b, 0, 16 );
 800ac08:	f8ca 9000 	str.w	r9, [sl]
 800ac0c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800ac10:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ac14:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
            memcpy( b, dst, use_len );
 800ac18:	f002 fcc0 	bl	800d59c <memcpy>
            UPDATE_CBC_MAC;
 800ac1c:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800ac20:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800ac24:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
 800ac28:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800ac2c:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800ac30:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800ac34:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800ac38:	ea8e 0303 	eor.w	r3, lr, r3
 800ac3c:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800ac40:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800ac44:	ea8b 0101 	eor.w	r1, fp, r1
 800ac48:	ea8c 0202 	eor.w	r2, ip, r2
 800ac4c:	ea80 000e 	eor.w	r0, r0, lr
 800ac50:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800ac54:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800ac58:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800ac5c:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800ac60:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800ac64:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800ac68:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800ac6c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800ac70:	ea8c 0c01 	eor.w	ip, ip, r1
 800ac74:	ea8e 0e02 	eor.w	lr, lr, r2
 800ac78:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800ac7c:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800ac80:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800ac84:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800ac88:	4051      	eors	r1, r2
 800ac8a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800ac8e:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800ac92:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800ac96:	405a      	eors	r2, r3
 800ac98:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ac9c:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800aca0:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800aca4:	4058      	eors	r0, r3
 800aca6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800acaa:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800acae:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800acb2:	ea8c 0303 	eor.w	r3, ip, r3
 800acb6:	ea8e 0e01 	eor.w	lr, lr, r1
 800acba:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800acbe:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800acc2:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800acc6:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800acca:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800acce:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800acd2:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800acd6:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800acda:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800acde:	ab0b      	add	r3, sp, #44	; 0x2c
 800ace0:	ea8c 0000 	eor.w	r0, ip, r0
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800acea:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800acee:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800acf2:	ea8e 0202 	eor.w	r2, lr, r2
 800acf6:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800acfa:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800acfe:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800ad02:	ea81 010b 	eor.w	r1, r1, fp
 800ad06:	ea8c 0303 	eor.w	r3, ip, r3
 800ad0a:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800ad0e:	a910      	add	r1, sp, #64	; 0x40
 800ad10:	ea8e 0e00 	eor.w	lr, lr, r0
 800ad14:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800ad18:	9803      	ldr	r0, [sp, #12]
 800ad1a:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800ad1e:	2210      	movs	r2, #16
 800ad20:	460b      	mov	r3, r1
 800ad22:	f000 fa41 	bl	800b1a8 <mbedtls_cipher_update>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d176      	bne.n	800ae18 <ccm_auth_crypt.constprop.1+0x378>
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800ad2a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800ad2e:	3301      	adds	r3, #1
 800ad30:	b2db      	uxtb	r3, r3
            memset( b, 0, 16 );
            memcpy( b, dst, use_len );
            UPDATE_CBC_MAC;
        }

        dst += use_len;
 800ad32:	4425      	add	r5, r4
        src += use_len;
 800ad34:	4426      	add	r6, r4
        len_left -= use_len;
 800ad36:	ebc4 0808 	rsb	r8, r4, r8
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800ad3a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d13a      	bne.n	800adb8 <ccm_auth_crypt.constprop.1+0x318>
 800ad42:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 800ad46:	3301      	adds	r3, #1
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 800ad4e:	bb9b      	cbnz	r3, 800adb8 <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800ad50:	2f02      	cmp	r7, #2
 800ad52:	d031      	beq.n	800adb8 <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800ad54:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 800ad58:	3301      	adds	r3, #1
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800ad60:	bb53      	cbnz	r3, 800adb8 <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800ad62:	2f03      	cmp	r7, #3
 800ad64:	d028      	beq.n	800adb8 <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800ad66:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800ad72:	bb0b      	cbnz	r3, 800adb8 <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800ad74:	2f04      	cmp	r7, #4
 800ad76:	d01f      	beq.n	800adb8 <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800ad78:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800ad84:	b9c3      	cbnz	r3, 800adb8 <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800ad86:	2f05      	cmp	r7, #5
 800ad88:	d016      	beq.n	800adb8 <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800ad8a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800ad8e:	3301      	adds	r3, #1
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 800ad96:	b97b      	cbnz	r3, 800adb8 <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800ad98:	2f06      	cmp	r7, #6
 800ad9a:	d00d      	beq.n	800adb8 <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800ad9c:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800ada0:	3301      	adds	r3, #1
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 800ada8:	b933      	cbnz	r3, 800adb8 <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800adaa:	2f08      	cmp	r7, #8
 800adac:	d104      	bne.n	800adb8 <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800adae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800adb2:	3301      	adds	r3, #1
 800adb4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800adb8:	f1b8 0f00 	cmp.w	r8, #0
 800adbc:	f47f af05 	bne.w	800abca <ccm_auth_crypt.constprop.1+0x12a>

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
 800adc0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800adc4:	9c04      	ldr	r4, [sp, #16]
 800adc6:	f1c2 000f 	rsb	r0, r2, #15
 800adca:	2100      	movs	r1, #0
 800adcc:	3201      	adds	r2, #1
 800adce:	4420      	add	r0, r4
 800add0:	f002 fbef 	bl	800d5b2 <memset>

    CTR_CRYPT( y, y, 16 );
 800add4:	ab0b      	add	r3, sp, #44	; 0x2c
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	9803      	ldr	r0, [sp, #12]
 800adda:	4621      	mov	r1, r4
 800addc:	4653      	mov	r3, sl
 800adde:	2210      	movs	r2, #16
 800ade0:	f000 f9e2 	bl	800b1a8 <mbedtls_cipher_update>
 800ade4:	4680      	mov	r8, r0
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f040 8107 	bne.w	800affa <ccm_auth_crypt.constprop.1+0x55a>
 800adec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800adee:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adf0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800adf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adf4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800adf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    memcpy( tag, y, tag_len );
 800adf8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800adfa:	4046      	eors	r6, r0
 800adfc:	405d      	eors	r5, r3
 800adfe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ae00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae02:	9611      	str	r6, [sp, #68]	; 0x44
 800ae04:	4043      	eors	r3, r0
    memcpy( tag, y, tag_len );
 800ae06:	a910      	add	r1, sp, #64	; 0x40
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800ae08:	407c      	eors	r4, r7
    memcpy( tag, y, tag_len );
 800ae0a:	9826      	ldr	r0, [sp, #152]	; 0x98
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800ae0c:	9410      	str	r4, [sp, #64]	; 0x40
 800ae0e:	9512      	str	r5, [sp, #72]	; 0x48
 800ae10:	9313      	str	r3, [sp, #76]	; 0x4c
    memcpy( tag, y, tag_len );
 800ae12:	f002 fbc3 	bl	800d59c <memcpy>

    return( 0 );
 800ae16:	4640      	mov	r0, r8
}
 800ae18:	b019      	add	sp, #100	; 0x64
 800ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
        b[15-i] = (unsigned char)( len_left & 0xFF );

    if( len_left > 0 )
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f43f ae9b 	beq.w	800ab5a <ccm_auth_crypt.constprop.1+0xba>
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800ae24:	f06f 000c 	mvn.w	r0, #12

    CTR_CRYPT( y, y, 16 );
    memcpy( tag, y, tag_len );

    return( 0 );
}
 800ae28:	b019      	add	sp, #100	; 0x64
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 800ae2e:	2c0e      	cmp	r4, #14
 800ae30:	46a1      	mov	r9, r4
 800ae32:	bf28      	it	cs
 800ae34:	f04f 090e 	movcs.w	r9, #14
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800ae38:	ea4f 2e14 	mov.w	lr, r4, lsr #8
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800ae3c:	464a      	mov	r2, r9
 800ae3e:	9922      	ldr	r1, [sp, #136]	; 0x88
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800ae40:	930c      	str	r3, [sp, #48]	; 0x30
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800ae42:	f10d 0032 	add.w	r0, sp, #50	; 0x32
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800ae46:	930d      	str	r3, [sp, #52]	; 0x34
 800ae48:	930e      	str	r3, [sp, #56]	; 0x38
 800ae4a:	930f      	str	r3, [sp, #60]	; 0x3c
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800ae4c:	f88d e030 	strb.w	lr, [sp, #48]	; 0x30
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 800ae50:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800ae54:	f002 fba2 	bl	800d59c <memcpy>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;
 800ae58:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae60:	4043      	eors	r3, r0
 800ae62:	ad0b      	add	r5, sp, #44	; 0x2c
 800ae64:	404a      	eors	r2, r1
 800ae66:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ae68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae6a:	9500      	str	r5, [sp, #0]
 800ae6c:	9310      	str	r3, [sp, #64]	; 0x40
 800ae6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ae70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae72:	9211      	str	r2, [sp, #68]	; 0x44
 800ae74:	ea80 0e01 	eor.w	lr, r0, r1
 800ae78:	406b      	eors	r3, r5
 800ae7a:	a910      	add	r1, sp, #64	; 0x40
 800ae7c:	9312      	str	r3, [sp, #72]	; 0x48
 800ae7e:	9803      	ldr	r0, [sp, #12]
 800ae80:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 800ae84:	2210      	movs	r2, #16
 800ae86:	460b      	mov	r3, r1
 800ae88:	f000 f98e 	bl	800b1a8 <mbedtls_cipher_update>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d1c3      	bne.n	800ae18 <ccm_auth_crypt.constprop.1+0x378>

        while( len_left > 0 )
 800ae90:	ebb4 0309 	subs.w	r3, r4, r9
 800ae94:	461a      	mov	r2, r3
 800ae96:	f43f ae77 	beq.w	800ab88 <ccm_auth_crypt.constprop.1+0xe8>
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
        src += use_len;
 800ae9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae9c:	9708      	str	r7, [sp, #32]
 800ae9e:	444b      	add	r3, r9
 800aea0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800aea4:	9624      	str	r6, [sp, #144]	; 0x90

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800aea6:	4683      	mov	fp, r0
 800aea8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800aeac:	461f      	mov	r7, r3
 800aeae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aeb2:	4616      	mov	r6, r2
 800aeb4:	e002      	b.n	800aebc <ccm_auth_crypt.constprop.1+0x41c>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;

        while( len_left > 0 )
 800aeb6:	1b36      	subs	r6, r6, r4
 800aeb8:	f000 809a 	beq.w	800aff0 <ccm_auth_crypt.constprop.1+0x550>
        {
            use_len = len_left > 16 ? 16 : len_left;
 800aebc:	2e10      	cmp	r6, #16
 800aebe:	4634      	mov	r4, r6
 800aec0:	bf28      	it	cs
 800aec2:	2410      	movcs	r4, #16

            memset( b, 0, 16 );
            memcpy( b, src, use_len );
 800aec4:	4639      	mov	r1, r7
 800aec6:	4622      	mov	r2, r4
 800aec8:	4650      	mov	r0, sl

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800aeca:	f8ca b000 	str.w	fp, [sl]
 800aece:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800aed2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800aed6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
            memcpy( b, src, use_len );
 800aeda:	f002 fb5f 	bl	800d59c <memcpy>
            UPDATE_CBC_MAC;
 800aede:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800aee2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800aee6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800aeea:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800aeee:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800aef2:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 800aef6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800aefa:	ea8e 0303 	eor.w	r3, lr, r3
 800aefe:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800af02:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800af06:	ea8c 0202 	eor.w	r2, ip, r2
 800af0a:	ea89 0101 	eor.w	r1, r9, r1
 800af0e:	ea80 000e 	eor.w	r0, r0, lr
 800af12:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800af16:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800af1a:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800af1e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800af22:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800af26:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800af2a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800af2e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800af32:	ea8c 0c01 	eor.w	ip, ip, r1
 800af36:	ea8e 0e02 	eor.w	lr, lr, r2
 800af3a:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800af3e:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800af42:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800af46:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800af4a:	4051      	eors	r1, r2
 800af4c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800af50:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800af54:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800af58:	405a      	eors	r2, r3
 800af5a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800af5e:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800af62:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800af66:	4058      	eors	r0, r3
 800af68:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800af6c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800af70:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800af74:	ea8c 0303 	eor.w	r3, ip, r3
 800af78:	ea8e 0e01 	eor.w	lr, lr, r1
 800af7c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800af80:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800af84:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800af88:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800af8c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800af90:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800af94:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800af98:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800af9c:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800afa0:	ea8c 0000 	eor.w	r0, ip, r0
 800afa4:	4059      	eors	r1, r3
 800afa6:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800afaa:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800afae:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800afb2:	ea8e 0202 	eor.w	r2, lr, r2
 800afb6:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800afba:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800afbe:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800afc2:	ea8c 0303 	eor.w	r3, ip, r3
 800afc6:	a910      	add	r1, sp, #64	; 0x40
 800afc8:	ad0b      	add	r5, sp, #44	; 0x2c
 800afca:	ea8e 0e00 	eor.w	lr, lr, r0
 800afce:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800afd2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800afd6:	9500      	str	r5, [sp, #0]
 800afd8:	4640      	mov	r0, r8
 800afda:	2210      	movs	r2, #16
 800afdc:	460b      	mov	r3, r1
 800afde:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800afe2:	f000 f8e1 	bl	800b1a8 <mbedtls_cipher_update>

            len_left -= use_len;
            src += use_len;
 800afe6:	4427      	add	r7, r4
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
 800afe8:	2800      	cmp	r0, #0
 800afea:	f43f af64 	beq.w	800aeb6 <ccm_auth_crypt.constprop.1+0x416>
 800afee:	e713      	b.n	800ae18 <ccm_auth_crypt.constprop.1+0x378>
 800aff0:	9f08      	ldr	r7, [sp, #32]
 800aff2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800aff6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800aff8:	e5c8      	b.n	800ab8c <ccm_auth_crypt.constprop.1+0xec>
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800affa:	4640      	mov	r0, r8
 800affc:	e70c      	b.n	800ae18 <ccm_auth_crypt.constprop.1+0x378>
 800affe:	bf00      	nop

0800b000 <mbedtls_ccm_init>:
 * Initialize context
 */
void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
{
    CCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
 800b000:	2100      	movs	r1, #0
 800b002:	2238      	movs	r2, #56	; 0x38
 800b004:	f002 bad5 	b.w	800d5b2 <memset>

0800b008 <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800b008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00c:	4605      	mov	r5, r0
 800b00e:	4617      	mov	r7, r2
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 800b010:	4608      	mov	r0, r1
 800b012:	2201      	movs	r2, #1
 800b014:	4619      	mov	r1, r3

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800b016:	461e      	mov	r6, r3
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 800b018:	f000 f866 	bl	800b0e8 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 800b01c:	4604      	mov	r4, r0
 800b01e:	b1a0      	cbz	r0, 800b04a <mbedtls_ccm_setkey+0x42>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 800b020:	6943      	ldr	r3, [r0, #20]
 800b022:	2b10      	cmp	r3, #16
 800b024:	d111      	bne.n	800b04a <mbedtls_ccm_setkey+0x42>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800b026:	4628      	mov	r0, r5
 800b028:	f000 f874 	bl	800b114 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800b02c:	4628      	mov	r0, r5
 800b02e:	4621      	mov	r1, r4
 800b030:	f000 f880 	bl	800b134 <mbedtls_cipher_setup>
 800b034:	b108      	cbz	r0, 800b03a <mbedtls_ccm_setkey+0x32>
    {
        return( ret );
    }

    return( 0 );
}
 800b036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mbedtls_cipher_free( &ctx->cipher_ctx );

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800b03a:	4628      	mov	r0, r5
 800b03c:	4639      	mov	r1, r7
 800b03e:	4632      	mov	r2, r6
 800b040:	2301      	movs	r3, #1
    {
        return( ret );
    }

    return( 0 );
}
 800b042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_cipher_free( &ctx->cipher_ctx );

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800b046:	f000 b88d 	b.w	800b164 <mbedtls_cipher_setkey>
    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800b04a:	f06f 000c 	mvn.w	r0, #12
    {
        return( ret );
    }

    return( 0 );
}
 800b04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b052:	bf00      	nop

0800b054 <mbedtls_ccm_free>:
/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
    if( ctx == NULL )
 800b054:	b148      	cbz	r0, 800b06a <mbedtls_ccm_free+0x16>

/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
 800b056:	b510      	push	{r4, lr}
 800b058:	4604      	mov	r4, r0
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800b05a:	f000 f85b 	bl	800b114 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 800b05e:	4620      	mov	r0, r4
 800b060:	2138      	movs	r1, #56	; 0x38
}
 800b062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 800b066:	f000 baff 	b.w	800b668 <mbedtls_platform_zeroize>
 800b06a:	4770      	bx	lr

0800b06c <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 800b06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b070:	f8dd e018 	ldr.w	lr, [sp, #24]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
 800b074:	b11c      	cbz	r4, 800b07e <mbedtls_ccm_encrypt_and_tag+0x12>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800b076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 800b07a:	f7ff ba4b 	b.w	800a514 <ccm_auth_crypt.constprop.0>
    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800b07e:	f06f 000c 	mvn.w	r0, #12
 800b082:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b084 <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 800b084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b088:	b08a      	sub	sp, #40	; 0x28
 800b08a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b08c:	9e14      	ldr	r6, [sp, #80]	; 0x50
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
 800b08e:	b30c      	cbz	r4, 800b0d4 <mbedtls_ccm_auth_decrypt+0x50>
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 800b090:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b092:	9500      	str	r5, [sp, #0]
 800b094:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b096:	9501      	str	r5, [sp, #4]
 800b098:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b09a:	9502      	str	r5, [sp, #8]
 800b09c:	af06      	add	r7, sp, #24
 800b09e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800b0a0:	9503      	str	r5, [sp, #12]
 800b0a2:	9405      	str	r4, [sp, #20]
 800b0a4:	9704      	str	r7, [sp, #16]
 800b0a6:	4688      	mov	r8, r1
 800b0a8:	f7ff fcfa 	bl	800aaa0 <ccm_auth_crypt.constprop.1>
 800b0ac:	b978      	cbnz	r0, 800b0ce <mbedtls_ccm_auth_decrypt+0x4a>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4602      	mov	r2, r0
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
        diff |= tag[i] ^ check_tag[i];
 800b0b2:	a90a      	add	r1, sp, #40	; 0x28
 800b0b4:	4419      	add	r1, r3
 800b0b6:	5cb2      	ldrb	r2, [r6, r2]
 800b0b8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800b0bc:	3301      	adds	r3, #1
 800b0be:	b2db      	uxtb	r3, r3
        diff |= tag[i] ^ check_tag[i];
 800b0c0:	404a      	eors	r2, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800b0c2:	429c      	cmp	r4, r3
        diff |= tag[i] ^ check_tag[i];
 800b0c4:	ea40 0002 	orr.w	r0, r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	d8f2      	bhi.n	800b0b2 <mbedtls_ccm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 800b0cc:	b928      	cbnz	r0, 800b0da <mbedtls_ccm_auth_decrypt+0x56>
    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800b0ce:	b00a      	add	sp, #40	; 0x28
 800b0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800b0d4:	f06f 000c 	mvn.w	r0, #12
 800b0d8:	e7f9      	b.n	800b0ce <mbedtls_ccm_auth_decrypt+0x4a>
    for( diff = 0, i = 0; i < tag_len; i++ )
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_platform_zeroize( output, length );
 800b0da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b0dc:	4641      	mov	r1, r8
 800b0de:	f000 fac3 	bl	800b668 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
 800b0e2:	f06f 000e 	mvn.w	r0, #14
 800b0e6:	e7f2      	b.n	800b0ce <mbedtls_ccm_auth_decrypt+0x4a>

0800b0e8 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 800b0e8:	b430      	push	{r4, r5}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b0ea:	4c09      	ldr	r4, [pc, #36]	; (800b110 <mbedtls_cipher_info_from_values+0x28>)
 800b0ec:	6863      	ldr	r3, [r4, #4]
 800b0ee:	b15b      	cbz	r3, 800b108 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 800b0f0:	699d      	ldr	r5, [r3, #24]
 800b0f2:	782d      	ldrb	r5, [r5, #0]
 800b0f4:	4285      	cmp	r5, r0
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b0f6:	f104 0408 	add.w	r4, r4, #8
        if( def->info->base->cipher == cipher_id &&
 800b0fa:	d1f7      	bne.n	800b0ec <mbedtls_cipher_info_from_values+0x4>
 800b0fc:	685d      	ldr	r5, [r3, #4]
 800b0fe:	428d      	cmp	r5, r1
 800b100:	d1f4      	bne.n	800b0ec <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800b102:	785d      	ldrb	r5, [r3, #1]
 800b104:	4295      	cmp	r5, r2
 800b106:	d1f1      	bne.n	800b0ec <mbedtls_cipher_info_from_values+0x4>
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 800b108:	4618      	mov	r0, r3
 800b10a:	bc30      	pop	{r4, r5}
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	0800db24 	.word	0x0800db24

0800b114 <mbedtls_cipher_free>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
    if( ctx == NULL )
 800b114:	b168      	cbz	r0, 800b132 <mbedtls_cipher_free+0x1e>
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 800b116:	b510      	push	{r4, lr}
 800b118:	4604      	mov	r4, r0
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 800b11a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b11c:	b118      	cbz	r0, 800b126 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800b126:	4620      	mov	r0, r4
 800b128:	2138      	movs	r1, #56	; 0x38
}
 800b12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

    if( ctx->cipher_ctx )
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800b12e:	f000 ba9b 	b.w	800b668 <mbedtls_platform_zeroize>
 800b132:	4770      	bx	lr

0800b134 <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 800b134:	b171      	cbz	r1, 800b154 <mbedtls_cipher_setup+0x20>

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 800b136:	b538      	push	{r3, r4, r5, lr}
 800b138:	460c      	mov	r4, r1
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800b13a:	2238      	movs	r2, #56	; 0x38
 800b13c:	2100      	movs	r1, #0
 800b13e:	4605      	mov	r5, r0
 800b140:	f002 fa37 	bl	800d5b2 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800b144:	69a3      	ldr	r3, [r4, #24]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	4798      	blx	r3
 800b14a:	6368      	str	r0, [r5, #52]	; 0x34
 800b14c:	b120      	cbz	r0, 800b158 <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 800b14e:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800b150:	2000      	movs	r0, #0
 800b152:	bd38      	pop	{r3, r4, r5, pc}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <mbedtls_cipher_setup+0x28>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 800b156:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <mbedtls_cipher_setup+0x2c>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	ffff9f00 	.word	0xffff9f00
 800b160:	ffff9e80 	.word	0xffff9e80

0800b164 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 800b164:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 800b166:	6804      	ldr	r4, [r0, #0]
 800b168:	b1c4      	cbz	r4, 800b19c <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b16a:	6925      	ldr	r5, [r4, #16]
 800b16c:	07ad      	lsls	r5, r5, #30
 800b16e:	d512      	bpl.n	800b196 <mbedtls_cipher_setkey+0x32>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800b170:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 800b172:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 800b174:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800b176:	d009      	beq.n	800b18c <mbedtls_cipher_setkey+0x28>
 800b178:	7865      	ldrb	r5, [r4, #1]
 800b17a:	3d03      	subs	r5, #3
 800b17c:	2d02      	cmp	r5, #2
 800b17e:	d905      	bls.n	800b18c <mbedtls_cipher_setkey+0x28>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
 800b180:	b963      	cbnz	r3, 800b19c <mbedtls_cipher_setkey+0x38>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b182:	69a3      	ldr	r3, [r4, #24]
 800b184:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b186:	68db      	ldr	r3, [r3, #12]
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 800b188:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b18a:	4718      	bx	r3
    if( MBEDTLS_ENCRYPT == operation ||
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b18c:	69a3      	ldr	r3, [r4, #24]
 800b18e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b190:	689b      	ldr	r3, [r3, #8]
    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 800b192:	bc30      	pop	{r4, r5}
    if( MBEDTLS_ENCRYPT == operation ||
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b194:	4718      	bx	r3
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b196:	6865      	ldr	r5, [r4, #4]
 800b198:	4295      	cmp	r5, r2
 800b19a:	d0e9      	beq.n	800b170 <mbedtls_cipher_setkey+0xc>
    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 800b19c:	4801      	ldr	r0, [pc, #4]	; (800b1a4 <mbedtls_cipher_setkey+0x40>)
 800b19e:	bc30      	pop	{r4, r5}
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	ffff9f00 	.word	0xffff9f00

0800b1a8 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1aa:	460f      	mov	r7, r1

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 800b1ac:	6801      	ldr	r1, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800b1ae:	9d05      	ldr	r5, [sp, #20]
 800b1b0:	4604      	mov	r4, r0

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 800b1b2:	b181      	cbz	r1, 800b1d6 <mbedtls_cipher_update+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800b1b4:	784e      	ldrb	r6, [r1, #1]
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	6028      	str	r0, [r5, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800b1ba:	2e01      	cmp	r6, #1
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 800b1bc:	6948      	ldr	r0, [r1, #20]
 800b1be:	d00e      	beq.n	800b1de <mbedtls_cipher_update+0x36>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 800b1c0:	b1e0      	cbz	r0, 800b1fc <mbedtls_cipher_update+0x54>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
 800b1c2:	429f      	cmp	r7, r3
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	d108      	bne.n	800b1da <mbedtls_cipher_update+0x32>
 800b1c8:	69e3      	ldr	r3, [r4, #28]
 800b1ca:	b923      	cbnz	r3, 800b1d6 <mbedtls_cipher_update+0x2e>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b1cc:	fbb2 f3f0 	udiv	r3, r2, r0
 800b1d0:	fb00 2213 	mls	r2, r0, r3, r2
 800b1d4:	b10a      	cbz	r2, 800b1da <mbedtls_cipher_update+0x32>
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b1d6:	480a      	ldr	r0, [pc, #40]	; (800b200 <mbedtls_cipher_update+0x58>)
 800b1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b1da:	480a      	ldr	r0, [pc, #40]	; (800b204 <mbedtls_cipher_update+0x5c>)
}
 800b1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
 800b1de:	4282      	cmp	r2, r0
 800b1e0:	d10a      	bne.n	800b1f8 <mbedtls_cipher_update+0x50>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b1e2:	6989      	ldr	r1, [r1, #24]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 800b1e4:	602a      	str	r2, [r5, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b1e6:	684d      	ldr	r5, [r1, #4]
 800b1e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b1ea:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800b1ee:	463a      	mov	r2, r7
 800b1f0:	46ac      	mov	ip, r5
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 800b1f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b1f6:	4760      	bx	ip
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b1f8:	4803      	ldr	r0, [pc, #12]	; (800b208 <mbedtls_cipher_update+0x60>)
 800b1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 800b1fc:	4803      	ldr	r0, [pc, #12]	; (800b20c <mbedtls_cipher_update+0x64>)
 800b1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b200:	ffff9f00 	.word	0xffff9f00
 800b204:	ffff9f80 	.word	0xffff9f80
 800b208:	ffff9d80 	.word	0xffff9d80
 800b20c:	ffff9c80 	.word	0xffff9c80

0800b210 <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
 800b210:	b510      	push	{r4, lr}
 800b212:	4604      	mov	r4, r0
    mbedtls_ccm_free( ctx );
 800b214:	f7ff ff1e 	bl	800b054 <mbedtls_ccm_free>
    mbedtls_free( ctx );
 800b218:	4620      	mov	r0, r4
}
 800b21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void ccm_ctx_free( void *ctx )
{
    mbedtls_ccm_free( ctx );
    mbedtls_free( ctx );
 800b21e:	f002 b9a5 	b.w	800d56c <free>
 800b222:	bf00      	nop

0800b224 <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc( void )
{
 800b224:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 800b226:	2001      	movs	r0, #1
 800b228:	2138      	movs	r1, #56	; 0x38
 800b22a:	f002 f969 	bl	800d500 <calloc>

    if( ctx != NULL )
 800b22e:	4604      	mov	r4, r0
 800b230:	b108      	cbz	r0, 800b236 <ccm_ctx_alloc+0x12>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 800b232:	f7ff fee5 	bl	800b000 <mbedtls_ccm_init>

    return( ctx );
}
 800b236:	4620      	mov	r0, r4
 800b238:	bd10      	pop	{r4, pc}
 800b23a:	bf00      	nop

0800b23c <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b23c:	4613      	mov	r3, r2
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800b23e:	460a      	mov	r2, r1
 800b240:	2102      	movs	r1, #2
 800b242:	f7ff bee1 	b.w	800b008 <mbedtls_ccm_setkey>
 800b246:	bf00      	nop

0800b248 <aes_ctx_free>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 800b248:	b510      	push	{r4, lr}
 800b24a:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800b24c:	f7fe fa5e 	bl	800970c <mbedtls_aes_free>
    mbedtls_free( ctx );
 800b250:	4620      	mov	r0, r4
}
 800b252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 800b256:	f002 b989 	b.w	800d56c <free>
 800b25a:	bf00      	nop

0800b25c <aes_ctx_alloc>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 800b25c:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800b25e:	2001      	movs	r0, #1
 800b260:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b264:	f002 f94c 	bl	800d500 <calloc>

    if( aes == NULL )
 800b268:	4604      	mov	r4, r0
 800b26a:	b108      	cbz	r0, 800b270 <aes_ctx_alloc+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 800b26c:	f7fe fa48 	bl	8009700 <mbedtls_aes_init>

    return( aes );
}
 800b270:	4620      	mov	r0, r4
 800b272:	bd10      	pop	{r4, pc}

0800b274 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b274:	f7fe bb7a 	b.w	800996c <mbedtls_aes_setkey_dec>

0800b278 <aes_setkey_enc_wrap>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b278:	f7fe ba4e 	b.w	8009718 <mbedtls_aes_setkey_enc>

0800b27c <aes_crypt_ecb_wrap>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800b27c:	f7ff b942 	b.w	800a504 <mbedtls_aes_crypt_ecb>

0800b280 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 800b280:	2805      	cmp	r0, #5
 800b282:	d005      	beq.n	800b290 <mbedtls_md_info_from_type+0x10>
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800b284:	4b03      	ldr	r3, [pc, #12]	; (800b294 <mbedtls_md_info_from_type+0x14>)
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 800b286:	2806      	cmp	r0, #6
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800b288:	bf0c      	ite	eq
 800b28a:	4618      	moveq	r0, r3
 800b28c:	2000      	movne	r0, #0
 800b28e:	4770      	bx	lr
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 800b290:	4801      	ldr	r0, [pc, #4]	; (800b298 <mbedtls_md_info_from_type+0x18>)
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 800b292:	4770      	bx	lr
 800b294:	0800dc88 	.word	0x0800dc88
 800b298:	0800dc48 	.word	0x0800dc48

0800b29c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 800b29c:	4603      	mov	r3, r0
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f803 2b01 	strb.w	r2, [r3], #1
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	7042      	strb	r2, [r0, #1]
 800b2a8:	f803 2b01 	strb.w	r2, [r3], #1
 800b2ac:	f803 2b01 	strb.w	r2, [r3], #1
 800b2b0:	f803 2b01 	strb.w	r2, [r3], #1
 800b2b4:	f803 2b01 	strb.w	r2, [r3], #1
 800b2b8:	f803 2b01 	strb.w	r2, [r3], #1
 800b2bc:	f803 2b01 	strb.w	r2, [r3], #1
 800b2c0:	f803 2b01 	strb.w	r2, [r3], #1
 800b2c4:	f803 2b01 	strb.w	r2, [r3], #1
 800b2c8:	f803 2b01 	strb.w	r2, [r3], #1
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	4770      	bx	lr

0800b2d0 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 800b2d0:	b1b8      	cbz	r0, 800b302 <mbedtls_md_free+0x32>
 800b2d2:	6803      	ldr	r3, [r0, #0]
 800b2d4:	b1ab      	cbz	r3, 800b302 <mbedtls_md_free+0x32>
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 800b2d6:	b510      	push	{r4, lr}
 800b2d8:	4604      	mov	r4, r0
    if( ctx == NULL || ctx->md_info == NULL )
        return;

    if( ctx->md_ctx != NULL )
 800b2da:	6840      	ldr	r0, [r0, #4]
 800b2dc:	b108      	cbz	r0, 800b2e2 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 800b2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e0:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 800b2e2:	68a0      	ldr	r0, [r4, #8]
 800b2e4:	b138      	cbz	r0, 800b2f6 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	68d9      	ldr	r1, [r3, #12]
    if( ctx->md_ctx != NULL )
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 800b2ea:	0049      	lsls	r1, r1, #1
 800b2ec:	f000 f9bc 	bl	800b668 <mbedtls_platform_zeroize>
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 800b2f0:	68a0      	ldr	r0, [r4, #8]
 800b2f2:	f002 f93b 	bl	800d56c <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	210c      	movs	r1, #12
}
 800b2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 800b2fe:	f000 b9b3 	b.w	800b668 <mbedtls_platform_zeroize>
 800b302:	4770      	bx	lr

0800b304 <mbedtls_md_setup>:
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
 800b304:	b1c9      	cbz	r1, 800b33a <mbedtls_md_setup+0x36>
 800b306:	b1c0      	cbz	r0, 800b33a <mbedtls_md_setup+0x36>
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 800b30a:	6a0b      	ldr	r3, [r1, #32]
 800b30c:	4605      	mov	r5, r0
 800b30e:	460c      	mov	r4, r1
 800b310:	4616      	mov	r6, r2
 800b312:	4798      	blx	r3
 800b314:	4607      	mov	r7, r0
 800b316:	6068      	str	r0, [r5, #4]
 800b318:	b188      	cbz	r0, 800b33e <mbedtls_md_setup+0x3a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 800b31a:	b916      	cbnz	r6, 800b322 <mbedtls_md_setup+0x1e>
            md_info->ctx_free_func( ctx->md_ctx );
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 800b31c:	602c      	str	r4, [r5, #0]

    return( 0 );
 800b31e:	2000      	movs	r0, #0
 800b320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 800b322:	2002      	movs	r0, #2
 800b324:	68e1      	ldr	r1, [r4, #12]
 800b326:	f002 f8eb 	bl	800d500 <calloc>
 800b32a:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d1f5      	bne.n	800b31c <mbedtls_md_setup+0x18>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 800b330:	4638      	mov	r0, r7
 800b332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b334:	4798      	blx	r3
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800b336:	4803      	ldr	r0, [pc, #12]	; (800b344 <mbedtls_md_setup+0x40>)
 800b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b33a:	4803      	ldr	r0, [pc, #12]	; (800b348 <mbedtls_md_setup+0x44>)
 800b33c:	4770      	bx	lr

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800b33e:	4801      	ldr	r0, [pc, #4]	; (800b344 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 800b340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b342:	bf00      	nop
 800b344:	ffffae80 	.word	0xffffae80
 800b348:	ffffaf00 	.word	0xffffaf00

0800b34c <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b350:	4606      	mov	r6, r0
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800b352:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b354:	2800      	cmp	r0, #0
 800b356:	f000 80ed 	beq.w	800b534 <mbedtls_md_hmac_starts+0x1e8>
 800b35a:	6803      	ldr	r3, [r0, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 80e9 	beq.w	800b534 <mbedtls_md_hmac_starts+0x1e8>
 800b362:	6885      	ldr	r5, [r0, #8]
 800b364:	2d00      	cmp	r5, #0
 800b366:	f000 80e5 	beq.w	800b534 <mbedtls_md_hmac_starts+0x1e8>
 800b36a:	4617      	mov	r7, r2
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	42ba      	cmp	r2, r7
 800b370:	460c      	mov	r4, r1
 800b372:	f0c0 80a3 	bcc.w	800b4bc <mbedtls_md_hmac_starts+0x170>
 800b376:	4691      	mov	r9, r2
 800b378:	f10d 0810 	add.w	r8, sp, #16
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
 800b37c:	2136      	movs	r1, #54	; 0x36
 800b37e:	464a      	mov	r2, r9
 800b380:	4628      	mov	r0, r5
 800b382:	f002 f916 	bl	800d5b2 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 800b386:	6832      	ldr	r2, [r6, #0]
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800b388:	eb05 0309 	add.w	r3, r5, r9

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );
 800b38c:	4618      	mov	r0, r3
 800b38e:	68d2      	ldr	r2, [r2, #12]
 800b390:	215c      	movs	r1, #92	; 0x5c
 800b392:	f002 f90e 	bl	800d5b2 <memset>
 800b396:	4603      	mov	r3, r0

    for( i = 0; i < keylen; i++ )
 800b398:	2f00      	cmp	r7, #0
 800b39a:	f000 8081 	beq.w	800b4a0 <mbedtls_md_hmac_starts+0x154>
 800b39e:	1d29      	adds	r1, r5, #4
 800b3a0:	1d20      	adds	r0, r4, #4
 800b3a2:	428c      	cmp	r4, r1
 800b3a4:	bf38      	it	cc
 800b3a6:	4285      	cmpcc	r5, r0
 800b3a8:	bf2c      	ite	cs
 800b3aa:	f04f 0e01 	movcs.w	lr, #1
 800b3ae:	f04f 0e00 	movcc.w	lr, #0
 800b3b2:	428b      	cmp	r3, r1
 800b3b4:	bf34      	ite	cc
 800b3b6:	2100      	movcc	r1, #0
 800b3b8:	2101      	movcs	r1, #1
 800b3ba:	f109 0204 	add.w	r2, r9, #4
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	bfd8      	it	le
 800b3c2:	f041 0101 	orrle.w	r1, r1, #1
 800b3c6:	442a      	add	r2, r5
 800b3c8:	2f05      	cmp	r7, #5
 800b3ca:	bf94      	ite	ls
 800b3cc:	f04f 0e00 	movls.w	lr, #0
 800b3d0:	f00e 0e01 	andhi.w	lr, lr, #1
 800b3d4:	4283      	cmp	r3, r0
 800b3d6:	bf38      	it	cc
 800b3d8:	4294      	cmpcc	r4, r2
 800b3da:	ea0e 0101 	and.w	r1, lr, r1
 800b3de:	bf2c      	ite	cs
 800b3e0:	2201      	movcs	r2, #1
 800b3e2:	2200      	movcc	r2, #0
 800b3e4:	4211      	tst	r1, r2
 800b3e6:	f000 8092 	beq.w	800b50e <mbedtls_md_hmac_starts+0x1c2>
 800b3ea:	ea45 0203 	orr.w	r2, r5, r3
 800b3ee:	4322      	orrs	r2, r4
 800b3f0:	0792      	lsls	r2, r2, #30
 800b3f2:	f040 808c 	bne.w	800b50e <mbedtls_md_hmac_starts+0x1c2>
 800b3f6:	1f3a      	subs	r2, r7, #4
 800b3f8:	0892      	lsrs	r2, r2, #2
 800b3fa:	3201      	adds	r2, #1
 800b3fc:	f1a5 0904 	sub.w	r9, r5, #4
 800b400:	f1a4 0c04 	sub.w	ip, r4, #4
 800b404:	0091      	lsls	r1, r2, #2
 800b406:	9102      	str	r1, [sp, #8]
 800b408:	46cb      	mov	fp, r9
 800b40a:	f8cd c004 	str.w	ip, [sp, #4]
 800b40e:	f1a3 0a04 	sub.w	sl, r3, #4
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	f04f 0e00 	mov.w	lr, #0
 800b418:	9303      	str	r3, [sp, #12]
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b41a:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800b41e:	f85c 1f04 	ldr.w	r1, [ip, #4]!
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b422:	9b01      	ldr	r3, [sp, #4]
    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b424:	4041      	eors	r1, r0
 800b426:	f84b 1f04 	str.w	r1, [fp, #4]!
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b42a:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800b42e:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	9b00      	ldr	r3, [sp, #0]
 800b436:	4041      	eors	r1, r0
 800b438:	f10e 0e01 	add.w	lr, lr, #1
 800b43c:	f843 1b04 	str.w	r1, [r3], #4
 800b440:	4596      	cmp	lr, r2
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	d3e9      	bcc.n	800b41a <mbedtls_md_hmac_starts+0xce>
 800b446:	9902      	ldr	r1, [sp, #8]
 800b448:	9b03      	ldr	r3, [sp, #12]
 800b44a:	428f      	cmp	r7, r1
 800b44c:	d028      	beq.n	800b4a0 <mbedtls_md_hmac_starts+0x154>
    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b44e:	f814 0022 	ldrb.w	r0, [r4, r2, lsl #2]
 800b452:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
 800b456:	4041      	eors	r1, r0
 800b458:	f805 1022 	strb.w	r1, [r5, r2, lsl #2]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b45c:	9902      	ldr	r1, [sp, #8]
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b45e:	f814 e022 	ldrb.w	lr, [r4, r2, lsl #2]
 800b462:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b466:	3101      	adds	r1, #1
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b468:	ea8e 0000 	eor.w	r0, lr, r0
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b46c:	428f      	cmp	r7, r1
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b46e:	f803 0022 	strb.w	r0, [r3, r2, lsl #2]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b472:	d915      	bls.n	800b4a0 <mbedtls_md_hmac_starts+0x154>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b474:	5c60      	ldrb	r0, [r4, r1]
 800b476:	5c6a      	ldrb	r2, [r5, r1]
 800b478:	4042      	eors	r2, r0
 800b47a:	546a      	strb	r2, [r5, r1]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b47c:	9a02      	ldr	r2, [sp, #8]
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b47e:	f814 e001 	ldrb.w	lr, [r4, r1]
 800b482:	5c58      	ldrb	r0, [r3, r1]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b484:	3202      	adds	r2, #2
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b486:	ea8e 0000 	eor.w	r0, lr, r0
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b48a:	4297      	cmp	r7, r2
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b48c:	5458      	strb	r0, [r3, r1]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b48e:	d907      	bls.n	800b4a0 <mbedtls_md_hmac_starts+0x154>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b490:	5ca0      	ldrb	r0, [r4, r2]
 800b492:	5ca9      	ldrb	r1, [r5, r2]
 800b494:	4041      	eors	r1, r0
 800b496:	54a9      	strb	r1, [r5, r2]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b498:	5ca0      	ldrb	r0, [r4, r2]
 800b49a:	5c99      	ldrb	r1, [r3, r2]
 800b49c:	4041      	eors	r1, r0
 800b49e:	5499      	strb	r1, [r3, r2]
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b4a0:	6833      	ldr	r3, [r6, #0]
 800b4a2:	6870      	ldr	r0, [r6, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	4798      	blx	r3
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	b970      	cbnz	r0, 800b4ca <mbedtls_md_hmac_starts+0x17e>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800b4ac:	6833      	ldr	r3, [r6, #0]
 800b4ae:	6870      	ldr	r0, [r6, #4]
 800b4b0:	695c      	ldr	r4, [r3, #20]
 800b4b2:	68da      	ldr	r2, [r3, #12]
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	47a0      	blx	r4
 800b4b8:	4681      	mov	r9, r0
 800b4ba:	e006      	b.n	800b4ca <mbedtls_md_hmac_starts+0x17e>
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	6840      	ldr	r0, [r0, #4]
 800b4c0:	4798      	blx	r3
 800b4c2:	4681      	mov	r9, r0
 800b4c4:	b148      	cbz	r0, 800b4da <mbedtls_md_hmac_starts+0x18e>
 800b4c6:	f10d 0810 	add.w	r8, sp, #16
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	2120      	movs	r1, #32
 800b4ce:	f000 f8cb 	bl	800b668 <mbedtls_platform_zeroize>

    return( ret );
 800b4d2:	4648      	mov	r0, r9
}
 800b4d4:	b00d      	add	sp, #52	; 0x34
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    if( keylen > (size_t) ctx->md_info->block_size )
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 800b4da:	6833      	ldr	r3, [r6, #0]
 800b4dc:	6870      	ldr	r0, [r6, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	463a      	mov	r2, r7
 800b4e4:	4798      	blx	r3
 800b4e6:	4681      	mov	r9, r0
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1ec      	bne.n	800b4c6 <mbedtls_md_hmac_starts+0x17a>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 800b4ec:	6833      	ldr	r3, [r6, #0]
 800b4ee:	6870      	ldr	r0, [r6, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	f10d 0810 	add.w	r8, sp, #16
 800b4f6:	4641      	mov	r1, r8
 800b4f8:	4798      	blx	r3
 800b4fa:	4681      	mov	r9, r0
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d1e4      	bne.n	800b4ca <mbedtls_md_hmac_starts+0x17e>
            goto cleanup;

        keylen = ctx->md_info->size;
 800b500:	6833      	ldr	r3, [r6, #0]
 800b502:	68b5      	ldr	r5, [r6, #8]
 800b504:	689f      	ldr	r7, [r3, #8]
 800b506:	f8d3 900c 	ldr.w	r9, [r3, #12]
        key = sum;
 800b50a:	4644      	mov	r4, r8
 800b50c:	e736      	b.n	800b37c <mbedtls_md_hmac_starts+0x30>
 800b50e:	3c01      	subs	r4, #1
 800b510:	3b01      	subs	r3, #1
 800b512:	442f      	add	r7, r5
 800b514:	4628      	mov	r0, r5
    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b516:	7801      	ldrb	r1, [r0, #0]
 800b518:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800b51c:	404a      	eors	r2, r1
 800b51e:	f800 2b01 	strb.w	r2, [r0], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b522:	7821      	ldrb	r1, [r4, #0]
 800b524:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b528:	42b8      	cmp	r0, r7
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b52a:	ea82 0201 	eor.w	r2, r2, r1
 800b52e:	701a      	strb	r2, [r3, #0]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b530:	d1f1      	bne.n	800b516 <mbedtls_md_hmac_starts+0x1ca>
 800b532:	e7b5      	b.n	800b4a0 <mbedtls_md_hmac_starts+0x154>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b534:	4800      	ldr	r0, [pc, #0]	; (800b538 <mbedtls_md_hmac_starts+0x1ec>)
 800b536:	e7cd      	b.n	800b4d4 <mbedtls_md_hmac_starts+0x188>
 800b538:	ffffaf00 	.word	0xffffaf00

0800b53c <mbedtls_md_hmac_update>:
    return( ret );
}

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b53c:	b168      	cbz	r0, 800b55a <mbedtls_md_hmac_update+0x1e>
 800b53e:	6803      	ldr	r3, [r0, #0]
 800b540:	b15b      	cbz	r3, 800b55a <mbedtls_md_hmac_update+0x1e>

    return( ret );
}

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 800b542:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b544:	6884      	ldr	r4, [r0, #8]
 800b546:	b124      	cbz	r4, 800b552 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	6840      	ldr	r0, [r0, #4]
}
 800b54c:	f85d 4b04 	ldr.w	r4, [sp], #4
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800b550:	4718      	bx	r3
}
 800b552:	4803      	ldr	r0, [pc, #12]	; (800b560 <mbedtls_md_hmac_update+0x24>)
 800b554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	4801      	ldr	r0, [pc, #4]	; (800b560 <mbedtls_md_hmac_update+0x24>)
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	ffffaf00 	.word	0xffffaf00

0800b564 <mbedtls_md_hmac_finish>:
{
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b564:	2800      	cmp	r0, #0
 800b566:	d030      	beq.n	800b5ca <mbedtls_md_hmac_finish+0x66>
 800b568:	6803      	ldr	r3, [r0, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d02d      	beq.n	800b5ca <mbedtls_md_hmac_finish+0x66>

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
}

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 800b56e:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b570:	6886      	ldr	r6, [r0, #8]

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
}

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 800b572:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b574:	2e00      	cmp	r6, #0
 800b576:	d026      	beq.n	800b5c6 <mbedtls_md_hmac_finish+0x62>
 800b578:	4604      	mov	r4, r0
 800b57a:	460d      	mov	r5, r1
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 800b57c:	699a      	ldr	r2, [r3, #24]
 800b57e:	6840      	ldr	r0, [r0, #4]
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800b580:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 800b582:	4669      	mov	r1, sp
 800b584:	4790      	blx	r2
 800b586:	b108      	cbz	r0, 800b58c <mbedtls_md_hmac_finish+0x28>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 800b588:	b009      	add	sp, #36	; 0x24
 800b58a:	bdf0      	pop	{r4, r5, r6, r7, pc}

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	6860      	ldr	r0, [r4, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	4798      	blx	r3
 800b594:	2800      	cmp	r0, #0
 800b596:	d1f7      	bne.n	800b588 <mbedtls_md_hmac_finish+0x24>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	6860      	ldr	r0, [r4, #4]
 800b59c:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800b5a0:	68da      	ldr	r2, [r3, #12]
 800b5a2:	19f1      	adds	r1, r6, r7
 800b5a4:	47e0      	blx	ip
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d1ee      	bne.n	800b588 <mbedtls_md_hmac_finish+0x24>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	6860      	ldr	r0, [r4, #4]
 800b5ae:	695e      	ldr	r6, [r3, #20]
 800b5b0:	689a      	ldr	r2, [r3, #8]
 800b5b2:	4669      	mov	r1, sp
 800b5b4:	47b0      	blx	r6
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d1e6      	bne.n	800b588 <mbedtls_md_hmac_finish+0x24>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	6860      	ldr	r0, [r4, #4]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4798      	blx	r3
 800b5c4:	e7e0      	b.n	800b588 <mbedtls_md_hmac_finish+0x24>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b5c6:	4802      	ldr	r0, [pc, #8]	; (800b5d0 <mbedtls_md_hmac_finish+0x6c>)
 800b5c8:	e7de      	b.n	800b588 <mbedtls_md_hmac_finish+0x24>
 800b5ca:	4801      	ldr	r0, [pc, #4]	; (800b5d0 <mbedtls_md_hmac_finish+0x6c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	ffffaf00 	.word	0xffffaf00

0800b5d4 <mbedtls_md_hmac_reset>:
int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b5d4:	b1a8      	cbz	r0, 800b602 <mbedtls_md_hmac_reset+0x2e>
 800b5d6:	6803      	ldr	r3, [r0, #0]
 800b5d8:	b19b      	cbz	r3, 800b602 <mbedtls_md_hmac_reset+0x2e>
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 800b5da:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b5dc:	6885      	ldr	r5, [r0, #8]
 800b5de:	b175      	cbz	r5, 800b5fe <mbedtls_md_hmac_reset+0x2a>
 800b5e0:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	6840      	ldr	r0, [r0, #4]
 800b5e6:	4798      	blx	r3
 800b5e8:	b100      	cbz	r0, 800b5ec <mbedtls_md_hmac_reset+0x18>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 800b5ea:	bd70      	pop	{r4, r5, r6, pc}

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	6860      	ldr	r0, [r4, #4]
 800b5f0:	695c      	ldr	r4, [r3, #20]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	4623      	mov	r3, r4
                                       ctx->md_info->block_size ) );
}
 800b5f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800b5fc:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b5fe:	4802      	ldr	r0, [pc, #8]	; (800b608 <mbedtls_md_hmac_reset+0x34>)
 800b600:	e7f3      	b.n	800b5ea <mbedtls_md_hmac_reset+0x16>
 800b602:	4801      	ldr	r0, [pc, #4]	; (800b608 <mbedtls_md_hmac_reset+0x34>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	ffffaf00 	.word	0xffffaf00

0800b60c <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800b60c:	f000 b88c 	b.w	800b728 <mbedtls_internal_sha256_process>

0800b610 <sha224_clone_wrap>:
    mbedtls_free( ctx );
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 800b610:	f000 b83c 	b.w	800b68c <mbedtls_sha256_clone>

0800b614 <sha224_ctx_free>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 800b614:	b510      	push	{r4, lr}
 800b616:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 800b618:	f000 f832 	bl	800b680 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800b61c:	4620      	mov	r0, r4
}
 800b61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 800b622:	f001 bfa3 	b.w	800d56c <free>
 800b626:	bf00      	nop

0800b628 <sha224_ctx_alloc>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 800b628:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 800b62a:	2001      	movs	r0, #1
 800b62c:	216c      	movs	r1, #108	; 0x6c
 800b62e:	f001 ff67 	bl	800d500 <calloc>

    if( ctx != NULL )
 800b632:	4604      	mov	r4, r0
 800b634:	b108      	cbz	r0, 800b63a <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 800b636:	f000 f81f 	bl	800b678 <mbedtls_sha256_init>

    return( ctx );
}
 800b63a:	4620      	mov	r0, r4
 800b63c:	bd10      	pop	{r4, pc}
 800b63e:	bf00      	nop

0800b640 <sha224_wrap>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800b640:	2301      	movs	r3, #1
 800b642:	f000 bd6b 	b.w	800c11c <mbedtls_sha256_ret>
 800b646:	bf00      	nop

0800b648 <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 800b648:	2300      	movs	r3, #0
 800b64a:	f000 bd67 	b.w	800c11c <mbedtls_sha256_ret>
 800b64e:	bf00      	nop

0800b650 <sha224_finish_wrap>:
                                       input, ilen ) );
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 800b650:	f000 bcc0 	b.w	800bfd4 <mbedtls_sha256_finish_ret>

0800b654 <sha224_update_wrap>:
}

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800b654:	f000 bc78 	b.w	800bf48 <mbedtls_sha256_update_ret>

0800b658 <sha224_starts_wrap>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 800b658:	2101      	movs	r1, #1
 800b65a:	f000 b81d 	b.w	800b698 <mbedtls_sha256_starts_ret>
 800b65e:	bf00      	nop

0800b660 <sha256_starts_wrap>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800b660:	2100      	movs	r1, #0
 800b662:	f000 b819 	b.w	800b698 <mbedtls_sha256_starts_ret>
 800b666:	bf00      	nop

0800b668 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 800b668:	4b02      	ldr	r3, [pc, #8]	; (800b674 <mbedtls_platform_zeroize+0xc>)
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 800b66a:	460a      	mov	r2, r1
    memset_func( buf, 0, len );
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2100      	movs	r1, #0
 800b670:	4718      	bx	r3
 800b672:	bf00      	nop
 800b674:	1ffed6f4 	.word	0x1ffed6f4

0800b678 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 800b678:	2100      	movs	r1, #0
 800b67a:	226c      	movs	r2, #108	; 0x6c
 800b67c:	f001 bf99 	b.w	800d5b2 <memset>

0800b680 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 800b680:	b110      	cbz	r0, 800b688 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 800b682:	216c      	movs	r1, #108	; 0x6c
 800b684:	f7ff bff0 	b.w	800b668 <mbedtls_platform_zeroize>
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop

0800b68c <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 800b68c:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 800b68e:	226c      	movs	r2, #108	; 0x6c
 800b690:	f001 ff84 	bl	800d59c <memcpy>
 800b694:	bd08      	pop	{r3, pc}
 800b696:	bf00      	nop

0800b698 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 800b698:	2300      	movs	r3, #0

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 800b69a:	b5f0      	push	{r4, r5, r6, r7, lr}
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 800b69c:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 800b69e:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 800b6a0:	b1b1      	cbz	r1, 800b6d0 <mbedtls_sha256_starts_ret+0x38>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800b6a2:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b718 <mbedtls_sha256_starts_ret+0x80>
        ctx->state[1] = 0x367CD507;
 800b6a6:	f8df e074 	ldr.w	lr, [pc, #116]	; 800b71c <mbedtls_sha256_starts_ret+0x84>
        ctx->state[2] = 0x3070DD17;
 800b6aa:	4f0f      	ldr	r7, [pc, #60]	; (800b6e8 <mbedtls_sha256_starts_ret+0x50>)
        ctx->state[3] = 0xF70E5939;
 800b6ac:	4e0f      	ldr	r6, [pc, #60]	; (800b6ec <mbedtls_sha256_starts_ret+0x54>)
        ctx->state[4] = 0xFFC00B31;
 800b6ae:	4d10      	ldr	r5, [pc, #64]	; (800b6f0 <mbedtls_sha256_starts_ret+0x58>)
        ctx->state[5] = 0x68581511;
 800b6b0:	4c10      	ldr	r4, [pc, #64]	; (800b6f4 <mbedtls_sha256_starts_ret+0x5c>)
        ctx->state[6] = 0x64F98FA7;
 800b6b2:	4a11      	ldr	r2, [pc, #68]	; (800b6f8 <mbedtls_sha256_starts_ret+0x60>)
        ctx->state[7] = 0xBEFA4FA4;
 800b6b4:	4b11      	ldr	r3, [pc, #68]	; (800b6fc <mbedtls_sha256_starts_ret+0x64>)
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800b6b6:	f8c0 c008 	str.w	ip, [r0, #8]
        ctx->state[1] = 0x367CD507;
 800b6ba:	f8c0 e00c 	str.w	lr, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 800b6be:	6107      	str	r7, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 800b6c0:	6146      	str	r6, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 800b6c2:	6185      	str	r5, [r0, #24]
        ctx->state[5] = 0x68581511;
 800b6c4:	61c4      	str	r4, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 800b6c6:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 800b6c8:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 800b6ca:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ctx->total[1] = 0;

    if( is224 == 0 )
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 800b6d0:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800b720 <mbedtls_sha256_starts_ret+0x88>
        ctx->state[1] = 0xBB67AE85;
 800b6d4:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800b724 <mbedtls_sha256_starts_ret+0x8c>
        ctx->state[2] = 0x3C6EF372;
 800b6d8:	4f09      	ldr	r7, [pc, #36]	; (800b700 <mbedtls_sha256_starts_ret+0x68>)
        ctx->state[3] = 0xA54FF53A;
 800b6da:	4e0a      	ldr	r6, [pc, #40]	; (800b704 <mbedtls_sha256_starts_ret+0x6c>)
        ctx->state[4] = 0x510E527F;
 800b6dc:	4d0a      	ldr	r5, [pc, #40]	; (800b708 <mbedtls_sha256_starts_ret+0x70>)
        ctx->state[5] = 0x9B05688C;
 800b6de:	4c0b      	ldr	r4, [pc, #44]	; (800b70c <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[6] = 0x1F83D9AB;
 800b6e0:	4a0b      	ldr	r2, [pc, #44]	; (800b710 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[7] = 0x5BE0CD19;
 800b6e2:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <mbedtls_sha256_starts_ret+0x7c>)
 800b6e4:	e7e7      	b.n	800b6b6 <mbedtls_sha256_starts_ret+0x1e>
 800b6e6:	bf00      	nop
 800b6e8:	3070dd17 	.word	0x3070dd17
 800b6ec:	f70e5939 	.word	0xf70e5939
 800b6f0:	ffc00b31 	.word	0xffc00b31
 800b6f4:	68581511 	.word	0x68581511
 800b6f8:	64f98fa7 	.word	0x64f98fa7
 800b6fc:	befa4fa4 	.word	0xbefa4fa4
 800b700:	3c6ef372 	.word	0x3c6ef372
 800b704:	a54ff53a 	.word	0xa54ff53a
 800b708:	510e527f 	.word	0x510e527f
 800b70c:	9b05688c 	.word	0x9b05688c
 800b710:	1f83d9ab 	.word	0x1f83d9ab
 800b714:	5be0cd19 	.word	0x5be0cd19
 800b718:	c1059ed8 	.word	0xc1059ed8
 800b71c:	367cd507 	.word	0x367cd507
 800b720:	6a09e667 	.word	0x6a09e667
 800b724:	bb67ae85 	.word	0xbb67ae85

0800b728 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
 800b72c:	4606      	mov	r6, r0
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 800b72e:	b0e5      	sub	sp, #404	; 0x194
 800b730:	460c      	mov	r4, r1
 800b732:	901b      	str	r0, [sp, #108]	; 0x6c
 800b734:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800b738:	6871      	ldr	r1, [r6, #4]
 800b73a:	68b2      	ldr	r2, [r6, #8]
 800b73c:	68f3      	ldr	r3, [r6, #12]
 800b73e:	ad1c      	add	r5, sp, #112	; 0x70
 800b740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b742:	6971      	ldr	r1, [r6, #20]
 800b744:	6930      	ldr	r0, [r6, #16]
 800b746:	69b2      	ldr	r2, [r6, #24]
 800b748:	69f3      	ldr	r3, [r6, #28]
 800b74a:	ae33      	add	r6, sp, #204	; 0xcc
 800b74c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b74e:	1c61      	adds	r1, r4, #1
 800b750:	ad23      	add	r5, sp, #140	; 0x8c
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 800b752:	7808      	ldrb	r0, [r1, #0]
 800b754:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 800b758:	788a      	ldrb	r2, [r1, #2]
 800b75a:	784c      	ldrb	r4, [r1, #1]
 800b75c:	0400      	lsls	r0, r0, #16
 800b75e:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 800b762:	4313      	orrs	r3, r2
 800b764:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b768:	f845 3f04 	str.w	r3, [r5, #4]!

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 800b76c:	42b5      	cmp	r5, r6
 800b76e:	f101 0104 	add.w	r1, r1, #4
 800b772:	d1ee      	bne.n	800b752 <mbedtls_internal_sha256_process+0x2a>
 800b774:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b776:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b778:	f8df e2f0 	ldr.w	lr, [pc, #752]	; 800ba6c <mbedtls_internal_sha256_process+0x344>
 800b77c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b780:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b782:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b784:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b786:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800b78a:	f8cd e008 	str.w	lr, [sp, #8]
 800b78e:	4626      	mov	r6, r4
 800b790:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b792:	4625      	mov	r5, r4
 800b794:	ac24      	add	r4, sp, #144	; 0x90
 800b796:	4627      	mov	r7, r4
 800b798:	9404      	str	r4, [sp, #16]
 800b79a:	2400      	movs	r4, #0
 800b79c:	9401      	str	r4, [sp, #4]
 800b79e:	4614      	mov	r4, r2
 800b7a0:	9a01      	ldr	r2, [sp, #4]
 800b7a2:	46f4      	mov	ip, lr
 800b7a4:	46b8      	mov	r8, r7
 800b7a6:	46ae      	mov	lr, r5
 800b7a8:	f10d 0990 	add.w	r9, sp, #144	; 0x90
 800b7ac:	4daf      	ldr	r5, [pc, #700]	; (800ba6c <mbedtls_internal_sha256_process+0x344>)
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800b7ae:	ea4f 17b3 	mov.w	r7, r3, ror #6
 800b7b2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800b7b6:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b7ba:	ea87 27f3 	eor.w	r7, r7, r3, ror #11
 800b7be:	ea80 0904 	eor.w	r9, r0, r4
 800b7c2:	442a      	add	r2, r5
 800b7c4:	ea87 6773 	eor.w	r7, r7, r3, ror #25
 800b7c8:	ea09 0903 	and.w	r9, r9, r3
 800b7cc:	ea89 0900 	eor.w	r9, r9, r0
 800b7d0:	4417      	add	r7, r2
 800b7d2:	ea46 0501 	orr.w	r5, r6, r1
 800b7d6:	444f      	add	r7, r9
 800b7d8:	ea4f 02b1 	mov.w	r2, r1, ror #2
 800b7dc:	44bb      	add	fp, r7
 800b7de:	ea05 050e 	and.w	r5, r5, lr
 800b7e2:	ea06 0701 	and.w	r7, r6, r1
 800b7e6:	ea82 3271 	eor.w	r2, r2, r1, ror #13
 800b7ea:	433d      	orrs	r5, r7
 800b7ec:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 800b7f0:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800b7f4:	442a      	add	r2, r5
 800b7f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b7fa:	445a      	add	r2, fp
 800b7fc:	44da      	add	sl, fp
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800b7fe:	ea84 0b03 	eor.w	fp, r4, r3
 800b802:	443d      	add	r5, r7
 800b804:	ea0a 0b0b 	and.w	fp, sl, fp
 800b808:	ea4f 17ba 	mov.w	r7, sl, ror #6
 800b80c:	ea8b 0b04 	eor.w	fp, fp, r4
 800b810:	4428      	add	r0, r5
 800b812:	ea87 27fa 	eor.w	r7, r7, sl, ror #11
 800b816:	ea42 0901 	orr.w	r9, r2, r1
 800b81a:	4458      	add	r0, fp
 800b81c:	ea4f 05b2 	mov.w	r5, r2, ror #2
 800b820:	ea87 677a 	eor.w	r7, r7, sl, ror #25
 800b824:	4407      	add	r7, r0
 800b826:	ea09 0906 	and.w	r9, r9, r6
 800b82a:	ea02 0001 	and.w	r0, r2, r1
 800b82e:	ea85 3572 	eor.w	r5, r5, r2, ror #13
 800b832:	ea85 55b2 	eor.w	r5, r5, r2, ror #22
 800b836:	ea49 0000 	orr.w	r0, r9, r0
 800b83a:	4428      	add	r0, r5
 800b83c:	4438      	add	r0, r7
 800b83e:	44be      	add	lr, r7
 800b840:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b844:	f8dc 7008 	ldr.w	r7, [ip, #8]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800b848:	ea8a 0b03 	eor.w	fp, sl, r3
 800b84c:	443d      	add	r5, r7
 800b84e:	ea0e 0b0b 	and.w	fp, lr, fp
 800b852:	ea4f 17be 	mov.w	r7, lr, ror #6
 800b856:	ea8b 0b03 	eor.w	fp, fp, r3
 800b85a:	442c      	add	r4, r5
 800b85c:	ea87 27fe 	eor.w	r7, r7, lr, ror #11
 800b860:	ea40 0902 	orr.w	r9, r0, r2
 800b864:	445c      	add	r4, fp
 800b866:	ea4f 05b0 	mov.w	r5, r0, ror #2
 800b86a:	ea87 677e 	eor.w	r7, r7, lr, ror #25
 800b86e:	4427      	add	r7, r4
 800b870:	ea09 0901 	and.w	r9, r9, r1
 800b874:	ea00 0402 	and.w	r4, r0, r2
 800b878:	ea85 3570 	eor.w	r5, r5, r0, ror #13
 800b87c:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
 800b880:	ea49 0404 	orr.w	r4, r9, r4
 800b884:	442c      	add	r4, r5
 800b886:	443c      	add	r4, r7
 800b888:	443e      	add	r6, r7
 800b88a:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800b88e:	f8dc 700c 	ldr.w	r7, [ip, #12]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 800b892:	ea8e 0b0a 	eor.w	fp, lr, sl
 800b896:	443d      	add	r5, r7
 800b898:	ea06 0b0b 	and.w	fp, r6, fp
 800b89c:	ea4f 17b6 	mov.w	r7, r6, ror #6
 800b8a0:	ea8b 0b0a 	eor.w	fp, fp, sl
 800b8a4:	442b      	add	r3, r5
 800b8a6:	ea87 27f6 	eor.w	r7, r7, r6, ror #11
 800b8aa:	ea44 0900 	orr.w	r9, r4, r0
 800b8ae:	445b      	add	r3, fp
 800b8b0:	ea87 6776 	eor.w	r7, r7, r6, ror #25
 800b8b4:	ea4f 0bb4 	mov.w	fp, r4, ror #2
 800b8b8:	19dd      	adds	r5, r3, r7
 800b8ba:	ea09 0902 	and.w	r9, r9, r2
 800b8be:	ea04 0300 	and.w	r3, r4, r0
 800b8c2:	ea8b 3b74 	eor.w	fp, fp, r4, ror #13
 800b8c6:	ea8b 5bb4 	eor.w	fp, fp, r4, ror #22
 800b8ca:	ea49 0303 	orr.w	r3, r9, r3
 800b8ce:	445b      	add	r3, fp
 800b8d0:	442b      	add	r3, r5
 800b8d2:	4429      	add	r1, r5
 800b8d4:	f8dc 7010 	ldr.w	r7, [ip, #16]
 800b8d8:	f8d8 5010 	ldr.w	r5, [r8, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 800b8dc:	ea86 0b0e 	eor.w	fp, r6, lr
 800b8e0:	442f      	add	r7, r5
 800b8e2:	ea01 0b0b 	and.w	fp, r1, fp
 800b8e6:	ea4f 15b1 	mov.w	r5, r1, ror #6
 800b8ea:	ea8b 0b0e 	eor.w	fp, fp, lr
 800b8ee:	44ba      	add	sl, r7
 800b8f0:	ea85 25f1 	eor.w	r5, r5, r1, ror #11
 800b8f4:	ea43 0904 	orr.w	r9, r3, r4
 800b8f8:	44da      	add	sl, fp
 800b8fa:	ea85 6571 	eor.w	r5, r5, r1, ror #25
 800b8fe:	ea4f 0bb3 	mov.w	fp, r3, ror #2
 800b902:	eb0a 0705 	add.w	r7, sl, r5
 800b906:	ea09 0900 	and.w	r9, r9, r0
 800b90a:	ea03 0a04 	and.w	sl, r3, r4
 800b90e:	ea8b 3b73 	eor.w	fp, fp, r3, ror #13
 800b912:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 800b916:	ea49 0a0a 	orr.w	sl, r9, sl
 800b91a:	44da      	add	sl, fp
 800b91c:	44ba      	add	sl, r7
 800b91e:	eb07 0b02 	add.w	fp, r7, r2
 800b922:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800b926:	f8d8 7014 	ldr.w	r7, [r8, #20]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 800b92a:	ea81 0906 	eor.w	r9, r1, r6
 800b92e:	443d      	add	r5, r7
 800b930:	ea0b 0909 	and.w	r9, fp, r9
 800b934:	ea4f 12bb 	mov.w	r2, fp, ror #6
 800b938:	ea89 0906 	eor.w	r9, r9, r6
 800b93c:	44ae      	add	lr, r5
 800b93e:	ea82 22fb 	eor.w	r2, r2, fp, ror #11
 800b942:	44ce      	add	lr, r9
 800b944:	ea4a 0703 	orr.w	r7, sl, r3
 800b948:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 800b94c:	ea4f 09ba 	mov.w	r9, sl, ror #2
 800b950:	eb0e 0502 	add.w	r5, lr, r2
 800b954:	4027      	ands	r7, r4
 800b956:	ea0a 0e03 	and.w	lr, sl, r3
 800b95a:	ea89 397a 	eor.w	r9, r9, sl, ror #13
 800b95e:	ea89 59ba 	eor.w	r9, r9, sl, ror #22
 800b962:	ea47 0e0e 	orr.w	lr, r7, lr
 800b966:	44ce      	add	lr, r9
 800b968:	44ae      	add	lr, r5
 800b96a:	4428      	add	r0, r5
 800b96c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800b970:	f8d8 5018 	ldr.w	r5, [r8, #24]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800b974:	ea8b 0901 	eor.w	r9, fp, r1
 800b978:	442a      	add	r2, r5
 800b97a:	ea00 0909 	and.w	r9, r0, r9
 800b97e:	ea4f 15b0 	mov.w	r5, r0, ror #6
 800b982:	ea89 0901 	eor.w	r9, r9, r1
 800b986:	4416      	add	r6, r2
 800b988:	ea85 25f0 	eor.w	r5, r5, r0, ror #11
 800b98c:	444e      	add	r6, r9
 800b98e:	ea4e 070a 	orr.w	r7, lr, sl
 800b992:	ea4f 02be 	mov.w	r2, lr, ror #2
 800b996:	ea85 6570 	eor.w	r5, r5, r0, ror #25
 800b99a:	4435      	add	r5, r6
 800b99c:	401f      	ands	r7, r3
 800b99e:	ea82 327e 	eor.w	r2, r2, lr, ror #13
 800b9a2:	ea0e 060a 	and.w	r6, lr, sl
 800b9a6:	ea82 52be 	eor.w	r2, r2, lr, ror #22
 800b9aa:	433e      	orrs	r6, r7
 800b9ac:	4416      	add	r6, r2
 800b9ae:	442e      	add	r6, r5
 800b9b0:	442c      	add	r4, r5
 800b9b2:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800b9b6:	f8d8 501c 	ldr.w	r5, [r8, #28]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800b9ba:	ea80 090b 	eor.w	r9, r0, fp
 800b9be:	18af      	adds	r7, r5, r2
 800b9c0:	ea04 0909 	and.w	r9, r4, r9
 800b9c4:	4439      	add	r1, r7
 800b9c6:	ea89 090b 	eor.w	r9, r9, fp
 800b9ca:	ea46 020e 	orr.w	r2, r6, lr
 800b9ce:	ea02 020a 	and.w	r2, r2, sl
 800b9d2:	4449      	add	r1, r9
 800b9d4:	ea06 090e 	and.w	r9, r6, lr
 800b9d8:	ea42 0909 	orr.w	r9, r2, r9
 800b9dc:	ea4f 15b4 	mov.w	r5, r4, ror #6
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800b9e0:	9a01      	ldr	r2, [sp, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800b9e2:	ea4f 07b6 	mov.w	r7, r6, ror #2
 800b9e6:	ea85 25f4 	eor.w	r5, r5, r4, ror #11
 800b9ea:	ea87 3776 	eor.w	r7, r7, r6, ror #13
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800b9ee:	3208      	adds	r2, #8
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800b9f0:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 800b9f4:	ea87 57b6 	eor.w	r7, r7, r6, ror #22
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800b9f8:	9201      	str	r2, [sp, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800b9fa:	4429      	add	r1, r5
 800b9fc:	eb09 0207 	add.w	r2, r9, r7
 800ba00:	440b      	add	r3, r1
 800ba02:	4411      	add	r1, r2
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800ba04:	9a01      	ldr	r2, [sp, #4]
 800ba06:	2a10      	cmp	r2, #16
 800ba08:	f108 0820 	add.w	r8, r8, #32
 800ba0c:	f10c 0c20 	add.w	ip, ip, #32
 800ba10:	f47f aeca 	bne.w	800b7a8 <mbedtls_internal_sha256_process+0x80>
 800ba14:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ba16:	920e      	str	r2, [sp, #56]	; 0x38
 800ba18:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800ba1a:	9214      	str	r2, [sp, #80]	; 0x50
 800ba1c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ba1e:	920f      	str	r2, [sp, #60]	; 0x3c
 800ba20:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800ba22:	9215      	str	r2, [sp, #84]	; 0x54
 800ba24:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ba26:	9210      	str	r2, [sp, #64]	; 0x40
 800ba28:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800ba2a:	9216      	str	r2, [sp, #88]	; 0x58
 800ba2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ba2e:	9218      	str	r2, [sp, #96]	; 0x60
 800ba30:	4627      	mov	r7, r4
 800ba32:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800ba34:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800ba36:	f8cd e014 	str.w	lr, [sp, #20]
 800ba3a:	920d      	str	r2, [sp, #52]	; 0x34
 800ba3c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ba40:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800ba42:	9417      	str	r4, [sp, #92]	; 0x5c
 800ba44:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ba46:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba48:	460d      	mov	r5, r1
 800ba4a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ba4c:	9412      	str	r4, [sp, #72]	; 0x48
 800ba4e:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800ba50:	960a      	str	r6, [sp, #40]	; 0x28
 800ba52:	9211      	str	r2, [sp, #68]	; 0x44
 800ba54:	f8cd b018 	str.w	fp, [sp, #24]
 800ba58:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ba5a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ba5c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ba5e:	940c      	str	r4, [sp, #48]	; 0x30
 800ba60:	46f3      	mov	fp, lr
 800ba62:	9702      	str	r7, [sp, #8]
 800ba64:	9303      	str	r3, [sp, #12]
 800ba66:	9501      	str	r5, [sp, #4]
 800ba68:	e002      	b.n	800ba70 <mbedtls_internal_sha256_process+0x348>
 800ba6a:	bf00      	nop
 800ba6c:	0800dcb8 	.word	0x0800dcb8
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba74:	9f03      	ldr	r7, [sp, #12]
 800ba76:	f8db 4040 	ldr.w	r4, [fp, #64]	; 0x40
 800ba7a:	ea4f 18b3 	mov.w	r8, r3, ror #6
 800ba7e:	ea4f 4c75 	mov.w	ip, r5, ror #17
 800ba82:	ea88 28f3 	eor.w	r8, r8, r3, ror #11
 800ba86:	9b02      	ldr	r3, [sp, #8]
 800ba88:	ea8c 4cf5 	eor.w	ip, ip, r5, ror #19
 800ba8c:	ea80 0e03 	eor.w	lr, r0, r3
 800ba90:	ea8c 2c95 	eor.w	ip, ip, r5, lsr #10
 800ba94:	9d03      	ldr	r5, [sp, #12]
 800ba96:	ea0e 0e07 	and.w	lr, lr, r7
 800ba9a:	ea8e 0e00 	eor.w	lr, lr, r0
 800ba9e:	ea88 6875 	eor.w	r8, r8, r5, ror #25
 800baa2:	44f0      	add	r8, lr
 800baa4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800baa6:	44a0      	add	r8, r4
 800baa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800baaa:	ea4f 19f2 	mov.w	r9, r2, ror #7
 800baae:	46a6      	mov	lr, r4
 800bab0:	443e      	add	r6, r7
 800bab2:	9c01      	ldr	r4, [sp, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bab4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bab6:	ea89 49b2 	eor.w	r9, r9, r2, ror #18
 800baba:	ea89 09d2 	eor.w	r9, r9, r2, lsr #3
 800babe:	4466      	add	r6, ip
 800bac0:	444e      	add	r6, r9
 800bac2:	ea4e 0904 	orr.w	r9, lr, r4
 800bac6:	9c05      	ldr	r4, [sp, #20]
 800bac8:	ea09 0904 	and.w	r9, r9, r4
 800bacc:	9c01      	ldr	r4, [sp, #4]
 800bace:	ea4f 0cb4 	mov.w	ip, r4, ror #2
 800bad2:	ea8c 3c74 	eor.w	ip, ip, r4, ror #13
 800bad6:	9c01      	ldr	r4, [sp, #4]
 800bad8:	ea8c 5cb4 	eor.w	ip, ip, r4, ror #22
 800badc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800bade:	4635      	mov	r5, r6
 800bae0:	4422      	add	r2, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bae2:	ea4f 4677 	mov.w	r6, r7, ror #17
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bae6:	9c06      	ldr	r4, [sp, #24]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bae8:	9519      	str	r5, [sp, #100]	; 0x64
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800baea:	ea86 46f7 	eor.w	r6, r6, r7, ror #19
 800baee:	44a8      	add	r8, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800baf0:	44a0      	add	r8, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800baf2:	ea86 2697 	eor.w	r6, r6, r7, lsr #10
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800baf6:	9c01      	ldr	r4, [sp, #4]
 800baf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bafa:	ea4f 1ef1 	mov.w	lr, r1, ror #7
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bafe:	403c      	ands	r4, r7
 800bb00:	ea49 0404 	orr.w	r4, r9, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb04:	ea8e 4eb1 	eor.w	lr, lr, r1, ror #18
 800bb08:	4416      	add	r6, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bb0a:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb0c:	ea8e 0ed1 	eor.w	lr, lr, r1, lsr #3
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bb10:	44c4      	add	ip, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb12:	9a03      	ldr	r2, [sp, #12]
 800bb14:	44b6      	add	lr, r6
 800bb16:	f8db 6044 	ldr.w	r6, [fp, #68]	; 0x44
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bb1a:	4664      	mov	r4, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb1c:	9406      	str	r4, [sp, #24]
 800bb1e:	ea83 0c02 	eor.w	ip, r3, r2
 800bb22:	4672      	mov	r2, lr
 800bb24:	eb00 0e06 	add.w	lr, r0, r6
 800bb28:	4626      	mov	r6, r4
 800bb2a:	9c01      	ldr	r4, [sp, #4]
 800bb2c:	9213      	str	r2, [sp, #76]	; 0x4c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bb2e:	44c2      	add	sl, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb30:	ea46 0804 	orr.w	r8, r6, r4
 800bb34:	ea08 0807 	and.w	r8, r8, r7
 800bb38:	9f06      	ldr	r7, [sp, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bb3a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb3c:	ea0a 0c0c 	and.w	ip, sl, ip
 800bb40:	4496      	add	lr, r2
 800bb42:	ea4f 02b7 	mov.w	r2, r7, ror #2
 800bb46:	ea8c 0c03 	eor.w	ip, ip, r3
 800bb4a:	ea82 3277 	eor.w	r2, r2, r7, ror #13
 800bb4e:	44e6      	add	lr, ip
 800bb50:	ea82 5cb7 	eor.w	ip, r2, r7, ror #22
 800bb54:	9a16      	ldr	r2, [sp, #88]	; 0x58
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bb56:	9b04      	ldr	r3, [sp, #16]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bb58:	ea4f 16f4 	mov.w	r6, r4, ror #7
 800bb5c:	4411      	add	r1, r2
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb5e:	9a01      	ldr	r2, [sp, #4]
 800bb60:	ea4f 10ba 	mov.w	r0, sl, ror #6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bb64:	ea86 46b4 	eor.w	r6, r6, r4, ror #18
 800bb68:	ea86 06d4 	eor.w	r6, r6, r4, lsr #3
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb6c:	ea80 20fa 	eor.w	r0, r0, sl, ror #11
 800bb70:	403a      	ands	r2, r7
 800bb72:	4431      	add	r1, r6
 800bb74:	ea80 607a 	eor.w	r0, r0, sl, ror #25
 800bb78:	ea48 0202 	orr.w	r2, r8, r2
 800bb7c:	9e05      	ldr	r6, [sp, #20]
 800bb7e:	4470      	add	r0, lr
 800bb80:	4462      	add	r2, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bb82:	ea4f 4e75 	mov.w	lr, r5, ror #17
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bb86:	4402      	add	r2, r0
 800bb88:	1986      	adds	r6, r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bb8a:	ea8e 4ef5 	eor.w	lr, lr, r5, ror #19
 800bb8e:	9803      	ldr	r0, [sp, #12]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bb90:	469c      	mov	ip, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bb92:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
 800bb96:	ea8a 0900 	eor.w	r9, sl, r0
 800bb9a:	eb01 000e 	add.w	r0, r1, lr
 800bb9e:	4601      	mov	r1, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bba0:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
 800bba4:	f8db 0048 	ldr.w	r0, [fp, #72]	; 0x48
 800bba8:	9d02      	ldr	r5, [sp, #8]
 800bbaa:	4405      	add	r5, r0
 800bbac:	4628      	mov	r0, r5
 800bbae:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bbb0:	9d06      	ldr	r5, [sp, #24]
 800bbb2:	9c03      	ldr	r4, [sp, #12]
 800bbb4:	9107      	str	r1, [sp, #28]
 800bbb6:	ea4f 01b2 	mov.w	r1, r2, ror #2
 800bbba:	ea81 3172 	eor.w	r1, r1, r2, ror #13
 800bbbe:	ea06 0909 	and.w	r9, r6, r9
 800bbc2:	ea81 5eb2 	eor.w	lr, r1, r2, ror #22
 800bbc6:	ea42 0805 	orr.w	r8, r2, r5
 800bbca:	ea89 0904 	eor.w	r9, r9, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bbce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bbd0:	9c01      	ldr	r4, [sp, #4]
 800bbd2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bbd4:	ea4f 17b6 	mov.w	r7, r6, ror #6
 800bbd8:	ea87 27f6 	eor.w	r7, r7, r6, ror #11
 800bbdc:	ea08 0804 	and.w	r8, r8, r4
 800bbe0:	4448      	add	r0, r9
 800bbe2:	4674      	mov	r4, lr
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bbe4:	ea4f 1cf5 	mov.w	ip, r5, ror #7
 800bbe8:	468e      	mov	lr, r1

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bbea:	ea87 6776 	eor.w	r7, r7, r6, ror #25
 800bbee:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bbf0:	4407      	add	r7, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bbf2:	ea8c 4cb5 	eor.w	ip, ip, r5, ror #18

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bbf6:	9806      	ldr	r0, [sp, #24]
 800bbf8:	eb0e 0901 	add.w	r9, lr, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bbfc:	ea8c 0ed5 	eor.w	lr, ip, r5, lsr #3
 800bc00:	9d13      	ldr	r5, [sp, #76]	; 0x4c

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bc02:	ea02 0100 	and.w	r1, r2, r0
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bc06:	469c      	mov	ip, r3
 800bc08:	f8db 004c 	ldr.w	r0, [fp, #76]	; 0x4c
 800bc0c:	9b03      	ldr	r3, [sp, #12]
 800bc0e:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bc12:	ea48 0101 	orr.w	r1, r8, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc16:	ea4f 4875 	mov.w	r8, r5, ror #17
 800bc1a:	ea88 48f5 	eor.w	r8, r8, r5, ror #19

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bc1e:	4421      	add	r1, r4
 800bc20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc22:	4439      	add	r1, r7
 800bc24:	eb09 0c0e 	add.w	ip, r9, lr
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc28:	ea88 2895 	eor.w	r8, r8, r5, lsr #10
 800bc2c:	4418      	add	r0, r3
 800bc2e:	9b06      	ldr	r3, [sp, #24]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bc30:	9d0e      	ldr	r5, [sp, #56]	; 0x38

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bc32:	eb07 0e04 	add.w	lr, r7, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc36:	ea86 090a 	eor.w	r9, r6, sl
 800bc3a:	44c4      	add	ip, r8
 800bc3c:	ea41 0802 	orr.w	r8, r1, r2
 800bc40:	4664      	mov	r4, ip
 800bc42:	ea08 0803 	and.w	r8, r8, r3
 800bc46:	ea0e 0909 	and.w	r9, lr, r9
 800bc4a:	ea4f 03b1 	mov.w	r3, r1, ror #2
 800bc4e:	ea89 090a 	eor.w	r9, r9, sl
 800bc52:	ea83 3371 	eor.w	r3, r3, r1, ror #13
 800bc56:	4420      	add	r0, r4
 800bc58:	4448      	add	r0, r9
 800bc5a:	ea83 59b1 	eor.w	r9, r3, r1, ror #22
 800bc5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc60:	9403      	str	r4, [sp, #12]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bc62:	ea4f 1cf5 	mov.w	ip, r5, ror #7
 800bc66:	462c      	mov	r4, r5
 800bc68:	ea8c 4cb5 	eor.w	ip, ip, r5, ror #18
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc6c:	464d      	mov	r5, r9
 800bc6e:	4699      	mov	r9, r3
 800bc70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bc72:	ea8c 0cd4 	eor.w	ip, ip, r4, lsr #3
 800bc76:	9c07      	ldr	r4, [sp, #28]
 800bc78:	4499      	add	r9, r3
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc7a:	ea01 0302 	and.w	r3, r1, r2
 800bc7e:	ea48 0303 	orr.w	r3, r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bc82:	ea4f 4874 	mov.w	r8, r4, ror #17
 800bc86:	ea88 48f4 	eor.w	r8, r8, r4, ror #19

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bc8a:	9c04      	ldr	r4, [sp, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc8c:	442b      	add	r3, r5
 800bc8e:	ea4f 17be 	mov.w	r7, lr, ror #6

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bc92:	4625      	mov	r5, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc94:	ea87 27fe 	eor.w	r7, r7, lr, ror #11

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bc98:	9c07      	ldr	r4, [sp, #28]
 800bc9a:	64ac      	str	r4, [r5, #72]	; 0x48
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bc9c:	ea87 677e 	eor.w	r7, r7, lr, ror #25
 800bca0:	9d01      	ldr	r5, [sp, #4]
 800bca2:	4407      	add	r7, r0
 800bca4:	443d      	add	r5, r7
 800bca6:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
 800bcaa:	9501      	str	r5, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bcac:	ea88 2894 	eor.w	r8, r8, r4, lsr #10
 800bcb0:	44cc      	add	ip, r9
 800bcb2:	4482      	add	sl, r0
 800bcb4:	9801      	ldr	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bcb6:	19dc      	adds	r4, r3, r7
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bcb8:	44c4      	add	ip, r8
 800bcba:	ea8e 0706 	eor.w	r7, lr, r6
 800bcbe:	4665      	mov	r5, ip
 800bcc0:	4007      	ands	r7, r0
 800bcc2:	4623      	mov	r3, r4
 800bcc4:	44aa      	add	sl, r5
 800bcc6:	4077      	eors	r7, r6
 800bcc8:	4457      	add	r7, sl
 800bcca:	9509      	str	r5, [sp, #36]	; 0x24
 800bccc:	ea4f 0ab3 	mov.w	sl, r3, ror #2
 800bcd0:	9d01      	ldr	r5, [sp, #4]
 800bcd2:	9308      	str	r3, [sp, #32]
 800bcd4:	ea8a 3a73 	eor.w	sl, sl, r3, ror #13
 800bcd8:	ea4f 19b0 	mov.w	r9, r0, ror #6
 800bcdc:	ea89 29f5 	eor.w	r9, r9, r5, ror #11
 800bce0:	ea8a 55b3 	eor.w	r5, sl, r3, ror #22
 800bce4:	9801      	ldr	r0, [sp, #4]
 800bce6:	9502      	str	r5, [sp, #8]
 800bce8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bcea:	ea44 0c01 	orr.w	ip, r4, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bcee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800bcf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bcf2:	ea89 6070 	eor.w	r0, r9, r0, ror #25
 800bcf6:	46a9      	mov	r9, r5
 800bcf8:	4499      	add	r9, r3
 800bcfa:	9b08      	ldr	r3, [sp, #32]
 800bcfc:	9d02      	ldr	r5, [sp, #8]
 800bcfe:	ea03 0a01 	and.w	sl, r3, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd02:	9b03      	ldr	r3, [sp, #12]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bd04:	ea0c 0c02 	and.w	ip, ip, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd08:	ea4f 18f4 	mov.w	r8, r4, ror #7
 800bd0c:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bd10:	ea4c 0a0a 	orr.w	sl, ip, sl
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd14:	ea4f 4c73 	mov.w	ip, r3, ror #17
 800bd18:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
 800bd1c:	ea8c 4cf3 	eor.w	ip, ip, r3, ror #19
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bd20:	9c03      	ldr	r4, [sp, #12]
 800bd22:	9b04      	ldr	r3, [sp, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd24:	ea8c 2c94 	eor.w	ip, ip, r4, lsr #10
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bd28:	64dc      	str	r4, [r3, #76]	; 0x4c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bd2a:	9c06      	ldr	r4, [sp, #24]
 800bd2c:	4438      	add	r0, r7
 800bd2e:	4404      	add	r4, r0
 800bd30:	44aa      	add	sl, r5
 800bd32:	4625      	mov	r5, r4
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd34:	9c01      	ldr	r4, [sp, #4]
 800bd36:	f8db 7054 	ldr.w	r7, [fp, #84]	; 0x54
 800bd3a:	9506      	str	r5, [sp, #24]
 800bd3c:	44c8      	add	r8, r9
 800bd3e:	ea84 040e 	eor.w	r4, r4, lr
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bd42:	4482      	add	sl, r0
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd44:	44c4      	add	ip, r8
 800bd46:	9808      	ldr	r0, [sp, #32]
 800bd48:	443e      	add	r6, r7
 800bd4a:	402c      	ands	r4, r5
 800bd4c:	462f      	mov	r7, r5
 800bd4e:	ea4f 18b5 	mov.w	r8, r5, ror #6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bd52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd54:	ea4a 0900 	orr.w	r9, sl, r0
 800bd58:	4466      	add	r6, ip
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bd5a:	ea4f 10f5 	mov.w	r0, r5, ror #7
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd5e:	ea84 040e 	eor.w	r4, r4, lr
 800bd62:	ea88 28f7 	eor.w	r8, r8, r7, ror #11
 800bd66:	4434      	add	r4, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bd68:	ea80 40b5 	eor.w	r0, r0, r5, ror #18
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd6c:	ea88 6777 	eor.w	r7, r8, r7, ror #25
 800bd70:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bd72:	4427      	add	r7, r4
 800bd74:	9c08      	ldr	r4, [sp, #32]
 800bd76:	46a8      	mov	r8, r5
 800bd78:	ea4f 06ba 	mov.w	r6, sl, ror #2
 800bd7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bd7e:	ea09 0901 	and.w	r9, r9, r1
 800bd82:	ea86 367a 	eor.w	r6, r6, sl, ror #13
 800bd86:	ea0a 0404 	and.w	r4, sl, r4
 800bd8a:	ea49 0404 	orr.w	r4, r9, r4
 800bd8e:	44a8      	add	r8, r5
 800bd90:	ea86 56ba 	eor.w	r6, r6, sl, ror #22
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bd94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd96:	4426      	add	r6, r4
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bd98:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bd9c:	443e      	add	r6, r7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bd9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bda0:	651d      	str	r5, [r3, #80]	; 0x50
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bda2:	4633      	mov	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bda4:	9e06      	ldr	r6, [sp, #24]
 800bda6:	9305      	str	r3, [sp, #20]
 800bda8:	ea4f 4975 	mov.w	r9, r5, ror #17
 800bdac:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
 800bdb0:	4480      	add	r8, r0
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bdb2:	18b8      	adds	r0, r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	9e01      	ldr	r6, [sp, #4]
 800bdb8:	f8db 4058 	ldr.w	r4, [fp, #88]	; 0x58
 800bdbc:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 800bdc0:	44c8      	add	r8, r9
 800bdc2:	9d01      	ldr	r5, [sp, #4]
 800bdc4:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bdc8:	4056      	eors	r6, r2
 800bdca:	ea43 070a 	orr.w	r7, r3, sl
 800bdce:	ea4f 09b3 	mov.w	r9, r3, ror #2
 800bdd2:	9b08      	ldr	r3, [sp, #32]
 800bdd4:	4006      	ands	r6, r0
 800bdd6:	406e      	eors	r6, r5
 800bdd8:	401f      	ands	r7, r3
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800bdda:	9d11      	ldr	r5, [sp, #68]	; 0x44
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bddc:	9b05      	ldr	r3, [sp, #20]
 800bdde:	4474      	add	r4, lr
 800bde0:	ea4f 12b0 	mov.w	r2, r0, ror #6
 800bde4:	4444      	add	r4, r8
 800bde6:	ea89 3973 	eor.w	r9, r9, r3, ror #13
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800bdea:	ea4f 18f5 	mov.w	r8, r5, ror #7
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bdee:	ea03 0e0a 	and.w	lr, r3, sl
 800bdf2:	ea82 22f0 	eor.w	r2, r2, r0, ror #11
 800bdf6:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 800bdfa:	4434      	add	r4, r6
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800bdfc:	ea88 48b5 	eor.w	r8, r8, r5, ror #18
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800be00:	ea82 6270 	eor.w	r2, r2, r0, ror #25
 800be04:	ea47 0e0e 	orr.w	lr, r7, lr
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800be08:	9b04      	ldr	r3, [sp, #16]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800be0a:	4414      	add	r4, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800be0c:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800be10:	44ce      	add	lr, r9
 800be12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800be14:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800be18:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800be1c:	1867      	adds	r7, r4, r1
 800be1e:	44a6      	add	lr, r4
 800be20:	44a8      	add	r8, r5
 800be22:	9702      	str	r7, [sp, #8]
 800be24:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800be28:	9d01      	ldr	r5, [sp, #4]
 800be2a:	9919      	ldr	r1, [sp, #100]	; 0x64
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800be2c:	9c06      	ldr	r4, [sp, #24]
 800be2e:	ea4f 467c 	mov.w	r6, ip, ror #17
 800be32:	4415      	add	r5, r2
 800be34:	ea86 46fc 	eor.w	r6, r6, ip, ror #19
 800be38:	9a02      	ldr	r2, [sp, #8]
 800be3a:	ea86 269c 	eor.w	r6, r6, ip, lsr #10
 800be3e:	4488      	add	r8, r1
 800be40:	4044      	eors	r4, r0
 800be42:	44b0      	add	r8, r6
 800be44:	4014      	ands	r4, r2
 800be46:	ea4f 16b2 	mov.w	r6, r2, ror #6
 800be4a:	9a06      	ldr	r2, [sp, #24]
 800be4c:	9905      	ldr	r1, [sp, #20]
 800be4e:	4054      	eors	r4, r2
 800be50:	4445      	add	r5, r8
 800be52:	442c      	add	r4, r5
 800be54:	9d05      	ldr	r5, [sp, #20]
 800be56:	9a02      	ldr	r2, [sp, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800be58:	4677      	mov	r7, lr
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800be5a:	ea07 0905 	and.w	r9, r7, r5
 800be5e:	9d02      	ldr	r5, [sp, #8]
 800be60:	ea86 26f2 	eor.w	r6, r6, r2, ror #11
 800be64:	ea47 0e01 	orr.w	lr, r7, r1
 800be68:	ea86 6675 	eor.w	r6, r6, r5, ror #25
 800be6c:	ea4f 01b7 	mov.w	r1, r7, ror #2
 800be70:	4434      	add	r4, r6
 800be72:	ea81 3177 	eor.w	r1, r1, r7, ror #13
 800be76:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800be78:	9610      	str	r6, [sp, #64]	; 0x40
 800be7a:	ea0e 0e0a 	and.w	lr, lr, sl
 800be7e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800be80:	960f      	str	r6, [sp, #60]	; 0x3c
 800be82:	ea4e 0e09 	orr.w	lr, lr, r9
 800be86:	ea81 55b7 	eor.w	r5, r1, r7, ror #22
 800be8a:	46b9      	mov	r9, r7
 800be8c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800be8e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800be90:	9712      	str	r7, [sp, #72]	; 0x48
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800be92:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800be94:	659f      	str	r7, [r3, #88]	; 0x58
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800be96:	4475      	add	r5, lr
 800be98:	960e      	str	r6, [sp, #56]	; 0x38
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800be9a:	469e      	mov	lr, r3
 800be9c:	461e      	mov	r6, r3
 800be9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bea0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bea2:	9317      	str	r3, [sp, #92]	; 0x5c
 800bea4:	9b07      	ldr	r3, [sp, #28]
 800bea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bea8:	9318      	str	r3, [sp, #96]	; 0x60
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	9316      	str	r3, [sp, #88]	; 0x58
 800beae:	970c      	str	r7, [sp, #48]	; 0x30
 800beb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800beb4:	9315      	str	r3, [sp, #84]	; 0x54
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800beb6:	f8c6 805c 	str.w	r8, [r6, #92]	; 0x5c
 800beba:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800bebe:	970d      	str	r7, [sp, #52]	; 0x34
 800bec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bec2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bec4:	9311      	str	r3, [sp, #68]	; 0x44
 800bec6:	4673      	mov	r3, lr
 800bec8:	3320      	adds	r3, #32
 800beca:	9304      	str	r3, [sp, #16]
 800becc:	9b08      	ldr	r3, [sp, #32]
 800bece:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800bed2:	4423      	add	r3, r4
 800bed4:	9303      	str	r3, [sp, #12]
 800bed6:	192b      	adds	r3, r5, r4
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 800bed8:	4c1a      	ldr	r4, [pc, #104]	; (800bf44 <mbedtls_internal_sha256_process+0x81c>)
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	f10b 0b20 	add.w	fp, fp, #32
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 800bee0:	45a3      	cmp	fp, r4
 800bee2:	f47f adc5 	bne.w	800ba70 <mbedtls_internal_sha256_process+0x348>
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 800bee6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bee8:	f8dd c008 	ldr.w	ip, [sp, #8]
 800beec:	68b5      	ldr	r5, [r6, #8]
 800beee:	68f1      	ldr	r1, [r6, #12]
 800bef0:	6932      	ldr	r2, [r6, #16]
 800bef2:	f8dd b018 	ldr.w	fp, [sp, #24]
 800bef6:	4634      	mov	r4, r6
 800bef8:	6976      	ldr	r6, [r6, #20]
 800befa:	9601      	str	r6, [sp, #4]
 800befc:	4626      	mov	r6, r4
 800befe:	69a4      	ldr	r4, [r4, #24]
 800bf00:	9402      	str	r4, [sp, #8]
 800bf02:	6a34      	ldr	r4, [r6, #32]
 800bf04:	69f7      	ldr	r7, [r6, #28]
 800bf06:	469e      	mov	lr, r3
 800bf08:	9b03      	ldr	r3, [sp, #12]
 800bf0a:	9403      	str	r4, [sp, #12]
 800bf0c:	9c05      	ldr	r4, [sp, #20]
 800bf0e:	4475      	add	r5, lr
 800bf10:	4422      	add	r2, r4
 800bf12:	60b5      	str	r5, [r6, #8]
 800bf14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf16:	9e02      	ldr	r6, [sp, #8]
 800bf18:	9d01      	ldr	r5, [sp, #4]
 800bf1a:	4433      	add	r3, r6
 800bf1c:	9e03      	ldr	r6, [sp, #12]
 800bf1e:	4430      	add	r0, r6
 800bf20:	46b6      	mov	lr, r6
 800bf22:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bf24:	4449      	add	r1, r9
 800bf26:	4455      	add	r5, sl
 800bf28:	4467      	add	r7, ip
 800bf2a:	445c      	add	r4, fp
 800bf2c:	6230      	str	r0, [r6, #32]

    return( 0 );
}
 800bf2e:	2000      	movs	r0, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 800bf30:	60f1      	str	r1, [r6, #12]
 800bf32:	6132      	str	r2, [r6, #16]
 800bf34:	6175      	str	r5, [r6, #20]
 800bf36:	61b3      	str	r3, [r6, #24]
 800bf38:	61f7      	str	r7, [r6, #28]
 800bf3a:	6274      	str	r4, [r6, #36]	; 0x24

    return( 0 );
}
 800bf3c:	b065      	add	sp, #404	; 0x194
 800bf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf42:	bf00      	nop
 800bf44:	0800dd78 	.word	0x0800dd78

0800bf48 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 800bf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800bf4c:	4614      	mov	r4, r2
 800bf4e:	b332      	cbz	r2, 800bf9e <mbedtls_sha256_update_ret+0x56>
 800bf50:	4606      	mov	r6, r0
        return( 0 );

    left = ctx->total[0] & 0x3F;
 800bf52:	6800      	ldr	r0, [r0, #0]
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 800bf54:	1813      	adds	r3, r2, r0
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 800bf56:	429a      	cmp	r2, r3
 800bf58:	460d      	mov	r5, r1
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 800bf5a:	6033      	str	r3, [r6, #0]
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
 800bf5c:	f000 073f 	and.w	r7, r0, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 800bf60:	d902      	bls.n	800bf68 <mbedtls_sha256_update_ret+0x20>
        ctx->total[1]++;
 800bf62:	6873      	ldr	r3, [r6, #4]
 800bf64:	3301      	adds	r3, #1
 800bf66:	6073      	str	r3, [r6, #4]

    if( left && ilen >= fill )
 800bf68:	b977      	cbnz	r7, 800bf88 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800bf6a:	2c3f      	cmp	r4, #63	; 0x3f
 800bf6c:	d802      	bhi.n	800bf74 <mbedtls_sha256_update_ret+0x2c>
 800bf6e:	e00f      	b.n	800bf90 <mbedtls_sha256_update_ret+0x48>
 800bf70:	2c3f      	cmp	r4, #63	; 0x3f
 800bf72:	d917      	bls.n	800bfa4 <mbedtls_sha256_update_ret+0x5c>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800bf74:	4629      	mov	r1, r5
 800bf76:	4630      	mov	r0, r6
 800bf78:	f7ff fbd6 	bl	800b728 <mbedtls_internal_sha256_process>
            return( ret );

        input += 64;
        ilen  -= 64;
 800bf7c:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
            return( ret );

        input += 64;
 800bf7e:	3540      	adds	r5, #64	; 0x40
        left = 0;
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d0f5      	beq.n	800bf70 <mbedtls_sha256_update_ret+0x28>

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
}
 800bf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 800bf88:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 800bf8c:	4544      	cmp	r4, r8
 800bf8e:	d20e      	bcs.n	800bfae <mbedtls_sha256_update_ret+0x66>
        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800bf90:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800bf94:	4430      	add	r0, r6
 800bf96:	4629      	mov	r1, r5
 800bf98:	4622      	mov	r2, r4
 800bf9a:	f001 faff 	bl	800d59c <memcpy>

    return( 0 );
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 800bfa4:	2c00      	cmp	r4, #0
 800bfa6:	d1f3      	bne.n	800bf90 <mbedtls_sha256_update_ret+0x48>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800bfae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	4430      	add	r0, r6
 800bfb6:	4642      	mov	r2, r8
 800bfb8:	f001 faf0 	bl	800d59c <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800bfc2:	f7ff fbb1 	bl	800b728 <mbedtls_internal_sha256_process>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d1dc      	bne.n	800bf84 <mbedtls_sha256_update_ret+0x3c>
            return( ret );

        input += fill;
        ilen  -= fill;
 800bfca:	ebc8 0404 	rsb	r4, r8, r4
        memcpy( (void *) (ctx->buffer + left), input, fill );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        input += fill;
 800bfce:	4445      	add	r5, r8
        ilen  -= fill;
        left = 0;
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	e7cd      	b.n	800bf70 <mbedtls_sha256_update_ret+0x28>

0800bfd4 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 800bfd4:	6802      	ldr	r2, [r0, #0]
 800bfd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 800bfda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfde:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 800bfe0:	4410      	add	r0, r2
 800bfe2:	2680      	movs	r6, #128	; 0x80
 800bfe4:	1c53      	adds	r3, r2, #1
 800bfe6:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28

    if( used <= 56 )
 800bfea:	2b38      	cmp	r3, #56	; 0x38
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800bfec:	f102 0029 	add.w	r0, r2, #41	; 0x29
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 800bff0:	460d      	mov	r5, r1
    ctx->buffer[used++] = 0x80;

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800bff2:	4420      	add	r0, r4
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;

    if( used <= 56 )
 800bff4:	d87b      	bhi.n	800c0ee <mbedtls_sha256_finish_ret+0x11a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800bff6:	f1c2 0237 	rsb	r2, r2, #55	; 0x37
 800bffa:	2100      	movs	r1, #0
 800bffc:	f001 fad9 	bl	800d5b2 <memset>
 800c000:	f104 0628 	add.w	r6, r4, #40	; 0x28
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800c004:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 800c006:	6861      	ldr	r1, [r4, #4]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800c008:	0f5a      	lsrs	r2, r3, #29
 800c00a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 800c00e:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800c010:	0a18      	lsrs	r0, r3, #8
 800c012:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800c016:	0c1f      	lsrs	r7, r3, #16
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800c018:	ea4f 6912 	mov.w	r9, r2, lsr #24
 800c01c:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800c020:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800c024:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c028:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c02c:	4631      	mov	r1, r6
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800c02e:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 800c032:	f884 9060 	strb.w	r9, [r4, #96]	; 0x60
 800c036:	f884 8061 	strb.w	r8, [r4, #97]	; 0x61
 800c03a:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800c03e:	f884 e064 	strb.w	lr, [r4, #100]	; 0x64
 800c042:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c046:	4620      	mov	r0, r4
 800c048:	f7ff fb6e 	bl	800b728 <mbedtls_internal_sha256_process>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2800      	cmp	r0, #0
 800c050:	d15b      	bne.n	800c10a <mbedtls_sha256_finish_ret+0x136>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 800c052:	7ae2      	ldrb	r2, [r4, #11]
 800c054:	702a      	strb	r2, [r5, #0]
 800c056:	8962      	ldrh	r2, [r4, #10]
 800c058:	706a      	strb	r2, [r5, #1]
 800c05a:	68a2      	ldr	r2, [r4, #8]
 800c05c:	0a12      	lsrs	r2, r2, #8
 800c05e:	70aa      	strb	r2, [r5, #2]
 800c060:	68a2      	ldr	r2, [r4, #8]
 800c062:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 800c064:	7be2      	ldrb	r2, [r4, #15]
 800c066:	712a      	strb	r2, [r5, #4]
 800c068:	89e2      	ldrh	r2, [r4, #14]
 800c06a:	716a      	strb	r2, [r5, #5]
 800c06c:	68e2      	ldr	r2, [r4, #12]
 800c06e:	0a12      	lsrs	r2, r2, #8
 800c070:	71aa      	strb	r2, [r5, #6]
 800c072:	68e2      	ldr	r2, [r4, #12]
 800c074:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 800c076:	7ce2      	ldrb	r2, [r4, #19]
 800c078:	722a      	strb	r2, [r5, #8]
 800c07a:	8a62      	ldrh	r2, [r4, #18]
 800c07c:	726a      	strb	r2, [r5, #9]
 800c07e:	6922      	ldr	r2, [r4, #16]
 800c080:	0a12      	lsrs	r2, r2, #8
 800c082:	72aa      	strb	r2, [r5, #10]
 800c084:	6922      	ldr	r2, [r4, #16]
 800c086:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 800c088:	7de2      	ldrb	r2, [r4, #23]
 800c08a:	732a      	strb	r2, [r5, #12]
 800c08c:	8ae2      	ldrh	r2, [r4, #22]
 800c08e:	736a      	strb	r2, [r5, #13]
 800c090:	6962      	ldr	r2, [r4, #20]
 800c092:	0a12      	lsrs	r2, r2, #8
 800c094:	73aa      	strb	r2, [r5, #14]
 800c096:	6962      	ldr	r2, [r4, #20]
 800c098:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 800c09a:	7ee2      	ldrb	r2, [r4, #27]
 800c09c:	742a      	strb	r2, [r5, #16]
 800c09e:	8b62      	ldrh	r2, [r4, #26]
 800c0a0:	746a      	strb	r2, [r5, #17]
 800c0a2:	69a2      	ldr	r2, [r4, #24]
 800c0a4:	0a12      	lsrs	r2, r2, #8
 800c0a6:	74aa      	strb	r2, [r5, #18]
 800c0a8:	69a2      	ldr	r2, [r4, #24]
 800c0aa:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 800c0ac:	7fe2      	ldrb	r2, [r4, #31]
 800c0ae:	752a      	strb	r2, [r5, #20]
 800c0b0:	8be2      	ldrh	r2, [r4, #30]
 800c0b2:	756a      	strb	r2, [r5, #21]
 800c0b4:	69e2      	ldr	r2, [r4, #28]
 800c0b6:	0a12      	lsrs	r2, r2, #8
 800c0b8:	75aa      	strb	r2, [r5, #22]
 800c0ba:	69e2      	ldr	r2, [r4, #28]
 800c0bc:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 800c0be:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800c0c2:	762a      	strb	r2, [r5, #24]
 800c0c4:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800c0c6:	766a      	strb	r2, [r5, #25]
 800c0c8:	6a22      	ldr	r2, [r4, #32]
 800c0ca:	0a12      	lsrs	r2, r2, #8
 800c0cc:	76aa      	strb	r2, [r5, #26]
 800c0ce:	6a22      	ldr	r2, [r4, #32]
 800c0d0:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 800c0d2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c0d4:	b9c8      	cbnz	r0, 800c10a <mbedtls_sha256_finish_ret+0x136>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 800c0d6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800c0da:	772b      	strb	r3, [r5, #28]
 800c0dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c0de:	776b      	strb	r3, [r5, #29]
 800c0e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0e2:	0a1b      	lsrs	r3, r3, #8
 800c0e4:	77ab      	strb	r3, [r5, #30]
 800c0e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0e8:	77eb      	strb	r3, [r5, #31]
 800c0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memset( ctx->buffer + used, 0, 56 - used );
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	f1c2 023f 	rsb	r2, r2, #63	; 0x3f

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c0f4:	f104 0628 	add.w	r6, r4, #40	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 800c0f8:	f001 fa5b 	bl	800d5b2 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4620      	mov	r0, r4
 800c100:	f7ff fb12 	bl	800b728 <mbedtls_internal_sha256_process>
 800c104:	b120      	cbz	r0, 800c110 <mbedtls_sha256_finish_ret+0x13c>

    if( ctx->is224 == 0 )
        PUT_UINT32_BE( ctx->state[7], output, 28 );

    return( 0 );
}
 800c106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    PUT_UINT32_BE( ctx->state[6], output, 24 );

    if( ctx->is224 == 0 )
        PUT_UINT32_BE( ctx->state[7], output, 28 );

    return( 0 );
 800c10a:	4618      	mov	r0, r3
}
 800c10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 800c110:	4601      	mov	r1, r0
 800c112:	2238      	movs	r2, #56	; 0x38
 800c114:	4630      	mov	r0, r6
 800c116:	f001 fa4c 	bl	800d5b2 <memset>
 800c11a:	e773      	b.n	800c004 <mbedtls_sha256_finish_ret+0x30>

0800c11c <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 800c11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c120:	b09d      	sub	sp, #116	; 0x74
 800c122:	4605      	mov	r5, r0
 800c124:	460c      	mov	r4, r1
 800c126:	4617      	mov	r7, r2
 800c128:	461e      	mov	r6, r3

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 800c12a:	a801      	add	r0, sp, #4
 800c12c:	2100      	movs	r1, #0
 800c12e:	226c      	movs	r2, #108	; 0x6c
 800c130:	f001 fa3f 	bl	800d5b2 <memset>
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
 800c134:	bb36      	cbnz	r6, 800c184 <mbedtls_sha256_ret+0x68>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 800c136:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800c1ec <mbedtls_sha256_ret+0xd0>
        ctx->state[1] = 0xBB67AE85;
 800c13a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800c1f0 <mbedtls_sha256_ret+0xd4>
        ctx->state[2] = 0x3C6EF372;
 800c13e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c1f4 <mbedtls_sha256_ret+0xd8>
        ctx->state[3] = 0xA54FF53A;
 800c142:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800c1f8 <mbedtls_sha256_ret+0xdc>
        ctx->state[4] = 0x510E527F;
 800c146:	4821      	ldr	r0, [pc, #132]	; (800c1cc <mbedtls_sha256_ret+0xb0>)
        ctx->state[5] = 0x9B05688C;
 800c148:	4921      	ldr	r1, [pc, #132]	; (800c1d0 <mbedtls_sha256_ret+0xb4>)
        ctx->state[6] = 0x1F83D9AB;
 800c14a:	4a22      	ldr	r2, [pc, #136]	; (800c1d4 <mbedtls_sha256_ret+0xb8>)
        ctx->state[7] = 0x5BE0CD19;
 800c14c:	4b22      	ldr	r3, [pc, #136]	; (800c1d8 <mbedtls_sha256_ret+0xbc>)
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800c14e:	f8cd 900c 	str.w	r9, [sp, #12]
        ctx->state[1] = 0x367CD507;
 800c152:	f8cd 8010 	str.w	r8, [sp, #16]
        ctx->state[2] = 0x3070DD17;
 800c156:	f8cd c014 	str.w	ip, [sp, #20]
        ctx->state[3] = 0xF70E5939;
 800c15a:	f8cd e018 	str.w	lr, [sp, #24]
        ctx->state[4] = 0xFFC00B31;
 800c15e:	9007      	str	r0, [sp, #28]
        ctx->state[5] = 0x68581511;
 800c160:	9108      	str	r1, [sp, #32]
        ctx->state[6] = 0x64F98FA7;
 800c162:	9209      	str	r2, [sp, #36]	; 0x24
        ctx->state[7] = 0xBEFA4FA4;
 800c164:	930a      	str	r3, [sp, #40]	; 0x28
    }

    ctx->is224 = is224;
 800c166:	961b      	str	r6, [sp, #108]	; 0x6c
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800c168:	b9cc      	cbnz	r4, 800c19e <mbedtls_sha256_ret+0x82>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 800c16a:	4639      	mov	r1, r7
 800c16c:	a801      	add	r0, sp, #4
 800c16e:	f7ff ff31 	bl	800bfd4 <mbedtls_sha256_finish_ret>
 800c172:	4606      	mov	r6, r0
void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 800c174:	a801      	add	r0, sp, #4
 800c176:	216c      	movs	r1, #108	; 0x6c
 800c178:	f7ff fa76 	bl	800b668 <mbedtls_platform_zeroize>

exit:
    mbedtls_sha256_free( &ctx );

    return( ret );
}
 800c17c:	4630      	mov	r0, r6
 800c17e:	b01d      	add	sp, #116	; 0x74
 800c180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800c184:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800c1fc <mbedtls_sha256_ret+0xe0>
        ctx->state[1] = 0x367CD507;
 800c188:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800c200 <mbedtls_sha256_ret+0xe4>
        ctx->state[2] = 0x3070DD17;
 800c18c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c204 <mbedtls_sha256_ret+0xe8>
        ctx->state[3] = 0xF70E5939;
 800c190:	f8df e074 	ldr.w	lr, [pc, #116]	; 800c208 <mbedtls_sha256_ret+0xec>
        ctx->state[4] = 0xFFC00B31;
 800c194:	4811      	ldr	r0, [pc, #68]	; (800c1dc <mbedtls_sha256_ret+0xc0>)
        ctx->state[5] = 0x68581511;
 800c196:	4912      	ldr	r1, [pc, #72]	; (800c1e0 <mbedtls_sha256_ret+0xc4>)
        ctx->state[6] = 0x64F98FA7;
 800c198:	4a12      	ldr	r2, [pc, #72]	; (800c1e4 <mbedtls_sha256_ret+0xc8>)
        ctx->state[7] = 0xBEFA4FA4;
 800c19a:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <mbedtls_sha256_ret+0xcc>)
 800c19c:	e7d7      	b.n	800c14e <mbedtls_sha256_ret+0x32>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800c19e:	2c3f      	cmp	r4, #63	; 0x3f
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 800c1a0:	9401      	str	r4, [sp, #4]
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800c1a2:	d90c      	bls.n	800c1be <mbedtls_sha256_ret+0xa2>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	a801      	add	r0, sp, #4
 800c1a8:	f7ff fabe 	bl	800b728 <mbedtls_internal_sha256_process>
            return( ret );

        input += 64;
        ilen  -= 64;
 800c1ac:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c1ae:	4606      	mov	r6, r0
            return( ret );

        input += 64;
 800c1b0:	3540      	adds	r5, #64	; 0x40
        left = 0;
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d1de      	bne.n	800c174 <mbedtls_sha256_ret+0x58>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800c1b6:	2c3f      	cmp	r4, #63	; 0x3f
 800c1b8:	d8f4      	bhi.n	800c1a4 <mbedtls_sha256_ret+0x88>

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 800c1ba:	2c00      	cmp	r4, #0
 800c1bc:	d0d5      	beq.n	800c16a <mbedtls_sha256_ret+0x4e>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800c1be:	4629      	mov	r1, r5
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	a80b      	add	r0, sp, #44	; 0x2c
 800c1c4:	f001 f9ea 	bl	800d59c <memcpy>
 800c1c8:	e7cf      	b.n	800c16a <mbedtls_sha256_ret+0x4e>
 800c1ca:	bf00      	nop
 800c1cc:	510e527f 	.word	0x510e527f
 800c1d0:	9b05688c 	.word	0x9b05688c
 800c1d4:	1f83d9ab 	.word	0x1f83d9ab
 800c1d8:	5be0cd19 	.word	0x5be0cd19
 800c1dc:	ffc00b31 	.word	0xffc00b31
 800c1e0:	68581511 	.word	0x68581511
 800c1e4:	64f98fa7 	.word	0x64f98fa7
 800c1e8:	befa4fa4 	.word	0xbefa4fa4
 800c1ec:	6a09e667 	.word	0x6a09e667
 800c1f0:	bb67ae85 	.word	0xbb67ae85
 800c1f4:	3c6ef372 	.word	0x3c6ef372
 800c1f8:	a54ff53a 	.word	0xa54ff53a
 800c1fc:	c1059ed8 	.word	0xc1059ed8
 800c200:	367cd507 	.word	0x367cd507
 800c204:	3070dd17 	.word	0x3070dd17
 800c208:	f70e5939 	.word	0xf70e5939

0800c20c <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c20c:	4b01      	ldr	r3, [pc, #4]	; (800c214 <optiga_lib_callback+0x8>)
 800c20e:	8019      	strh	r1, [r3, #0]
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	1fff00c2 	.word	0x1fff00c2

0800c218 <example_optiga_init>:
}

optiga_util_t * me_util_instance = NULL;

void example_optiga_init(void)
{
 800c218:	b510      	push	{r4, lr}
#endif
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);

    do
    {
        if (NULL == me_util_instance)
 800c21a:	4c13      	ldr	r4, [pc, #76]	; (800c268 <example_optiga_init+0x50>)
 800c21c:	6820      	ldr	r0, [r4, #0]
 800c21e:	b1d8      	cbz	r0, 800c258 <example_optiga_init+0x40>
        
        /**
         * Open the application on OPTIGA which is a precondition to perform any other operations
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c220:	4c12      	ldr	r4, [pc, #72]	; (800c26c <example_optiga_init+0x54>)
 800c222:	2301      	movs	r3, #1
        return_status = optiga_util_open_application(me_util_instance, 0);
 800c224:	2100      	movs	r1, #0
        
        /**
         * Open the application on OPTIGA which is a precondition to perform any other operations
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c226:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_open_application(me_util_instance, 0);
 800c228:	f7f8 ffe0 	bl	80051ec <optiga_util_open_application>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);         
 800c22c:	b950      	cbnz	r0, 800c244 <example_optiga_init+0x2c>
 800c22e:	8823      	ldrh	r3, [r4, #0]
 800c230:	4a0e      	ldr	r2, [pc, #56]	; (800c26c <example_optiga_init+0x54>)
 800c232:	b29b      	uxth	r3, r3
 800c234:	2b01      	cmp	r3, #1
 800c236:	d0fa      	beq.n	800c22e <example_optiga_init+0x16>
 800c238:	8813      	ldrh	r3, [r2, #0]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	b91b      	cbnz	r3, 800c246 <example_optiga_init+0x2e>
        
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if(FALSE == host_optiga_pairing_completed)
 800c23e:	4c0c      	ldr	r4, [pc, #48]	; (800c270 <example_optiga_init+0x58>)
 800c240:	7823      	ldrb	r3, [r4, #0]
 800c242:	b113      	cbz	r3, 800c24a <example_optiga_init+0x32>
 800c244:	bd10      	pop	{r4, pc}
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_open_application(me_util_instance, 0);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);         
 800c246:	8813      	ldrh	r3, [r2, #0]
 800c248:	bd10      	pop	{r4, pc}
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if(FALSE == host_optiga_pairing_completed)
        {
            OPTIGA_EXAMPLE_LOG_MESSAGE("pair_host_and_optiga_using_pre_shared_secret");
            // Generate the pre-shared secret on host and write it to OPTIGA
            return_status = pair_host_and_optiga_using_pre_shared_secret();              
 800c24a:	f000 f839 	bl	800c2c0 <pair_host_and_optiga_using_pre_shared_secret>
            if (OPTIGA_LIB_SUCCESS != return_status)
 800c24e:	2800      	cmp	r0, #0
 800c250:	d1f8      	bne.n	800c244 <example_optiga_init+0x2c>
            {
                //pairing of host and optiga failed
                break;
            }
            host_optiga_pairing_completed = TRUE;
 800c252:	2301      	movs	r3, #1
 800c254:	7023      	strb	r3, [r4, #0]
 800c256:	e7f5      	b.n	800c244 <example_optiga_init+0x2c>
    do
    {
        if (NULL == me_util_instance)
        {
            //Create an instance of optiga_util to open the application on OPTIGA.
            me_util_instance = optiga_util_create(0, optiga_lib_callback, NULL);
 800c258:	4602      	mov	r2, r0
 800c25a:	4906      	ldr	r1, [pc, #24]	; (800c274 <example_optiga_init+0x5c>)
 800c25c:	f7f8 ff86 	bl	800516c <optiga_util_create>
 800c260:	6020      	str	r0, [r4, #0]
            if (NULL == me_util_instance)
 800c262:	2800      	cmp	r0, #0
 800c264:	d1dc      	bne.n	800c220 <example_optiga_init+0x8>
 800c266:	e7ed      	b.n	800c244 <example_optiga_init+0x2c>
 800c268:	1fff00bc 	.word	0x1fff00bc
 800c26c:	1fff00c2 	.word	0x1fff00c2
 800c270:	1fff00c0 	.word	0x1fff00c0
 800c274:	0800c20d 	.word	0x0800c20d

0800c278 <example_optiga_deinit>:
    }while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
}

void example_optiga_deinit(void)
{
 800c278:	b538      	push	{r3, r4, r5, lr}
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_close_application(me_util_instance, 0);
 800c27a:	4d0c      	ldr	r5, [pc, #48]	; (800c2ac <example_optiga_deinit+0x34>)
    {
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c27c:	4c0c      	ldr	r4, [pc, #48]	; (800c2b0 <example_optiga_deinit+0x38>)
        return_status = optiga_util_close_application(me_util_instance, 0);
 800c27e:	6828      	ldr	r0, [r5, #0]
    {
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c280:	2301      	movs	r3, #1
        return_status = optiga_util_close_application(me_util_instance, 0);
 800c282:	2100      	movs	r1, #0
    {
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c284:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_close_application(me_util_instance, 0);
 800c286:	f7f8 ffeb 	bl	8005260 <optiga_util_close_application>
            
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c28a:	b968      	cbnz	r0, 800c2a8 <example_optiga_deinit+0x30>
 800c28c:	8823      	ldrh	r3, [r4, #0]
 800c28e:	4a08      	ldr	r2, [pc, #32]	; (800c2b0 <example_optiga_deinit+0x38>)
 800c290:	b29b      	uxth	r3, r3
 800c292:	2b01      	cmp	r3, #1
 800c294:	d0fa      	beq.n	800c28c <example_optiga_deinit+0x14>
 800c296:	8814      	ldrh	r4, [r2, #0]
 800c298:	b2a4      	uxth	r4, r4
 800c29a:	b10c      	cbz	r4, 800c2a0 <example_optiga_deinit+0x28>
 800c29c:	8813      	ldrh	r3, [r2, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}

        // destroy util and crypt instances
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        optiga_util_destroy(me_util_instance);
 800c2a0:	6828      	ldr	r0, [r5, #0]
 800c2a2:	f7f8 ff8b 	bl	80051bc <optiga_util_destroy>
        me_util_instance = NULL;
 800c2a6:	602c      	str	r4, [r5, #0]
 800c2a8:	bd38      	pop	{r3, r4, r5, pc}
 800c2aa:	bf00      	nop
 800c2ac:	1fff00bc 	.word	0x1fff00bc
 800c2b0:	1fff00c2 	.word	0x1fff00c2

0800c2b4 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c2b4:	4b01      	ldr	r3, [pc, #4]	; (800c2bc <optiga_lib_callback+0x8>)
 800c2b6:	8019      	strh	r1, [r3, #0]
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop
 800c2bc:	1fff00c8 	.word	0x1fff00c8

0800c2c0 <pair_host_and_optiga_using_pre_shared_secret>:
        // callback to upper layer here
    }
}

optiga_lib_status_t pair_host_and_optiga_using_pre_shared_secret(void)
{
 800c2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    do
    {
        /**
         * 1. Create OPTIGA Util and Crypt Instances
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
 800c2c4:	2000      	movs	r0, #0
        // callback to upper layer here
    }
}

optiga_lib_status_t pair_host_and_optiga_using_pre_shared_secret(void)
{
 800c2c6:	b09e      	sub	sp, #120	; 0x78
    do
    {
        /**
         * 1. Create OPTIGA Util and Crypt Instances
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	4957      	ldr	r1, [pc, #348]	; (800c428 <pair_host_and_optiga_using_pre_shared_secret+0x168>)
 800c2cc:	f7f8 ff4e 	bl	800516c <optiga_util_create>
        if (NULL == me_util)
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d046      	beq.n	800c364 <pair_host_and_optiga_using_pre_shared_secret+0xa4>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	4602      	mov	r2, r0
 800c2da:	4953      	ldr	r1, [pc, #332]	; (800c428 <pair_host_and_optiga_using_pre_shared_secret+0x168>)
 800c2dc:	f7f9 f98c 	bl	80055f8 <optiga_crypt_create>
        if (NULL == me_crypt)
 800c2e0:	4607      	mov	r7, r0
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800c2e2:	4620      	mov	r0, r4
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
        if (NULL == me_crypt)
 800c2e4:	2f00      	cmp	r7, #0
 800c2e6:	d038      	beq.n	800c35a <pair_host_and_optiga_using_pre_shared_secret+0x9a>
        }

        /**
         * 2. Initialize the protection level and protocol version for the instances
         */
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f7f8 ff32 	bl	8005154 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me_util,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	2102      	movs	r1, #2
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f7f8 ff2d 	bl	8005154 <optiga_util_set_comms_params>

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt,OPTIGA_COMMS_NO_PROTECTION);
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	2200      	movs	r2, #0
 800c300:	f7f9 f96e 	bl	80055e0 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me_crypt,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800c304:	4638      	mov	r0, r7
 800c306:	2102      	movs	r1, #2
 800c308:	2201      	movs	r2, #1
 800c30a:	f7f9 f969 	bl	80055e0 <optiga_crypt_set_comms_params>
        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c30e:	4d47      	ldr	r5, [pc, #284]	; (800c42c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
        
        START_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c310:	4847      	ldr	r0, [pc, #284]	; (800c430 <pair_host_and_optiga_using_pre_shared_secret+0x170>)
        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c312:	2301      	movs	r3, #1
        
        START_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c314:	4619      	mov	r1, r3

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
 800c316:	222c      	movs	r2, #44	; 0x2c
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c318:	802b      	strh	r3, [r5, #0]

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
 800c31a:	f8ad 200a 	strh.w	r2, [sp, #10]
        optiga_lib_status = OPTIGA_LIB_BUSY;
        
        START_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c31e:	f000 f959 	bl	800c5d4 <example_performance_measurement>
        
        return_status = optiga_util_read_metadata(me_util,
 800c322:	4620      	mov	r0, r4
 800c324:	f24e 1140 	movw	r1, #57664	; 0xe140
 800c328:	aa03      	add	r2, sp, #12
 800c32a:	f10d 030a 	add.w	r3, sp, #10
 800c32e:	f7f9 f81f 	bl	8005370 <optiga_util_read_metadata>
                                                  0xE140,
                                                  platform_binding_secret_metadata,
                                                  &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c332:	b140      	cbz	r0, 800c346 <pair_host_and_optiga_using_pre_shared_secret+0x86>
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800c334:	4620      	mov	r0, r4
 800c336:	f7f8 ff41 	bl	80051bc <optiga_util_destroy>
        }
    }
    if(me_crypt)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
 800c33a:	4638      	mov	r0, r7
 800c33c:	f7f9 f986 	bl	800564c <optiga_crypt_destroy>
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
    return return_status;
}
 800c340:	b01e      	add	sp, #120	; 0x78
 800c342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return_status = optiga_util_read_metadata(me_util,
                                                  0xE140,
                                                  platform_binding_secret_metadata,
                                                  &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c346:	882b      	ldrh	r3, [r5, #0]
 800c348:	4e38      	ldr	r6, [pc, #224]	; (800c42c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d0fa      	beq.n	800c346 <pair_host_and_optiga_using_pre_shared_secret+0x86>
 800c350:	8831      	ldrh	r1, [r6, #0]
 800c352:	b289      	uxth	r1, r1
 800c354:	b151      	cbz	r1, 800c36c <pair_host_and_optiga_using_pre_shared_secret+0xac>
                                               0xE140,
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               platform_binding_secret,
                                               sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c356:	8833      	ldrh	r3, [r6, #0]
 800c358:	e7ec      	b.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800c35a:	f7f8 ff2f 	bl	80051bc <optiga_util_destroy>
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
    return return_status;
}
 800c35e:	b01e      	add	sp, #120	; 0x78
 800c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
optiga_lib_status_t pair_host_and_optiga_using_pre_shared_secret(void)
{
    uint16_t bytes_to_read;
    uint8_t platform_binding_secret[64];
    uint8_t platform_binding_secret_metadata[44];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 800c364:	2001      	movs	r0, #1
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
    return return_status;
}
 800c366:	b01e      	add	sp, #120	; 0x78
 800c368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        /**
         * 4. Validate LcsO in the metadata.
         *    Skip the rest of the procedure if LcsO is greater than or equal to operational state(0x07)
         */
        if (platform_binding_secret_metadata[4] >= LCSO_STATE_OPERATIONAL)
 800c36c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c370:	2b06      	cmp	r3, #6
 800c372:	d8df      	bhi.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generated by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c374:	f04f 0e01 	mov.w	lr, #1
        return_status = optiga_crypt_random(me_crypt,
 800c378:	aa0e      	add	r2, sp, #56	; 0x38
 800c37a:	4638      	mov	r0, r7
 800c37c:	2340      	movs	r3, #64	; 0x40
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generated by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c37e:	f8a6 e000 	strh.w	lr, [r6]
        return_status = optiga_crypt_random(me_crypt,
 800c382:	f7f9 f97b 	bl	800567c <optiga_crypt_random>
                                            OPTIGA_RNG_TYPE_TRNG,
                                            platform_binding_secret,
                                            sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c386:	2800      	cmp	r0, #0
 800c388:	d1d4      	bne.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c38a:	882b      	ldrh	r3, [r5, #0]
 800c38c:	4e27      	ldr	r6, [pc, #156]	; (800c42c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c38e:	b29b      	uxth	r3, r3
 800c390:	2b01      	cmp	r3, #1
 800c392:	d0fa      	beq.n	800c38a <pair_host_and_optiga_using_pre_shared_secret+0xca>
 800c394:	f8b6 8000 	ldrh.w	r8, [r6]
 800c398:	fa1f f888 	uxth.w	r8, r8
 800c39c:	f1b8 0f00 	cmp.w	r8, #0
 800c3a0:	d1d9      	bne.n	800c356 <pair_host_and_optiga_using_pre_shared_secret+0x96>


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c3a2:	2301      	movs	r3, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	4642      	mov	r2, r8


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c3aa:	8033      	strh	r3, [r6, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c3ac:	f7f8 fed2 	bl	8005154 <optiga_util_set_comms_params>
        return_status = optiga_util_write_data(me_util,
 800c3b0:	ab0e      	add	r3, sp, #56	; 0x38
 800c3b2:	2240      	movs	r2, #64	; 0x40
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	9201      	str	r2, [sp, #4]
 800c3b8:	4643      	mov	r3, r8
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f24e 1140 	movw	r1, #57664	; 0xe140
 800c3c0:	f7f9 f822 	bl	8005408 <optiga_util_write_data>
                                               0xE140,
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               platform_binding_secret,
                                               sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d1b5      	bne.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c3c8:	882b      	ldrh	r3, [r5, #0]
 800c3ca:	4e18      	ldr	r6, [pc, #96]	; (800c42c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d0fa      	beq.n	800c3c8 <pair_host_and_optiga_using_pre_shared_secret+0x108>
 800c3d2:	8833      	ldrh	r3, [r6, #0]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1bd      	bne.n	800c356 <pair_host_and_optiga_using_pre_shared_secret+0x96>

        /**
         * 8. Write/store the random(secret) on the Host platform
         *
         */
        pal_return_status = pal_os_datastore_write(OPTIGA_PLATFORM_BINDING_SHARED_SECRET_ID,
 800c3da:	2240      	movs	r2, #64	; 0x40
 800c3dc:	a90e      	add	r1, sp, #56	; 0x38
 800c3de:	2011      	movs	r0, #17
 800c3e0:	f7f8 fdca 	bl	8004f78 <pal_os_datastore_write>
                                                   platform_binding_secret,
                                                   sizeof(platform_binding_secret));

        if (PAL_STATUS_SUCCESS != pal_return_status)
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	b108      	cbz	r0, 800c3ec <pair_host_and_optiga_using_pre_shared_secret+0x12c>
        {
            //Storing of Pre-shared secret on Host failed.
            optiga_lib_status = pal_return_status;
 800c3e8:	8030      	strh	r0, [r6, #0]
            break;
 800c3ea:	e7a3      	b.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c3ec:	2301      	movs	r3, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4620      	mov	r0, r4


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c3f2:	8033      	strh	r3, [r6, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c3f4:	f7f8 feae 	bl	8005154 <optiga_util_set_comms_params>
        return_status = optiga_util_write_metadata(me_util,
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f24e 1140 	movw	r1, #57664	; 0xe140
 800c3fe:	4a0d      	ldr	r2, [pc, #52]	; (800c434 <pair_host_and_optiga_using_pre_shared_secret+0x174>)
 800c400:	2319      	movs	r3, #25
 800c402:	f7f9 f857 	bl	80054b4 <optiga_util_write_metadata>
                                                   0xE140,
                                                   platform_binding_shared_secret_metadata_final,
                                                   sizeof(platform_binding_shared_secret_metadata_final));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c406:	2800      	cmp	r0, #0
 800c408:	d194      	bne.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c40a:	882b      	ldrh	r3, [r5, #0]
 800c40c:	4a07      	ldr	r2, [pc, #28]	; (800c42c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c40e:	b29b      	uxth	r3, r3
 800c410:	2b01      	cmp	r3, #1
 800c412:	d0fa      	beq.n	800c40a <pair_host_and_optiga_using_pre_shared_secret+0x14a>
 800c414:	8811      	ldrh	r1, [r2, #0]
 800c416:	b289      	uxth	r1, r1
 800c418:	b109      	cbz	r1, 800c41e <pair_host_and_optiga_using_pre_shared_secret+0x15e>
 800c41a:	8813      	ldrh	r3, [r2, #0]
 800c41c:	e78a      	b.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>
        
        READ_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c41e:	4804      	ldr	r0, [pc, #16]	; (800c430 <pair_host_and_optiga_using_pre_shared_secret+0x170>)
 800c420:	f000 f8d8 	bl	800c5d4 <example_performance_measurement>
 800c424:	e786      	b.n	800c334 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c426:	bf00      	nop
 800c428:	0800c2b5 	.word	0x0800c2b5
 800c42c:	1fff00c8 	.word	0x1fff00c8
 800c430:	1fff00c4 	.word	0x1fff00c4
 800c434:	0800ddb8 	.word	0x0800ddb8

0800c438 <example_util_encode_rsa_public_key_in_bit_string_format>:
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c43c:	f890 a000 	ldrb.w	sl, [r0]
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c440:	b091      	sub	sp, #68	; 0x44
 800c442:	460d      	mov	r5, r1
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c444:	ea4f 1ada 	mov.w	sl, sl, lsr #7
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c448:	461f      	mov	r7, r3

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);
 800c44a:	2dff      	cmp	r5, #255	; 0xff
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c44c:	fa1f f38a 	uxth.w	r3, sl
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c450:	900a      	str	r0, [sp, #40]	; 0x28
 800c452:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c454:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c456:	9303      	str	r3, [sp, #12]

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);
 800c458:	f200 80b4 	bhi.w	800c5c4 <example_util_encode_rsa_public_key_in_bit_string_format+0x18c>
 800c45c:	2002      	movs	r0, #2
 800c45e:	f04f 0b01 	mov.w	fp, #1
 800c462:	4602      	mov	r2, r0
 800c464:	f8cd b008 	str.w	fp, [sp, #8]
 800c468:	2681      	movs	r6, #129	; 0x81
    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c46a:	1deb      	adds	r3, r5, #7
 800c46c:	4453      	add	r3, sl
 800c46e:	443b      	add	r3, r7
 800c470:	4413      	add	r3, r2
 800c472:	2bff      	cmp	r3, #255	; 0xff

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);

    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
 800c474:	f04f 0203 	mov.w	r2, #3
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c478:	7066      	strb	r6, [r4, #1]

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);

    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
 800c47a:	7022      	strb	r2, [r4, #0]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c47c:	f340 808a 	ble.w	800c594 <example_util_encode_rsa_public_key_in_bit_string_format+0x15c>
 800c480:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800c484:	230b      	movs	r3, #11
 800c486:	930e      	str	r3, [sp, #56]	; 0x38
 800c488:	930d      	str	r3, [sp, #52]	; 0x34
 800c48a:	2306      	movs	r3, #6
 800c48c:	9309      	str	r3, [sp, #36]	; 0x24
 800c48e:	2305      	movs	r3, #5
 800c490:	210a      	movs	r1, #10
 800c492:	f04f 0e08 	mov.w	lr, #8
 800c496:	f04f 0807 	mov.w	r8, #7
 800c49a:	9308      	str	r3, [sp, #32]
 800c49c:	2304      	movs	r3, #4
 800c49e:	f884 c002 	strb.w	ip, [r4, #2]
 800c4a2:	910f      	str	r1, [sp, #60]	; 0x3c
 800c4a4:	9206      	str	r2, [sp, #24]
 800c4a6:	468c      	mov	ip, r1
 800c4a8:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800c4ac:	f8cd 8004 	str.w	r8, [sp, #4]
 800c4b0:	f04f 0909 	mov.w	r9, #9
 800c4b4:	9307      	str	r3, [sp, #28]
 800c4b6:	eb0a 0305 	add.w	r3, sl, r5
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	b2f9      	uxtb	r1, r7
 800c4be:	9105      	str	r1, [sp, #20]
 800c4c0:	1851      	adds	r1, r2, r1
 800c4c2:	b2c9      	uxtb	r1, r1
 800c4c4:	9204      	str	r2, [sp, #16]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c4c6:	1d2a      	adds	r2, r5, #4
 800c4c8:	4452      	add	r2, sl
 800c4ca:	f101 0a07 	add.w	sl, r1, #7
    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c4ce:	9100      	str	r1, [sp, #0]
 800c4d0:	eb00 010a 	add.w	r1, r0, sl
 800c4d4:	9806      	ldr	r0, [sp, #24]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c4d6:	443a      	add	r2, r7
    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c4d8:	5421      	strb	r1, [r4, r0]
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   (2 * length_field_in_bytes)))
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
 800c4da:	9807      	ldr	r0, [sp, #28]

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c4dc:	445a      	add	r2, fp
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   (2 * length_field_in_bytes)))
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
 800c4de:	f04f 0b00 	mov.w	fp, #0
 800c4e2:	f804 b000 	strb.w	fp, [r4, r0]

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
 800c4e6:	9808      	ldr	r0, [sp, #32]
 800c4e8:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800c4ec:	f804 a000 	strb.w	sl, [r4, r0]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c4f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c4f2:	2aff      	cmp	r2, #255	; 0xff
                                                   e_length +
                                                   (2 * length_field_in_bytes)))
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c4f4:	5426      	strb	r6, [r4, r0]
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c4f6:	dd4b      	ble.n	800c590 <example_util_encode_rsa_public_key_in_bit_string_format+0x158>
 800c4f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c4fc:	f804 2008 	strb.w	r2, [r4, r8]
 800c500:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c504:	9001      	str	r0, [sp, #4]
 800c506:	46f0      	mov	r8, lr
 800c508:	46ce      	mov	lr, r9
 800c50a:	46e1      	mov	r9, ip
 800c50c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800c510:	9900      	ldr	r1, [sp, #0]
 800c512:	9802      	ldr	r0, [sp, #8]
 800c514:	3104      	adds	r1, #4
 800c516:	4408      	add	r0, r1
 800c518:	4601      	mov	r1, r0
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
 800c51a:	2bff      	cmp	r3, #255	; 0xff
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c51c:	f04f 0002 	mov.w	r0, #2
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c520:	f804 1008 	strb.w	r1, [r4, r8]
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c524:	f804 000e 	strb.w	r0, [r4, lr]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c528:	f804 6009 	strb.w	r6, [r4, r9]
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
 800c52c:	dd07      	ble.n	800c53e <example_util_encode_rsa_public_key_in_bit_string_format+0x106>
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	3204      	adds	r2, #4
 800c532:	b292      	uxth	r2, r2
 800c534:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c538:	f804 300c 	strb.w	r3, [r4, ip]
 800c53c:	4694      	mov	ip, r2
 800c53e:	9b03      	ldr	r3, [sp, #12]
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c540:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c542:	f103 0901 	add.w	r9, r3, #1
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
 800c546:	444a      	add	r2, r9
 800c548:	fa1f f982 	uxth.w	r9, r2
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
 800c54c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c550:	f804 300c 	strb.w	r3, [r4, ip]
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c554:	462a      	mov	r2, r5
    index += n_length;
 800c556:	444d      	add	r5, r9

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c558:	eb04 0009 	add.w	r0, r4, r9
    index += n_length;
 800c55c:	b2ad      	uxth	r5, r5

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c55e:	f7f8 fdc5 	bl	80050ec <pal_os_memcpy>
    index += n_length;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c562:	1c6b      	adds	r3, r5, #1
    pub_key_buffer[index++] = (uint8_t)e_length;
 800c564:	b29b      	uxth	r3, r3
 800c566:	f105 0902 	add.w	r9, r5, #2
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
    index += n_length;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c56a:	2202      	movs	r2, #2
 800c56c:	5562      	strb	r2, [r4, r5]
    pub_key_buffer[index++] = (uint8_t)e_length;
 800c56e:	fa1f f989 	uxth.w	r9, r9
 800c572:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c576:	54e2      	strb	r2, [r4, r3]
    pal_os_memcpy(&pub_key_buffer[index], e_buffer, e_length);
 800c578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c57a:	463a      	mov	r2, r7
 800c57c:	eb04 0009 	add.w	r0, r4, r9
 800c580:	f7f8 fdb4 	bl	80050ec <pal_os_memcpy>
    index += e_length;

    *pub_key_length = index;
 800c584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    index += n_length;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = (uint8_t)e_length;
    pal_os_memcpy(&pub_key_buffer[index], e_buffer, e_length);
    index += e_length;
 800c586:	444f      	add	r7, r9

    *pub_key_length = index;
 800c588:	801f      	strh	r7, [r3, #0]

#undef OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD
#undef OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG
#undef OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG
}
 800c58a:	b011      	add	sp, #68	; 0x44
 800c58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c592:	e7bd      	b.n	800c510 <example_util_encode_rsa_public_key_in_bit_string_format+0xd8>
 800c594:	2309      	movs	r3, #9
 800c596:	930f      	str	r3, [sp, #60]	; 0x3c
 800c598:	469c      	mov	ip, r3
 800c59a:	2305      	movs	r3, #5
 800c59c:	9309      	str	r3, [sp, #36]	; 0x24
 800c59e:	2304      	movs	r3, #4
 800c5a0:	210a      	movs	r1, #10
 800c5a2:	f04f 0e07 	mov.w	lr, #7
 800c5a6:	f04f 0806 	mov.w	r8, #6
 800c5aa:	9308      	str	r3, [sp, #32]
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	910e      	str	r1, [sp, #56]	; 0x38
 800c5b0:	9207      	str	r2, [sp, #28]
 800c5b2:	910d      	str	r1, [sp, #52]	; 0x34
 800c5b4:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800c5b8:	f8cd 8004 	str.w	r8, [sp, #4]
 800c5bc:	f04f 0908 	mov.w	r9, #8
 800c5c0:	9306      	str	r3, [sp, #24]
 800c5c2:	e778      	b.n	800c4b6 <example_util_encode_rsa_public_key_in_bit_string_format+0x7e>
 800c5c4:	2004      	movs	r0, #4
 800c5c6:	f04f 0b02 	mov.w	fp, #2
 800c5ca:	4602      	mov	r2, r0

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);
 800c5cc:	f8cd b008 	str.w	fp, [sp, #8]
 800c5d0:	2682      	movs	r6, #130	; 0x82
 800c5d2:	e74a      	b.n	800c46a <example_util_encode_rsa_public_key_in_bit_string_format+0x32>

0800c5d4 <example_performance_measurement>:
    return (return_status);
}

void example_performance_measurement(uint32_t* time_value, uint8_t time_reset_flag)
{
    if(TRUE == time_reset_flag)
 800c5d4:	2901      	cmp	r1, #1
    } while (FALSE);
    return (return_status);
}

void example_performance_measurement(uint32_t* time_value, uint8_t time_reset_flag)
{
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	4604      	mov	r4, r0
    if(TRUE == time_reset_flag)
 800c5da:	d006      	beq.n	800c5ea <example_performance_measurement+0x16>
    {
        *time_value = pal_os_timer_get_time_in_milliseconds();
    }
    else if(FALSE == time_reset_flag)
 800c5dc:	b921      	cbnz	r1, 800c5e8 <example_performance_measurement+0x14>
    {
        *time_value = pal_os_timer_get_time_in_milliseconds() - *time_value;
 800c5de:	f7f8 fda3 	bl	8005128 <pal_os_timer_get_time_in_milliseconds>
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	1ac0      	subs	r0, r0, r3
 800c5e6:	6020      	str	r0, [r4, #0]
 800c5e8:	bd10      	pop	{r4, pc}

void example_performance_measurement(uint32_t* time_value, uint8_t time_reset_flag)
{
    if(TRUE == time_reset_flag)
    {
        *time_value = pal_os_timer_get_time_in_milliseconds();
 800c5ea:	f7f8 fd9d 	bl	8005128 <pal_os_timer_get_time_in_milliseconds>
 800c5ee:	6020      	str	r0, [r4, #0]
 800c5f0:	bd10      	pop	{r4, pc}
 800c5f2:	bf00      	nop

0800c5f4 <secure_communication>:


extern void example_optiga_util_update_count(void);

uint8_t secure_communication(void)
{
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	b0b4      	sub	sp, #208	; 0xd0
    uint8_t random_buf[32];
    uint8_t ciphertext[129];
    uint16_t ciphertext_len = 128;
 800c5f8:	2380      	movs	r3, #128	; 0x80
	uint16_t optiga_counter_oid = 0xE120u;
	uint16_t optiga_key_oid = 0xF1E0u;


	// Generate random number using Optiga for session key
	optiga_crypt_random_wrapper(random_buf, 32);
 800c5fa:	a802      	add	r0, sp, #8
 800c5fc:	2120      	movs	r1, #32

uint8_t secure_communication(void)
{
    uint8_t random_buf[32];
    uint8_t ciphertext[129];
    uint16_t ciphertext_len = 128;
 800c5fe:	f8ad 3002 	strh.w	r3, [sp, #2]
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
	memcpy(plaintext, random_buf, 32);
 800c602:	ad02      	add	r5, sp, #8
	uint16_t optiga_counter_oid = 0xE120u;
	uint16_t optiga_key_oid = 0xF1E0u;


	// Generate random number using Optiga for session key
	optiga_crypt_random_wrapper(random_buf, 32);
 800c604:	f000 fb50 	bl	800cca8 <optiga_crypt_random_wrapper>

	// Get Nonce
//	optiga_util_reset_count(optiga_counter_oid);
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800c608:	a901      	add	r1, sp, #4
 800c60a:	f24e 1020 	movw	r0, #57632	; 0xe120
 800c60e:	2204      	movs	r2, #4
 800c610:	f000 f976 	bl	800c900 <optiga_util_read_nonce>


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
	memcpy(plaintext, random_buf, 32);
 800c614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
//	optiga_util_reset_count(optiga_counter_oid);
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
 800c616:	2600      	movs	r6, #0
	memcpy(plaintext, random_buf, 32);
 800c618:	ac0a      	add	r4, sp, #40	; 0x28
//	optiga_util_reset_count(optiga_counter_oid);
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
 800c61a:	960f      	str	r6, [sp, #60]	; 0x3c
 800c61c:	9610      	str	r6, [sp, #64]	; 0x40
 800c61e:	9611      	str	r6, [sp, #68]	; 0x44
	memcpy(plaintext, random_buf, 32);
 800c620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c622:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&plaintext[32], nonce, 4);
 800c62a:	9b01      	ldr	r3, [sp, #4]
 800c62c:	9312      	str	r3, [sp, #72]	; 0x48
	optiga_crypt_rsa_encrypt_message_wrapper(plaintext, sizeof(plaintext), ciphertext, &ciphertext_len);
 800c62e:	aa13      	add	r2, sp, #76	; 0x4c
 800c630:	f10d 0302 	add.w	r3, sp, #2
 800c634:	a80a      	add	r0, sp, #40	; 0x28
 800c636:	2124      	movs	r1, #36	; 0x24
 800c638:	f000 fa88 	bl	800cb4c <optiga_crypt_rsa_encrypt_message_wrapper>

	// Send session key to the App
	if(ciphertext_len == 128u)
	{
		// Pana la 127 merge ok
		optiga_lib_print_bytes(ciphertext, 129); // TODO: TREBUIE SA TRIMIT CU UNUL IN PLUS ALTFEL RAMAN BLOCAT
 800c63c:	a813      	add	r0, sp, #76	; 0x4c
 800c63e:	2181      	movs	r1, #129	; 0x81
 800c640:	f7fb fa92 	bl	8007b68 <optiga_lib_print_bytes>
		// Sens 128 0s, encrypt nu a functionat
		optiga_lib_print_bytes(ciphertext, 129);
	}

	// Store session key
	optiga_util_write_shared_key(optiga_key_oid, random_buf, sizeof(random_buf));
 800c644:	a902      	add	r1, sp, #8
 800c646:	f24f 10e0 	movw	r0, #61920	; 0xf1e0
 800c64a:	2220      	movs	r2, #32
 800c64c:	f000 fb5c 	bl	800cd08 <optiga_util_write_shared_key>
	// Read session key, Testing
//	uint8_t key[32] = {0x01, 0x01, 0x01, 0x01};
//	optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));
//	ciphertext_len = ciphertext_len; // BR
	return true;
}
 800c650:	2001      	movs	r0, #1
 800c652:	b034      	add	sp, #208	; 0xd0
 800c654:	bd70      	pop	{r4, r5, r6, pc}
 800c656:	bf00      	nop

0800c658 <optiga_crypt_callback>:
volatile optiga_lib_status_t optiga_lib_status;


static void optiga_crypt_callback(void * const context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c658:	4b01      	ldr	r3, [pc, #4]	; (800c660 <optiga_crypt_callback+0x8>)
 800c65a:	8019      	strh	r1, [r3, #0]
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	1fff0802 	.word	0x1fff0802

0800c664 <optiga_util_callback>:
}


static void optiga_util_callback(void * const context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c664:	4b01      	ldr	r3, [pc, #4]	; (800c66c <optiga_util_callback+0x8>)
 800c666:	8019      	strh	r1, [r3, #0]
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	1fff0802 	.word	0x1fff0802

0800c670 <optiga_crypt_create_wrapper>:


optiga_crypt_t * optiga_crypt_create_wrapper(void)
{
	optiga_crypt_t * me;
	me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 800c670:	2000      	movs	r0, #0
}



optiga_crypt_t * optiga_crypt_create_wrapper(void)
{
 800c672:	b510      	push	{r4, lr}
	optiga_crypt_t * me;
	me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 800c674:	4602      	mov	r2, r0
 800c676:	4905      	ldr	r1, [pc, #20]	; (800c68c <optiga_crypt_create_wrapper+0x1c>)
 800c678:	f7f8 ffbe 	bl	80055f8 <optiga_crypt_create>
#if LIFECYCLE==PRODUCTION
	OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
#else
	OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 800c67c:	2101      	movs	r1, #1


optiga_crypt_t * optiga_crypt_create_wrapper(void)
{
	optiga_crypt_t * me;
	me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 800c67e:	4604      	mov	r4, r0
#if LIFECYCLE==PRODUCTION
	OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
#else
	OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 800c680:	2200      	movs	r2, #0
 800c682:	f7f8 ffad 	bl	80055e0 <optiga_crypt_set_comms_params>
#endif

	return me;
}
 800c686:	4620      	mov	r0, r4
 800c688:	bd10      	pop	{r4, pc}
 800c68a:	bf00      	nop
 800c68c:	0800c659 	.word	0x0800c659

0800c690 <optiga_util_create_wrapper>:


optiga_util_t * optiga_util_create_wrapper(void)
{
	optiga_util_t * me;
	me = optiga_util_create(0, optiga_util_callback, NULL);
 800c690:	2000      	movs	r0, #0
	return me;
}


optiga_util_t * optiga_util_create_wrapper(void)
{
 800c692:	b510      	push	{r4, lr}
	optiga_util_t * me;
	me = optiga_util_create(0, optiga_util_callback, NULL);
 800c694:	4602      	mov	r2, r0
 800c696:	4905      	ldr	r1, [pc, #20]	; (800c6ac <optiga_util_create_wrapper+0x1c>)
 800c698:	f7f8 fd68 	bl	800516c <optiga_util_create>

#if LIFECYCLE==PRODUCTION
	OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
#else
	OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 800c69c:	2101      	movs	r1, #1


optiga_util_t * optiga_util_create_wrapper(void)
{
	optiga_util_t * me;
	me = optiga_util_create(0, optiga_util_callback, NULL);
 800c69e:	4604      	mov	r4, r0

#if LIFECYCLE==PRODUCTION
	OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
#else
	OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f7f8 fd57 	bl	8005154 <optiga_util_set_comms_params>
#endif

	return me;
}
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	bd10      	pop	{r4, pc}
 800c6aa:	bf00      	nop
 800c6ac:	0800c665 	.word	0x0800c665

0800c6b0 <decode_req>:
#include "../SEMS_Headers/Decoder.h"

req_type decode_req(uint8_t command[32])
{
 800c6b0:	b510      	push	{r4, lr}
	// Activate secure unlock
	if(0 == strcmp((char *)command, "Unlock"))
 800c6b2:	490e      	ldr	r1, [pc, #56]	; (800c6ec <decode_req+0x3c>)
#include "../SEMS_Headers/Decoder.h"

req_type decode_req(uint8_t command[32])
{
 800c6b4:	4604      	mov	r4, r0
	// Activate secure unlock
	if(0 == strcmp((char *)command, "Unlock"))
 800c6b6:	f001 f83d 	bl	800d734 <strcmp>
 800c6ba:	b150      	cbz	r0, 800c6d2 <decode_req+0x22>
	{
		return SEC_UNLOCK;
	}

	// Activate secure communication
	if(0 == strcmp((char *)command, "SecCom"))
 800c6bc:	4620      	mov	r0, r4
 800c6be:	490c      	ldr	r1, [pc, #48]	; (800c6f0 <decode_req+0x40>)
 800c6c0:	f001 f838 	bl	800d734 <strcmp>
 800c6c4:	b130      	cbz	r0, 800c6d4 <decode_req+0x24>
	{
		return SEC_COM;
	}

	// Lock
	if(0 == strcmp((char *)command, "Lock"))
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	490a      	ldr	r1, [pc, #40]	; (800c6f4 <decode_req+0x44>)
 800c6ca:	f001 f833 	bl	800d734 <strcmp>
 800c6ce:	b918      	cbnz	r0, 800c6d8 <decode_req+0x28>
	{
		return SEC_LOCK;
 800c6d0:	2002      	movs	r0, #2
	{
		return EXAMPLE;
	}

	return UNKNOWN;
}
 800c6d2:	bd10      	pop	{r4, pc}
	}

	// Activate secure communication
	if(0 == strcmp((char *)command, "SecCom"))
	{
		return SEC_COM;
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	bd10      	pop	{r4, pc}
		return SEC_LOCK;

	}

	// Usual command
	if(0 == strcmp((char *)command, "Command"))
 800c6d8:	4620      	mov	r0, r4
 800c6da:	4907      	ldr	r1, [pc, #28]	; (800c6f8 <decode_req+0x48>)
 800c6dc:	f001 f82a 	bl	800d734 <strcmp>
 800c6e0:	2800      	cmp	r0, #0
	{
		return EXAMPLE;
	}

	return UNKNOWN;
 800c6e2:	bf0c      	ite	eq
 800c6e4:	2003      	moveq	r0, #3
 800c6e6:	2004      	movne	r0, #4
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	bf00      	nop
 800c6ec:	0800ddd4 	.word	0x0800ddd4
 800c6f0:	0800dddc 	.word	0x0800dddc
 800c6f4:	0800dde4 	.word	0x0800dde4
 800c6f8:	0800ddec 	.word	0x0800ddec

0800c6fc <optiga_crypt_hash_data_wrapper>:

#include "../SEMS_Headers/Util.h"


void optiga_crypt_hash_data_wrapper(uint8_t data_to_hash[], uint8_t size_of_data, uint8_t digest[])
{
 800c6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
    hash_data_host.length = size_of_data;
    optiga_lib_status = OPTIGA_LIB_BUSY;
 800c6fe:	4c15      	ldr	r4, [pc, #84]	; (800c754 <optiga_crypt_hash_data_wrapper+0x58>)

#include "../SEMS_Headers/Util.h"


void optiga_crypt_hash_data_wrapper(uint8_t data_to_hash[], uint8_t size_of_data, uint8_t digest[])
{
 800c700:	b085      	sub	sp, #20
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
    hash_data_host.length = size_of_data;
    optiga_lib_status = OPTIGA_LIB_BUSY;
 800c702:	2501      	movs	r5, #1
{
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
 800c704:	9002      	str	r0, [sp, #8]

#include "../SEMS_Headers/Util.h"


void optiga_crypt_hash_data_wrapper(uint8_t data_to_hash[], uint8_t size_of_data, uint8_t digest[])
{
 800c706:	4617      	mov	r7, r2
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
    hash_data_host.length = size_of_data;
 800c708:	9103      	str	r1, [sp, #12]
    optiga_lib_status = OPTIGA_LIB_BUSY;
 800c70a:	8025      	strh	r5, [r4, #0]

    do
    {
        example_optiga_init();
 800c70c:	f7ff fd84 	bl	800c218 <example_optiga_init>

        me = optiga_crypt_create_wrapper();
 800c710:	f7ff ffae 	bl	800c670 <optiga_crypt_create_wrapper>

        if (NULL == me)
 800c714:	b1c8      	cbz	r0, 800c74a <optiga_crypt_hash_data_wrapper+0x4e>
        {
            break;
        }

        return_status = optiga_crypt_hash(me,
 800c716:	9700      	str	r7, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	21e2      	movs	r1, #226	; 0xe2
 800c71c:	ab02      	add	r3, sp, #8
 800c71e:	4606      	mov	r6, r0
 800c720:	f7f8 fff0 	bl	8005704 <optiga_crypt_hash>
										OPTIGA_HASH_TYPE_SHA_256,
										OPTIGA_CRYPT_HOST_DATA,
										&hash_data_host,
										digest);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c724:	b130      	cbz	r0, 800c734 <optiga_crypt_hash_data_wrapper+0x38>


    } while (FALSE);

    example_optiga_deinit();
 800c726:	f7ff fda7 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_crypt_destroy(me);
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7f8 ff8e 	bl	800564c <optiga_crypt_destroy>
    }
}
 800c730:	b005      	add	sp, #20
 800c732:	bdf0      	pop	{r4, r5, r6, r7, pc}
										OPTIGA_HASH_TYPE_SHA_256,
										OPTIGA_CRYPT_HOST_DATA,
										&hash_data_host,
										digest);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c734:	8823      	ldrh	r3, [r4, #0]
 800c736:	4a07      	ldr	r2, [pc, #28]	; (800c754 <optiga_crypt_hash_data_wrapper+0x58>)
 800c738:	b29b      	uxth	r3, r3
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d0fa      	beq.n	800c734 <optiga_crypt_hash_data_wrapper+0x38>
 800c73e:	8813      	ldrh	r3, [r2, #0]
 800c740:	b29b      	uxth	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d0ef      	beq.n	800c726 <optiga_crypt_hash_data_wrapper+0x2a>
 800c746:	8813      	ldrh	r3, [r2, #0]
 800c748:	e7ed      	b.n	800c726 <optiga_crypt_hash_data_wrapper+0x2a>


    } while (FALSE);

    example_optiga_deinit();
 800c74a:	f7ff fd95 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_crypt_destroy(me);
    }
}
 800c74e:	b005      	add	sp, #20
 800c750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c752:	bf00      	nop
 800c754:	1fff0802 	.word	0x1fff0802

0800c758 <init_SEMS>:
#include "../SEMS_Headers/Util.h"
#include "../SEMS_Headers/Timer.h"

void init_SEMS(void)
{
	start_cooldown_timer();
 800c758:	f000 bb88 	b.w	800ce6c <start_cooldown_timer>

0800c75c <my_optiga_shell_begin>:
volatile uint8_t failed_req = 0;
volatile uint8_t cooldowned = false;


void my_optiga_shell_begin(void)
{
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	b091      	sub	sp, #68	; 0x44
 800c762:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800c8f0 <my_optiga_shell_begin+0x194>
 800c766:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800c8f4 <my_optiga_shell_begin+0x198>
	{
		testing();
	}
#endif

	init_SEMS();
 800c76a:	f7ff fff5 	bl	800c758 <init_SEMS>

void my_optiga_shell_begin(void)
{

	uint8_t sec_unlocked = false;
	uint8_t sec_comm = false;
 800c76e:	2600      	movs	r6, #0
		else
		{
			// Req before unlock || invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
 800c770:	46cb      	mov	fp, r9
		}
		else
		{
			// Req before unlock || invalid Token, Nonce, Hash

			failed_req++;
 800c772:	46c2      	mov	sl, r8


void my_optiga_shell_begin(void)
{

	uint8_t sec_unlocked = false;
 800c774:	4637      	mov	r7, r6
 800c776:	ac08      	add	r4, sp, #32

	while(true)
	{

		// Wrapper for serial read
		if(0u == read_request(command, sec_unlocked, sec_comm))
 800c778:	4668      	mov	r0, sp
 800c77a:	4639      	mov	r1, r7
 800c77c:	4632      	mov	r2, r6
 800c77e:	f000 f91f 	bl	800c9c0 <read_request>
 800c782:	4605      	mov	r5, r0
 800c784:	bb40      	cbnz	r0, 800c7d8 <my_optiga_shell_begin+0x7c>
		{
			req_type req_rcv;
			if(true == cooldowned)
 800c786:	f899 3000 	ldrb.w	r3, [r9]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d074      	beq.n	800c878 <my_optiga_shell_begin+0x11c>
				uint8_t buff[32] = "Denied by cooldown.";
				optiga_lib_print_bytes(buff, 32);
				continue;
			}

			req_rcv = decode_req(command);
 800c78e:	4668      	mov	r0, sp
 800c790:	f7ff ff8e 	bl	800c6b0 <decode_req>
			switch(req_rcv){
 800c794:	2803      	cmp	r0, #3
 800c796:	f200 8082 	bhi.w	800c89e <my_optiga_shell_begin+0x142>
 800c79a:	e8df f000 	tbb	[pc, r0]
 800c79e:	575b      	.short	0x575b
 800c7a0:	0241      	.short	0x0241
					write_request(buff, sec_comm);
					break;
				}
				case EXAMPLE:
				{
					uint8_t buff[32] = "AABBCCDEFG";
 800c7a2:	4b4f      	ldr	r3, [pc, #316]	; (800c8e0 <my_optiga_shell_begin+0x184>)
 800c7a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7a8:	4623      	mov	r3, r4
 800c7aa:	c303      	stmia	r3!, {r0, r1}
 800c7ac:	f823 2b02 	strh.w	r2, [r3], #2
 800c7b0:	0c15      	lsrs	r5, r2, #16
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	2215      	movs	r2, #21
 800c7b6:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 800c7ba:	701d      	strb	r5, [r3, #0]
 800c7bc:	f000 fef9 	bl	800d5b2 <memset>
					write_request(buff, sec_comm);
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 f968 	bl	800ca98 <write_request>

	while(true)
	{

		// Wrapper for serial read
		if(0u == read_request(command, sec_unlocked, sec_comm))
 800c7c8:	4668      	mov	r0, sp
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	f000 f8f7 	bl	800c9c0 <read_request>
 800c7d2:	4605      	mov	r5, r0
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d0d6      	beq.n	800c786 <my_optiga_shell_begin+0x2a>
		}
		else
		{
			// Req before unlock || invalid Token, Nonce, Hash

			failed_req++;
 800c7d8:	f898 3000 	ldrb.w	r3, [r8]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	f888 3000 	strb.w	r3, [r8]
			if(true == cooldowned)
 800c7e4:	f899 3000 	ldrb.w	r3, [r9]
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d066      	beq.n	800c8ba <my_optiga_shell_begin+0x15e>
				uint8_t buff[32] = "Denied by cooldown.";
				optiga_lib_print_bytes(buff, 32);
			}
			else
			{
				if(failed_req >= MAX_FAILED_REQ)
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800c7f4:	b39b      	cbz	r3, 800c85e <my_optiga_shell_begin+0x102>
				{
					uint8_t buff[32] = "Cooldown activated.";
 800c7f6:	f8df e100 	ldr.w	lr, [pc, #256]	; 800c8f8 <my_optiga_shell_begin+0x19c>
 800c7fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c7fe:	4625      	mov	r5, r4
 800c800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c802:	f8de 3000 	ldr.w	r3, [lr]
 800c806:	602b      	str	r3, [r5, #0]
					optiga_lib_print_bytes(buff, 32);
 800c808:	4620      	mov	r0, r4
			}
			else
			{
				if(failed_req >= MAX_FAILED_REQ)
				{
					uint8_t buff[32] = "Cooldown activated.";
 800c80a:	2300      	movs	r3, #0
					optiga_lib_print_bytes(buff, 32);
 800c80c:	2120      	movs	r1, #32
			}
			else
			{
				if(failed_req >= MAX_FAILED_REQ)
				{
					uint8_t buff[32] = "Cooldown activated.";
 800c80e:	930d      	str	r3, [sp, #52]	; 0x34
 800c810:	930e      	str	r3, [sp, #56]	; 0x38
 800c812:	930f      	str	r3, [sp, #60]	; 0x3c
					optiga_lib_print_bytes(buff, 32);
 800c814:	f7fb f9a8 	bl	8007b68 <optiga_lib_print_bytes>
					cooldowned = true;
 800c818:	2301      	movs	r3, #1
 800c81a:	f88b 3000 	strb.w	r3, [fp]
 800c81e:	e7ab      	b.n	800c778 <my_optiga_shell_begin+0x1c>
					sec_comm = secure_communication();
					break;
				}
				case SEC_LOCK:
				{
					uint8_t buff[32] = "Locked";
 800c820:	4b30      	ldr	r3, [pc, #192]	; (800c8e4 <my_optiga_shell_begin+0x188>)
 800c822:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c826:	2219      	movs	r2, #25
 800c828:	0c0b      	lsrs	r3, r1, #16
 800c82a:	6020      	str	r0, [r4, #0]
 800c82c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800c830:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800c834:	2100      	movs	r1, #0
					sec_unlocked = 0;
					write_request(buff, sec_comm);
 800c836:	ac08      	add	r4, sp, #32
					sec_comm = secure_communication();
					break;
				}
				case SEC_LOCK:
				{
					uint8_t buff[32] = "Locked";
 800c838:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800c83c:	f000 feb9 	bl	800d5b2 <memset>
					sec_unlocked = 0;
					write_request(buff, sec_comm);
 800c840:	4620      	mov	r0, r4
 800c842:	4631      	mov	r1, r6
 800c844:	f000 f928 	bl	800ca98 <write_request>
					break;
				}
				case SEC_LOCK:
				{
					uint8_t buff[32] = "Locked";
					sec_unlocked = 0;
 800c848:	2700      	movs	r7, #0
 800c84a:	e795      	b.n	800c778 <my_optiga_shell_begin+0x1c>
					sec_comm = 0;  // reset sec_comm flag
					break;
				}
				case SEC_COM: // momentan nu pot da 2 cereri de sec com
				{
					sec_comm = secure_communication();
 800c84c:	f7ff fed2 	bl	800c5f4 <secure_communication>
 800c850:	4606      	mov	r6, r0
					break;
 800c852:	e791      	b.n	800c778 <my_optiga_shell_begin+0x1c>

			req_rcv = decode_req(command);
			switch(req_rcv){
				case SEC_UNLOCK:
				{
					sec_unlocked = secure_unlock();
 800c854:	f000 fb2c 	bl	800ceb0 <secure_unlock>
					sec_comm = 0;  // reset sec_comm flag
 800c858:	2600      	movs	r6, #0

			req_rcv = decode_req(command);
			switch(req_rcv){
				case SEC_UNLOCK:
				{
					sec_unlocked = secure_unlock();
 800c85a:	4607      	mov	r7, r0
					sec_comm = 0;  // reset sec_comm flag
					break;
 800c85c:	e78c      	b.n	800c778 <my_optiga_shell_begin+0x1c>
					cooldowned = true;
				}
				else
				{
					// Just a wrong request
					uint8_t buff[32] = "Request denied.";
 800c85e:	4b22      	ldr	r3, [pc, #136]	; (800c8e8 <my_optiga_shell_begin+0x18c>)
 800c860:	950c      	str	r5, [sp, #48]	; 0x30
 800c862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					optiga_lib_print_bytes(buff, 32);
 800c868:	4620      	mov	r0, r4
 800c86a:	2120      	movs	r1, #32
					cooldowned = true;
				}
				else
				{
					// Just a wrong request
					uint8_t buff[32] = "Request denied.";
 800c86c:	950d      	str	r5, [sp, #52]	; 0x34
 800c86e:	950e      	str	r5, [sp, #56]	; 0x38
 800c870:	950f      	str	r5, [sp, #60]	; 0x3c
					optiga_lib_print_bytes(buff, 32);
 800c872:	f7fb f979 	bl	8007b68 <optiga_lib_print_bytes>
 800c876:	e77f      	b.n	800c778 <my_optiga_shell_begin+0x1c>
		if(0u == read_request(command, sec_unlocked, sec_comm))
		{
			req_type req_rcv;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800c878:	f8df c080 	ldr.w	ip, [pc, #128]	; 800c8fc <my_optiga_shell_begin+0x1a0>
 800c87c:	900d      	str	r0, [sp, #52]	; 0x34
 800c87e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c882:	46a6      	mov	lr, r4
 800c884:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c888:	f8dc 3000 	ldr.w	r3, [ip]
 800c88c:	950e      	str	r5, [sp, #56]	; 0x38
				optiga_lib_print_bytes(buff, 32);
 800c88e:	4620      	mov	r0, r4
 800c890:	2120      	movs	r1, #32
		if(0u == read_request(command, sec_unlocked, sec_comm))
		{
			req_type req_rcv;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800c892:	950f      	str	r5, [sp, #60]	; 0x3c
 800c894:	f8ce 3000 	str.w	r3, [lr]
				optiga_lib_print_bytes(buff, 32);
 800c898:	f7fb f966 	bl	8007b68 <optiga_lib_print_bytes>
 800c89c:	e76c      	b.n	800c778 <my_optiga_shell_begin+0x1c>
					break;
				}
				case UNKNOWN:
				default: // Unknown request
				{
					uint8_t buff[32] = "Unknown request";
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <my_optiga_shell_begin+0x190>)
 800c8a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c8a6:	2300      	movs	r3, #0
					write_request(buff, sec_comm);
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4631      	mov	r1, r6
					break;
				}
				case UNKNOWN:
				default: // Unknown request
				{
					uint8_t buff[32] = "Unknown request";
 800c8ac:	930c      	str	r3, [sp, #48]	; 0x30
 800c8ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c8b0:	930e      	str	r3, [sp, #56]	; 0x38
 800c8b2:	930f      	str	r3, [sp, #60]	; 0x3c
					write_request(buff, sec_comm);
 800c8b4:	f000 f8f0 	bl	800ca98 <write_request>
 800c8b8:	e75e      	b.n	800c778 <my_optiga_shell_begin+0x1c>
			// Req before unlock || invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800c8ba:	f8df e040 	ldr.w	lr, [pc, #64]	; 800c8fc <my_optiga_shell_begin+0x1a0>
 800c8be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c8c2:	4625      	mov	r5, r4
 800c8c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8c6:	f8de 3000 	ldr.w	r3, [lr]
 800c8ca:	602b      	str	r3, [r5, #0]
				optiga_lib_print_bytes(buff, 32);
 800c8cc:	4620      	mov	r0, r4
			// Req before unlock || invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800c8ce:	2300      	movs	r3, #0
				optiga_lib_print_bytes(buff, 32);
 800c8d0:	2120      	movs	r1, #32
			// Req before unlock || invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800c8d2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8d4:	930e      	str	r3, [sp, #56]	; 0x38
 800c8d6:	930f      	str	r3, [sp, #60]	; 0x3c
				optiga_lib_print_bytes(buff, 32);
 800c8d8:	f7fb f946 	bl	8007b68 <optiga_lib_print_bytes>
 800c8dc:	e74c      	b.n	800c778 <my_optiga_shell_begin+0x1c>
 800c8de:	bf00      	nop
 800c8e0:	0800de34 	.word	0x0800de34
 800c8e4:	0800de14 	.word	0x0800de14
 800c8e8:	0800de94 	.word	0x0800de94
 800c8ec:	0800de54 	.word	0x0800de54
 800c8f0:	1fff00cb 	.word	0x1fff00cb
 800c8f4:	1fff00ca 	.word	0x1fff00ca
 800c8f8:	0800de74 	.word	0x0800de74
 800c8fc:	0800ddf4 	.word	0x0800ddf4

0800c900 <optiga_util_read_nonce>:

#include "../SEMS_Headers/Util.h"


void optiga_util_read_nonce(uint16_t optiga_oid, uint8_t read_data_buffer[], uint16_t bytes_to_read)
{
 800c900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c902:	b085      	sub	sp, #20
 800c904:	4607      	mov	r7, r0
 800c906:	460e      	mov	r6, r1
 800c908:	f8ad 200e 	strh.w	r2, [sp, #14]
    uint16_t offset = 0x00;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;
    do
    {
        example_optiga_init();
 800c90c:	f7ff fc84 	bl	800c218 <example_optiga_init>

        me = optiga_util_create_wrapper();
 800c910:	f7ff febe 	bl	800c690 <optiga_util_create_wrapper>
        if (NULL == me)
 800c914:	b1f0      	cbz	r0, 800c954 <optiga_util_read_nonce+0x54>

        optiga_lib_status = OPTIGA_LIB_BUSY;



        return_status = optiga_util_read_data(me,
 800c916:	f10d 020e 	add.w	r2, sp, #14
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c91a:	4c10      	ldr	r4, [pc, #64]	; (800c95c <optiga_util_read_nonce+0x5c>)



        return_status = optiga_util_read_data(me,
 800c91c:	9200      	str	r2, [sp, #0]
 800c91e:	4633      	mov	r3, r6
 800c920:	4639      	mov	r1, r7
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c922:	2601      	movs	r6, #1



        return_status = optiga_util_read_data(me,
 800c924:	2200      	movs	r2, #0
 800c926:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c928:	8026      	strh	r6, [r4, #0]



        return_status = optiga_util_read_data(me,
 800c92a:	f7f8 fcd3 	bl	80052d4 <optiga_util_read_data>
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c92e:	b130      	cbz	r0, 800c93e <optiga_util_read_nonce+0x3e>

    } while (FALSE);

    example_optiga_deinit();
 800c930:	f7ff fca2 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
 800c934:	4628      	mov	r0, r5
 800c936:	f7f8 fc41 	bl	80051bc <optiga_util_destroy>
    }
}
 800c93a:	b005      	add	sp, #20
 800c93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c93e:	8823      	ldrh	r3, [r4, #0]
 800c940:	4a06      	ldr	r2, [pc, #24]	; (800c95c <optiga_util_read_nonce+0x5c>)
 800c942:	b29b      	uxth	r3, r3
 800c944:	2b01      	cmp	r3, #1
 800c946:	d0fa      	beq.n	800c93e <optiga_util_read_nonce+0x3e>
 800c948:	8813      	ldrh	r3, [r2, #0]
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d0ef      	beq.n	800c930 <optiga_util_read_nonce+0x30>
 800c950:	8813      	ldrh	r3, [r2, #0]
 800c952:	e7ed      	b.n	800c930 <optiga_util_read_nonce+0x30>

    } while (FALSE);

    example_optiga_deinit();
 800c954:	f7ff fc90 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
    }
}
 800c958:	b005      	add	sp, #20
 800c95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c95c:	1fff0802 	.word	0x1fff0802

0800c960 <optiga_util_update_count_wrapper>:


void optiga_util_update_count_wrapper(uint16_t optiga_counter_oid, uint8_t ticks)
{
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	4607      	mov	r7, r0
 800c964:	460e      	mov	r6, r1
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;

    do
    {
        example_optiga_init();
 800c966:	f7ff fc57 	bl	800c218 <example_optiga_init>

        me = optiga_util_create_wrapper();
 800c96a:	f7ff fe91 	bl	800c690 <optiga_util_create_wrapper>
        if (NULL == me)
 800c96e:	b300      	cbz	r0, 800c9b2 <optiga_util_update_count_wrapper+0x52>
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c970:	4c12      	ldr	r4, [pc, #72]	; (800c9bc <optiga_util_update_count_wrapper+0x5c>)
 800c972:	2301      	movs	r3, #1
        return_status = optiga_util_update_count(me,
 800c974:	4639      	mov	r1, r7
 800c976:	4632      	mov	r2, r6
 800c978:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c97a:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_update_count(me,
 800c97c:	f7f8 fde2 	bl	8005544 <optiga_util_update_count>
                                                 optiga_counter_oid,
												 ticks);


        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c980:	b130      	cbz	r0, 800c990 <optiga_util_update_count_wrapper+0x30>

    } while (FALSE);

    example_optiga_deinit();
 800c982:	f7ff fc79 	bl	800c278 <example_optiga_deinit>


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c986:	4628      	mov	r0, r5

    }
}
 800c988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    example_optiga_deinit();


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c98c:	f7f8 bc16 	b.w	80051bc <optiga_util_destroy>
        return_status = optiga_util_update_count(me,
                                                 optiga_counter_oid,
												 ticks);


        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c990:	8823      	ldrh	r3, [r4, #0]
 800c992:	4a0a      	ldr	r2, [pc, #40]	; (800c9bc <optiga_util_update_count_wrapper+0x5c>)
 800c994:	b29b      	uxth	r3, r3
 800c996:	2b01      	cmp	r3, #1
 800c998:	d0fa      	beq.n	800c990 <optiga_util_update_count_wrapper+0x30>
 800c99a:	8813      	ldrh	r3, [r2, #0]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0ef      	beq.n	800c982 <optiga_util_update_count_wrapper+0x22>
 800c9a2:	8813      	ldrh	r3, [r2, #0]

    } while (FALSE);

    example_optiga_deinit();
 800c9a4:	f7ff fc68 	bl	800c278 <example_optiga_deinit>


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c9a8:	4628      	mov	r0, r5

    }
}
 800c9aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    example_optiga_deinit();


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c9ae:	f7f8 bc05 	b.w	80051bc <optiga_util_destroy>

    }
}
 800c9b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

    } while (FALSE);

    example_optiga_deinit();
 800c9b6:	f7ff bc5f 	b.w	800c278 <example_optiga_deinit>
 800c9ba:	bf00      	nop
 800c9bc:	1fff0802 	.word	0x1fff0802

0800c9c0 <read_request>:
extern pal_logger_t logger_console;
extern uint32_t user_token;


uint8_t read_request(uint8_t command[], uint8_t is_secure_unlock, uint8_t is_secure_com)
{
 800c9c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t is_invalid_req = false;


	if (0u == pal_logger_read(&logger_console, command, 32))
 800c9c2:	4601      	mov	r1, r0
extern pal_logger_t logger_console;
extern uint32_t user_token;


uint8_t read_request(uint8_t command[], uint8_t is_secure_unlock, uint8_t is_secure_com)
{
 800c9c4:	b092      	sub	sp, #72	; 0x48
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	4614      	mov	r4, r2
	uint8_t is_invalid_req = false;


	if (0u == pal_logger_read(&logger_console, command, 32))
 800c9ca:	4831      	ldr	r0, [pc, #196]	; (800ca90 <read_request+0xd0>)
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f7f8 fab3 	bl	8004f38 <pal_logger_read>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d146      	bne.n	800ca64 <read_request+0xa4>
	{
		if('U' == command[0])
 800c9d6:	782b      	ldrb	r3, [r5, #0]
 800c9d8:	2b55      	cmp	r3, #85	; 0x55
 800c9da:	d00f      	beq.n	800c9fc <read_request+0x3c>
			// nothing to do, sec unlock will be called

		}
		else
		{
			if (0u == is_secure_com)
 800c9dc:	b984      	cbnz	r4, 800ca00 <read_request+0x40>
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800c9de:	7c69      	ldrb	r1, [r5, #17]
			if (0u == is_secure_com)
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800c9e0:	7c2b      	ldrb	r3, [r5, #16]
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
 800c9e2:	7cac      	ldrb	r4, [r5, #18]
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800c9e4:	482b      	ldr	r0, [pc, #172]	; (800ca94 <read_request+0xd4>)
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);
 800c9e6:	7cea      	ldrb	r2, [r5, #19]

				if(received_user_token != user_token)
 800c9e8:	6800      	ldr	r0, [r0, #0]
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800c9ea:	0409      	lsls	r1, r1, #16
			if (0u == is_secure_com)
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800c9ec:	eb01 6303 	add.w	r3, r1, r3, lsl #24
							 (received_user_token_start[1] << 16u)+
 800c9f0:	eb03 2304 	add.w	r3, r3, r4, lsl #8
							 (received_user_token_start[2] <<  8u)+
 800c9f4:	4413      	add	r3, r2
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
				{
					is_invalid_req = true;
 800c9f6:	1a18      	subs	r0, r3, r0
 800c9f8:	bf18      	it	ne
 800c9fa:	2001      	movne	r0, #1
	else
	{
		is_invalid_req = true;
	}
	return is_invalid_req;
}
 800c9fc:	b012      	add	sp, #72	; 0x48
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}

				// Extract Hash
				received_digest_start = command + 24u;  // last 8 bytes of the SHA256(Ciphertext)

				// Calculate Hash
				optiga_crypt_hash_data_wrapper(command, 24u, calculated_digest); // SHA256(Ciphertext)
 800ca00:	4628      	mov	r0, r5
 800ca02:	2118      	movs	r1, #24
 800ca04:	aa0a      	add	r2, sp, #40	; 0x28
 800ca06:	f7ff fe79 	bl	800c6fc <optiga_crypt_hash_data_wrapper>

				// Compare digests
				if(0 != memcmp(received_digest_start, calculated_digest + 24u, 8u))  // compare 8 bytes
 800ca0a:	a910      	add	r1, sp, #64	; 0x40
 800ca0c:	2208      	movs	r2, #8
 800ca0e:	f105 0018 	add.w	r0, r5, #24
 800ca12:	f000 fdb3 	bl	800d57c <memcmp>
				{
					is_invalid_req = true;
				}

				// Retrive Session Key
				optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800ca16:	a902      	add	r1, sp, #8
 800ca18:	2220      	movs	r2, #32

				// Calculate Hash
				optiga_crypt_hash_data_wrapper(command, 24u, calculated_digest); // SHA256(Ciphertext)

				// Compare digests
				if(0 != memcmp(received_digest_start, calculated_digest + 24u, 8u))  // compare 8 bytes
 800ca1a:	4604      	mov	r4, r0
				{
					is_invalid_req = true;
				}

				// Retrive Session Key
				optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800ca1c:	f24f 10e0 	movw	r0, #61920	; 0xf1e0
 800ca20:	f000 f9a4 	bl	800cd6c <optiga_util_read_shared_key>

				// Decrypt ciphertext
				stream_enc(command, key, 24u);
 800ca24:	4628      	mov	r0, r5
 800ca26:	a902      	add	r1, sp, #8
 800ca28:	2218      	movs	r2, #24
 800ca2a:	f000 f9cf 	bl	800cdcc <stream_enc>

				// Extract Token

				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800ca2e:	7c6a      	ldrb	r2, [r5, #17]
				stream_enc(command, key, 24u);

				// Extract Token

				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800ca30:	7c2b      	ldrb	r3, [r5, #16]
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
 800ca32:	7cae      	ldrb	r6, [r5, #18]
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800ca34:	4817      	ldr	r0, [pc, #92]	; (800ca94 <read_request+0xd4>)

				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);
 800ca36:	7ce9      	ldrb	r1, [r5, #19]

				if(received_user_token != user_token)
 800ca38:	6800      	ldr	r0, [r0, #0]

				// Extract Token

				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800ca3a:	0412      	lsls	r2, r2, #16
				stream_enc(command, key, 24u);

				// Extract Token

				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800ca3c:	eb02 6203 	add.w	r2, r2, r3, lsl #24
							 (received_user_token_start[1] << 16u)+
 800ca40:	eb02 2306 	add.w	r3, r2, r6, lsl #8
							 (received_user_token_start[2] <<  8u)+
 800ca44:	440b      	add	r3, r1
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800ca46:	4283      	cmp	r3, r0
				// Extract Nonce
				received_user_nonce_start = command + 20u;


				// Read Nonce from Optiga
				optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800ca48:	a901      	add	r1, sp, #4
 800ca4a:	f24e 1020 	movw	r0, #57632	; 0xe120
 800ca4e:	f04f 0204 	mov.w	r2, #4
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800ca52:	d00a      	beq.n	800ca6a <read_request+0xaa>
				// Extract Nonce
				received_user_nonce_start = command + 20u;


				// Read Nonce from Optiga
				optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800ca54:	f7ff ff54 	bl	800c900 <optiga_util_read_nonce>

				// Compare Nonces
				// recv_nonced trebuie sa fie mai mare decat nonce
				// daca e mai mare sau egal, invalid
				if(0 >= memcmp(received_user_nonce_start, nonce, sizeof(nonce)))
 800ca58:	a901      	add	r1, sp, #4
 800ca5a:	f105 0014 	add.w	r0, r5, #20
 800ca5e:	2204      	movs	r2, #4
 800ca60:	f000 fd8c 	bl	800d57c <memcmp>
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
				{
					is_invalid_req = true;
 800ca64:	2001      	movs	r0, #1
	else
	{
		is_invalid_req = true;
	}
	return is_invalid_req;
}
 800ca66:	b012      	add	sp, #72	; 0x48
 800ca68:	bd70      	pop	{r4, r5, r6, pc}
				// Extract Nonce
				received_user_nonce_start = command + 20u;


				// Read Nonce from Optiga
				optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800ca6a:	f7ff ff49 	bl	800c900 <optiga_util_read_nonce>

				// Compare Nonces
				// recv_nonced trebuie sa fie mai mare decat nonce
				// daca e mai mare sau egal, invalid
				if(0 >= memcmp(received_user_nonce_start, nonce, sizeof(nonce)))
 800ca6e:	a901      	add	r1, sp, #4
 800ca70:	f105 0014 	add.w	r0, r5, #20
 800ca74:	2204      	movs	r2, #4
 800ca76:	f000 fd81 	bl	800d57c <memcmp>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	ddf2      	ble.n	800ca64 <read_request+0xa4>
				{
					is_invalid_req = true;
				}

				if(false == is_invalid_req)
 800ca7e:	2c00      	cmp	r4, #0
 800ca80:	d1f0      	bne.n	800ca64 <read_request+0xa4>
				{
					optiga_util_update_count_wrapper(optiga_counter_oid, 1u);
 800ca82:	f24e 1020 	movw	r0, #57632	; 0xe120
 800ca86:	2101      	movs	r1, #1
 800ca88:	f7ff ff6a 	bl	800c960 <optiga_util_update_count_wrapper>
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	e7b5      	b.n	800c9fc <read_request+0x3c>
 800ca90:	1ffed1b4 	.word	0x1ffed1b4
 800ca94:	1fff0168 	.word	0x1fff0168

0800ca98 <write_request>:




uint8_t write_request(uint8_t msg[], uint8_t is_secure_com)
{
 800ca98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	b09b      	sub	sp, #108	; 0x6c
	if(0u == is_secure_com)
 800ca9e:	2900      	cmp	r1, #0
 800caa0:	d037      	beq.n	800cb12 <write_request+0x7a>
		uint16_t optiga_counter_oid = 0xE120u;



		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800caa2:	a901      	add	r1, sp, #4
 800caa4:	f24e 1020 	movw	r0, #57632	; 0xe120
 800caa8:	2204      	movs	r2, #4
 800caaa:	f7ff ff29 	bl	800c900 <optiga_util_read_nonce>

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800caae:	4b26      	ldr	r3, [pc, #152]	; (800cb48 <write_request+0xb0>)
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;


		// First Pack
		memcpy(response, msg, 16u);
 800cab0:	6820      	ldr	r0, [r4, #0]


		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cab2:	681d      	ldr	r5, [r3, #0]
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;


		// First Pack
		memcpy(response, msg, 16u);
 800cab4:	6861      	ldr	r1, [r4, #4]
 800cab6:	68a2      	ldr	r2, [r4, #8]
 800cab8:	68e3      	ldr	r3, [r4, #12]
		memcpy(response + 16u, send_user_token, 4u);  // global
		memcpy(response + 20u, nonce, 4u);
 800caba:	9e01      	ldr	r6, [sp, #4]
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;


		// First Pack
		memcpy(response, msg, 16u);
 800cabc:	ac02      	add	r4, sp, #8
 800cabe:	c40f      	stmia	r4!, {r0, r1, r2, r3}


		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cac0:	0e2f      	lsrs	r7, r5, #24
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cac2:	0a2b      	lsrs	r3, r5, #8
		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);  // global
		memcpy(response + 20u, nonce, 4u);

		// Retrive Session Key
		optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800cac4:	a912      	add	r1, sp, #72	; 0x48

		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cac6:	0c2c      	lsrs	r4, r5, #16
		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);  // global
		memcpy(response + 20u, nonce, 4u);

		// Retrive Session Key
		optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800cac8:	f24f 10e0 	movw	r0, #61920	; 0xf1e0
 800cacc:	2220      	movs	r2, #32
		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cace:	f88d 301a 	strb.w	r3, [sp, #26]


		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cad2:	f88d 7018 	strb.w	r7, [sp, #24]
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;
 800cad6:	f88d 501b 	strb.w	r5, [sp, #27]

		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cada:	f88d 4019 	strb.w	r4, [sp, #25]


		// First Pack
		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);  // global
		memcpy(response + 20u, nonce, 4u);
 800cade:	9607      	str	r6, [sp, #28]

		// Retrive Session Key
		optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800cae0:	f000 f944 	bl	800cd6c <optiga_util_read_shared_key>

		// Encrypt ciphertext
		stream_enc(response, key, 24u);
 800cae4:	a802      	add	r0, sp, #8
 800cae6:	a912      	add	r1, sp, #72	; 0x48
 800cae8:	2218      	movs	r2, #24
 800caea:	f000 f96f 	bl	800cdcc <stream_enc>

		// Calculate Hash
		optiga_crypt_hash_data_wrapper(response, 24u, calculated_digest); // SHA256(Ciphertext)
 800caee:	a802      	add	r0, sp, #8
 800caf0:	aa0a      	add	r2, sp, #40	; 0x28
 800caf2:	2118      	movs	r1, #24
 800caf4:	f7ff fe02 	bl	800c6fc <optiga_crypt_hash_data_wrapper>

		// Pack the message
		memcpy(response + 24u, calculated_digest + 24u, 8u);
 800caf8:	ab10      	add	r3, sp, #64	; 0x40
 800cafa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cafe:	ab08      	add	r3, sp, #32
 800cb00:	e883 0003 	stmia.w	r3, {r0, r1}

		optiga_lib_print_bytes(response, 32u);
 800cb04:	a802      	add	r0, sp, #8
 800cb06:	2120      	movs	r1, #32
 800cb08:	f7fb f82e 	bl	8007b68 <optiga_lib_print_bytes>
	}

	return true;
}
 800cb0c:	2001      	movs	r0, #1
 800cb0e:	b01b      	add	sp, #108	; 0x6c
 800cb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb12:	4b0d      	ldr	r3, [pc, #52]	; (800cb48 <write_request+0xb0>)
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
 800cb14:	6861      	ldr	r1, [r4, #4]
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb16:	681d      	ldr	r5, [r3, #0]
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
 800cb18:	68a2      	ldr	r2, [r4, #8]
 800cb1a:	68e3      	ldr	r3, [r4, #12]
 800cb1c:	6800      	ldr	r0, [r0, #0]
 800cb1e:	ac12      	add	r4, sp, #72	; 0x48
 800cb20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb22:	0e2e      	lsrs	r6, r5, #24
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cb24:	0c2a      	lsrs	r2, r5, #16
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);

		optiga_lib_print_bytes(response, 32u);
 800cb26:	a812      	add	r0, sp, #72	; 0x48
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cb28:	0a2b      	lsrs	r3, r5, #8
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);

		optiga_lib_print_bytes(response, 32u);
 800cb2a:	2120      	movs	r1, #32
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb2c:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
				send_user_token[3] = (user_token >>  0u) & 0xFFu;
 800cb30:	f88d 505b 	strb.w	r5, [sp, #91]	; 0x5b
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cb34:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cb38:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);

		optiga_lib_print_bytes(response, 32u);
 800cb3c:	f7fb f814 	bl	8007b68 <optiga_lib_print_bytes>

		optiga_lib_print_bytes(response, 32u);
	}

	return true;
}
 800cb40:	2001      	movs	r0, #1
 800cb42:	b01b      	add	sp, #108	; 0x6c
 800cb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb46:	bf00      	nop
 800cb48:	1fff0168 	.word	0x1fff0168

0800cb4c <optiga_crypt_rsa_encrypt_message_wrapper>:
static uint8_t rsa_public_key[150] = {0x00};
static uint16_t rsa_public_key_length = 0;


void optiga_crypt_rsa_encrypt_message_wrapper(uint8_t message[], uint8_t message_length, uint8_t encrypted_message[], uint16_t* encrypted_message_length)
{
 800cb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	b089      	sub	sp, #36	; 0x24
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cb52:	4d24      	ldr	r5, [pc, #144]	; (800cbe4 <optiga_crypt_rsa_encrypt_message_wrapper+0x98>)
 800cb54:	4e24      	ldr	r6, [pc, #144]	; (800cbe8 <optiga_crypt_rsa_encrypt_message_wrapper+0x9c>)
 800cb56:	9500      	str	r5, [sp, #0]
static uint8_t rsa_public_key[150] = {0x00};
static uint16_t rsa_public_key_length = 0;


void optiga_crypt_rsa_encrypt_message_wrapper(uint8_t message[], uint8_t message_length, uint8_t encrypted_message[], uint16_t* encrypted_message_length)
{
 800cb58:	4680      	mov	r8, r0
 800cb5a:	460f      	mov	r7, r1
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cb5c:	4823      	ldr	r0, [pc, #140]	; (800cbec <optiga_crypt_rsa_encrypt_message_wrapper+0xa0>)
 800cb5e:	9601      	str	r6, [sp, #4]
 800cb60:	2180      	movs	r1, #128	; 0x80
static uint8_t rsa_public_key[150] = {0x00};
static uint16_t rsa_public_key_length = 0;


void optiga_crypt_rsa_encrypt_message_wrapper(uint8_t message[], uint8_t message_length, uint8_t encrypted_message[], uint16_t* encrypted_message_length)
{
 800cb62:	4692      	mov	sl, r2
 800cb64:	4699      	mov	r9, r3
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cb66:	4a22      	ldr	r2, [pc, #136]	; (800cbf0 <optiga_crypt_rsa_encrypt_message_wrapper+0xa4>)

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
	public_key_from_host.length = rsa_public_key_length;
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
	optiga_lib_status = OPTIGA_LIB_BUSY;
 800cb68:	4c22      	ldr	r4, [pc, #136]	; (800cbf4 <optiga_crypt_rsa_encrypt_message_wrapper+0xa8>)
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cb6a:	2304      	movs	r3, #4
 800cb6c:	f7ff fc64 	bl	800c438 <example_util_encode_rsa_public_key_in_bit_string_format>
                                                               rsa_public_key,
                                                               &rsa_public_key_length);

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
	public_key_from_host.length = rsa_public_key_length;
 800cb70:	8833      	ldrh	r3, [r6, #0]
 800cb72:	f8ad 301c 	strh.w	r3, [sp, #28]
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
	optiga_lib_status = OPTIGA_LIB_BUSY;
 800cb76:	f04f 0b01 	mov.w	fp, #1
                                                               &rsa_public_key_length);

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
	public_key_from_host.length = rsa_public_key_length;
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
 800cb7a:	2341      	movs	r3, #65	; 0x41
 800cb7c:	f88d 301e 	strb.w	r3, [sp, #30]
                                                               sizeof(rsa_public_key_exponent),
                                                               rsa_public_key,
                                                               &rsa_public_key_length);

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
 800cb80:	9506      	str	r5, [sp, #24]
	public_key_from_host.length = rsa_public_key_length;
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
	optiga_lib_status = OPTIGA_LIB_BUSY;
 800cb82:	f8a4 b000 	strh.w	fp, [r4]


    do
    {
        example_optiga_init();
 800cb86:	f7ff fb47 	bl	800c218 <example_optiga_init>

        me = optiga_crypt_create_wrapper();
 800cb8a:	f7ff fd71 	bl	800c670 <optiga_crypt_create_wrapper>
        if (NULL == me)
 800cb8e:	b320      	cbz	r0, 800cbda <optiga_crypt_rsa_encrypt_message_wrapper+0x8e>
        {
            break;
        }

        return_status = optiga_crypt_rsa_encrypt_message(me,
 800cb90:	2100      	movs	r1, #0
 800cb92:	ae06      	add	r6, sp, #24
 800cb94:	9100      	str	r1, [sp, #0]
 800cb96:	9101      	str	r1, [sp, #4]
 800cb98:	f8cd b008 	str.w	fp, [sp, #8]
 800cb9c:	f8cd a010 	str.w	sl, [sp, #16]
 800cba0:	f8cd 9014 	str.w	r9, [sp, #20]
 800cba4:	4642      	mov	r2, r8
 800cba6:	463b      	mov	r3, r7
 800cba8:	9603      	str	r6, [sp, #12]
 800cbaa:	2111      	movs	r1, #17
 800cbac:	4605      	mov	r5, r0
 800cbae:	f7f8 fe4b 	bl	8005848 <optiga_crypt_rsa_encrypt_message>
                                                            OPTIGA_CRYPT_HOST_DATA,
                                                            &public_key_from_host,
                                                            encrypted_message,
                                                            encrypted_message_length);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cbb2:	b138      	cbz	r0, 800cbc4 <optiga_crypt_rsa_encrypt_message_wrapper+0x78>


    } while (FALSE);

    example_optiga_deinit();
 800cbb4:	f7ff fb60 	bl	800c278 <example_optiga_deinit>


    if (NULL != me)
    {
       optiga_crypt_destroy(me);
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f7f8 fd47 	bl	800564c <optiga_crypt_destroy>
    }
}
 800cbbe:	b009      	add	sp, #36	; 0x24
 800cbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                                            OPTIGA_CRYPT_HOST_DATA,
                                                            &public_key_from_host,
                                                            encrypted_message,
                                                            encrypted_message_length);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cbc4:	8823      	ldrh	r3, [r4, #0]
 800cbc6:	4a0b      	ldr	r2, [pc, #44]	; (800cbf4 <optiga_crypt_rsa_encrypt_message_wrapper+0xa8>)
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d0fa      	beq.n	800cbc4 <optiga_crypt_rsa_encrypt_message_wrapper+0x78>
 800cbce:	8813      	ldrh	r3, [r2, #0]
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d0ee      	beq.n	800cbb4 <optiga_crypt_rsa_encrypt_message_wrapper+0x68>
 800cbd6:	8813      	ldrh	r3, [r2, #0]
 800cbd8:	e7ec      	b.n	800cbb4 <optiga_crypt_rsa_encrypt_message_wrapper+0x68>


    } while (FALSE);

    example_optiga_deinit();
 800cbda:	f7ff fb4d 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
       optiga_crypt_destroy(me);
    }
}
 800cbde:	b009      	add	sp, #36	; 0x24
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	1fff00cc 	.word	0x1fff00cc
 800cbe8:	1fff0164 	.word	0x1fff0164
 800cbec:	0800deb8 	.word	0x0800deb8
 800cbf0:	0800deb4 	.word	0x0800deb4
 800cbf4:	1fff0802 	.word	0x1fff0802

0800cbf8 <optiga_crypt_rsa_verify_wrapper>:




uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
 800cbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_crypt_t * me = NULL;


    // Form rsa public key in bit string format
    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cbfc:	4c25      	ldr	r4, [pc, #148]	; (800cc94 <optiga_crypt_rsa_verify_wrapper+0x9c>)
 800cbfe:	4d26      	ldr	r5, [pc, #152]	; (800cc98 <optiga_crypt_rsa_verify_wrapper+0xa0>)




uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
 800cc00:	b090      	sub	sp, #64	; 0x40
 800cc02:	4616      	mov	r6, r2
	uint8_t success = false;
	uint8_t hashed_digest[32];

	optiga_crypt_hash_data_wrapper(message, message_length, hashed_digest);
 800cc04:	aa08      	add	r2, sp, #32




uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
 800cc06:	4698      	mov	r8, r3
	uint8_t success = false;
	uint8_t hashed_digest[32];

	optiga_crypt_hash_data_wrapper(message, message_length, hashed_digest);
 800cc08:	f7ff fd78 	bl	800c6fc <optiga_crypt_hash_data_wrapper>
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_crypt_t * me = NULL;


    // Form rsa public key in bit string format
    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cc0c:	4823      	ldr	r0, [pc, #140]	; (800cc9c <optiga_crypt_rsa_verify_wrapper+0xa4>)
 800cc0e:	4a24      	ldr	r2, [pc, #144]	; (800cca0 <optiga_crypt_rsa_verify_wrapper+0xa8>)
 800cc10:	2180      	movs	r1, #128	; 0x80
 800cc12:	2304      	movs	r3, #4
 800cc14:	e88d 0030 	stmia.w	sp, {r4, r5}
 800cc18:	f7ff fc0e 	bl	800c438 <example_util_encode_rsa_public_key_in_bit_string_format>
                                                       rsa_public_key_exponent,
                                                       sizeof(rsa_public_key_exponent),
                                                       rsa_public_key,
                                                       &rsa_public_key_length);

    public_key_from_host_t public_key_details =
 800cc1c:	882b      	ldrh	r3, [r5, #0]
 800cc1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cc22:	2341      	movs	r3, #65	; 0x41
 800cc24:	f88d 301e 	strb.w	r3, [sp, #30]
 800cc28:	9406      	str	r4, [sp, #24]
    };

    do
    {

        example_optiga_init();
 800cc2a:	f7ff faf5 	bl	800c218 <example_optiga_init>

        me = optiga_crypt_create_wrapper();
 800cc2e:	f7ff fd1f 	bl	800c670 <optiga_crypt_create_wrapper>
        if (NULL == me)
 800cc32:	4607      	mov	r7, r0
 800cc34:	b320      	cbz	r0, 800cc80 <optiga_crypt_rsa_verify_wrapper+0x88>
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cc36:	4c1b      	ldr	r4, [pc, #108]	; (800cca4 <optiga_crypt_rsa_verify_wrapper+0xac>)


        return_status = optiga_crypt_rsa_verify (me,
 800cc38:	9600      	str	r6, [sp, #0]
 800cc3a:	ab06      	add	r3, sp, #24
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cc3c:	2601      	movs	r6, #1


        return_status = optiga_crypt_rsa_verify (me,
 800cc3e:	2500      	movs	r5, #0
 800cc40:	9303      	str	r3, [sp, #12]
 800cc42:	f8cd 8004 	str.w	r8, [sp, #4]
 800cc46:	9602      	str	r6, [sp, #8]
 800cc48:	9504      	str	r5, [sp, #16]
 800cc4a:	aa08      	add	r2, sp, #32
 800cc4c:	4631      	mov	r1, r6
 800cc4e:	2320      	movs	r3, #32
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cc50:	8026      	strh	r6, [r4, #0]


        return_status = optiga_crypt_rsa_verify (me,
 800cc52:	f7f8 fda5 	bl	80057a0 <optiga_crypt_rsa_verify>
												 signature_length,
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &public_key_details,
                                                 0x0000);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cc56:	b148      	cbz	r0, 800cc6c <optiga_crypt_rsa_verify_wrapper+0x74>



uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
	uint8_t success = false;
 800cc58:	2400      	movs	r4, #0
        	success = true;
        }

    } while (FALSE);

    example_optiga_deinit();
 800cc5a:	f7ff fb0d 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
         optiga_crypt_destroy(me);
 800cc5e:	4638      	mov	r0, r7
 800cc60:	f7f8 fcf4 	bl	800564c <optiga_crypt_destroy>
    }

    return success;
}
 800cc64:	4620      	mov	r0, r4
 800cc66:	b010      	add	sp, #64	; 0x40
 800cc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
												 signature_length,
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &public_key_details,
                                                 0x0000);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cc6c:	8823      	ldrh	r3, [r4, #0]
 800cc6e:	4a0d      	ldr	r2, [pc, #52]	; (800cca4 <optiga_crypt_rsa_verify_wrapper+0xac>)
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d0fa      	beq.n	800cc6c <optiga_crypt_rsa_verify_wrapper+0x74>
 800cc76:	8813      	ldrh	r3, [r2, #0]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	b143      	cbz	r3, 800cc8e <optiga_crypt_rsa_verify_wrapper+0x96>
 800cc7c:	8813      	ldrh	r3, [r2, #0]
 800cc7e:	e7eb      	b.n	800cc58 <optiga_crypt_rsa_verify_wrapper+0x60>
        	success = true;
        }

    } while (FALSE);

    example_optiga_deinit();
 800cc80:	f7ff fafa 	bl	800c278 <example_optiga_deinit>



uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
	uint8_t success = false;
 800cc84:	463c      	mov	r4, r7
    {
         optiga_crypt_destroy(me);
    }

    return success;
}
 800cc86:	4620      	mov	r0, r4
 800cc88:	b010      	add	sp, #64	; 0x40
 800cc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         * 0x0000 -> signature match
         * 0x082c -> signature doesn't match
         */
        if(0 == return_status)
        {
        	success = true;
 800cc8e:	2401      	movs	r4, #1
 800cc90:	e7e3      	b.n	800cc5a <optiga_crypt_rsa_verify_wrapper+0x62>
 800cc92:	bf00      	nop
 800cc94:	1fff00cc 	.word	0x1fff00cc
 800cc98:	1fff0164 	.word	0x1fff0164
 800cc9c:	0800deb8 	.word	0x0800deb8
 800cca0:	0800deb4 	.word	0x0800deb4
 800cca4:	1fff0802 	.word	0x1fff0802

0800cca8 <optiga_crypt_random_wrapper>:




void optiga_crypt_random_wrapper(uint8_t random_buff[], uint8_t size)
{
 800cca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccaa:	4607      	mov	r7, r0
 800ccac:	460e      	mov	r6, r1
	optiga_crypt_t * me = NULL;
	optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

	do
	{
		example_optiga_init();
 800ccae:	f7ff fab3 	bl	800c218 <example_optiga_init>

		me = optiga_crypt_create_wrapper();
 800ccb2:	f7ff fcdd 	bl	800c670 <optiga_crypt_create_wrapper>
		if (NULL == me)
 800ccb6:	b308      	cbz	r0, 800ccfc <optiga_crypt_random_wrapper+0x54>
		{
			break;
		}

		optiga_lib_status = OPTIGA_LIB_BUSY;
 800ccb8:	4c12      	ldr	r4, [pc, #72]	; (800cd04 <optiga_crypt_random_wrapper+0x5c>)
		return_status = optiga_crypt_random(me,
 800ccba:	4633      	mov	r3, r6
 800ccbc:	463a      	mov	r2, r7
		if (NULL == me)
		{
			break;
		}

		optiga_lib_status = OPTIGA_LIB_BUSY;
 800ccbe:	2601      	movs	r6, #1
		return_status = optiga_crypt_random(me,
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	4605      	mov	r5, r0
		if (NULL == me)
		{
			break;
		}

		optiga_lib_status = OPTIGA_LIB_BUSY;
 800ccc4:	8026      	strh	r6, [r4, #0]
		return_status = optiga_crypt_random(me,
 800ccc6:	f7f8 fcd9 	bl	800567c <optiga_crypt_random>
											OPTIGA_RNG_TYPE_TRNG,
											random_buff,
											size);

		WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800ccca:	b130      	cbz	r0, 800ccda <optiga_crypt_random_wrapper+0x32>

	} while (FALSE);

	example_optiga_deinit();
 800cccc:	f7ff fad4 	bl	800c278 <example_optiga_deinit>

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800ccd0:	4628      	mov	r0, r5
	}
}
 800ccd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	example_optiga_deinit();

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800ccd6:	f7f8 bcb9 	b.w	800564c <optiga_crypt_destroy>
		return_status = optiga_crypt_random(me,
											OPTIGA_RNG_TYPE_TRNG,
											random_buff,
											size);

		WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800ccda:	8823      	ldrh	r3, [r4, #0]
 800ccdc:	4a09      	ldr	r2, [pc, #36]	; (800cd04 <optiga_crypt_random_wrapper+0x5c>)
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d0fa      	beq.n	800ccda <optiga_crypt_random_wrapper+0x32>
 800cce4:	8813      	ldrh	r3, [r2, #0]
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0ef      	beq.n	800cccc <optiga_crypt_random_wrapper+0x24>
 800ccec:	8813      	ldrh	r3, [r2, #0]

	} while (FALSE);

	example_optiga_deinit();
 800ccee:	f7ff fac3 	bl	800c278 <example_optiga_deinit>

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800ccf2:	4628      	mov	r0, r5
	}
}
 800ccf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	example_optiga_deinit();

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800ccf8:	f7f8 bca8 	b.w	800564c <optiga_crypt_destroy>
	}
}
 800ccfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

	} while (FALSE);

	example_optiga_deinit();
 800cd00:	f7ff baba 	b.w	800c278 <example_optiga_deinit>
 800cd04:	1fff0802 	.word	0x1fff0802

0800cd08 <optiga_util_write_shared_key>:
#include "../SEMS_Headers/Constructor.h"



void optiga_util_write_shared_key(uint16_t optiga_oid, const uint8_t key[], uint16_t bytes_to_write)
{
 800cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0c:	b082      	sub	sp, #8
 800cd0e:	4606      	mov	r6, r0
 800cd10:	4688      	mov	r8, r1
 800cd12:	4617      	mov	r7, r2
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;

    do
    {
        example_optiga_init();
 800cd14:	f7ff fa80 	bl	800c218 <example_optiga_init>


        me = optiga_util_create_wrapper();
 800cd18:	f7ff fcba 	bl	800c690 <optiga_util_create_wrapper>
        if (NULL == me)
 800cd1c:	b1f8      	cbz	r0, 800cd5e <optiga_util_write_shared_key+0x56>
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cd1e:	4c12      	ldr	r4, [pc, #72]	; (800cd68 <optiga_util_write_shared_key+0x60>)

        return_status = optiga_util_write_data(me,
 800cd20:	f8cd 8000 	str.w	r8, [sp]
 800cd24:	4631      	mov	r1, r6
 800cd26:	9701      	str	r7, [sp, #4]
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cd28:	2601      	movs	r6, #1

        return_status = optiga_util_write_data(me,
 800cd2a:	2240      	movs	r2, #64	; 0x40
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cd30:	8026      	strh	r6, [r4, #0]

        return_status = optiga_util_write_data(me,
 800cd32:	f7f8 fb69 	bl	8005408 <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               key,
											   bytes_to_write);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cd36:	b138      	cbz	r0, 800cd48 <optiga_util_write_shared_key+0x40>

    } while (FALSE);


    example_optiga_deinit();
 800cd38:	f7ff fa9e 	bl	800c278 <example_optiga_deinit>



    if (NULL != me)
    {
        optiga_util_destroy(me);
 800cd3c:	4628      	mov	r0, r5
    }
}
 800cd3e:	b002      	add	sp, #8
 800cd40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}



    if (NULL != me)
    {
        optiga_util_destroy(me);
 800cd44:	f7f8 ba3a 	b.w	80051bc <optiga_util_destroy>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               key,
											   bytes_to_write);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cd48:	8823      	ldrh	r3, [r4, #0]
 800cd4a:	4a07      	ldr	r2, [pc, #28]	; (800cd68 <optiga_util_write_shared_key+0x60>)
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d0fa      	beq.n	800cd48 <optiga_util_write_shared_key+0x40>
 800cd52:	8813      	ldrh	r3, [r2, #0]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0ee      	beq.n	800cd38 <optiga_util_write_shared_key+0x30>
 800cd5a:	8813      	ldrh	r3, [r2, #0]
 800cd5c:	e7ec      	b.n	800cd38 <optiga_util_write_shared_key+0x30>

    if (NULL != me)
    {
        optiga_util_destroy(me);
    }
}
 800cd5e:	b002      	add	sp, #8
 800cd60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

    } while (FALSE);


    example_optiga_deinit();
 800cd64:	f7ff ba88 	b.w	800c278 <example_optiga_deinit>
 800cd68:	1fff0802 	.word	0x1fff0802

0800cd6c <optiga_util_read_shared_key>:
    }
}


void optiga_util_read_shared_key(uint16_t optiga_oid, uint8_t read_data_buffer[], uint16_t bytes_to_read)
{
 800cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	4607      	mov	r7, r0
 800cd72:	460e      	mov	r6, r1
 800cd74:	f8ad 200e 	strh.w	r2, [sp, #14]
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;

    do
    {
        example_optiga_init();
 800cd78:	f7ff fa4e 	bl	800c218 <example_optiga_init>

        me = optiga_util_create_wrapper();
 800cd7c:	f7ff fc88 	bl	800c690 <optiga_util_create_wrapper>
        if (NULL == me)
 800cd80:	b1f0      	cbz	r0, 800cdc0 <optiga_util_read_shared_key+0x54>
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;

        return_status = optiga_util_read_data(me,
 800cd82:	f10d 020e 	add.w	r2, sp, #14
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cd86:	4c10      	ldr	r4, [pc, #64]	; (800cdc8 <optiga_util_read_shared_key+0x5c>)

        return_status = optiga_util_read_data(me,
 800cd88:	9200      	str	r2, [sp, #0]
 800cd8a:	4633      	mov	r3, r6
 800cd8c:	4639      	mov	r1, r7
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cd8e:	2601      	movs	r6, #1

        return_status = optiga_util_read_data(me,
 800cd90:	2200      	movs	r2, #0
 800cd92:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cd94:	8026      	strh	r6, [r4, #0]

        return_status = optiga_util_read_data(me,
 800cd96:	f7f8 fa9d 	bl	80052d4 <optiga_util_read_data>
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cd9a:	b130      	cbz	r0, 800cdaa <optiga_util_read_shared_key+0x3e>

    } while (FALSE);

    example_optiga_deinit();
 800cd9c:	f7ff fa6c 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
 800cda0:	4628      	mov	r0, r5
 800cda2:	f7f8 fa0b 	bl	80051bc <optiga_util_destroy>
    }
}
 800cda6:	b005      	add	sp, #20
 800cda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cdaa:	8823      	ldrh	r3, [r4, #0]
 800cdac:	4a06      	ldr	r2, [pc, #24]	; (800cdc8 <optiga_util_read_shared_key+0x5c>)
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d0fa      	beq.n	800cdaa <optiga_util_read_shared_key+0x3e>
 800cdb4:	8813      	ldrh	r3, [r2, #0]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0ef      	beq.n	800cd9c <optiga_util_read_shared_key+0x30>
 800cdbc:	8813      	ldrh	r3, [r2, #0]
 800cdbe:	e7ed      	b.n	800cd9c <optiga_util_read_shared_key+0x30>

    } while (FALSE);

    example_optiga_deinit();
 800cdc0:	f7ff fa5a 	bl	800c278 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
    }
}
 800cdc4:	b005      	add	sp, #20
 800cdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc8:	1fff0802 	.word	0x1fff0802

0800cdcc <stream_enc>:


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	d04c      	beq.n	800ce6a <stream_enc+0x9e>
 800cdd0:	1d03      	adds	r3, r0, #4

#include "../SEMS_Headers/Util.h"


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
 800cdd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd4:	1d0c      	adds	r4, r1, #4
 800cdd6:	42a0      	cmp	r0, r4
 800cdd8:	bf38      	it	cc
 800cdda:	4299      	cmpcc	r1, r3
 800cddc:	bf2c      	ite	cs
 800cdde:	2301      	movcs	r3, #1
 800cde0:	2300      	movcc	r3, #0
 800cde2:	2a06      	cmp	r2, #6
 800cde4:	bf94      	ite	ls
 800cde6:	2300      	movls	r3, #0
 800cde8:	f003 0301 	andhi.w	r3, r3, #1
 800cdec:	b383      	cbz	r3, 800ce50 <stream_enc+0x84>
 800cdee:	ea41 0300 	orr.w	r3, r1, r0
 800cdf2:	079b      	lsls	r3, r3, #30
 800cdf4:	d12c      	bne.n	800ce50 <stream_enc+0x84>
 800cdf6:	1f14      	subs	r4, r2, #4
 800cdf8:	08a4      	lsrs	r4, r4, #2
 800cdfa:	1e55      	subs	r5, r2, #1
 800cdfc:	3401      	adds	r4, #1
 800cdfe:	2d02      	cmp	r5, #2
 800ce00:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800ce04:	d922      	bls.n	800ce4c <stream_enc+0x80>
 800ce06:	f1a1 0c04 	sub.w	ip, r1, #4
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce0a:	4686      	mov	lr, r0
 800ce0c:	2600      	movs	r6, #0
    {
        r1[i] = r1[i] ^ r2[i];
 800ce0e:	f8de 7000 	ldr.w	r7, [lr]
 800ce12:	f85c 5f04 	ldr.w	r5, [ip, #4]!
 800ce16:	3601      	adds	r6, #1
 800ce18:	407d      	eors	r5, r7
 800ce1a:	42a6      	cmp	r6, r4
 800ce1c:	f84e 5b04 	str.w	r5, [lr], #4
 800ce20:	d3f5      	bcc.n	800ce0e <stream_enc+0x42>
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d01f      	beq.n	800ce66 <stream_enc+0x9a>
 800ce26:	5cce      	ldrb	r6, [r1, r3]
 800ce28:	5cc5      	ldrb	r5, [r0, r3]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce2a:	1c5c      	adds	r4, r3, #1
    {
        r1[i] = r1[i] ^ r2[i];
 800ce2c:	4075      	eors	r5, r6


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce2e:	4294      	cmp	r4, r2
    {
        r1[i] = r1[i] ^ r2[i];
 800ce30:	54c5      	strb	r5, [r0, r3]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce32:	d217      	bcs.n	800ce64 <stream_enc+0x98>
    {
        r1[i] = r1[i] ^ r2[i];
 800ce34:	5d0e      	ldrb	r6, [r1, r4]
 800ce36:	5d05      	ldrb	r5, [r0, r4]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce38:	3302      	adds	r3, #2
    {
        r1[i] = r1[i] ^ r2[i];
 800ce3a:	4075      	eors	r5, r6


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce3c:	429a      	cmp	r2, r3
    {
        r1[i] = r1[i] ^ r2[i];
 800ce3e:	5505      	strb	r5, [r0, r4]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce40:	d912      	bls.n	800ce68 <stream_enc+0x9c>
    {
        r1[i] = r1[i] ^ r2[i];
 800ce42:	5cc9      	ldrb	r1, [r1, r3]
 800ce44:	5cc2      	ldrb	r2, [r0, r3]
 800ce46:	404a      	eors	r2, r1
 800ce48:	54c2      	strb	r2, [r0, r3]
 800ce4a:	bdf0      	pop	{r4, r5, r6, r7, pc}


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	e7ea      	b.n	800ce26 <stream_enc+0x5a>
 800ce50:	4402      	add	r2, r0
 800ce52:	3901      	subs	r1, #1
    {
        r1[i] = r1[i] ^ r2[i];
 800ce54:	7804      	ldrb	r4, [r0, #0]
 800ce56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce5a:	4063      	eors	r3, r4
 800ce5c:	f800 3b01 	strb.w	r3, [r0], #1


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800ce60:	4290      	cmp	r0, r2
 800ce62:	d1f7      	bne.n	800ce54 <stream_enc+0x88>
 800ce64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce6a:	4770      	bx	lr

0800ce6c <start_cooldown_timer>:
extern volatile uint8_t failed_req;
extern volatile uint8_t cooldowned;


void start_cooldown_timer(void)
{
 800ce6c:	b510      	push	{r4, lr}
	uint32_t timeout = TIMEOUT_IN_SECONDS * 100u * 1000u * 1000u ; // us
	TIMER_SetTimeInterval(&TIMER_Cooldwon, timeout);
 800ce6e:	4c05      	ldr	r4, [pc, #20]	; (800ce84 <start_cooldown_timer+0x18>)
 800ce70:	4905      	ldr	r1, [pc, #20]	; (800ce88 <start_cooldown_timer+0x1c>)
 800ce72:	4620      	mov	r0, r4
 800ce74:	f7f6 fe3c 	bl	8003af0 <TIMER_SetTimeInterval>
	TIMER_Start(&TIMER_Cooldwon);
 800ce78:	4620      	mov	r0, r4
}
 800ce7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void start_cooldown_timer(void)
{
	uint32_t timeout = TIMEOUT_IN_SECONDS * 100u * 1000u * 1000u ; // us
	TIMER_SetTimeInterval(&TIMER_Cooldwon, timeout);
	TIMER_Start(&TIMER_Cooldwon);
 800ce7e:	f7f6 bdff 	b.w	8003a80 <TIMER_Start>
 800ce82:	bf00      	nop
 800ce84:	1ffed0d0 	.word	0x1ffed0d0
 800ce88:	05f5e100 	.word	0x05f5e100

0800ce8c <CCU80_3_IRQHandler>:
}


void TimerInterval_ISR(void)
{
	if(failed_req > 0u)
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <CCU80_3_IRQHandler+0x1c>)
 800ce8e:	781a      	ldrb	r2, [r3, #0]
 800ce90:	b11a      	cbz	r2, 800ce9a <CCU80_3_IRQHandler+0xe>
	{
		failed_req--;
 800ce92:	781a      	ldrb	r2, [r3, #0]
 800ce94:	3a01      	subs	r2, #1
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	701a      	strb	r2, [r3, #0]
	}

	if(failed_req == 0u)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cea0:	b90b      	cbnz	r3, 800cea6 <CCU80_3_IRQHandler+0x1a>
	{
		cooldowned = false;
 800cea2:	4b02      	ldr	r3, [pc, #8]	; (800ceac <CCU80_3_IRQHandler+0x20>)
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	4770      	bx	lr
 800cea8:	1fff00ca 	.word	0x1fff00ca
 800ceac:	1fff00cb 	.word	0x1fff00cb

0800ceb0 <secure_unlock>:

uint32_t user_token = 0;


uint8_t secure_unlock(void)
{
 800ceb0:	b530      	push	{r4, r5, lr}
 800ceb2:	b0ab      	sub	sp, #172	; 0xac
    uint8_t signature[128];

    uint8_t success = false;

	// Generate random number using Optiga
	optiga_crypt_random_wrapper(random_buf, 32u);
 800ceb4:	a802      	add	r0, sp, #8
 800ceb6:	2120      	movs	r1, #32
 800ceb8:	f7ff fef6 	bl	800cca8 <optiga_crypt_random_wrapper>

	// Send seed to App
	optiga_lib_print_bytes(random_buf, 32u);
 800cebc:	a802      	add	r0, sp, #8
 800cebe:	2120      	movs	r1, #32
 800cec0:	f7fa fe52 	bl	8007b68 <optiga_lib_print_bytes>


	// Receive signature
	if (0u == pal_logger_read(&logger_console, (uint8_t *)signature, 128u))
 800cec4:	a90a      	add	r1, sp, #40	; 0x28
 800cec6:	481b      	ldr	r0, [pc, #108]	; (800cf34 <secure_unlock+0x84>)
 800cec8:	2280      	movs	r2, #128	; 0x80
 800ceca:	f7f8 f835 	bl	8004f38 <pal_logger_read>
 800cece:	b118      	cbz	r0, 800ced8 <secure_unlock+0x28>
uint8_t secure_unlock(void)
{
    uint8_t random_buf[32];
    uint8_t signature[128];

    uint8_t success = false;
 800ced0:	2400      	movs	r4, #0
		// Send response
		optiga_lib_print_bytes(response, 5u);
	}

	return success;
}
 800ced2:	4620      	mov	r0, r4
 800ced4:	b02b      	add	sp, #172	; 0xac
 800ced6:	bd30      	pop	{r4, r5, pc}


	// Receive signature
	if (0u == pal_logger_read(&logger_console, (uint8_t *)signature, 128u))
	{
	    uint8_t response[1 + 4] = {0x00, 0x01, 0x02, 0x03, 0x04};
 800ced8:	4b17      	ldr	r3, [pc, #92]	; (800cf38 <secure_unlock+0x88>)
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	791b      	ldrb	r3, [r3, #4]
 800cede:	9000      	str	r0, [sp, #0]
 800cee0:	f88d 3004 	strb.w	r3, [sp, #4]
		// Compare enc and enc'
		success = optiga_crypt_rsa_verify_wrapper(random_buf, sizeof(random_buf), signature, sizeof(signature));
 800cee4:	aa0a      	add	r2, sp, #40	; 0x28
 800cee6:	a802      	add	r0, sp, #8
 800cee8:	2120      	movs	r1, #32
 800ceea:	2380      	movs	r3, #128	; 0x80
 800ceec:	f7ff fe84 	bl	800cbf8 <optiga_crypt_rsa_verify_wrapper>
		if(success)
 800cef0:	4604      	mov	r4, r0
 800cef2:	b930      	cbnz	r0, 800cf02 <secure_unlock+0x52>
						 (response[3] <<  8u)+
						 (response[4] <<  0u);

		}
		// Send response
		optiga_lib_print_bytes(response, 5u);
 800cef4:	4668      	mov	r0, sp
 800cef6:	2105      	movs	r1, #5
 800cef8:	f7fa fe36 	bl	8007b68 <optiga_lib_print_bytes>
	}

	return success;
}
 800cefc:	4620      	mov	r0, r4
 800cefe:	b02b      	add	sp, #172	; 0xac
 800cf00:	bd30      	pop	{r4, r5, pc}
		{

			// Assign response
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6
 800cf02:	f10d 0001 	add.w	r0, sp, #1
 800cf06:	2108      	movs	r1, #8
		success = optiga_crypt_rsa_verify_wrapper(random_buf, sizeof(random_buf), signature, sizeof(signature));
		if(success)
		{

			// Assign response
			response[0] = success;
 800cf08:	f88d 4000 	strb.w	r4, [sp]
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6
 800cf0c:	f7ff fecc 	bl	800cca8 <optiga_crypt_random_wrapper>

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
						 (response[2] << 16u)+
 800cf10:	f89d 2002 	ldrb.w	r2, [sp, #2]
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800cf14:	f89d 3001 	ldrb.w	r3, [sp, #1]
						 (response[2] << 16u)+
						 (response[3] <<  8u)+
 800cf18:	f89d 5003 	ldrb.w	r5, [sp, #3]
						 (response[4] <<  0u);
 800cf1c:	f89d 1004 	ldrb.w	r1, [sp, #4]
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800cf20:	4806      	ldr	r0, [pc, #24]	; (800cf3c <secure_unlock+0x8c>)
						 (response[2] << 16u)+
 800cf22:	0412      	lsls	r2, r2, #16
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800cf24:	eb02 6203 	add.w	r2, r2, r3, lsl #24
						 (response[2] << 16u)+
 800cf28:	eb02 2305 	add.w	r3, r2, r5, lsl #8
						 (response[3] <<  8u)+
 800cf2c:	440b      	add	r3, r1
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800cf2e:	6003      	str	r3, [r0, #0]
 800cf30:	e7e0      	b.n	800cef4 <secure_unlock+0x44>
 800cf32:	bf00      	nop
 800cf34:	1ffed1b4 	.word	0x1ffed1b4
 800cf38:	0800df38 	.word	0x0800df38
 800cf3c:	1fff0168 	.word	0x1fff0168

0800cf40 <main>:

extern pal_logger_t logger_console;


int main(void)
{
 800cf40:	b508      	push	{r3, lr}
    DAVE_STATUS_t status;
    uint8_t return_value = 0;

    // Initialization of DAVE Apps
    status = DAVE_Init(); /* Initialization of DAVE APPs  */
 800cf42:	f7f7 fd05 	bl	8004950 <DAVE_Init>
    if (status == DAVE_STATUS_FAILURE)
 800cf46:	2801      	cmp	r0, #1
 800cf48:	d005      	beq.n	800cf56 <main+0x16>
    }


    do
    {
        if(PAL_STATUS_SUCCESS != pal_logger_init(&logger_console))
 800cf4a:	4806      	ldr	r0, [pc, #24]	; (800cf64 <main+0x24>)
 800cf4c:	f7f7 ffc4 	bl	8004ed8 <pal_logger_init>
 800cf50:	b110      	cbz	r0, 800cf58 <main+0x18>
        my_optiga_shell_begin();

    }while (FALSE);

    return return_value;
}
 800cf52:	2000      	movs	r0, #0
 800cf54:	bd08      	pop	{r3, pc}
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while (1U)
        {

        }
 800cf56:	e7fe      	b.n	800cf56 <main+0x16>
        if(PAL_STATUS_SUCCESS != pal_logger_init(&logger_console))
        {
            break;
        }

        pal_os_timer_delay_in_milliseconds(100);
 800cf58:	2064      	movs	r0, #100	; 0x64
 800cf5a:	f7f8 f8eb 	bl	8005134 <pal_os_timer_delay_in_milliseconds>
        my_optiga_shell_begin();
 800cf5e:	f7ff fbfd 	bl	800c75c <my_optiga_shell_begin>
 800cf62:	e7f6      	b.n	800cf52 <main+0x12>
 800cf64:	1ffed1b4 	.word	0x1ffed1b4

0800cf68 <__aeabi_uldivmod>:
 800cf68:	b94b      	cbnz	r3, 800cf7e <__aeabi_uldivmod+0x16>
 800cf6a:	b942      	cbnz	r2, 800cf7e <__aeabi_uldivmod+0x16>
 800cf6c:	2900      	cmp	r1, #0
 800cf6e:	bf08      	it	eq
 800cf70:	2800      	cmpeq	r0, #0
 800cf72:	d002      	beq.n	800cf7a <__aeabi_uldivmod+0x12>
 800cf74:	f04f 31ff 	mov.w	r1, #4294967295
 800cf78:	4608      	mov	r0, r1
 800cf7a:	f000 b83b 	b.w	800cff4 <__aeabi_idiv0>
 800cf7e:	b082      	sub	sp, #8
 800cf80:	46ec      	mov	ip, sp
 800cf82:	e92d 5000 	stmdb	sp!, {ip, lr}
 800cf86:	f000 f81d 	bl	800cfc4 <__gnu_uldivmod_helper>
 800cf8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800cf8e:	b002      	add	sp, #8
 800cf90:	bc0c      	pop	{r2, r3}
 800cf92:	4770      	bx	lr

0800cf94 <__gnu_ldivmod_helper>:
 800cf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf98:	9c06      	ldr	r4, [sp, #24]
 800cf9a:	4615      	mov	r5, r2
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	460f      	mov	r7, r1
 800cfa0:	4698      	mov	r8, r3
 800cfa2:	f000 f829 	bl	800cff8 <__divdi3>
 800cfa6:	fb05 f301 	mul.w	r3, r5, r1
 800cfaa:	fb00 3808 	mla	r8, r0, r8, r3
 800cfae:	fba5 2300 	umull	r2, r3, r5, r0
 800cfb2:	1ab2      	subs	r2, r6, r2
 800cfb4:	4443      	add	r3, r8
 800cfb6:	eb67 0303 	sbc.w	r3, r7, r3
 800cfba:	e9c4 2300 	strd	r2, r3, [r4]
 800cfbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc2:	bf00      	nop

0800cfc4 <__gnu_uldivmod_helper>:
 800cfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc8:	9c06      	ldr	r4, [sp, #24]
 800cfca:	4690      	mov	r8, r2
 800cfcc:	4606      	mov	r6, r0
 800cfce:	460f      	mov	r7, r1
 800cfd0:	461d      	mov	r5, r3
 800cfd2:	f000 f95f 	bl	800d294 <__udivdi3>
 800cfd6:	fb00 f505 	mul.w	r5, r0, r5
 800cfda:	fba0 2308 	umull	r2, r3, r0, r8
 800cfde:	fb08 5501 	mla	r5, r8, r1, r5
 800cfe2:	1ab2      	subs	r2, r6, r2
 800cfe4:	442b      	add	r3, r5
 800cfe6:	eb67 0303 	sbc.w	r3, r7, r3
 800cfea:	e9c4 2300 	strd	r2, r3, [r4]
 800cfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff2:	bf00      	nop

0800cff4 <__aeabi_idiv0>:
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop

0800cff8 <__divdi3>:
 800cff8:	2900      	cmp	r1, #0
 800cffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cffe:	f2c0 80a6 	blt.w	800d14e <__divdi3+0x156>
 800d002:	2600      	movs	r6, #0
 800d004:	2b00      	cmp	r3, #0
 800d006:	f2c0 809c 	blt.w	800d142 <__divdi3+0x14a>
 800d00a:	4688      	mov	r8, r1
 800d00c:	4694      	mov	ip, r2
 800d00e:	469e      	mov	lr, r3
 800d010:	4615      	mov	r5, r2
 800d012:	4604      	mov	r4, r0
 800d014:	460f      	mov	r7, r1
 800d016:	2b00      	cmp	r3, #0
 800d018:	d13d      	bne.n	800d096 <__divdi3+0x9e>
 800d01a:	428a      	cmp	r2, r1
 800d01c:	d959      	bls.n	800d0d2 <__divdi3+0xda>
 800d01e:	fab2 f382 	clz	r3, r2
 800d022:	b13b      	cbz	r3, 800d034 <__divdi3+0x3c>
 800d024:	f1c3 0220 	rsb	r2, r3, #32
 800d028:	409f      	lsls	r7, r3
 800d02a:	fa20 f202 	lsr.w	r2, r0, r2
 800d02e:	409d      	lsls	r5, r3
 800d030:	4317      	orrs	r7, r2
 800d032:	409c      	lsls	r4, r3
 800d034:	0c29      	lsrs	r1, r5, #16
 800d036:	0c22      	lsrs	r2, r4, #16
 800d038:	fbb7 fef1 	udiv	lr, r7, r1
 800d03c:	b2a8      	uxth	r0, r5
 800d03e:	fb01 771e 	mls	r7, r1, lr, r7
 800d042:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800d046:	fb00 f30e 	mul.w	r3, r0, lr
 800d04a:	42bb      	cmp	r3, r7
 800d04c:	d90a      	bls.n	800d064 <__divdi3+0x6c>
 800d04e:	197f      	adds	r7, r7, r5
 800d050:	f10e 32ff 	add.w	r2, lr, #4294967295
 800d054:	f080 8105 	bcs.w	800d262 <__divdi3+0x26a>
 800d058:	42bb      	cmp	r3, r7
 800d05a:	f240 8102 	bls.w	800d262 <__divdi3+0x26a>
 800d05e:	f1ae 0e02 	sub.w	lr, lr, #2
 800d062:	442f      	add	r7, r5
 800d064:	1aff      	subs	r7, r7, r3
 800d066:	b2a4      	uxth	r4, r4
 800d068:	fbb7 f3f1 	udiv	r3, r7, r1
 800d06c:	fb01 7713 	mls	r7, r1, r3, r7
 800d070:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800d074:	fb00 f003 	mul.w	r0, r0, r3
 800d078:	42b8      	cmp	r0, r7
 800d07a:	d908      	bls.n	800d08e <__divdi3+0x96>
 800d07c:	197f      	adds	r7, r7, r5
 800d07e:	f103 32ff 	add.w	r2, r3, #4294967295
 800d082:	f080 80f0 	bcs.w	800d266 <__divdi3+0x26e>
 800d086:	42b8      	cmp	r0, r7
 800d088:	f240 80ed 	bls.w	800d266 <__divdi3+0x26e>
 800d08c:	3b02      	subs	r3, #2
 800d08e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800d092:	2200      	movs	r2, #0
 800d094:	e003      	b.n	800d09e <__divdi3+0xa6>
 800d096:	428b      	cmp	r3, r1
 800d098:	d90f      	bls.n	800d0ba <__divdi3+0xc2>
 800d09a:	2200      	movs	r2, #0
 800d09c:	4613      	mov	r3, r2
 800d09e:	1c34      	adds	r4, r6, #0
 800d0a0:	bf18      	it	ne
 800d0a2:	2401      	movne	r4, #1
 800d0a4:	4260      	negs	r0, r4
 800d0a6:	f04f 0500 	mov.w	r5, #0
 800d0aa:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800d0ae:	4058      	eors	r0, r3
 800d0b0:	4051      	eors	r1, r2
 800d0b2:	1900      	adds	r0, r0, r4
 800d0b4:	4169      	adcs	r1, r5
 800d0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0ba:	fab3 f283 	clz	r2, r3
 800d0be:	2a00      	cmp	r2, #0
 800d0c0:	f040 8086 	bne.w	800d1d0 <__divdi3+0x1d8>
 800d0c4:	428b      	cmp	r3, r1
 800d0c6:	d302      	bcc.n	800d0ce <__divdi3+0xd6>
 800d0c8:	4584      	cmp	ip, r0
 800d0ca:	f200 80db 	bhi.w	800d284 <__divdi3+0x28c>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e7e5      	b.n	800d09e <__divdi3+0xa6>
 800d0d2:	b912      	cbnz	r2, 800d0da <__divdi3+0xe2>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	fbb3 f5f2 	udiv	r5, r3, r2
 800d0da:	fab5 f085 	clz	r0, r5
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	d13b      	bne.n	800d15a <__divdi3+0x162>
 800d0e2:	1b78      	subs	r0, r7, r5
 800d0e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d0e8:	fa1f fc85 	uxth.w	ip, r5
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	fbb0 f8fe 	udiv	r8, r0, lr
 800d0f2:	0c21      	lsrs	r1, r4, #16
 800d0f4:	fb0e 0718 	mls	r7, lr, r8, r0
 800d0f8:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800d0fc:	fb0c f308 	mul.w	r3, ip, r8
 800d100:	42bb      	cmp	r3, r7
 800d102:	d907      	bls.n	800d114 <__divdi3+0x11c>
 800d104:	197f      	adds	r7, r7, r5
 800d106:	f108 31ff 	add.w	r1, r8, #4294967295
 800d10a:	d202      	bcs.n	800d112 <__divdi3+0x11a>
 800d10c:	42bb      	cmp	r3, r7
 800d10e:	f200 80bd 	bhi.w	800d28c <__divdi3+0x294>
 800d112:	4688      	mov	r8, r1
 800d114:	1aff      	subs	r7, r7, r3
 800d116:	b2a4      	uxth	r4, r4
 800d118:	fbb7 f3fe 	udiv	r3, r7, lr
 800d11c:	fb0e 7713 	mls	r7, lr, r3, r7
 800d120:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800d124:	fb0c fc03 	mul.w	ip, ip, r3
 800d128:	45bc      	cmp	ip, r7
 800d12a:	d907      	bls.n	800d13c <__divdi3+0x144>
 800d12c:	197f      	adds	r7, r7, r5
 800d12e:	f103 31ff 	add.w	r1, r3, #4294967295
 800d132:	d202      	bcs.n	800d13a <__divdi3+0x142>
 800d134:	45bc      	cmp	ip, r7
 800d136:	f200 80a7 	bhi.w	800d288 <__divdi3+0x290>
 800d13a:	460b      	mov	r3, r1
 800d13c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800d140:	e7ad      	b.n	800d09e <__divdi3+0xa6>
 800d142:	4252      	negs	r2, r2
 800d144:	ea6f 0606 	mvn.w	r6, r6
 800d148:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d14c:	e75d      	b.n	800d00a <__divdi3+0x12>
 800d14e:	4240      	negs	r0, r0
 800d150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d154:	f04f 36ff 	mov.w	r6, #4294967295
 800d158:	e754      	b.n	800d004 <__divdi3+0xc>
 800d15a:	f1c0 0220 	rsb	r2, r0, #32
 800d15e:	fa24 f102 	lsr.w	r1, r4, r2
 800d162:	fa07 f300 	lsl.w	r3, r7, r0
 800d166:	4085      	lsls	r5, r0
 800d168:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d16c:	40d7      	lsrs	r7, r2
 800d16e:	4319      	orrs	r1, r3
 800d170:	fbb7 f2fe 	udiv	r2, r7, lr
 800d174:	0c0b      	lsrs	r3, r1, #16
 800d176:	fb0e 7712 	mls	r7, lr, r2, r7
 800d17a:	fa1f fc85 	uxth.w	ip, r5
 800d17e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d182:	fb0c f702 	mul.w	r7, ip, r2
 800d186:	429f      	cmp	r7, r3
 800d188:	fa04 f400 	lsl.w	r4, r4, r0
 800d18c:	d907      	bls.n	800d19e <__divdi3+0x1a6>
 800d18e:	195b      	adds	r3, r3, r5
 800d190:	f102 30ff 	add.w	r0, r2, #4294967295
 800d194:	d274      	bcs.n	800d280 <__divdi3+0x288>
 800d196:	429f      	cmp	r7, r3
 800d198:	d972      	bls.n	800d280 <__divdi3+0x288>
 800d19a:	3a02      	subs	r2, #2
 800d19c:	442b      	add	r3, r5
 800d19e:	1bdf      	subs	r7, r3, r7
 800d1a0:	b289      	uxth	r1, r1
 800d1a2:	fbb7 f8fe 	udiv	r8, r7, lr
 800d1a6:	fb0e 7318 	mls	r3, lr, r8, r7
 800d1aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d1ae:	fb0c f708 	mul.w	r7, ip, r8
 800d1b2:	429f      	cmp	r7, r3
 800d1b4:	d908      	bls.n	800d1c8 <__divdi3+0x1d0>
 800d1b6:	195b      	adds	r3, r3, r5
 800d1b8:	f108 31ff 	add.w	r1, r8, #4294967295
 800d1bc:	d25c      	bcs.n	800d278 <__divdi3+0x280>
 800d1be:	429f      	cmp	r7, r3
 800d1c0:	d95a      	bls.n	800d278 <__divdi3+0x280>
 800d1c2:	f1a8 0802 	sub.w	r8, r8, #2
 800d1c6:	442b      	add	r3, r5
 800d1c8:	1bd8      	subs	r0, r3, r7
 800d1ca:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800d1ce:	e78e      	b.n	800d0ee <__divdi3+0xf6>
 800d1d0:	f1c2 0320 	rsb	r3, r2, #32
 800d1d4:	fa2c f103 	lsr.w	r1, ip, r3
 800d1d8:	fa0e fe02 	lsl.w	lr, lr, r2
 800d1dc:	fa20 f703 	lsr.w	r7, r0, r3
 800d1e0:	ea41 0e0e 	orr.w	lr, r1, lr
 800d1e4:	fa08 f002 	lsl.w	r0, r8, r2
 800d1e8:	fa28 f103 	lsr.w	r1, r8, r3
 800d1ec:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800d1f0:	4338      	orrs	r0, r7
 800d1f2:	fbb1 f8f5 	udiv	r8, r1, r5
 800d1f6:	0c03      	lsrs	r3, r0, #16
 800d1f8:	fb05 1118 	mls	r1, r5, r8, r1
 800d1fc:	fa1f f78e 	uxth.w	r7, lr
 800d200:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800d204:	fb07 f308 	mul.w	r3, r7, r8
 800d208:	428b      	cmp	r3, r1
 800d20a:	fa0c fc02 	lsl.w	ip, ip, r2
 800d20e:	d909      	bls.n	800d224 <__divdi3+0x22c>
 800d210:	eb11 010e 	adds.w	r1, r1, lr
 800d214:	f108 39ff 	add.w	r9, r8, #4294967295
 800d218:	d230      	bcs.n	800d27c <__divdi3+0x284>
 800d21a:	428b      	cmp	r3, r1
 800d21c:	d92e      	bls.n	800d27c <__divdi3+0x284>
 800d21e:	f1a8 0802 	sub.w	r8, r8, #2
 800d222:	4471      	add	r1, lr
 800d224:	1ac9      	subs	r1, r1, r3
 800d226:	b280      	uxth	r0, r0
 800d228:	fbb1 f3f5 	udiv	r3, r1, r5
 800d22c:	fb05 1113 	mls	r1, r5, r3, r1
 800d230:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800d234:	fb07 f703 	mul.w	r7, r7, r3
 800d238:	428f      	cmp	r7, r1
 800d23a:	d908      	bls.n	800d24e <__divdi3+0x256>
 800d23c:	eb11 010e 	adds.w	r1, r1, lr
 800d240:	f103 30ff 	add.w	r0, r3, #4294967295
 800d244:	d216      	bcs.n	800d274 <__divdi3+0x27c>
 800d246:	428f      	cmp	r7, r1
 800d248:	d914      	bls.n	800d274 <__divdi3+0x27c>
 800d24a:	3b02      	subs	r3, #2
 800d24c:	4471      	add	r1, lr
 800d24e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800d252:	1bc9      	subs	r1, r1, r7
 800d254:	fba3 890c 	umull	r8, r9, r3, ip
 800d258:	4549      	cmp	r1, r9
 800d25a:	d309      	bcc.n	800d270 <__divdi3+0x278>
 800d25c:	d005      	beq.n	800d26a <__divdi3+0x272>
 800d25e:	2200      	movs	r2, #0
 800d260:	e71d      	b.n	800d09e <__divdi3+0xa6>
 800d262:	4696      	mov	lr, r2
 800d264:	e6fe      	b.n	800d064 <__divdi3+0x6c>
 800d266:	4613      	mov	r3, r2
 800d268:	e711      	b.n	800d08e <__divdi3+0x96>
 800d26a:	4094      	lsls	r4, r2
 800d26c:	4544      	cmp	r4, r8
 800d26e:	d2f6      	bcs.n	800d25e <__divdi3+0x266>
 800d270:	3b01      	subs	r3, #1
 800d272:	e7f4      	b.n	800d25e <__divdi3+0x266>
 800d274:	4603      	mov	r3, r0
 800d276:	e7ea      	b.n	800d24e <__divdi3+0x256>
 800d278:	4688      	mov	r8, r1
 800d27a:	e7a5      	b.n	800d1c8 <__divdi3+0x1d0>
 800d27c:	46c8      	mov	r8, r9
 800d27e:	e7d1      	b.n	800d224 <__divdi3+0x22c>
 800d280:	4602      	mov	r2, r0
 800d282:	e78c      	b.n	800d19e <__divdi3+0x1a6>
 800d284:	4613      	mov	r3, r2
 800d286:	e70a      	b.n	800d09e <__divdi3+0xa6>
 800d288:	3b02      	subs	r3, #2
 800d28a:	e757      	b.n	800d13c <__divdi3+0x144>
 800d28c:	f1a8 0802 	sub.w	r8, r8, #2
 800d290:	442f      	add	r7, r5
 800d292:	e73f      	b.n	800d114 <__divdi3+0x11c>

0800d294 <__udivdi3>:
 800d294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d144      	bne.n	800d326 <__udivdi3+0x92>
 800d29c:	428a      	cmp	r2, r1
 800d29e:	4615      	mov	r5, r2
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	d94f      	bls.n	800d344 <__udivdi3+0xb0>
 800d2a4:	fab2 f782 	clz	r7, r2
 800d2a8:	460e      	mov	r6, r1
 800d2aa:	b14f      	cbz	r7, 800d2c0 <__udivdi3+0x2c>
 800d2ac:	f1c7 0320 	rsb	r3, r7, #32
 800d2b0:	40b9      	lsls	r1, r7
 800d2b2:	fa20 f603 	lsr.w	r6, r0, r3
 800d2b6:	fa02 f507 	lsl.w	r5, r2, r7
 800d2ba:	430e      	orrs	r6, r1
 800d2bc:	fa00 f407 	lsl.w	r4, r0, r7
 800d2c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d2c4:	0c23      	lsrs	r3, r4, #16
 800d2c6:	fbb6 f0fe 	udiv	r0, r6, lr
 800d2ca:	b2af      	uxth	r7, r5
 800d2cc:	fb0e 6110 	mls	r1, lr, r0, r6
 800d2d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d2d4:	fb07 f100 	mul.w	r1, r7, r0
 800d2d8:	4299      	cmp	r1, r3
 800d2da:	d909      	bls.n	800d2f0 <__udivdi3+0x5c>
 800d2dc:	195b      	adds	r3, r3, r5
 800d2de:	f100 32ff 	add.w	r2, r0, #4294967295
 800d2e2:	f080 80ec 	bcs.w	800d4be <__udivdi3+0x22a>
 800d2e6:	4299      	cmp	r1, r3
 800d2e8:	f240 80e9 	bls.w	800d4be <__udivdi3+0x22a>
 800d2ec:	3802      	subs	r0, #2
 800d2ee:	442b      	add	r3, r5
 800d2f0:	1a5a      	subs	r2, r3, r1
 800d2f2:	b2a4      	uxth	r4, r4
 800d2f4:	fbb2 f3fe 	udiv	r3, r2, lr
 800d2f8:	fb0e 2213 	mls	r2, lr, r3, r2
 800d2fc:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800d300:	fb07 f703 	mul.w	r7, r7, r3
 800d304:	4297      	cmp	r7, r2
 800d306:	d908      	bls.n	800d31a <__udivdi3+0x86>
 800d308:	1952      	adds	r2, r2, r5
 800d30a:	f103 31ff 	add.w	r1, r3, #4294967295
 800d30e:	f080 80d8 	bcs.w	800d4c2 <__udivdi3+0x22e>
 800d312:	4297      	cmp	r7, r2
 800d314:	f240 80d5 	bls.w	800d4c2 <__udivdi3+0x22e>
 800d318:	3b02      	subs	r3, #2
 800d31a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800d31e:	2600      	movs	r6, #0
 800d320:	4631      	mov	r1, r6
 800d322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d326:	428b      	cmp	r3, r1
 800d328:	d847      	bhi.n	800d3ba <__udivdi3+0x126>
 800d32a:	fab3 f683 	clz	r6, r3
 800d32e:	2e00      	cmp	r6, #0
 800d330:	d148      	bne.n	800d3c4 <__udivdi3+0x130>
 800d332:	428b      	cmp	r3, r1
 800d334:	d302      	bcc.n	800d33c <__udivdi3+0xa8>
 800d336:	4282      	cmp	r2, r0
 800d338:	f200 80cd 	bhi.w	800d4d6 <__udivdi3+0x242>
 800d33c:	2001      	movs	r0, #1
 800d33e:	4631      	mov	r1, r6
 800d340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d344:	b912      	cbnz	r2, 800d34c <__udivdi3+0xb8>
 800d346:	2501      	movs	r5, #1
 800d348:	fbb5 f5f2 	udiv	r5, r5, r2
 800d34c:	fab5 f885 	clz	r8, r5
 800d350:	f1b8 0f00 	cmp.w	r8, #0
 800d354:	d177      	bne.n	800d446 <__udivdi3+0x1b2>
 800d356:	1b4a      	subs	r2, r1, r5
 800d358:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d35c:	b2af      	uxth	r7, r5
 800d35e:	2601      	movs	r6, #1
 800d360:	fbb2 f0fe 	udiv	r0, r2, lr
 800d364:	0c23      	lsrs	r3, r4, #16
 800d366:	fb0e 2110 	mls	r1, lr, r0, r2
 800d36a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800d36e:	fb07 f300 	mul.w	r3, r7, r0
 800d372:	428b      	cmp	r3, r1
 800d374:	d907      	bls.n	800d386 <__udivdi3+0xf2>
 800d376:	1949      	adds	r1, r1, r5
 800d378:	f100 32ff 	add.w	r2, r0, #4294967295
 800d37c:	d202      	bcs.n	800d384 <__udivdi3+0xf0>
 800d37e:	428b      	cmp	r3, r1
 800d380:	f200 80ba 	bhi.w	800d4f8 <__udivdi3+0x264>
 800d384:	4610      	mov	r0, r2
 800d386:	1ac9      	subs	r1, r1, r3
 800d388:	b2a4      	uxth	r4, r4
 800d38a:	fbb1 f3fe 	udiv	r3, r1, lr
 800d38e:	fb0e 1113 	mls	r1, lr, r3, r1
 800d392:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800d396:	fb07 f703 	mul.w	r7, r7, r3
 800d39a:	42a7      	cmp	r7, r4
 800d39c:	d908      	bls.n	800d3b0 <__udivdi3+0x11c>
 800d39e:	1964      	adds	r4, r4, r5
 800d3a0:	f103 32ff 	add.w	r2, r3, #4294967295
 800d3a4:	f080 808f 	bcs.w	800d4c6 <__udivdi3+0x232>
 800d3a8:	42a7      	cmp	r7, r4
 800d3aa:	f240 808c 	bls.w	800d4c6 <__udivdi3+0x232>
 800d3ae:	3b02      	subs	r3, #2
 800d3b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800d3b4:	4631      	mov	r1, r6
 800d3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	4630      	mov	r0, r6
 800d3be:	4631      	mov	r1, r6
 800d3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c4:	f1c6 0420 	rsb	r4, r6, #32
 800d3c8:	fa22 f504 	lsr.w	r5, r2, r4
 800d3cc:	40b3      	lsls	r3, r6
 800d3ce:	432b      	orrs	r3, r5
 800d3d0:	fa20 fc04 	lsr.w	ip, r0, r4
 800d3d4:	fa01 f706 	lsl.w	r7, r1, r6
 800d3d8:	fa21 f504 	lsr.w	r5, r1, r4
 800d3dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3e0:	ea4c 0707 	orr.w	r7, ip, r7
 800d3e4:	fbb5 f8fe 	udiv	r8, r5, lr
 800d3e8:	0c39      	lsrs	r1, r7, #16
 800d3ea:	fb0e 5518 	mls	r5, lr, r8, r5
 800d3ee:	fa1f fc83 	uxth.w	ip, r3
 800d3f2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800d3f6:	fb0c f108 	mul.w	r1, ip, r8
 800d3fa:	42a9      	cmp	r1, r5
 800d3fc:	fa02 f206 	lsl.w	r2, r2, r6
 800d400:	d904      	bls.n	800d40c <__udivdi3+0x178>
 800d402:	18ed      	adds	r5, r5, r3
 800d404:	f108 34ff 	add.w	r4, r8, #4294967295
 800d408:	d367      	bcc.n	800d4da <__udivdi3+0x246>
 800d40a:	46a0      	mov	r8, r4
 800d40c:	1a6d      	subs	r5, r5, r1
 800d40e:	b2bf      	uxth	r7, r7
 800d410:	fbb5 f4fe 	udiv	r4, r5, lr
 800d414:	fb0e 5514 	mls	r5, lr, r4, r5
 800d418:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800d41c:	fb0c fc04 	mul.w	ip, ip, r4
 800d420:	458c      	cmp	ip, r1
 800d422:	d904      	bls.n	800d42e <__udivdi3+0x19a>
 800d424:	18c9      	adds	r1, r1, r3
 800d426:	f104 35ff 	add.w	r5, r4, #4294967295
 800d42a:	d35c      	bcc.n	800d4e6 <__udivdi3+0x252>
 800d42c:	462c      	mov	r4, r5
 800d42e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800d432:	ebcc 0101 	rsb	r1, ip, r1
 800d436:	fba4 2302 	umull	r2, r3, r4, r2
 800d43a:	4299      	cmp	r1, r3
 800d43c:	d348      	bcc.n	800d4d0 <__udivdi3+0x23c>
 800d43e:	d044      	beq.n	800d4ca <__udivdi3+0x236>
 800d440:	4620      	mov	r0, r4
 800d442:	2600      	movs	r6, #0
 800d444:	e76c      	b.n	800d320 <__udivdi3+0x8c>
 800d446:	f1c8 0420 	rsb	r4, r8, #32
 800d44a:	fa01 f308 	lsl.w	r3, r1, r8
 800d44e:	fa05 f508 	lsl.w	r5, r5, r8
 800d452:	fa20 f704 	lsr.w	r7, r0, r4
 800d456:	40e1      	lsrs	r1, r4
 800d458:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d45c:	431f      	orrs	r7, r3
 800d45e:	fbb1 f6fe 	udiv	r6, r1, lr
 800d462:	0c3a      	lsrs	r2, r7, #16
 800d464:	fb0e 1116 	mls	r1, lr, r6, r1
 800d468:	fa1f fc85 	uxth.w	ip, r5
 800d46c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800d470:	fb0c f206 	mul.w	r2, ip, r6
 800d474:	429a      	cmp	r2, r3
 800d476:	fa00 f408 	lsl.w	r4, r0, r8
 800d47a:	d907      	bls.n	800d48c <__udivdi3+0x1f8>
 800d47c:	195b      	adds	r3, r3, r5
 800d47e:	f106 31ff 	add.w	r1, r6, #4294967295
 800d482:	d237      	bcs.n	800d4f4 <__udivdi3+0x260>
 800d484:	429a      	cmp	r2, r3
 800d486:	d935      	bls.n	800d4f4 <__udivdi3+0x260>
 800d488:	3e02      	subs	r6, #2
 800d48a:	442b      	add	r3, r5
 800d48c:	1a9b      	subs	r3, r3, r2
 800d48e:	b2bf      	uxth	r7, r7
 800d490:	fbb3 f0fe 	udiv	r0, r3, lr
 800d494:	fb0e 3310 	mls	r3, lr, r0, r3
 800d498:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d49c:	fb0c f100 	mul.w	r1, ip, r0
 800d4a0:	4299      	cmp	r1, r3
 800d4a2:	d907      	bls.n	800d4b4 <__udivdi3+0x220>
 800d4a4:	195b      	adds	r3, r3, r5
 800d4a6:	f100 32ff 	add.w	r2, r0, #4294967295
 800d4aa:	d221      	bcs.n	800d4f0 <__udivdi3+0x25c>
 800d4ac:	4299      	cmp	r1, r3
 800d4ae:	d91f      	bls.n	800d4f0 <__udivdi3+0x25c>
 800d4b0:	3802      	subs	r0, #2
 800d4b2:	442b      	add	r3, r5
 800d4b4:	1a5a      	subs	r2, r3, r1
 800d4b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800d4ba:	4667      	mov	r7, ip
 800d4bc:	e750      	b.n	800d360 <__udivdi3+0xcc>
 800d4be:	4610      	mov	r0, r2
 800d4c0:	e716      	b.n	800d2f0 <__udivdi3+0x5c>
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	e729      	b.n	800d31a <__udivdi3+0x86>
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	e772      	b.n	800d3b0 <__udivdi3+0x11c>
 800d4ca:	40b0      	lsls	r0, r6
 800d4cc:	4290      	cmp	r0, r2
 800d4ce:	d2b7      	bcs.n	800d440 <__udivdi3+0x1ac>
 800d4d0:	1e60      	subs	r0, r4, #1
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	e724      	b.n	800d320 <__udivdi3+0x8c>
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	e722      	b.n	800d320 <__udivdi3+0x8c>
 800d4da:	42a9      	cmp	r1, r5
 800d4dc:	d995      	bls.n	800d40a <__udivdi3+0x176>
 800d4de:	f1a8 0802 	sub.w	r8, r8, #2
 800d4e2:	441d      	add	r5, r3
 800d4e4:	e792      	b.n	800d40c <__udivdi3+0x178>
 800d4e6:	458c      	cmp	ip, r1
 800d4e8:	d9a0      	bls.n	800d42c <__udivdi3+0x198>
 800d4ea:	3c02      	subs	r4, #2
 800d4ec:	4419      	add	r1, r3
 800d4ee:	e79e      	b.n	800d42e <__udivdi3+0x19a>
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	e7df      	b.n	800d4b4 <__udivdi3+0x220>
 800d4f4:	460e      	mov	r6, r1
 800d4f6:	e7c9      	b.n	800d48c <__udivdi3+0x1f8>
 800d4f8:	3802      	subs	r0, #2
 800d4fa:	4429      	add	r1, r5
 800d4fc:	e743      	b.n	800d386 <__udivdi3+0xf2>
 800d4fe:	bf00      	nop

0800d500 <calloc>:
 800d500:	460a      	mov	r2, r1
 800d502:	4903      	ldr	r1, [pc, #12]	; (800d510 <calloc+0x10>)
 800d504:	4603      	mov	r3, r0
 800d506:	6808      	ldr	r0, [r1, #0]
 800d508:	4619      	mov	r1, r3
 800d50a:	f000 b85a 	b.w	800d5c2 <_calloc_r>
 800d50e:	bf00      	nop
 800d510:	1ffed758 	.word	0x1ffed758

0800d514 <__errno>:
 800d514:	4b01      	ldr	r3, [pc, #4]	; (800d51c <__errno+0x8>)
 800d516:	6818      	ldr	r0, [r3, #0]
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	1ffed758 	.word	0x1ffed758

0800d520 <__libc_init_array>:
 800d520:	b570      	push	{r4, r5, r6, lr}
 800d522:	4b0e      	ldr	r3, [pc, #56]	; (800d55c <__libc_init_array+0x3c>)
 800d524:	4c0e      	ldr	r4, [pc, #56]	; (800d560 <__libc_init_array+0x40>)
 800d526:	1ae4      	subs	r4, r4, r3
 800d528:	10a4      	asrs	r4, r4, #2
 800d52a:	2500      	movs	r5, #0
 800d52c:	461e      	mov	r6, r3
 800d52e:	42a5      	cmp	r5, r4
 800d530:	d004      	beq.n	800d53c <__libc_init_array+0x1c>
 800d532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d536:	4798      	blx	r3
 800d538:	3501      	adds	r5, #1
 800d53a:	e7f8      	b.n	800d52e <__libc_init_array+0xe>
 800d53c:	f7f4 feea 	bl	8002314 <_init>
 800d540:	4c08      	ldr	r4, [pc, #32]	; (800d564 <__libc_init_array+0x44>)
 800d542:	4b09      	ldr	r3, [pc, #36]	; (800d568 <__libc_init_array+0x48>)
 800d544:	1ae4      	subs	r4, r4, r3
 800d546:	10a4      	asrs	r4, r4, #2
 800d548:	2500      	movs	r5, #0
 800d54a:	461e      	mov	r6, r3
 800d54c:	42a5      	cmp	r5, r4
 800d54e:	d004      	beq.n	800d55a <__libc_init_array+0x3a>
 800d550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d554:	4798      	blx	r3
 800d556:	3501      	adds	r5, #1
 800d558:	e7f8      	b.n	800d54c <__libc_init_array+0x2c>
 800d55a:	bd70      	pop	{r4, r5, r6, pc}
 800d55c:	1ffed75c 	.word	0x1ffed75c
 800d560:	1ffed75c 	.word	0x1ffed75c
 800d564:	1ffed75c 	.word	0x1ffed75c
 800d568:	1ffed75c 	.word	0x1ffed75c

0800d56c <free>:
 800d56c:	4b02      	ldr	r3, [pc, #8]	; (800d578 <free+0xc>)
 800d56e:	4601      	mov	r1, r0
 800d570:	6818      	ldr	r0, [r3, #0]
 800d572:	f000 b835 	b.w	800d5e0 <_free_r>
 800d576:	bf00      	nop
 800d578:	1ffed758 	.word	0x1ffed758

0800d57c <memcmp>:
 800d57c:	b510      	push	{r4, lr}
 800d57e:	440a      	add	r2, r1
 800d580:	1e44      	subs	r4, r0, #1
 800d582:	4291      	cmp	r1, r2
 800d584:	d008      	beq.n	800d598 <memcmp+0x1c>
 800d586:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d58a:	7808      	ldrb	r0, [r1, #0]
 800d58c:	4283      	cmp	r3, r0
 800d58e:	d001      	beq.n	800d594 <memcmp+0x18>
 800d590:	1a18      	subs	r0, r3, r0
 800d592:	bd10      	pop	{r4, pc}
 800d594:	3101      	adds	r1, #1
 800d596:	e7f4      	b.n	800d582 <memcmp+0x6>
 800d598:	2000      	movs	r0, #0
 800d59a:	bd10      	pop	{r4, pc}

0800d59c <memcpy>:
 800d59c:	b510      	push	{r4, lr}
 800d59e:	1e43      	subs	r3, r0, #1
 800d5a0:	440a      	add	r2, r1
 800d5a2:	4291      	cmp	r1, r2
 800d5a4:	d004      	beq.n	800d5b0 <memcpy+0x14>
 800d5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5ae:	e7f8      	b.n	800d5a2 <memcpy+0x6>
 800d5b0:	bd10      	pop	{r4, pc}

0800d5b2 <memset>:
 800d5b2:	4402      	add	r2, r0
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d002      	beq.n	800d5c0 <memset+0xe>
 800d5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800d5be:	e7fa      	b.n	800d5b6 <memset+0x4>
 800d5c0:	4770      	bx	lr

0800d5c2 <_calloc_r>:
 800d5c2:	b538      	push	{r3, r4, r5, lr}
 800d5c4:	fb02 f401 	mul.w	r4, r2, r1
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	f000 f84d 	bl	800d668 <_malloc_r>
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	b118      	cbz	r0, 800d5da <_calloc_r+0x18>
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	f7ff ffec 	bl	800d5b2 <memset>
 800d5da:	4628      	mov	r0, r5
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d5e0 <_free_r>:
 800d5e0:	b530      	push	{r4, r5, lr}
 800d5e2:	2900      	cmp	r1, #0
 800d5e4:	d03d      	beq.n	800d662 <_free_r+0x82>
 800d5e6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800d5ea:	1f0b      	subs	r3, r1, #4
 800d5ec:	491d      	ldr	r1, [pc, #116]	; (800d664 <_free_r+0x84>)
 800d5ee:	2a00      	cmp	r2, #0
 800d5f0:	bfb8      	it	lt
 800d5f2:	189b      	addlt	r3, r3, r2
 800d5f4:	680a      	ldr	r2, [r1, #0]
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	b912      	cbnz	r2, 800d600 <_free_r+0x20>
 800d5fa:	605a      	str	r2, [r3, #4]
 800d5fc:	600b      	str	r3, [r1, #0]
 800d5fe:	bd30      	pop	{r4, r5, pc}
 800d600:	4293      	cmp	r3, r2
 800d602:	d20d      	bcs.n	800d620 <_free_r+0x40>
 800d604:	6819      	ldr	r1, [r3, #0]
 800d606:	1858      	adds	r0, r3, r1
 800d608:	4290      	cmp	r0, r2
 800d60a:	bf01      	itttt	eq
 800d60c:	585a      	ldreq	r2, [r3, r1]
 800d60e:	1852      	addeq	r2, r2, r1
 800d610:	601a      	streq	r2, [r3, #0]
 800d612:	6842      	ldreq	r2, [r0, #4]
 800d614:	605a      	str	r2, [r3, #4]
 800d616:	6023      	str	r3, [r4, #0]
 800d618:	bd30      	pop	{r4, r5, pc}
 800d61a:	4299      	cmp	r1, r3
 800d61c:	d803      	bhi.n	800d626 <_free_r+0x46>
 800d61e:	460a      	mov	r2, r1
 800d620:	6851      	ldr	r1, [r2, #4]
 800d622:	2900      	cmp	r1, #0
 800d624:	d1f9      	bne.n	800d61a <_free_r+0x3a>
 800d626:	6814      	ldr	r4, [r2, #0]
 800d628:	1915      	adds	r5, r2, r4
 800d62a:	429d      	cmp	r5, r3
 800d62c:	d10a      	bne.n	800d644 <_free_r+0x64>
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4423      	add	r3, r4
 800d632:	18d0      	adds	r0, r2, r3
 800d634:	4288      	cmp	r0, r1
 800d636:	6013      	str	r3, [r2, #0]
 800d638:	d113      	bne.n	800d662 <_free_r+0x82>
 800d63a:	6808      	ldr	r0, [r1, #0]
 800d63c:	4403      	add	r3, r0
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	684b      	ldr	r3, [r1, #4]
 800d642:	e00d      	b.n	800d660 <_free_r+0x80>
 800d644:	d902      	bls.n	800d64c <_free_r+0x6c>
 800d646:	230c      	movs	r3, #12
 800d648:	6003      	str	r3, [r0, #0]
 800d64a:	bd30      	pop	{r4, r5, pc}
 800d64c:	681c      	ldr	r4, [r3, #0]
 800d64e:	1918      	adds	r0, r3, r4
 800d650:	4288      	cmp	r0, r1
 800d652:	bf04      	itt	eq
 800d654:	6808      	ldreq	r0, [r1, #0]
 800d656:	6849      	ldreq	r1, [r1, #4]
 800d658:	6059      	str	r1, [r3, #4]
 800d65a:	bf04      	itt	eq
 800d65c:	1900      	addeq	r0, r0, r4
 800d65e:	6018      	streq	r0, [r3, #0]
 800d660:	6053      	str	r3, [r2, #4]
 800d662:	bd30      	pop	{r4, r5, pc}
 800d664:	1fff0170 	.word	0x1fff0170

0800d668 <_malloc_r>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	1ccc      	adds	r4, r1, #3
 800d66c:	f024 0403 	bic.w	r4, r4, #3
 800d670:	3408      	adds	r4, #8
 800d672:	2c0c      	cmp	r4, #12
 800d674:	bf38      	it	cc
 800d676:	240c      	movcc	r4, #12
 800d678:	2c00      	cmp	r4, #0
 800d67a:	4606      	mov	r6, r0
 800d67c:	da03      	bge.n	800d686 <_malloc_r+0x1e>
 800d67e:	230c      	movs	r3, #12
 800d680:	6033      	str	r3, [r6, #0]
 800d682:	2000      	movs	r0, #0
 800d684:	bd70      	pop	{r4, r5, r6, pc}
 800d686:	428c      	cmp	r4, r1
 800d688:	d3f9      	bcc.n	800d67e <_malloc_r+0x16>
 800d68a:	4a20      	ldr	r2, [pc, #128]	; (800d70c <_malloc_r+0xa4>)
 800d68c:	6813      	ldr	r3, [r2, #0]
 800d68e:	4610      	mov	r0, r2
 800d690:	4619      	mov	r1, r3
 800d692:	b1a1      	cbz	r1, 800d6be <_malloc_r+0x56>
 800d694:	680a      	ldr	r2, [r1, #0]
 800d696:	1b12      	subs	r2, r2, r4
 800d698:	d40e      	bmi.n	800d6b8 <_malloc_r+0x50>
 800d69a:	2a0b      	cmp	r2, #11
 800d69c:	d903      	bls.n	800d6a6 <_malloc_r+0x3e>
 800d69e:	600a      	str	r2, [r1, #0]
 800d6a0:	188b      	adds	r3, r1, r2
 800d6a2:	508c      	str	r4, [r1, r2]
 800d6a4:	e01f      	b.n	800d6e6 <_malloc_r+0x7e>
 800d6a6:	428b      	cmp	r3, r1
 800d6a8:	bf0d      	iteet	eq
 800d6aa:	685a      	ldreq	r2, [r3, #4]
 800d6ac:	684a      	ldrne	r2, [r1, #4]
 800d6ae:	605a      	strne	r2, [r3, #4]
 800d6b0:	6002      	streq	r2, [r0, #0]
 800d6b2:	bf18      	it	ne
 800d6b4:	460b      	movne	r3, r1
 800d6b6:	e016      	b.n	800d6e6 <_malloc_r+0x7e>
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	6849      	ldr	r1, [r1, #4]
 800d6bc:	e7e9      	b.n	800d692 <_malloc_r+0x2a>
 800d6be:	4d14      	ldr	r5, [pc, #80]	; (800d710 <_malloc_r+0xa8>)
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	b91b      	cbnz	r3, 800d6cc <_malloc_r+0x64>
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 f825 	bl	800d714 <_sbrk_r>
 800d6ca:	6028      	str	r0, [r5, #0]
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	f000 f820 	bl	800d714 <_sbrk_r>
 800d6d4:	1c42      	adds	r2, r0, #1
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	d0d1      	beq.n	800d67e <_malloc_r+0x16>
 800d6da:	1cc5      	adds	r5, r0, #3
 800d6dc:	f025 0503 	bic.w	r5, r5, #3
 800d6e0:	4285      	cmp	r5, r0
 800d6e2:	d10a      	bne.n	800d6fa <_malloc_r+0x92>
 800d6e4:	601c      	str	r4, [r3, #0]
 800d6e6:	f103 000b 	add.w	r0, r3, #11
 800d6ea:	1d1a      	adds	r2, r3, #4
 800d6ec:	f020 0007 	bic.w	r0, r0, #7
 800d6f0:	1a82      	subs	r2, r0, r2
 800d6f2:	d00a      	beq.n	800d70a <_malloc_r+0xa2>
 800d6f4:	4251      	negs	r1, r2
 800d6f6:	5099      	str	r1, [r3, r2]
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	1ae9      	subs	r1, r5, r3
 800d6fe:	f000 f809 	bl	800d714 <_sbrk_r>
 800d702:	3001      	adds	r0, #1
 800d704:	d0bb      	beq.n	800d67e <_malloc_r+0x16>
 800d706:	462b      	mov	r3, r5
 800d708:	e7ec      	b.n	800d6e4 <_malloc_r+0x7c>
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
 800d70c:	1fff0170 	.word	0x1fff0170
 800d710:	1fff016c 	.word	0x1fff016c

0800d714 <_sbrk_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4c06      	ldr	r4, [pc, #24]	; (800d730 <_sbrk_r+0x1c>)
 800d718:	2300      	movs	r3, #0
 800d71a:	4605      	mov	r5, r0
 800d71c:	4608      	mov	r0, r1
 800d71e:	6023      	str	r3, [r4, #0]
 800d720:	f7f4 fdd8 	bl	80022d4 <_sbrk>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	d102      	bne.n	800d72e <_sbrk_r+0x1a>
 800d728:	6823      	ldr	r3, [r4, #0]
 800d72a:	b103      	cbz	r3, 800d72e <_sbrk_r+0x1a>
 800d72c:	602b      	str	r3, [r5, #0]
 800d72e:	bd38      	pop	{r3, r4, r5, pc}
 800d730:	1fff0804 	.word	0x1fff0804

0800d734 <strcmp>:
 800d734:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d73c:	2a01      	cmp	r2, #1
 800d73e:	bf28      	it	cs
 800d740:	429a      	cmpcs	r2, r3
 800d742:	d0f7      	beq.n	800d734 <strcmp>
 800d744:	1ad0      	subs	r0, r2, r3
 800d746:	4770      	bx	lr

0800d748 <CSWTCH.37>:
	...
 800d750:	0002 0000 0002 0000 000c 0000 000c 0000     ................
 800d760:	000c 0000 000c 0000 0008 0000 000a 0000     ................

0800d770 <CSWTCH.38>:
 800d770:	0003 0000 0003 0000 000c 0000 000c 0000     ................
 800d780:	3000 0000 3000 0000 3000 0000 3000 0000     .0...0...0...0..
 800d790:	0300 0000 0c00 0000                         ........

0800d798 <CSWTCH.43>:
 800d798:	0003 0000 0003 0000 000c 0000 000c 0000     ................
 800d7a8:	0030 0000 0030 0000 3000 0000 3000 0000     0...0....0...0..
 800d7b8:	0300 0000 0c00 0000                         ........

0800d7c0 <CSWTCH.44>:
	...
 800d7c8:	0002 0000 0002 0000 0004 0000 0004 0000     ................
 800d7d8:	000c 0000 000c 0000 0008 0000 000a 0000     ................

0800d7e8 <Driver_USBD0>:
 800d7e8:	0d65 0800 13c5 0800 10e1 0800 0d81 0800     e...............
 800d7f8:	0d99 0800 0db1 0800 0ec9 0800 1105 0800     ................
 800d808:	0fb1 0800 0ee1 0800 1591 0800 1385 0800     ................
 800d818:	1671 0800 0f6d 0800 10b1 0800 10c5 0800     q...m...........

0800d828 <product_string>:
 800d828:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...

0800d890 <device_descriptor>:
 800d890:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 800d8a0:	0100 0000                                   ....

0800d8a4 <language_string>:
 800d8a4:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

0800d90c <manufacturer_string>:
 800d90c:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 800d91c:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

0800d974 <CSWTCH.1>:
 800d974:	d8a4 0800 d90c 0800 d828 0800               ........(...

0800d980 <CSWTCH.2>:
 800d980:	0004 0012 0010 0000                         ........

0800d988 <configuration_descriptor>:
 800d988:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 800d998:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 800d9a8:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 800d9b8:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....

0800d9c8 <cunit_logger_config>:
 800d9c8:	d9f8 0800 3865 0800 4ec1 0800 4ecd 0800     ....e8...N...N..
	...
 800d9ec:	da04 0800 0000 0400 0404 0000               ............

0800d9f8 <cunit_logger_channel_config>:
 800d9f8:	2580 0000 0808 1001 0000 0000               .%..........

0800da04 <cunit_logger_tx_pin>:
 800da04:	8200 4802 0005 0000 da10 0800               ...H........

0800da10 <cunit_logger_tx_pin_config>:
 800da10:	0090 0000 0001 0000 0002 0000               ............

0800da1c <cunit_logger_rx_pin_config>:
 800da1c:	0000 0000 0001 0000 0002 0000               ............

0800da28 <scheduler_timer_intr>:
 800da28:	3d39 0100                                   9=..

0800da2c <tick_timer_intr>:
 800da2c:	3f31 0100                                   1?..

0800da30 <INTERRUPT_0>:
 800da30:	3f3f 0100                                   ??..

0800da34 <i2c_master_0_sda_pin_config>:
 800da34:	00d0 0000 0001 0000 0000 0000               ............

0800da40 <i2c_master_0_scl_pin_config>:
 800da40:	00d0 0000 0001 0000 0000 0000               ............

0800da4c <i2c_master_0_config>:
 800da4c:	da78 0800 46c9 0800 46a5 0800 4681 0800     x....F...F...F..
 800da5c:	4c61 0800 4c81 0800 4cf5 0800 4d49 0800     aL...L...L..IM..
 800da6c:	4ca1 0800 0000 0000 5755 0000               .L......UW..

0800da78 <i2c_master_0_channel_config>:
 800da78:	1a80 0006 0000 0000                         ........

0800da80 <reset_pin>:
 800da80:	8000 4802 0080 0000 0001 0000 0000 0000     ...H............
 800da90:	0006 0000                                   ....

0800da94 <vdd_pin>:
 800da94:	8200 4802 0080 0000 0001 0000 0000 0000     ...H............
 800daa4:	0007 0000 0230 0101 0000 0001 0000 0000     ....0...........
 800dab4:	0000 0001 0102 0101 6c50 7461 6f66 6d72     ........Platform
 800dac4:	4220 6e69 6964 676e 0000 0000                Binding....

0800dad0 <g_pctr_states_table>:
 800dad0:	0400 0400 0201 ffff 0201 ffff ffff 0707     ................

0800dae0 <g_optiga_unique_application_identifier>:
 800dae0:	76d2 0000 4704 6e65 7541 6874 7041 6c70     .v...GenAuthAppl

0800daf0 <aes_info>:
 800daf0:	0002 0000 b27d 0800 b279 0800 b275 0800     ....}...y...u...
 800db00:	b25d 0800 b249 0800                         ]...I...

0800db08 <aes_192_ccm_info>:
 800db08:	082c 0000 00c0 0000 db9c 0800 000c 0000     ,...............
 800db18:	0001 0000 0010 0000 db5c 0800               ........\...

0800db24 <mbedtls_cipher_definitions>:
 800db24:	0002 0000 dc2c 0800 0003 0000 dbf4 0800     ....,...........
 800db34:	0004 0000 dc10 0800 002b 0000 db74 0800     ........+...t...
 800db44:	002c 0000 db08 0800 002d 0000 dbd8 0800     ,.......-.......
	...

0800db5c <ccm_aes_info>:
 800db5c:	0002 0000 0000 0000 b23d 0800 b23d 0800     ........=...=...
 800db6c:	b225 0800 b211 0800                         %.......

0800db74 <aes_128_ccm_info>:
 800db74:	082b 0000 0080 0000 dba8 0800 000c 0000     +...............
 800db84:	0001 0000 0010 0000 db5c 0800 4541 2d53     ........\...AES-
 800db94:	3532 2d36 4343 004d 4541 2d53 3931 2d32     256-CCM.AES-192-
 800dba4:	4343 004d 4541 2d53 3231 2d38 4343 004d     CCM.AES-128-CCM.
 800dbb4:	4541 2d53 3532 2d36 4345 0042 4541 2d53     AES-256-ECB.AES-
 800dbc4:	3931 2d32 4345 0042 4541 2d53 3231 2d38     192-ECB.AES-128-
 800dbd4:	4345 0042                                   ECB.

0800dbd8 <aes_256_ccm_info>:
 800dbd8:	082d 0000 0100 0000 db90 0800 000c 0000     -...............
 800dbe8:	0001 0000 0010 0000 db5c 0800               ........\...

0800dbf4 <aes_192_ecb_info>:
 800dbf4:	0103 0000 00c0 0000 dbc0 0800 0000 0000     ................
 800dc04:	0000 0000 0010 0000 daf0 0800               ............

0800dc10 <aes_256_ecb_info>:
 800dc10:	0104 0000 0100 0000 dbb4 0800 0000 0000     ................
 800dc20:	0000 0000 0010 0000 daf0 0800               ............

0800dc2c <aes_128_ecb_info>:
 800dc2c:	0102 0000 0080 0000 dbcc 0800 0000 0000     ................
 800dc3c:	0000 0000 0010 0000 daf0 0800               ............

0800dc48 <mbedtls_sha224_info>:
 800dc48:	0005 0000 dc80 0800 001c 0000 0040 0000     ............@...
 800dc58:	b659 0800 b655 0800 b651 0800 b641 0800     Y...U...Q...A...
 800dc68:	b629 0800 b615 0800 b611 0800 b60d 0800     )...............
 800dc78:	4853 3241 3635 0000 4853 3241 3432 0000     SHA256..SHA224..

0800dc88 <mbedtls_sha256_info>:
 800dc88:	0006 0000 dc78 0800 0020 0000 0040 0000     ....x... ...@...
 800dc98:	b661 0800 b655 0800 b651 0800 b649 0800     a...U...Q...I...
 800dca8:	b629 0800 b615 0800 b611 0800 b60d 0800     )...............

0800dcb8 <K>:
 800dcb8:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 800dcc8:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 800dcd8:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 800dce8:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 800dcf8:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 800dd08:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 800dd18:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 800dd28:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 800dd38:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 800dd48:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 800dd58:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 800dd68:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 800dd78:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 800dd88:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 800dd98:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 800dda8:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

0800ddb8 <platform_binding_shared_secret_metadata_final>:
 800ddb8:	1720 01c0 d001 e107 07fc 20fe 40e1 03d1      .......... .@..
 800ddc8:	fce1 d307 0001 01e8 0022 0000 6e55 6f6c     ........"...Unlo
 800ddd8:	6b63 0000 6553 4363 6d6f 0000 6f4c 6b63     ck..SecCom..Lock
 800dde8:	0000 0000 6f43 6d6d 6e61 0064 6544 696e     ....Command.Deni
 800ddf8:	6465 6220 2079 6f63 6c6f 6f64 6e77 002e     ed by cooldown..
	...
 800de14:	6f4c 6b63 6465 0000 0000 0000 0000 0000     Locked..........
	...
 800de34:	4141 4242 4343 4544 4746 0000 0000 0000     AABBCCDEFG......
	...
 800de54:	6e55 6e6b 776f 206e 6572 7571 7365 0074     Unknown request.
	...
 800de74:	6f43 6c6f 6f64 6e77 6120 7463 7669 7461     Cooldown activat
 800de84:	6465 002e 0000 0000 0000 0000 0000 0000     ed..............
 800de94:	6552 7571 7365 2074 6564 696e 6465 002e     Request denied..
	...

0800deb4 <rsa_public_key_exponent>:
 800deb4:	0100 0100                                   ....

0800deb8 <rsa_public_key_modulus>:
 800deb8:	79d6 5278 1cfd 0166 6a20 7f4a 5424 c2f1     .yxR..f. jJ.$T..
 800dec8:	eb86 c51a c2ff 29eb 2ae6 3e8f f1ff 6292     .......).*.>...b
 800ded8:	20fd 8ceb a3cc 4e13 2815 e31d 1a0a 857b     . .....N.(....{.
 800dee8:	c416 69ea 756f 4360 8562 3c2b 4ab1 dfbf     ...iou`Cb.+<.J..
 800def8:	33b5 6f00 f74d 3487 4ab9 07f3 84d6 4a3e     .3.oM..4.J....>J
 800df08:	169b 39dd 32fa aa7f 6a13 0ddb 4269 f416     ...9.2...j..iB..
 800df18:	ef63 a4d4 0eb2 d61e 1129 afff 72ac 3ef6     c.......)....r.>
 800df28:	db4c bc0d 0962 f6e7 44d7 1b10 b956 2142     L...b....D..V.B!
 800df38:	0100 0302 0004 0000 0043 0000               ........C...
