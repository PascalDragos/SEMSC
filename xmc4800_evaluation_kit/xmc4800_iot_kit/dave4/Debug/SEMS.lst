
SEMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e2c8  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000028  0800e2c8  0c00e2c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0800e2f0  0c00e2f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00005000  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  4 .data         0000076c  1ffed000  0c00e2f8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000040b8  1ffed76c  0c00ea64  0001d76c  2**2
                  ALLOC
  6 USB_RAM       00000e00  20000000  20000000  00020000  2**2
                  ALLOC
  7 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  8 .debug_aranges 00001f78  00000000  00000000  0001d770  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00078951  00000000  00000000  0001f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000f031  00000000  00000000  00098039  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d8ce  00000000  00000000  000a706a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00006214  00000000  00000000  000c4938  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00016ce5  00000000  00000000  000cab4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00030372  00000000  00000000  000e1831  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004f60  00000000  00000000  00111ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000179f  00000000  00000000  00116b03  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 d0 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 71 54 00 08 99 02 00 08     ........qT......
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 09 54 00 08 99 02 00 08     .........T......
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	3d d2 00 08 99 02 00 08 99 02 00 08 99 02 00 08     =...............
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 48 00 08 99 02 00 08     .........H......
 800019c:	a5 48 00 08 15 3a 00 08 21 3a 00 08 99 02 00 08     .H...:..!:......
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	c1 36 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .6..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00e2f8 	.word	0x0c00e2f8
 800024c:	1ffed000 	.word	0x1ffed000
 8000250:	0000076c 	.word	0x0000076c
 8000254:	0c00e2f8 	.word	0x0c00e2f8
 8000258:	1ffed000 	.word	0x1ffed000
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffed76c 	.word	0x1ffed76c
 8000264:	000040b8 	.word	0x000040b8
 8000268:	20000000 	.word	0x20000000
 800026c:	00000e00 	.word	0x00000e00
 8000270:	20000e00 	.word	0x20000e00
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffed000 	.word	0x1ffed000

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08002369 	.word	0x08002369
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800d841 	.word	0x0800d841
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800d261 	.word	0x0800d261

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <XMC_FLASH_ClearStatus>:
void XMC_FLASH_lClearStatusCommand(void)
{
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xf5U;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <XMC_FLASH_ClearStatus+0x8>)
 800029e:	22f5      	movs	r2, #245	; 0xf5
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	4770      	bx	lr
 80002a4:	0c005554 	.word	0x0c005554

080002a8 <XMC_FLASH_GetStatus>:
/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
  return FLASH0->FSR;
 80002a8:	4a02      	ldr	r2, [pc, #8]	; (80002b4 <XMC_FLASH_GetStatus+0xc>)
 80002aa:	f241 0310 	movw	r3, #4112	; 0x1010
 80002ae:	58d0      	ldr	r0, [r2, r3]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	58001000 	.word	0x58001000

080002b8 <XMC_FLASH_EraseSector>:
void XMC_FLASH_lClearStatusCommand(void)
{
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xf5U;
 80002b8:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <XMC_FLASH_EraseSector+0x2c>)
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xaaU;
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
  *address = 0x55U;
 80002ba:	490b      	ldr	r1, [pc, #44]	; (80002e8 <XMC_FLASH_EraseSector+0x30>)
{
  XMC_FLASH_lClearStatusCommand();
  XMC_FLASH_lEraseSectorCommand(address);

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 80002bc:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <XMC_FLASH_EraseSector+0x34>)

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 80002be:	b5f0      	push	{r4, r5, r6, r7, lr}
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xaaU;
 80002c0:	25aa      	movs	r5, #170	; 0xaa
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
  *address = 0x55U;
 80002c2:	2455      	movs	r4, #85	; 0x55
void XMC_FLASH_lClearStatusCommand(void)
{
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xf5U;
 80002c4:	f04f 0ef5 	mov.w	lr, #245	; 0xf5
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xaaU;
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
  *address = 0x55U;
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0x80U;
 80002c8:	2780      	movs	r7, #128	; 0x80
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xaaU;
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
  *address = 0x55U;
  address = sector_start_address;
  *address = 0x30U;
 80002ca:	2630      	movs	r6, #48	; 0x30
void XMC_FLASH_lClearStatusCommand(void)
{
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xf5U;
 80002cc:	f8c3 e000 	str.w	lr, [r3]
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xaaU;
 80002d0:	601d      	str	r5, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
  *address = 0x55U;
 80002d2:	600c      	str	r4, [r1, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0x80U;
 80002d4:	601f      	str	r7, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
  *address = 0xaaU;
 80002d6:	601d      	str	r5, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
  *address = 0x55U;
 80002d8:	600c      	str	r4, [r1, #0]
  address = sector_start_address;
  *address = 0x30U;
 80002da:	6006      	str	r6, [r0, #0]
{
  XMC_FLASH_lClearStatusCommand();
  XMC_FLASH_lEraseSectorCommand(address);

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 80002dc:	6813      	ldr	r3, [r2, #0]
 80002de:	07db      	lsls	r3, r3, #31
 80002e0:	d4fc      	bmi.n	80002dc <XMC_FLASH_EraseSector+0x24>
}
 80002e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e4:	0c005554 	.word	0x0c005554
 80002e8:	0c00aaa8 	.word	0x0c00aaa8
 80002ec:	58002010 	.word	0x58002010

080002f0 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80002f0:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80002f4:	4403      	add	r3, r0
 80002f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80002f8:	f001 0503 	and.w	r5, r1, #3
 80002fc:	691e      	ldr	r6, [r3, #16]
  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80002fe:	4f1d      	ldr	r7, [pc, #116]	; (8000374 <XMC_GPIO_Init+0x84>)
{
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000300:	00ed      	lsls	r5, r5, #3
 8000302:	24f8      	movs	r4, #248	; 0xf8
 8000304:	40ac      	lsls	r4, r5
 8000306:	ea26 0404 	bic.w	r4, r6, r4
 800030a:	611c      	str	r4, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800030c:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800030e:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 8000312:	2403      	movs	r4, #3
 8000314:	fa04 f40e 	lsl.w	r4, r4, lr
 8000318:	ea26 0404 	bic.w	r4, r6, r4


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800031c:	42b8      	cmp	r0, r7
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800031e:	6744      	str	r4, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000320:	d01f      	beq.n	8000362 <XMC_GPIO_Init+0x72>
 8000322:	4c15      	ldr	r4, [pc, #84]	; (8000378 <XMC_GPIO_Init+0x88>)
 8000324:	42a0      	cmp	r0, r4
 8000326:	d01c      	beq.n	8000362 <XMC_GPIO_Init+0x72>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000328:	7814      	ldrb	r4, [r2, #0]
 800032a:	0626      	lsls	r6, r4, #24
 800032c:	d514      	bpl.n	8000358 <XMC_GPIO_Init+0x68>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800032e:	6857      	ldr	r7, [r2, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000330:	7a16      	ldrb	r6, [r2, #8]
 8000332:	08ca      	lsrs	r2, r1, #3
 8000334:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000338:	408f      	lsls	r7, r1
 800033a:	6047      	str	r7, [r0, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800033c:	f001 0107 	and.w	r1, r1, #7
 8000340:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8000342:	0089      	lsls	r1, r1, #2
 8000344:	2007      	movs	r0, #7
 8000346:	4088      	lsls	r0, r1
 8000348:	ea27 0000 	bic.w	r0, r7, r0
 800034c:	6410      	str	r0, [r2, #64]	; 0x40
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800034e:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8000350:	fa06 f101 	lsl.w	r1, r6, r1
 8000354:	4301      	orrs	r1, r0
 8000356:	6411      	str	r1, [r2, #64]	; 0x40
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000358:	691a      	ldr	r2, [r3, #16]
 800035a:	40ac      	lsls	r4, r5
 800035c:	4314      	orrs	r4, r2
 800035e:	611c      	str	r4, [r3, #16]
 8000360:	bdf0      	pop	{r4, r5, r6, r7, pc}


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000362:	6e06      	ldr	r6, [r0, #96]	; 0x60
 8000364:	7814      	ldrb	r4, [r2, #0]
 8000366:	2701      	movs	r7, #1
 8000368:	fa07 f201 	lsl.w	r2, r7, r1
 800036c:	ea26 0202 	bic.w	r2, r6, r2
 8000370:	6602      	str	r2, [r0, #96]	; 0x60
 8000372:	e7f1      	b.n	8000358 <XMC_GPIO_Init+0x68>
 8000374:	48028e00 	.word	0x48028e00
 8000378:	48028f00 	.word	0x48028f00

0800037c <XMC_SCU_RESET_AssertPeripheralReset>:
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800037c:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800037e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000382:	4a03      	ldr	r2, [pc, #12]	; (8000390 <XMC_SCU_RESET_AssertPeripheralReset+0x14>)

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000384:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8000388:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	50004410 	.word	0x50004410

08000394 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000394:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800039a:	4a03      	ldr	r2, [pc, #12]	; (80003a8 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800039c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80003a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	50004414 	.word	0x50004414

080003ac <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
  return SystemCoreClock;
 80003ae:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 80003b0:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80003b2:	6810      	ldr	r0, [r2, #0]
 80003b4:	f003 0301 	and.w	r3, r3, #1
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80003b8:	40d8      	lsrs	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	50004600 	.word	0x50004600
 80003c0:	2003ffc0 	.word	0x2003ffc0

080003c4 <XMC_SCU_CLOCK_SetUsbClockSource>:
}

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80003c4:	4a03      	ldr	r2, [pc, #12]	; (80003d4 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 80003c6:	6993      	ldr	r3, [r2, #24]
 80003c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003cc:	4318      	orrs	r0, r3
 80003ce:	6190      	str	r0, [r2, #24]
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	50004600 	.word	0x50004600

080003d8 <XMC_SCU_CLOCK_SetWdtClockSource>:
}

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 80003da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80003dc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003e0:	4318      	orrs	r0, r3
 80003e2:	6250      	str	r0, [r2, #36]	; 0x24
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	50004600 	.word	0x50004600

080003ec <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 80003ee:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80003f2:	071b      	lsls	r3, r3, #28
 80003f4:	d4fb      	bmi.n	80003ee <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80003f6:	4a04      	ldr	r2, [pc, #16]	; (8000408 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 80003f8:	68d3      	ldr	r3, [r2, #12]
 80003fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003fe:	4318      	orrs	r0, r3
 8000400:	60d0      	str	r0, [r2, #12]
 8000402:	4770      	bx	lr
 8000404:	50004000 	.word	0x50004000
 8000408:	50004300 	.word	0x50004300

0800040c <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800040c:	4a03      	ldr	r2, [pc, #12]	; (800041c <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 800040e:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000410:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000412:	f023 0307 	bic.w	r3, r3, #7
 8000416:	4303      	orrs	r3, r0
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4770      	bx	lr
 800041c:	50004600 	.word	0x50004600

08000420 <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 8000422:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000424:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000426:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800042a:	4303      	orrs	r3, r0
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4770      	bx	lr
 8000430:	50004600 	.word	0x50004600

08000434 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000434:	4a03      	ldr	r2, [pc, #12]	; (8000444 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8000436:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000438:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800043a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800043e:	4303      	orrs	r3, r0
 8000440:	6253      	str	r3, [r2, #36]	; 0x24
 8000442:	4770      	bx	lr
 8000444:	50004600 	.word	0x50004600

08000448 <XMC_SCU_CLOCK_SetECATClockDivider>:

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8000448:	4a03      	ldr	r2, [pc, #12]	; (8000458 <XMC_SCU_CLOCK_SetECATClockDivider+0x10>)
 800044a:	6b93      	ldr	r3, [r2, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 800044c:	3801      	subs	r0, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800044e:	f023 0303 	bic.w	r3, r3, #3
 8000452:	4303      	orrs	r3, r0
 8000454:	6393      	str	r3, [r2, #56]	; 0x38
 8000456:	4770      	bx	lr
 8000458:	50004600 	.word	0x50004600

0800045c <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <XMC_SCU_CLOCK_EnableClock+0x8>)
 800045e:	6058      	str	r0, [r3, #4]
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	50004600 	.word	0x50004600

08000468 <XMC_SCU_CLOCK_GatePeripheralClock>:

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 8000468:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 800046a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800046e:	4a03      	ldr	r2, [pc, #12]	; (800047c <XMC_SCU_CLOCK_GatePeripheralClock+0x14>)
#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000470:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 8000474:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	50004644 	.word	0x50004644

08000480 <XMC_SCU_CLOCK_UngatePeripheralClock>:
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000480:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000486:	4a03      	ldr	r2, [pc, #12]	; (8000494 <XMC_SCU_CLOCK_UngatePeripheralClock+0x14>)

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000488:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800048c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	50004648 	.word	0x50004648

08000498 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	f042 0201 	orr.w	r2, r2, #1
 80004a0:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004a2:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80004a4:	3801      	subs	r0, #1
 80004a6:	0600      	lsls	r0, r0, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80004a8:	3901      	subs	r1, #1
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004aa:	f042 0210 	orr.w	r2, r2, #16

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80004ae:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004b2:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80004b4:	6158      	str	r0, [r3, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004bc:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	f022 0210 	bic.w	r2, r2, #16
 80004c4:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80004cc:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80004ce:	691a      	ldr	r2, [r3, #16]
 80004d0:	0752      	lsls	r2, r2, #29
 80004d2:	d5fc      	bpl.n	80004ce <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	50004710 	.word	0x50004710

080004dc <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <XMC_SCU_POWER_EnableUsb+0xc>)
 80004de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	50004200 	.word	0x50004200

080004ec <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80004ec:	4b02      	ldr	r3, [pc, #8]	; (80004f8 <XMC_SCU_POWER_DisableUsb+0xc>)
 80004ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	50004200 	.word	0x50004200

080004fc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b083      	sub	sp, #12
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000500:	4c64      	ldr	r4, [pc, #400]	; (8000694 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000502:	9e08      	ldr	r6, [sp, #32]

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000504:	b1c0      	cbz	r0, 8000538 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000506:	68e0      	ldr	r0, [r4, #12]
 8000508:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800050c:	f040 0001 	orr.w	r0, r0, #1
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000510:	2901      	cmp	r1, #1
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000512:	60e0      	str	r0, [r4, #12]
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000514:	f000 8086 	beq.w	8000624 <XMC_SCU_CLOCK_StartSystemPll+0x128>

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 800051a:	6893      	ldr	r3, [r2, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800051c:	3e01      	subs	r6, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800051e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000522:	431e      	orrs	r6, r3
 8000524:	6096      	str	r6, [r2, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000526:	6853      	ldr	r3, [r2, #4]
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800052e:	6813      	ldr	r3, [r2, #0]
 8000530:	07db      	lsls	r3, r3, #31
 8000532:	d5fc      	bpl.n	800052e <XMC_SCU_CLOCK_StartSystemPll+0x32>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000534:	b003      	add	sp, #12
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000538:	68e0      	ldr	r0, [r4, #12]
 800053a:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800053e:	f020 0001 	bic.w	r0, r0, #1
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000542:	2901      	cmp	r1, #1
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000544:	60e0      	str	r0, [r4, #12]
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000546:	d1e7      	bne.n	8000518 <XMC_SCU_CLOCK_StartSystemPll+0x1c>
 8000548:	e88d 000c 	stmia.w	sp, {r2, r3}
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 800054c:	f004 fb84 	bl	8004c58 <OSCHP_GetFrequency>
 8000550:	4d51      	ldr	r5, [pc, #324]	; (8000698 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000552:	fba5 3500 	umull	r3, r5, r5, r0
 8000556:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800055a:	0cad      	lsrs	r5, r5, #18
 800055c:	05ad      	lsls	r5, r5, #22
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800055e:	494d      	ldr	r1, [pc, #308]	; (8000694 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000560:	4c4e      	ldr	r4, [pc, #312]	; (800069c <XMC_SCU_CLOCK_StartSystemPll+0x1a0>)

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000562:	684f      	ldr	r7, [r1, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000564:	484e      	ldr	r0, [pc, #312]	; (80006a0 <XMC_SCU_CLOCK_StartSystemPll+0x1a4>)
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000566:	f047 0701 	orr.w	r7, r7, #1
 800056a:	604f      	str	r7, [r1, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 800056c:	684f      	ldr	r7, [r1, #4]
 800056e:	f047 0710 	orr.w	r7, r7, #16
 8000572:	604f      	str	r7, [r1, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000574:	f8d1 e008 	ldr.w	lr, [r1, #8]
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000578:	fb03 f505 	mul.w	r5, r3, r5

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 800057c:	1e57      	subs	r7, r2, #1
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800057e:	fbb5 f5f2 	udiv	r5, r5, r2

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000582:	ea0e 0000 	and.w	r0, lr, r0
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000586:	fba4 4205 	umull	r4, r2, r4, r5
 800058a:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800058e:	1e5c      	subs	r4, r3, #1
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000590:	0e93      	lsrs	r3, r2, #26
 8000592:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000596:	3b01      	subs	r3, #1

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000598:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800059c:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800059e:	684b      	ldr	r3, [r1, #4]
 80005a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a4:	604b      	str	r3, [r1, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80005a6:	684b      	ldr	r3, [r1, #4]
 80005a8:	f023 0310 	bic.w	r3, r3, #16
 80005ac:	604b      	str	r3, [r1, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80005ae:	684b      	ldr	r3, [r1, #4]
 80005b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b4:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80005b6:	6808      	ldr	r0, [r1, #0]
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80005ba:	0742      	lsls	r2, r0, #29
 80005bc:	d5fb      	bpl.n	80005b6 <XMC_SCU_CLOCK_StartSystemPll+0xba>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	f022 0201 	bic.w	r2, r2, #1
 80005c4:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80005c6:	4619      	mov	r1, r3
 80005c8:	680b      	ldr	r3, [r1, #0]
 80005ca:	4a32      	ldr	r2, [pc, #200]	; (8000694 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80005cc:	f013 0401 	ands.w	r4, r3, #1
 80005d0:	d1fa      	bne.n	80005c8 <XMC_SCU_CLOCK_StartSystemPll+0xcc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80005d2:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <XMC_SCU_CLOCK_StartSystemPll+0x1a8>)
 80005d4:	fba3 1305 	umull	r1, r3, r3, r5
 80005d8:	0edb      	lsrs	r3, r3, #27
    if (kdiv < kdiv_temp)
 80005da:	429e      	cmp	r6, r3
 80005dc:	d33f      	bcc.n	800065e <XMC_SCU_CLOCK_StartSystemPll+0x162>
 80005de:	4f32      	ldr	r7, [pc, #200]	; (80006a8 <XMC_SCU_CLOCK_StartSystemPll+0x1ac>)
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80005e0:	4b32      	ldr	r3, [pc, #200]	; (80006ac <XMC_SCU_CLOCK_StartSystemPll+0x1b0>)
 80005e2:	086d      	lsrs	r5, r5, #1
 80005e4:	fba3 2305 	umull	r2, r3, r3, r5
 80005e8:	0edb      	lsrs	r3, r3, #27
    if (kdiv < kdiv_temp)
 80005ea:	429e      	cmp	r6, r3
 80005ec:	d31d      	bcc.n	800062a <XMC_SCU_CLOCK_StartSystemPll+0x12e>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80005ee:	4a29      	ldr	r2, [pc, #164]	; (8000694 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80005f0:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80005f2:	3e01      	subs	r6, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80005f4:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005f8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80005fc:	6096      	str	r6, [r2, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 80005fe:	f001 fe71 	bl	80022e4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	4a24      	ldr	r2, [pc, #144]	; (8000698 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000606:	fba2 3203 	umull	r3, r2, r2, r3
 800060a:	0c92      	lsrs	r2, r2, #18
 800060c:	2332      	movs	r3, #50	; 0x32
 800060e:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 8000612:	2300      	movs	r3, #0
 8000614:	2a00      	cmp	r2, #0
 8000616:	d08d      	beq.n	8000534 <XMC_SCU_CLOCK_StartSystemPll+0x38>
  {
    __NOP();
 8000618:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800061a:	3301      	adds	r3, #1
 800061c:	4293      	cmp	r3, r2
 800061e:	d1fb      	bne.n	8000618 <XMC_SCU_CLOCK_StartSystemPll+0x11c>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8000620:	b003      	add	sp, #12
 8000622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000624:	f04f 65c0 	mov.w	r5, #100663296	; 0x6000000
 8000628:	e799      	b.n	800055e <XMC_SCU_CLOCK_StartSystemPll+0x62>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800062a:	491a      	ldr	r1, [pc, #104]	; (8000694 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 800062c:	688a      	ldr	r2, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 800062e:	3b01      	subs	r3, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000630:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000634:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000638:	608b      	str	r3, [r1, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 800063a:	f001 fe53 	bl	80022e4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000642:	fba2 3203 	umull	r3, r2, r2, r3
 8000646:	0c92      	lsrs	r2, r2, #18
 8000648:	2332      	movs	r3, #50	; 0x32
 800064a:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 800064e:	2a00      	cmp	r2, #0
 8000650:	d0cd      	beq.n	80005ee <XMC_SCU_CLOCK_StartSystemPll+0xf2>
 8000652:	2300      	movs	r3, #0
  {
    __NOP();
 8000654:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000656:	3301      	adds	r3, #1
 8000658:	4293      	cmp	r3, r2
 800065a:	d1fb      	bne.n	8000654 <XMC_SCU_CLOCK_StartSystemPll+0x158>
 800065c:	e7c7      	b.n	80005ee <XMC_SCU_CLOCK_StartSystemPll+0xf2>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800065e:	6891      	ldr	r1, [r2, #8]
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000660:	4f11      	ldr	r7, [pc, #68]	; (80006a8 <XMC_SCU_CLOCK_StartSystemPll+0x1ac>)
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000662:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000666:	3b01      	subs	r3, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000668:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066c:	6093      	str	r3, [r2, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 800066e:	f001 fe39 	bl	80022e4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000676:	fba2 3203 	umull	r3, r2, r2, r3
 800067a:	0c92      	lsrs	r2, r2, #18
 800067c:	2332      	movs	r3, #50	; 0x32
 800067e:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 8000682:	2a00      	cmp	r2, #0
 8000684:	d0ac      	beq.n	80005e0 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
 8000686:	4623      	mov	r3, r4
  {
    __NOP();
 8000688:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800068a:	3301      	adds	r3, #1
 800068c:	4293      	cmp	r3, r2
 800068e:	d1fb      	bne.n	8000688 <XMC_SCU_CLOCK_StartSystemPll+0x18c>
 8000690:	e7a6      	b.n	80005e0 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
 8000692:	bf00      	nop
 8000694:	50004710 	.word	0x50004710
 8000698:	431bde83 	.word	0x431bde83
 800069c:	aaaaaaab 	.word	0xaaaaaaab
 80006a0:	f08080ff 	.word	0xf08080ff
 80006a4:	88888889 	.word	0x88888889
 80006a8:	2003ffc0 	.word	0x2003ffc0
 80006ac:	b60b60b7 	.word	0xb60b60b7

080006b0 <XMC_SCU_CLOCK_Init>:
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006b0:	4978      	ldr	r1, [pc, #480]	; (8000894 <XMC_SCU_CLOCK_Init+0x1e4>)

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006b2:	4a79      	ldr	r2, [pc, #484]	; (8000898 <XMC_SCU_CLOCK_Init+0x1e8>)
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006b4:	68cb      	ldr	r3, [r1, #12]
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80006b6:	b5f0      	push	{r4, r5, r6, r7, lr}
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006bc:	60cb      	str	r3, [r1, #12]

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006be:	6813      	ldr	r3, [r2, #0]
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80006c0:	4605      	mov	r5, r0

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006c2:	07d8      	lsls	r0, r3, #31
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80006c4:	b083      	sub	sp, #12

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006c6:	d404      	bmi.n	80006d2 <XMC_SCU_CLOCK_Init+0x22>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80006c8:	2301      	movs	r3, #1
 80006ca:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006cc:	6813      	ldr	r3, [r2, #0]
 80006ce:	07db      	lsls	r3, r3, #31
 80006d0:	d5fc      	bpl.n	80006cc <XMC_SCU_CLOCK_Init+0x1c>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80006d2:	4a72      	ldr	r2, [pc, #456]	; (800089c <XMC_SCU_CLOCK_Init+0x1ec>)
 80006d4:	6813      	ldr	r3, [r2, #0]
 80006d6:	0599      	lsls	r1, r3, #22
 80006d8:	d505      	bpl.n	80006e6 <XMC_SCU_CLOCK_Init+0x36>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80006da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006de:	6093      	str	r3, [r2, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80006e0:	6813      	ldr	r3, [r2, #0]
 80006e2:	059f      	lsls	r7, r3, #22
 80006e4:	d4fc      	bmi.n	80006e0 <XMC_SCU_CLOCK_Init+0x30>

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);

  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
 80006e6:	79eb      	ldrb	r3, [r5, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f040 8091 	bne.w	8000810 <XMC_SCU_CLOCK_Init+0x160>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80006ee:	7a68      	ldrb	r0, [r5, #9]
}

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80006f0:	4a6b      	ldr	r2, [pc, #428]	; (80008a0 <XMC_SCU_CLOCK_Init+0x1f0>)
 80006f2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80006f6:	071b      	lsls	r3, r3, #28
 80006f8:	d4fb      	bmi.n	80006f2 <XMC_SCU_CLOCK_Init+0x42>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80006fa:	496a      	ldr	r1, [pc, #424]	; (80008a4 <XMC_SCU_CLOCK_Init+0x1f4>)
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 80006fc:	4b68      	ldr	r3, [pc, #416]	; (80008a0 <XMC_SCU_CLOCK_Init+0x1f0>)
 80006fe:	68ca      	ldr	r2, [r1, #12]
 8000700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000704:	4302      	orrs	r2, r0
 8000706:	60ca      	str	r2, [r1, #12]
 8000708:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
  while (XMC_SCU_GetMirrorStatus() != 0)
 800070c:	2c00      	cmp	r4, #0
 800070e:	d1fb      	bne.n	8000708 <XMC_SCU_CLOCK_Init+0x58>

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000710:	4a65      	ldr	r2, [pc, #404]	; (80008a8 <XMC_SCU_CLOCK_Init+0x1f8>)
  while (XMC_SCU_GetMirrorStatus() != 0)
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000712:	7a29      	ldrb	r1, [r5, #8]

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000714:	6853      	ldr	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000716:	2901      	cmp	r1, #1

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800071c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800071e:	f000 809f 	beq.w	8000860 <XMC_SCU_CLOCK_Init+0x1b0>
 8000722:	4e62      	ldr	r6, [pc, #392]	; (80008ac <XMC_SCU_CLOCK_Init+0x1fc>)
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 8000724:	f001 fdde 	bl	80022e4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000728:	6833      	ldr	r3, [r6, #0]
 800072a:	4a61      	ldr	r2, [pc, #388]	; (80008b0 <XMC_SCU_CLOCK_Init+0x200>)
 800072c:	fba2 3203 	umull	r3, r2, r2, r3
 8000730:	0c92      	lsrs	r2, r2, #18
 8000732:	2364      	movs	r3, #100	; 0x64
 8000734:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 8000738:	b122      	cbz	r2, 8000744 <XMC_SCU_CLOCK_Init+0x94>
 800073a:	2300      	movs	r3, #0
  {
    __NOP();
 800073c:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800073e:	3301      	adds	r3, #1
 8000740:	4293      	cmp	r3, r2
 8000742:	d1fb      	bne.n	800073c <XMC_SCU_CLOCK_Init+0x8c>
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000744:	4b53      	ldr	r3, [pc, #332]	; (8000894 <XMC_SCU_CLOCK_Init+0x1e4>)
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000746:	7c2c      	ldrb	r4, [r5, #16]
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000748:	68da      	ldr	r2, [r3, #12]
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
 800074a:	79a8      	ldrb	r0, [r5, #6]
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800074c:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000750:	1e62      	subs	r2, r4, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000752:	430a      	orrs	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000756:	691a      	ldr	r2, [r3, #16]
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000758:	7c6c      	ldrb	r4, [r5, #17]
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800075a:	f022 0101 	bic.w	r1, r2, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800075e:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000760:	430a      	orrs	r2, r1
 8000762:	611a      	str	r2, [r3, #16]
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000764:	6a1a      	ldr	r2, [r3, #32]

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000766:	7cac      	ldrb	r4, [r5, #18]
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000768:	f022 0101 	bic.w	r1, r2, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800076c:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800076e:	430a      	orrs	r2, r1
 8000770:	621a      	str	r2, [r3, #32]
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000772:	695a      	ldr	r2, [r3, #20]
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000774:	7cec      	ldrb	r4, [r5, #19]
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000776:	f022 0101 	bic.w	r1, r2, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800077a:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
 8000780:	bb28      	cbnz	r0, 80007ce <XMC_SCU_CLOCK_Init+0x11e>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000782:	78e9      	ldrb	r1, [r5, #3]
 8000784:	b9a1      	cbnz	r1, 80007b0 <XMC_SCU_CLOCK_Init+0x100>
}

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000786:	4a48      	ldr	r2, [pc, #288]	; (80008a8 <XMC_SCU_CLOCK_Init+0x1f8>)
 8000788:	6853      	ldr	r3, [r2, #4]
 800078a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078e:	f043 0302 	orr.w	r3, r3, #2
 8000792:	6053      	str	r3, [r2, #4]
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000794:	68eb      	ldr	r3, [r5, #12]
 8000796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079a:	d104      	bne.n	80007a6 <XMC_SCU_CLOCK_Init+0xf6>
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800079c:	4a3d      	ldr	r2, [pc, #244]	; (8000894 <XMC_SCU_CLOCK_Init+0x1e4>)
 800079e:	68d3      	ldr	r3, [r2, #12]
 80007a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a4:	60d3      	str	r3, [r2, #12]
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
}
 80007a6:	b003      	add	sp, #12
 80007a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
 80007ac:	f001 bd9a 	b.w	80022e4 <SystemCoreClockUpdate>
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80007b0:	4a3d      	ldr	r2, [pc, #244]	; (80008a8 <XMC_SCU_CLOCK_Init+0x1f8>)
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80007b2:	88a8      	ldrh	r0, [r5, #4]
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80007b4:	6853      	ldr	r3, [r2, #4]
 80007b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ba:	f023 0302 	bic.w	r3, r3, #2
 80007be:	6053      	str	r3, [r2, #4]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80007c0:	78ac      	ldrb	r4, [r5, #2]
 80007c2:	786a      	ldrb	r2, [r5, #1]
 80007c4:	782b      	ldrb	r3, [r5, #0]
 80007c6:	9400      	str	r4, [sp, #0]
 80007c8:	f7ff fe98 	bl	80004fc <XMC_SCU_CLOCK_StartSystemPll>
 80007cc:	e7e2      	b.n	8000794 <XMC_SCU_CLOCK_Init+0xe4>
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80007ce:	4c36      	ldr	r4, [pc, #216]	; (80008a8 <XMC_SCU_CLOCK_Init+0x1f8>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007d0:	4f38      	ldr	r7, [pc, #224]	; (80008b4 <XMC_SCU_CLOCK_Init+0x204>)
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80007d2:	6863      	ldr	r3, [r4, #4]
 80007d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d8:	6063      	str	r3, [r4, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007da:	687e      	ldr	r6, [r7, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80007dc:	f004 fa3c 	bl	8004c58 <OSCHP_GetFrequency>
 80007e0:	4a35      	ldr	r2, [pc, #212]	; (80008b8 <XMC_SCU_CLOCK_Init+0x208>)
 80007e2:	fba2 3200 	umull	r3, r2, r2, r0
 80007e6:	0d12      	lsrs	r2, r2, #20
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007e8:	f426 2370 	bic.w	r3, r6, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80007ec:	3a01      	subs	r2, #1
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007f6:	607b      	str	r3, [r7, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80007f8:	6863      	ldr	r3, [r4, #4]
 80007fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007fe:	6063      	str	r3, [r4, #4]
}

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000800:	4622      	mov	r2, r4
 8000802:	6813      	ldr	r3, [r2, #0]
 8000804:	f403 7360 	and.w	r3, r3, #896	; 0x380
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000808:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800080c:	d1f9      	bne.n	8000802 <XMC_SCU_CLOCK_Init+0x152>
 800080e:	e7b8      	b.n	8000782 <XMC_SCU_CLOCK_Init+0xd2>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000810:	492a      	ldr	r1, [pc, #168]	; (80008bc <XMC_SCU_CLOCK_Init+0x20c>)
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000812:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <XMC_SCU_CLOCK_Init+0x1f4>)
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000814:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000818:	60cb      	str	r3, [r1, #12]
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 800081a:	69d3      	ldr	r3, [r2, #28]
 800081c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000820:	61d3      	str	r3, [r2, #28]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000822:	684a      	ldr	r2, [r1, #4]
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <XMC_SCU_CLOCK_Init+0x20c>)
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000826:	0216      	lsls	r6, r2, #8
 8000828:	d5fb      	bpl.n	8000822 <XMC_SCU_CLOCK_Init+0x172>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 800082a:	491e      	ldr	r1, [pc, #120]	; (80008a4 <XMC_SCU_CLOCK_Init+0x1f4>)
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800082c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000830:	2008      	movs	r0, #8
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000832:	60da      	str	r2, [r3, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000834:	461a      	mov	r2, r3
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000836:	6048      	str	r0, [r1, #4]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000838:	6851      	ldr	r1, [r2, #4]
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <XMC_SCU_CLOCK_Init+0x20c>)
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 800083c:	038c      	lsls	r4, r1, #14
 800083e:	d5fb      	bpl.n	8000838 <XMC_SCU_CLOCK_Init+0x188>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000840:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000844:	4917      	ldr	r1, [pc, #92]	; (80008a4 <XMC_SCU_CLOCK_Init+0x1f4>)
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000846:	60da      	str	r2, [r3, #12]
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000848:	68ca      	ldr	r2, [r1, #12]
 800084a:	f042 0208 	orr.w	r2, r2, #8
 800084e:	60ca      	str	r2, [r1, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000850:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000852:	0310      	lsls	r0, r2, #12
 8000854:	d5fc      	bpl.n	8000850 <XMC_SCU_CLOCK_Init+0x1a0>

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <XMC_SCU_CLOCK_Init+0x1f4>)
 8000858:	6813      	ldr	r3, [r2, #0]
  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800085a:	0719      	lsls	r1, r3, #28
 800085c:	d4fc      	bmi.n	8000858 <XMC_SCU_CLOCK_Init+0x1a8>
 800085e:	e746      	b.n	80006ee <XMC_SCU_CLOCK_Init+0x3e>
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000860:	6853      	ldr	r3, [r2, #4]
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000862:	4e12      	ldr	r6, [pc, #72]	; (80008ac <XMC_SCU_CLOCK_Init+0x1fc>)
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000864:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000868:	6053      	str	r3, [r2, #4]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 800086a:	f001 fd3b 	bl	80022e4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <XMC_SCU_CLOCK_Init+0x200>)
 8000870:	6833      	ldr	r3, [r6, #0]
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	0c9a      	lsrs	r2, r3, #18
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	fb03 f302 	mul.w	r3, r3, r2

  for (i = 0U; i < delay; ++i)
 800087e:	b11b      	cbz	r3, 8000888 <XMC_SCU_CLOCK_Init+0x1d8>
  {
    __NOP();
 8000880:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000882:	3401      	adds	r4, #1
 8000884:	429c      	cmp	r4, r3
 8000886:	d1fb      	bne.n	8000880 <XMC_SCU_CLOCK_Init+0x1d0>
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
    XMC_SCU_lDelay(100UL);

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <XMC_SCU_CLOCK_Init+0x1f8>)
 800088a:	6853      	ldr	r3, [r2, #4]
 800088c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000890:	6053      	str	r3, [r2, #4]
 8000892:	e747      	b.n	8000724 <XMC_SCU_CLOCK_Init+0x74>
 8000894:	50004600 	.word	0x50004600
 8000898:	50004200 	.word	0x50004200
 800089c:	50004400 	.word	0x50004400
 80008a0:	50004000 	.word	0x50004000
 80008a4:	50004300 	.word	0x50004300
 80008a8:	50004710 	.word	0x50004710
 80008ac:	2003ffc0 	.word	0x2003ffc0
 80008b0:	431bde83 	.word	0x431bde83
 80008b4:	50004700 	.word	0x50004700
 80008b8:	6b5fca6b 	.word	0x6b5fca6b
 80008bc:	50004074 	.word	0x50004074

080008c0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80008c0:	b538      	push	{r3, r4, r5, lr}
 80008c2:	4604      	mov	r4, r0
{
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80008c4:	2010      	movs	r0, #16
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80008c6:	460d      	mov	r5, r1
{
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80008c8:	f7ff fdc8 	bl	800045c <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <XMC_CCU4_Init+0x74>)
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d01a      	beq.n	8000908 <XMC_CCU4_Init+0x48>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <XMC_CCU4_Init+0x78>)
 80008d4:	429c      	cmp	r4, r3
 80008d6:	d01e      	beq.n	8000916 <XMC_CCU4_Init+0x56>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <XMC_CCU4_Init+0x7c>)
 80008da:	429c      	cmp	r4, r3
 80008dc:	d022      	beq.n	8000924 <XMC_CCU4_Init+0x64>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <XMC_CCU4_Init+0x80>)
 80008e0:	429c      	cmp	r4, r3
 80008e2:	d00a      	beq.n	80008fa <XMC_CCU4_Init+0x3a>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80008e4:	68e3      	ldr	r3, [r4, #12]
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 80008ec:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80008ee:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80008f2:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
  
  module->GCTRL = gctrl;
 80008f6:	6021      	str	r1, [r4, #0]
 80008f8:	bd38      	pop	{r3, r4, r5, pc}
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 80008fa:	4812      	ldr	r0, [pc, #72]	; (8000944 <XMC_CCU4_Init+0x84>)
 80008fc:	f7ff fdc0 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <XMC_CCU4_Init+0x84>)
 8000902:	f7ff fd47 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000906:	e7ed      	b.n	80008e4 <XMC_CCU4_Init+0x24>

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000908:	2004      	movs	r0, #4
 800090a:	f7ff fdb9 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800090e:	2004      	movs	r0, #4
 8000910:	f7ff fd40 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000914:	e7e6      	b.n	80008e4 <XMC_CCU4_Init+0x24>
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000916:	2008      	movs	r0, #8
 8000918:	f7ff fdb2 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800091c:	2008      	movs	r0, #8
 800091e:	f7ff fd39 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000922:	e7df      	b.n	80008e4 <XMC_CCU4_Init+0x24>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000924:	2010      	movs	r0, #16
 8000926:	f7ff fdab 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800092a:	2010      	movs	r0, #16
 800092c:	f7ff fd32 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000930:	e7d8      	b.n	80008e4 <XMC_CCU4_Init+0x24>
 8000932:	bf00      	nop
 8000934:	4000c000 	.word	0x4000c000
 8000938:	40010000 	.word	0x40010000
 800093c:	40014000 	.word	0x40014000
 8000940:	48004000 	.word	0x48004000
 8000944:	10000001 	.word	0x10000001

08000948 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000948:	b470      	push	{r4, r5, r6}
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800094a:	794b      	ldrb	r3, [r1, #5]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800094c:	790e      	ldrb	r6, [r1, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800094e:	6809      	ldr	r1, [r1, #0]
 8000950:	6141      	str	r1, [r0, #20]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000952:	461c      	mov	r4, r3
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000954:	461d      	mov	r5, r3
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000956:	4632      	mov	r2, r6
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000958:	f3c3 1340 	ubfx	r3, r3, #5, #1
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800095c:	f006 060f 	and.w	r6, r6, #15
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000960:	f005 050f 	and.w	r5, r5, #15
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000964:	f3c4 1100 	ubfx	r1, r4, #4, #1
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000968:	051b      	lsls	r3, r3, #20
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800096a:	0912      	lsrs	r2, r2, #4
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800096c:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800096e:	6246      	str	r6, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000970:	6205      	str	r5, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000972:	6181      	str	r1, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
}
 8000974:	bc70      	pop	{r4, r5, r6}
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000976:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 800097c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 800097e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8000982:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  slice->FPC = fpc;
 8000986:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000988:	6241      	str	r1, [r0, #36]	; 0x24
 800098a:	4770      	bx	lr

0800098c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 800098c:	2909      	cmp	r1, #9
 800098e:	b430      	push	{r4, r5}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000990:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 8000994:	d80d      	bhi.n	80009b2 <XMC_CCU4_SLICE_SetInterruptNode+0x26>
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <XMC_CCU4_SLICE_SetInterruptNode+0x30>)
 8000998:	4d09      	ldr	r5, [pc, #36]	; (80009c0 <XMC_CCU4_SLICE_SetInterruptNode+0x34>)
 800099a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800099e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80009a2:	43db      	mvns	r3, r3
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
 80009a4:	4023      	ands	r3, r4
  srs |= (uint32_t)sr << pos;
 80009a6:	408a      	lsls	r2, r1
 80009a8:	431a      	orrs	r2, r3
  slice->SRS = srs;
 80009aa:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 80009ae:	bc30      	pop	{r4, r5}
 80009b0:	4770      	bx	lr

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80009b2:	210c      	movs	r1, #12
 80009b4:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 80009b8:	e7f4      	b.n	80009a4 <XMC_CCU4_SLICE_SetInterruptNode+0x18>
 80009ba:	bf00      	nop
 80009bc:	0800dac4 	.word	0x0800dac4
 80009c0:	0800da9c 	.word	0x0800da9c

080009c4 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4604      	mov	r4, r0
{
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80009c8:	2010      	movs	r0, #16
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80009ca:	460d      	mov	r5, r1
{
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80009cc:	f7ff fd46 	bl	800045c <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <XMC_CCU8_Init+0x50>)
 80009d2:	429c      	cmp	r4, r3
 80009d4:	d016      	beq.n	8000a04 <XMC_CCU8_Init+0x40>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <XMC_CCU8_Init+0x54>)
 80009d8:	429c      	cmp	r4, r3
 80009da:	d00a      	beq.n	80009f2 <XMC_CCU8_Init+0x2e>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80009dc:	68e3      	ldr	r3, [r4, #12]
 80009de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e2:	60e3      	str	r3, [r4, #12]
  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 80009e4:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80009e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80009ea:	ea43 3185 	orr.w	r1, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 80009ee:	6021      	str	r1, [r4, #0]
 80009f0:	bd38      	pop	{r3, r4, r5, pc}
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 80009f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009f6:	f7ff fd43 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 80009fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009fe:	f7ff fcc9 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000a02:	e7eb      	b.n	80009dc <XMC_CCU8_Init+0x18>

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8000a04:	2080      	movs	r0, #128	; 0x80
 8000a06:	f7ff fd3b 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	f7ff fcc2 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000a10:	e7e4      	b.n	80009dc <XMC_CCU8_Init+0x18>
 8000a12:	bf00      	nop
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40024000 	.word	0x40024000

08000a1c <XMC_CCU8_SLICE_CompareInit>:
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000a1c:	7b4b      	ldrb	r3, [r1, #13]
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000a1e:	b470      	push	{r4, r5, r6}
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000a20:	7b0d      	ldrb	r5, [r1, #12]
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000a22:	2601      	movs	r6, #1
 8000a24:	6106      	str	r6, [r0, #16]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000a26:	462c      	mov	r4, r5
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000a28:	461a      	mov	r2, r3
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000a2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000a2e:	680e      	ldr	r6, [r1, #0]
 8000a30:	6146      	str	r6, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000a32:	051b      	lsls	r3, r3, #20
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000a34:	f005 050f 	and.w	r5, r5, #15
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000a38:	0924      	lsrs	r4, r4, #4
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000a3a:	f002 020f 	and.w	r2, r2, #15
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000a3e:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000a40:	6245      	str	r5, [r0, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000a42:	62c4      	str	r4, [r0, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000a44:	6202      	str	r2, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8000a46:	684b      	ldr	r3, [r1, #4]
 8000a48:	6183      	str	r3, [r0, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8000a4a:	688b      	ldr	r3, [r1, #8]
 8000a4c:	f083 0314 	eor.w	r3, r3, #20
 8000a50:	6483      	str	r3, [r0, #72]	; 0x48
#endif
}
 8000a52:	bc70      	pop	{r4, r5, r6}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000a58:	6341      	str	r1, [r0, #52]	; 0x34
 8000a5a:	4770      	bx	lr

08000a5c <XMC_CCU8_SLICE_SetPrescaler>:
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* If the prescaler is not running, update directly the divider*/
  fpc = slice->FPC;
 8000a5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 8000a5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 8000a62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  slice->FPC = fpc;
 8000a66:	6283      	str	r3, [r0, #40]	; 0x28

  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000a68:	6241      	str	r1, [r0, #36]	; 0x24
 8000a6a:	4770      	bx	lr

08000a6c <XMC_CCU8_SLICE_SetTimerCompareMatch>:
                                         const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8000a6c:	b109      	cbz	r1, 8000a72 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x6>
  {
    slice->CR1S = (uint32_t) compare_val;
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8000a6e:	6442      	str	r2, [r0, #68]	; 0x44
 8000a70:	4770      	bx	lr
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
  {
    slice->CR1S = (uint32_t) compare_val;
 8000a72:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8000a78:	2909      	cmp	r1, #9
 8000a7a:	b430      	push	{r4, r5}

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8000a7c:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 8000a80:	d80d      	bhi.n	8000a9e <XMC_CCU8_SLICE_SetInterruptNode+0x26>
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <XMC_CCU8_SLICE_SetInterruptNode+0x30>)
 8000a84:	4d09      	ldr	r5, [pc, #36]	; (8000aac <XMC_CCU8_SLICE_SetInterruptNode+0x34>)
 8000a86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a8a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8000a8e:	43db      	mvns	r3, r3
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
      pos  = CCU8_CC8_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask;
 8000a90:	4023      	ands	r3, r4
  srs |= (uint32_t)sr << pos;
 8000a92:	408a      	lsls	r2, r1
 8000a94:	431a      	orrs	r2, r3
  
  slice->SRS = srs;
 8000a96:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 8000a9a:	bc30      	pop	{r4, r5}
 8000a9c:	4770      	bx	lr

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8000a9e:	210c      	movs	r1, #12
 8000aa0:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8000aa4:	e7f4      	b.n	8000a90 <XMC_CCU8_SLICE_SetInterruptNode+0x18>
 8000aa6:	bf00      	nop
 8000aa8:	0800daec 	.word	0x0800daec
 8000aac:	0800db14 	.word	0x0800db14

08000ab0 <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 8000ab0:	4603      	mov	r3, r0
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
  engine->kernel_ptr->CRC = engine->seedvalue;
  
  return XMC_FCE_STATUS_OK;
}
 8000ab2:	2000      	movs	r0, #0
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	6859      	ldr	r1, [r3, #4]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8000ab8:	689b      	ldr	r3, [r3, #8]
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8000aba:	6091      	str	r1, [r2, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8000abc:	6193      	str	r3, [r2, #24]
  
  return XMC_FCE_STATUS_OK;
}
 8000abe:	4770      	bx	lr

08000ac0 <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 8000ac0:	b510      	push	{r4, lr}
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 8000ac2:	4c06      	ldr	r4, [pc, #24]	; (8000adc <XMC_FCE_Enable+0x1c>)
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f7ff fcdb 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8000aca:	4620      	mov	r0, r4
 8000acc:	f7ff fc62 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <XMC_FCE_Enable+0x20>)
 8000ad2:	6813      	ldr	r3, [r2, #0]
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	bd10      	pop	{r4, pc}
 8000adc:	20000040 	.word	0x20000040
 8000ae0:	50020000 	.word	0x50020000

08000ae4 <XMC_FCE_CalculateCRC32>:
                                                               (engine->kernel_ptr == XMC_FCE_CRC32_1)));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x3U) == 0));

  /* Check length is a multiple of 4 */
  if ((length == 0) || ((length & 0x3U) != 0U))
 8000ae4:	b90a      	cbnz	r2, 8000aea <XMC_FCE_CalculateCRC32+0x6>
  {
    status = XMC_FCE_STATUS_ERROR;
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	4770      	bx	lr
                                                               (engine->kernel_ptr == XMC_FCE_CRC32_1)));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x3U) == 0));

  /* Check length is a multiple of 4 */
  if ((length == 0) || ((length & 0x3U) != 0U))
 8000aea:	f012 0f03 	tst.w	r2, #3
 8000aee:	d1fa      	bne.n	8000ae6 <XMC_FCE_CalculateCRC32+0x2>
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 8000af0:	b410      	push	{r4}
 8000af2:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
    while (0UL != length)
    {
      engine->kernel_ptr->IR = *data;
 8000af4:	f851 0b04 	ldr.w	r0, [r1], #4
 8000af8:	6020      	str	r0, [r4, #0]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8000afa:	3a04      	subs	r2, #4
 8000afc:	d1fa      	bne.n	8000af4 <XMC_FCE_CalculateCRC32+0x10>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 8000afe:	69a1      	ldr	r1, [r4, #24]
 8000b00:	6019      	str	r1, [r3, #0]
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 8000b02:	4610      	mov	r0, r2

    *result = engine->kernel_ptr->CRC;
  }
  
  return status;
}
 8000b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000b0c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000b10:	4418      	add	r0, r3
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000b12:	f001 0103 	and.w	r1, r1, #3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000b16:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000b18:	00c9      	lsls	r1, r1, #3
 8000b1a:	6904      	ldr	r4, [r0, #16]
 8000b1c:	23f8      	movs	r3, #248	; 0xf8
 8000b1e:	408b      	lsls	r3, r1
 8000b20:	ea24 0303 	bic.w	r3, r4, r3
 8000b24:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000b26:	6903      	ldr	r3, [r0, #16]
}
 8000b28:	f85d 4b04 	ldr.w	r4, [sp], #4
{
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000b2c:	408a      	lsls	r2, r1
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	6103      	str	r3, [r0, #16]
}
 8000b32:	4770      	bx	lr

08000b34 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000b34:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000b36:	0049      	lsls	r1, r1, #1
 8000b38:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	408b      	lsls	r3, r1
 8000b3e:	ea24 0303 	bic.w	r3, r4, r3
 8000b42:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000b44:	6f43      	ldr	r3, [r0, #116]	; 0x74
}
 8000b46:	f85d 4b04 	ldr.w	r4, [sp], #4
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000b4a:	408a      	lsls	r2, r1
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	460d      	mov	r5, r1
 8000b58:	4604      	mov	r4, r0
  XMC_USIC_CH_Enable(channel);
 8000b5a:	f001 fad7 	bl	800210c <XMC_USIC_CH_Enable>
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8000b5e:	88ab      	ldrh	r3, [r5, #4]
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
  XMC_USIC_CH_Enable(channel);
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <XMC_I2C_CH_Init+0x70>)
 8000b62:	6362      	str	r2, [r4, #52]	; 0x34
  channel->CCR = 0x0U;
}
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8000b64:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 8000b68:	f5b2 4ff0 	cmp.w	r2, #30720	; 0x7800
 8000b6c:	d023      	beq.n	8000bb6 <XMC_I2C_CH_Init+0x62>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	63e3      	str	r3, [r4, #60]	; 0x3c
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8000b72:	6829      	ldr	r1, [r5, #0]
{
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <XMC_I2C_CH_Init+0x74>)
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d914      	bls.n	8000ba4 <XMC_I2C_CH_Init+0x50>
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <XMC_I2C_CH_Init+0x78>)
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d908      	bls.n	8000b92 <XMC_I2C_CH_Init+0x3e>

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8000b80:	f44f 61a0 	mov.w	r1, #1280	; 0x500

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8000b88:	2300      	movs	r3, #0

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8000b8a:	63a1      	str	r1, [r4, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8000b8c:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8000b8e:	6423      	str	r3, [r4, #64]	; 0x40
 8000b90:	bd38      	pop	{r3, r4, r5, pc}
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8000b92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	2219      	movs	r2, #25
 8000b9e:	f001 faf7 	bl	8002190 <XMC_USIC_CH_SetBaudrate>
 8000ba2:	e7ed      	b.n	8000b80 <XMC_I2C_CH_Init+0x2c>
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8000ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ba6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000baa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8000bac:	4620      	mov	r0, r4
 8000bae:	220a      	movs	r2, #10
 8000bb0:	f001 faee 	bl	8002190 <XMC_USIC_CH_SetBaudrate>
 8000bb4:	e7e4      	b.n	8000b80 <XMC_I2C_CH_Init+0x2c>
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8000bb6:	005a      	lsls	r2, r3, #1
 8000bb8:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000bc2:	e7d6      	b.n	8000b72 <XMC_I2C_CH_Init+0x1e>
 8000bc4:	073f0303 	.word	0x073f0303
 8000bc8:	000186a0 	.word	0x000186a0
 8000bcc:	00061a80 	.word	0x00061a80

08000bd0 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8000bd0:	b510      	push	{r4, lr}
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8000bd2:	4c0f      	ldr	r4, [pc, #60]	; (8000c10 <XMC_I2C_CH_SetBaudrate+0x40>)
 8000bd4:	42a1      	cmp	r1, r4
 8000bd6:	d90f      	bls.n	8000bf8 <XMC_I2C_CH_SetBaudrate+0x28>
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8000bd8:	4c0e      	ldr	r4, [pc, #56]	; (8000c14 <XMC_I2C_CH_SetBaudrate+0x44>)
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	d901      	bls.n	8000be2 <XMC_I2C_CH_SetBaudrate+0x12>
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8000bde:	2001      	movs	r0, #1
  }
  
  return status;
}
 8000be0:	bd10      	pop	{r4, pc}
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8000be2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8000bea:	2219      	movs	r2, #25
 8000bec:	f001 fad0 	bl	8002190 <XMC_USIC_CH_SetBaudrate>
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
 8000bf0:	3000      	adds	r0, #0
 8000bf2:	bf18      	it	ne
 8000bf4:	2001      	movne	r0, #1
 8000bf6:	bd10      	pop	{r4, pc}
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8000bf8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000bfa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bfe:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8000c00:	220a      	movs	r2, #10
 8000c02:	f001 fac5 	bl	8002190 <XMC_USIC_CH_SetBaudrate>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8000c06:	3000      	adds	r0, #0
 8000c08:	bf18      	it	ne
 8000c0a:	2001      	movne	r0, #1
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	bf00      	nop
 8000c10:	000186a0 	.word	0x000186a0
 8000c14:	00061a80 	.word	0x00061a80

08000c18 <XMC_I2C_CH_MasterStart>:
  {
    temp |= 0x1U;
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000c18:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
  if (command == XMC_I2C_CH_CMD_READ)
 8000c1c:	2a01      	cmp	r2, #1
  {
    temp |= 0x1U;
 8000c1e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000c22:	bf08      	it	eq
 8000c24:	f041 0101 	orreq.w	r1, r1, #1
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000c28:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000c2c:	d002      	beq.n	8000c34 <XMC_I2C_CH_MasterStart+0x1c>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8000c2e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000c32:	4770      	bx	lr
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000c34:	6b83      	ldr	r3, [r0, #56]	; 0x38
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000c36:	061b      	lsls	r3, r3, #24
 8000c38:	d4fc      	bmi.n	8000c34 <XMC_I2C_CH_MasterStart+0x1c>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8000c3a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000c3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c40:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = temp;
 8000c42:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000c46:	4770      	bx	lr

08000c48 <XMC_I2C_CH_MasterRepeatedStart>:
  {
    tmp |= 0x1U;
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000c48:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
  if (command == XMC_I2C_CH_CMD_READ)
 8000c4c:	2a01      	cmp	r2, #1
  {
    tmp |= 0x1U;
 8000c4e:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
 8000c52:	bf08      	it	eq
 8000c54:	f041 0101 	orreq.w	r1, r1, #1
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000c58:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000c5c:	d002      	beq.n	8000c64 <XMC_I2C_CH_MasterRepeatedStart+0x1c>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8000c5e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000c62:	4770      	bx	lr
 8000c64:	6b83      	ldr	r3, [r0, #56]	; 0x38
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000c66:	061b      	lsls	r3, r3, #24
 8000c68:	d4fc      	bmi.n	8000c64 <XMC_I2C_CH_MasterRepeatedStart+0x1c>
 8000c6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c70:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = tmp;
 8000c72:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000c76:	4770      	bx	lr

08000c78 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000c78:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000c7c:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000c80:	d004      	beq.n	8000c8c <XMC_I2C_CH_MasterStop+0x14>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8000c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c86:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000c8a:	4770      	bx	lr
 8000c8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000c8e:	061b      	lsls	r3, r3, #24
 8000c90:	d4fc      	bmi.n	8000c8c <XMC_I2C_CH_MasterStop+0x14>
 8000c92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8000c94:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c9c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000c9e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8000ca2:	4770      	bx	lr

08000ca4 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000ca4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000ca8:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000cac:	d002      	beq.n	8000cb4 <XMC_I2C_CH_MasterTransmit+0x10>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8000cae:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000cb2:	4770      	bx	lr
 8000cb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000cb6:	061b      	lsls	r3, r3, #24
 8000cb8:	d4fc      	bmi.n	8000cb4 <XMC_I2C_CH_MasterTransmit+0x10>
 8000cba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000cbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cc0:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8000cc2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000cc6:	4770      	bx	lr

08000cc8 <XMC_I2C_CH_MasterReceiveAck>:

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000cc8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000ccc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000cd0:	d004      	beq.n	8000cdc <XMC_I2C_CH_MasterReceiveAck+0x14>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8000cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd6:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000cda:	4770      	bx	lr
 8000cdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000cde:	061b      	lsls	r3, r3, #24
 8000ce0:	d4fc      	bmi.n	8000cdc <XMC_I2C_CH_MasterReceiveAck+0x14>
 8000ce2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8000ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cec:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000cee:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8000cf2:	4770      	bx	lr

08000cf4 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000cf4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000cf8:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000cfc:	d004      	beq.n	8000d08 <XMC_I2C_CH_MasterReceiveNack+0x14>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8000cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d02:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000d06:	4770      	bx	lr
 8000d08:	6b83      	ldr	r3, [r0, #56]	; 0x38
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000d0a:	061b      	lsls	r3, r3, #24
 8000d0c:	d4fc      	bmi.n	8000d08 <XMC_I2C_CH_MasterReceiveNack+0x14>
 8000d0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8000d10:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d18:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000d1a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8000d1e:	4770      	bx	lr

08000d20 <XMC_I2C_CH_GetReceivedData>:
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000d20:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000d24:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint8_t)channel->RBUF;
 8000d28:	bf0c      	ite	eq
 8000d2a:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8000d2c:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000d30:	b2c0      	uxtb	r0, r0
  }

  return retval;
}
 8000d32:	4770      	bx	lr

08000d34 <XMC_I2C_CH_EnableEvent>:
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
 8000d34:	6c03      	ldr	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8000d36:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <XMC_I2C_CH_EnableEvent+0x1c>)
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000d38:	b410      	push	{r4}
  channel->CCR |= (event&0x1fc00U);
 8000d3a:	f401 34fe 	and.w	r4, r1, #130048	; 0x1fc00
 8000d3e:	4323      	orrs	r3, r4
 8000d40:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8000d42:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 8000d44:	f85d 4b04 	ldr.w	r4, [sp], #4
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8000d48:	400a      	ands	r2, r1
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 8000d4e:	4770      	bx	lr
 8000d50:	41fc0000 	.word	0x41fc0000

08000d54 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8000d54:	6c03      	ldr	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <XMC_I2C_CH_DisableEvent+0x20>)
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000d58:	b410      	push	{r4}
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8000d5a:	f401 34fe 	and.w	r4, r1, #130048	; 0x1fc00
 8000d5e:	ea23 0304 	bic.w	r3, r3, r4
 8000d62:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8000d64:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}
 8000d66:	f85d 4b04 	ldr.w	r4, [sp], #4
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	ea23 0302 	bic.w	r3, r3, r2
 8000d70:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 8000d72:	4770      	bx	lr
 8000d74:	41fc0000 	.word	0x41fc0000

08000d78 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8000d7e:	f001 f9c5 	bl	800210c <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8000d82:	79ea      	ldrb	r2, [r5, #7]
 8000d84:	b332      	cbz	r2, 8000dd4 <XMC_UART_CH_Init+0x5c>
 8000d86:	0856      	lsrs	r6, r2, #1
 8000d88:	3601      	adds	r6, #1
 8000d8a:	0236      	lsls	r6, r6, #8
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	6829      	ldr	r1, [r5, #0]
 8000d90:	f001 f9fe 	bl	8002190 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000d94:	79ab      	ldrb	r3, [r5, #6]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	4333      	orrs	r3, r6
 8000da4:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8000da6:	792b      	ldrb	r3, [r5, #4]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	061b      	lsls	r3, r3, #24
 8000dac:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8000db0:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000db2:	796b      	ldrb	r3, [r5, #5]
 8000db4:	b903      	cbnz	r3, 8000db8 <XMC_UART_CH_Init+0x40>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000db6:	792b      	ldrb	r3, [r5, #4]
 8000db8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000dc0:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000dc2:	f44f 61a0 	mov.w	r1, #1280	; 0x500

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000dc6:	892b      	ldrh	r3, [r5, #8]
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000dc8:	63a1      	str	r1, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000dca:	f04f 32ff 	mov.w	r2, #4294967295
 8000dce:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000dd0:	6423      	str	r3, [r4, #64]	; 0x40
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f44f 6610 	mov.w	r6, #2304	; 0x900
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8000dd8:	2210      	movs	r2, #16
 8000dda:	e7d7      	b.n	8000d8c <XMC_UART_CH_Init+0x14>

08000ddc <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000ddc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000de0:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000de4:	d002      	beq.n	8000dec <XMC_UART_CH_Transmit+0x10>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8000de6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000dea:	4770      	bx	lr
 8000dec:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000dee:	061b      	lsls	r3, r3, #24
 8000df0:	d4fc      	bmi.n	8000dec <XMC_UART_CH_Transmit+0x10>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8000df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df6:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8000df8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000e00:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000e04:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint16_t)channel->RBUF;
 8000e08:	bf0c      	ite	eq
 8000e0a:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000e0c:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000e10:	b280      	uxth	r0, r0
  }

  return retval;
}
 8000e12:	4770      	bx	lr

08000e14 <XMC_USBD_GetCapabilities>:
  cap.event_remote_wakeup = 1U;
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
 8000e14:	2000      	movs	r0, #0
 8000e16:	f36f 0000 	bfc	r0, #0, #1
 8000e1a:	f36f 0041 	bfc	r0, #1, #1
 8000e1e:	f040 001c 	orr.w	r0, r0, #28
 8000e22:	f36f 1045 	bfc	r0, #5, #1
 8000e26:	f440 70e0 	orr.w	r0, r0, #448	; 0x1c0
}
 8000e2a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000e2e:	4770      	bx	lr

08000e30 <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <XMC_USBD_DeviceConnect+0x14>)
 8000e32:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000e36:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 8000e38:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
 8000e3c:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000e3e:	2000      	movs	r0, #0
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	1fff1190 	.word	0x1fff1190

08000e48 <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <XMC_USBD_DeviceDisconnect+0x14>)
 8000e4a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000e4e:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8000e50:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8000e54:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000e56:	2000      	movs	r0, #0
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	1fff1190 	.word	0x1fff1190

08000e60 <XMC_USBD_DeviceGetState>:
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 8000e60:	4a44      	ldr	r2, [pc, #272]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e62:	7b01      	ldrb	r1, [r0, #12]

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8000e64:	b470      	push	{r4, r5, r6}
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 8000e66:	f892 41fe 	ldrb.w	r4, [r2, #510]	; 0x1fe
/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
  XMC_USBD_STATE_t state={0U};
 8000e6a:	2000      	movs	r0, #0
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 8000e6c:	f004 0401 	and.w	r4, r4, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e70:	2900      	cmp	r1, #0
 8000e72:	d07c      	beq.n	8000f6e <XMC_USBD_DeviceGetState+0x10e>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e74:	6853      	ldr	r3, [r2, #4]
 8000e76:	071e      	lsls	r6, r3, #28
 8000e78:	bf56      	itet	pl
 8000e7a:	6853      	ldrpl	r3, [r2, #4]
    {
      result = 1U;
 8000e7c:	2301      	movmi	r3, #1
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e7e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e82:	2901      	cmp	r1, #1
 8000e84:	d954      	bls.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e86:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8000e88:	4e3a      	ldr	r6, [pc, #232]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 8000e8a:	072d      	lsls	r5, r5, #28
 8000e8c:	d461      	bmi.n	8000f52 <XMC_USBD_DeviceGetState+0xf2>
 8000e8e:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    {
      result = 1U;
 8000e90:	f015 0f10 	tst.w	r5, #16
 8000e94:	bf18      	it	ne
 8000e96:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000e98:	2902      	cmp	r1, #2
 8000e9a:	d049      	beq.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000e9c:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
 8000e9e:	4e35      	ldr	r6, [pc, #212]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 8000ea0:	072d      	lsls	r5, r5, #28
 8000ea2:	d462      	bmi.n	8000f6a <XMC_USBD_DeviceGetState+0x10a>
 8000ea4:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
    {
      result = 1U;
 8000ea6:	f015 0f10 	tst.w	r5, #16
 8000eaa:	bf18      	it	ne
 8000eac:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000eae:	2903      	cmp	r1, #3
 8000eb0:	d03e      	beq.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000eb2:	f8d2 50a0 	ldr.w	r5, [r2, #160]	; 0xa0
 8000eb6:	4e2f      	ldr	r6, [pc, #188]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 8000eb8:	072d      	lsls	r5, r5, #28
 8000eba:	d454      	bmi.n	8000f66 <XMC_USBD_DeviceGetState+0x106>
 8000ebc:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
    {
      result = 1U;
 8000ec0:	f015 0f10 	tst.w	r5, #16
 8000ec4:	bf18      	it	ne
 8000ec6:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000ec8:	2904      	cmp	r1, #4
 8000eca:	d031      	beq.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000ecc:	f8d2 50d4 	ldr.w	r5, [r2, #212]	; 0xd4
 8000ed0:	4e28      	ldr	r6, [pc, #160]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 8000ed2:	072d      	lsls	r5, r5, #28
 8000ed4:	d445      	bmi.n	8000f62 <XMC_USBD_DeviceGetState+0x102>
 8000ed6:	f8d6 50d4 	ldr.w	r5, [r6, #212]	; 0xd4
    {
      result = 1U;
 8000eda:	f015 0f10 	tst.w	r5, #16
 8000ede:	bf18      	it	ne
 8000ee0:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000ee2:	2905      	cmp	r1, #5
 8000ee4:	d024      	beq.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000ee6:	f8d2 5108 	ldr.w	r5, [r2, #264]	; 0x108
 8000eea:	4e22      	ldr	r6, [pc, #136]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 8000eec:	072d      	lsls	r5, r5, #28
 8000eee:	d436      	bmi.n	8000f5e <XMC_USBD_DeviceGetState+0xfe>
 8000ef0:	f8d6 5108 	ldr.w	r5, [r6, #264]	; 0x108
    {
      result = 1U;
 8000ef4:	f015 0f10 	tst.w	r5, #16
 8000ef8:	bf18      	it	ne
 8000efa:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000efc:	2906      	cmp	r1, #6
 8000efe:	d017      	beq.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000f00:	f8d2 513c 	ldr.w	r5, [r2, #316]	; 0x13c
 8000f04:	4e1b      	ldr	r6, [pc, #108]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 8000f06:	072d      	lsls	r5, r5, #28
 8000f08:	d427      	bmi.n	8000f5a <XMC_USBD_DeviceGetState+0xfa>
 8000f0a:	f8d6 513c 	ldr.w	r5, [r6, #316]	; 0x13c
    {
      result = 1U;
 8000f0e:	f015 0f10 	tst.w	r5, #16
 8000f12:	bf18      	it	ne
 8000f14:	2301      	movne	r3, #1
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000f16:	2907      	cmp	r1, #7
 8000f18:	d00a      	beq.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8000f1a:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
 8000f1e:	4d15      	ldr	r5, [pc, #84]	; (8000f74 <XMC_USBD_DeviceGetState+0x114>)
 8000f20:	0709      	lsls	r1, r1, #28
 8000f22:	d418      	bmi.n	8000f56 <XMC_USBD_DeviceGetState+0xf6>
 8000f24:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
    {
      result = 1U;
 8000f28:	f011 0f10 	tst.w	r1, #16
 8000f2c:	bf18      	it	ne
 8000f2e:	2301      	movne	r3, #1
 8000f30:	f003 0301 	and.w	r3, r3, #1
{
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
  state.active = XMC_USBD_lDeviceActive(obj);
  state.powered = xmc_device.IsPowered;
 8000f34:	f892 21fe 	ldrb.w	r2, [r2, #510]	; 0x1fe
  return state;
 8000f38:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8000f3c:	f362 0000 	bfi	r0, r2, #0, #1
 8000f40:	f364 0041 	bfi	r0, r4, #1, #1
 8000f44:	f363 0082 	bfi	r0, r3, #2, #1
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f363 00c4 	bfi	r0, r3, #3, #2
}
 8000f4e:	bc70      	pop	{r4, r5, r6}
 8000f50:	4770      	bx	lr
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e7a0      	b.n	8000e98 <XMC_USBD_DeviceGetState+0x38>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e7ea      	b.n	8000f30 <XMC_USBD_DeviceGetState+0xd0>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e7db      	b.n	8000f16 <XMC_USBD_DeviceGetState+0xb6>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e7cc      	b.n	8000efc <XMC_USBD_DeviceGetState+0x9c>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e7bd      	b.n	8000ee2 <XMC_USBD_DeviceGetState+0x82>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e7ae      	b.n	8000ec8 <XMC_USBD_DeviceGetState+0x68>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e79f      	b.n	8000eae <XMC_USBD_DeviceGetState+0x4e>
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e7e0      	b.n	8000f34 <XMC_USBD_DeviceGetState+0xd4>
 8000f72:	bf00      	nop
 8000f74:	1fff1190 	.word	0x1fff1190

08000f78 <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <XMC_USBD_DeviceSetAddress+0x14>)
 8000f7a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000f7e:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8000f80:	b911      	cbnz	r1, 8000f88 <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 8000f82:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 8000f86:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 8000f88:	2000      	movs	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	1fff1190 	.word	0x1fff1190

08000f90 <XMC_USBD_EndpointStall>:
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8000f90:	f000 020f 	and.w	r2, r0, #15
  if (stall)
 8000f94:	b1e9      	cbz	r1, 8000fd2 <XMC_USBD_EndpointStall+0x42>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f96:	2334      	movs	r3, #52	; 0x34
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000f98:	f010 0f80 	tst.w	r0, #128	; 0x80
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f9c:	fb03 f302 	mul.w	r3, r3, r2
 8000fa0:	481d      	ldr	r0, [pc, #116]	; (8001018 <XMC_USBD_EndpointStall+0x88>)
 8000fa2:	5cc3      	ldrb	r3, [r0, r3]
 8000fa4:	f003 030f 	and.w	r3, r3, #15
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000fa8:	bf0b      	itete	eq
 8000faa:	eb00 0383 	addeq.w	r3, r0, r3, lsl #2
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000fae:	336a      	addne	r3, #106	; 0x6a
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000fb0:	f8d3 11c4 	ldreq.w	r1, [r3, #452]	; 0x1c4
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000fb4:	f850 1023 	ldrne.w	r1, [r0, r3, lsl #2]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000fb8:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8000fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000fbe:	600b      	str	r3, [r1, #0]
    }
    ep->isStalled = 1U;
 8000fc0:	2334      	movs	r3, #52	; 0x34
 8000fc2:	fb03 0202 	mla	r2, r3, r2, r0
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 8000fc6:	2000      	movs	r0, #0
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
      data.b.stall = 1U;
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
    }
    ep->isStalled = 1U;
 8000fc8:	7913      	ldrb	r3, [r2, #4]
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	7113      	strb	r3, [r2, #4]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 8000fd0:	4770      	bx	lr

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8000fd2:	b410      	push	{r4}
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000fd4:	2334      	movs	r3, #52	; 0x34
    ep->isStalled = 1U;
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000fd6:	f010 0f80 	tst.w	r0, #128	; 0x80
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000fda:	fb03 f302 	mul.w	r3, r3, r2
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <XMC_USBD_EndpointStall+0x88>)
 8000fe0:	5cc3      	ldrb	r3, [r0, r3]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000fe6:	bf0b      	itete	eq
 8000fe8:	eb00 0383 	addeq.w	r3, r0, r3, lsl #2
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000fec:	336a      	addne	r3, #106	; 0x6a
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000fee:	f8d3 41c4 	ldreq.w	r4, [r3, #452]	; 0x1c4
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000ff2:	f850 4023 	ldrne.w	r4, [r0, r3, lsl #2]
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000ff6:	6823      	ldr	r3, [r4, #0]
			data.b.stall = 0U;
 8000ff8:	f361 5355 	bfi	r3, r1, #21, #1
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8001000:	6023      	str	r3, [r4, #0]
		}
		ep->isStalled = 0U;
 8001002:	2334      	movs	r3, #52	; 0x34
 8001004:	fb03 0202 	mla	r2, r3, r2, r0
	}
	return XMC_USBD_STATUS_OK;
}
 8001008:	f85d 4b04 	ldr.w	r4, [sp], #4
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
			data.b.stall = 0U;
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
 800100c:	7913      	ldrb	r3, [r2, #4]
 800100e:	f36f 1345 	bfc	r3, #5, #1
	}
	return XMC_USBD_STATUS_OK;
}
 8001012:	2000      	movs	r0, #0
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
			data.b.stall = 0U;
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
 8001014:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
}
 8001016:	4770      	bx	lr
 8001018:	1fff1190 	.word	0x1fff1190

0800101c <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800101c:	f000 000f 	and.w	r0, r0, #15
  if (ep->address_u.address_st.direction)
 8001020:	2234      	movs	r2, #52	; 0x34
 8001022:	fb02 f200 	mul.w	r2, r2, r0
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <XMC_USBD_EndpointAbort+0x40>)
 8001028:	5c99      	ldrb	r1, [r3, r2]
 800102a:	441a      	add	r2, r3
 800102c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep->inInUse = 0U;
 8001030:	6851      	ldr	r1, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
 8001032:	bf0c      	ite	eq
 8001034:	f021 0110 	biceq.w	r1, r1, #16
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  if (ep->address_u.address_st.direction)
  {
    ep->inInUse = 0U;
 8001038:	f021 0108 	bicne.w	r1, r1, #8
 800103c:	6051      	str	r1, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 800103e:	2234      	movs	r2, #52	; 0x34
 8001040:	fb02 3300 	mla	r3, r2, r0, r3
  ep->outBytesAvailable = 0U;
 8001044:	2000      	movs	r0, #0
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 8001046:	791a      	ldrb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
  ep->outOffset = 0U;
  ep->xferLength = 0U;
  ep->xferCount = 0U;
 8001048:	62d8      	str	r0, [r3, #44]	; 0x2c
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 800104a:	f36f 1245 	bfc	r2, #5, #1
 800104e:	711a      	strb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 8001050:	6118      	str	r0, [r3, #16]
  ep->outOffset = 0U;
 8001052:	6198      	str	r0, [r3, #24]
  ep->xferLength = 0U;
 8001054:	6298      	str	r0, [r3, #40]	; 0x28
  ep->xferCount = 0U;
  ep->xferTotal = 0U;
 8001056:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	1fff1190 	.word	0x1fff1190

08001060 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001062:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <XMC_USBD_EndpointUnconfigure+0xf8>)
/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8001064:	f000 000f 	and.w	r0, r0, #15
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001068:	2134      	movs	r1, #52	; 0x34
 800106a:	fb01 f100 	mul.w	r1, r1, r0
 800106e:	185a      	adds	r2, r3, r1
 8001070:	f813 e001 	ldrb.w	lr, [r3, r1]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8001074:	7914      	ldrb	r4, [r2, #4]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001076:	f8d3 71a4 	ldr.w	r7, [r3, #420]	; 0x1a4
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 800107a:	f014 0f04 	tst.w	r4, #4
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 800107e:	f00e 060f 	and.w	r6, lr, #15
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001082:	69fd      	ldr	r5, [r7, #28]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8001084:	f04f 0100 	mov.w	r1, #0
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8001088:	d05a      	beq.n	8001140 <XMC_USBD_EndpointUnconfigure+0xe0>
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
 800108a:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
 800108e:	f36f 1445 	bfc	r4, #5, #1
 8001092:	7114      	strb	r4, [r2, #4]
    ep->outInUse =  0U;
 8001094:	6854      	ldr	r4, [r2, #4]
 8001096:	f024 0410 	bic.w	r4, r4, #16
 800109a:	6054      	str	r4, [r2, #4]
    ep->inInUse =  0U;
 800109c:	6854      	ldr	r4, [r2, #4]
     result = XMC_USBD_STATUS_ERROR;
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 800109e:	f361 31cf 	bfi	r1, r1, #15, #1
    data.b.epdis =  1U;
    data.b.snak =  1U;
 80010a2:	f041 4190 	orr.w	r1, r1, #1207959552	; 0x48000000
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
 80010a6:	f024 0408 	bic.w	r4, r4, #8
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80010aa:	f04f 0c01 	mov.w	ip, #1
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010ae:	f01e 0f80 	tst.w	lr, #128	; 0x80
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
 80010b2:	f36f 5155 	bfc	r1, #21, #1
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
 80010b6:	6054      	str	r4, [r2, #4]
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80010b8:	fa0c fc06 	lsl.w	ip, ip, r6
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010bc:	d02f      	beq.n	800111e <XMC_USBD_EndpointUnconfigure+0xbe>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80010be:	f106 0e6a 	add.w	lr, r6, #106	; 0x6a
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80010c2:	ea6f 040c 	mvn.w	r4, ip
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80010c6:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 80010ca:	f8ce 1000 	str.w	r1, [lr]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010ce:	7912      	ldrb	r2, [r2, #4]
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80010d0:	fa1f fe84 	uxth.w	lr, r4
 80010d4:	ea0e 0c05 	and.w	ip, lr, r5
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010d8:	0792      	lsls	r2, r2, #30
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80010da:	f36c 050f 	bfi	r5, ip, #0, #16
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010de:	d10d      	bne.n	80010fc <XMC_USBD_EndpointUnconfigure+0x9c>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <XMC_USBD_EndpointUnconfigure+0xfc>)
 80010e2:	6812      	ldr	r2, [r2, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80010e4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80010e8:	7b52      	ldrb	r2, [r2, #13]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80010ea:	f8d6 61c4 	ldr.w	r6, [r6, #452]	; 0x1c4
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 80010ee:	ea0e 4e15 	and.w	lr, lr, r5, lsr #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80010f2:	2a01      	cmp	r2, #1
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80010f4:	6031      	str	r1, [r6, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 80010f6:	f36e 451f 	bfi	r5, lr, #16, #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80010fa:	d028      	beq.n	800114e <XMC_USBD_EndpointUnconfigure+0xee>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 80010fc:	2234      	movs	r2, #52	; 0x34
 80010fe:	fb02 3000 	mla	r0, r2, r0, r3
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8001102:	61fd      	str	r5, [r7, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8001104:	8880      	ldrh	r0, [r0, #4]
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001106:	f8b3 11fc 	ldrh.w	r1, [r3, #508]	; 0x1fc
 800110a:	f3c0 1083 	ubfx	r0, r0, #6, #4
 800110e:	2201      	movs	r2, #1
 8001110:	4082      	lsls	r2, r0
 8001112:	ea21 0202 	bic.w	r2, r1, r2
 8001116:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
    result = XMC_USBD_STATUS_OK;
 800111a:	2000      	movs	r0, #0
 800111c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800111e:	7912      	ldrb	r2, [r2, #4]
 8001120:	0794      	lsls	r4, r2, #30
 8001122:	d10f      	bne.n	8001144 <XMC_USBD_EndpointUnconfigure+0xe4>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8001124:	f106 026a 	add.w	r2, r6, #106	; 0x6a
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001128:	ea6f 040c 	mvn.w	r4, ip
 800112c:	fa1f fe84 	uxth.w	lr, r4
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8001130:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8001134:	ea0e 0c05 	and.w	ip, lr, r5
 8001138:	f36c 050f 	bfi	r5, ip, #0, #16
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800113c:	6011      	str	r1, [r2, #0]
 800113e:	e7cf      	b.n	80010e0 <XMC_USBD_EndpointUnconfigure+0x80>
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
  {
     result = XMC_USBD_STATUS_ERROR;
 8001140:	2001      	movs	r0, #1
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001144:	ea6f 040c 	mvn.w	r4, ip
 8001148:	fa1f fe84 	uxth.w	lr, r4
 800114c:	e7c8      	b.n	80010e0 <XMC_USBD_EndpointUnconfigure+0x80>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 800114e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001150:	4014      	ands	r4, r2
 8001152:	637c      	str	r4, [r7, #52]	; 0x34
 8001154:	e7d2      	b.n	80010fc <XMC_USBD_EndpointUnconfigure+0x9c>
 8001156:	bf00      	nop
 8001158:	1fff1190 	.word	0x1fff1190
 800115c:	1fff118c 	.word	0x1fff118c

08001160 <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <XMC_USBD_GetFrameNumber+0x10>)
 8001162:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001166:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 8001168:	f3c0 200d 	ubfx	r0, r0, #8, #14
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	1fff1190 	.word	0x1fff1190

08001174 <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <XMC_USBD_IsEnumDone+0x18>)
 8001176:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 800117a:	f000 0005 	and.w	r0, r0, #5
}
 800117e:	f1a0 0005 	sub.w	r0, r0, #5
 8001182:	fab0 f080 	clz	r0, r0
 8001186:	0940      	lsrs	r0, r0, #5
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	1fff1190 	.word	0x1fff1190

08001190 <XMC_USBD_Uninitialize>:
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <XMC_USBD_Uninitialize+0x20>)
 8001192:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8001196:	b508      	push	{r3, lr}
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8001198:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 800119a:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 800119e:	6053      	str	r3, [r2, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 80011a0:	2100      	movs	r1, #0
 80011a2:	f44f 7202 	mov.w	r2, #520	; 0x208
 80011a6:	f00c fb94 	bl	800d8d2 <memset>
  return XMC_USBD_STATUS_OK;
}
 80011aa:	2000      	movs	r0, #0
 80011ac:	bd08      	pop	{r3, pc}
 80011ae:	bf00      	nop
 80011b0:	1fff1190 	.word	0x1fff1190

080011b4 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 80011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80011b8:	4d9a      	ldr	r5, [pc, #616]	; (8001424 <XMC_USBD_EndpointConfigure+0x270>)
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80011ba:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8001428 <XMC_USBD_EndpointConfigure+0x274>
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80011be:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 80011c2:	f8df a268 	ldr.w	sl, [pc, #616]	; 800142c <XMC_USBD_EndpointConfigure+0x278>
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80011c6:	f8d3 e01c 	ldr.w	lr, [r3, #28]
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 80011ca:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8001430 <XMC_USBD_EndpointConfigure+0x27c>
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80011ce:	f000 0c0f 	and.w	ip, r0, #15
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 80011d2:	2734      	movs	r7, #52	; 0x34
 80011d4:	fb07 f70c 	mul.w	r7, r7, ip
 80011d8:	19ee      	adds	r6, r5, r7
 80011da:	f106 0308 	add.w	r3, r6, #8
 80011de:	2400      	movs	r4, #0
 80011e0:	51ec      	str	r4, [r5, r7]
 80011e2:	6074      	str	r4, [r6, #4]
 80011e4:	f843 4b04 	str.w	r4, [r3], #4
 80011e8:	f843 4b04 	str.w	r4, [r3], #4
 80011ec:	f843 4b04 	str.w	r4, [r3], #4
 80011f0:	f843 4b04 	str.w	r4, [r3], #4
 80011f4:	f843 4b04 	str.w	r4, [r3], #4
 80011f8:	f843 4b04 	str.w	r4, [r3], #4
 80011fc:	f843 4b04 	str.w	r4, [r3], #4
 8001200:	f843 4b04 	str.w	r4, [r3], #4
 8001204:	f843 4b04 	str.w	r4, [r3], #4
 8001208:	f843 4b04 	str.w	r4, [r3], #4
 800120c:	601c      	str	r4, [r3, #0]
  /* do ep configuration */
  ep->address_u.address = ep_addr;
  ep->isConfigured = 1U;
 800120e:	7933      	ldrb	r3, [r6, #4]
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8001210:	55e8      	strb	r0, [r5, r7]
  ep->isConfigured = 1U;
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	7133      	strb	r3, [r6, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8001218:	6874      	ldr	r4, [r6, #4]
 800121a:	4633      	mov	r3, r6
 800121c:	f362 24d1 	bfi	r4, r2, #11, #7
 8001220:	f843 4f04 	str.w	r4, [r3, #4]!
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8001224:	2800      	cmp	r0, #0
 8001226:	685c      	ldr	r4, [r3, #4]
 8001228:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 800122c:	bf08      	it	eq
 800122e:	2040      	moveq	r0, #64	; 0x40
 8001230:	f360 0412 	bfi	r4, r0, #0, #19
 8001234:	605c      	str	r4, [r3, #4]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001236:	5deb      	ldrb	r3, [r5, r7]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	0218      	lsls	r0, r3, #8
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800123e:	f508 6be0 	add.w	fp, r8, #1792	; 0x700
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001242:	eb08 0400 	add.w	r4, r8, r0
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001246:	eb00 080b 	add.w	r8, r0, fp
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800124a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800124e:	6230      	str	r0, [r6, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001250:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8001254:	6170      	str	r0, [r6, #20]
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001256:	61f4      	str	r4, [r6, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001258:	f8c6 800c 	str.w	r8, [r6, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800125c:	5de8      	ldrb	r0, [r5, r7]
 800125e:	0600      	lsls	r0, r0, #24
 8001260:	d41f      	bmi.n	80012a2 <XMC_USBD_EndpointConfigure+0xee>
 8001262:	2900      	cmp	r1, #0
 8001264:	d07f      	beq.n	8001366 <XMC_USBD_EndpointConfigure+0x1b2>
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001266:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 800126a:	2001      	movs	r0, #1
 800126c:	f8d4 61c4 	ldr.w	r6, [r4, #452]	; 0x1c4
 8001270:	6834      	ldr	r4, [r6, #0]
 8001272:	4098      	lsls	r0, r3
		/*enable endpoint */
		data.b.usbactep = 1U;
 8001274:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8001278:	f361 4493 	bfi	r4, r1, #18, #2
 800127c:	b280      	uxth	r0, r0
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 800127e:	f362 040a 	bfi	r4, r2, #0, #11
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8001282:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8001286:	f36f 5455 	bfc	r4, #21, #1
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 800128a:	ea40 401e 	orr.w	r0, r0, lr, lsr #16
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 800128e:	6034      	str	r4, [r6, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8001290:	f360 4e1f 	bfi	lr, r0, #16, #16
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8001294:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
  return XMC_USBD_STATUS_OK;
}
 8001298:	2000      	movs	r0, #0
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 800129a:	f8c3 e01c 	str.w	lr, [r3, #28]
  return XMC_USBD_STATUS_OK;
}
 800129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80012a2:	f103 006a 	add.w	r0, r3, #106	; 0x6a
 80012a6:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 80012aa:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 80012ac:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80012b0:	f361 4493 	bfi	r4, r1, #18, #2
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d05f      	beq.n	8001378 <XMC_USBD_EndpointConfigure+0x1c4>
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80012b8:	f362 040a 	bfi	r4, r2, #0, #11
 80012bc:	f8b5 01fc 	ldrh.w	r0, [r5, #508]	; 0x1fc
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 80012c0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80012c4:	f010 0701 	ands.w	r7, r0, #1
			data.b.mps = ep_max_packet_size;
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
 80012c8:	f36f 5455 	bfc	r4, #21, #1
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80012cc:	f000 808e 	beq.w	80013ec <XMC_USBD_EndpointConfigure+0x238>
 80012d0:	0787      	lsls	r7, r0, #30
 80012d2:	f140 808e 	bpl.w	80013f2 <XMC_USBD_EndpointConfigure+0x23e>
 80012d6:	0747      	lsls	r7, r0, #29
 80012d8:	f140 808f 	bpl.w	80013fa <XMC_USBD_EndpointConfigure+0x246>
 80012dc:	0707      	lsls	r7, r0, #28
 80012de:	f140 8090 	bpl.w	8001402 <XMC_USBD_EndpointConfigure+0x24e>
 80012e2:	06c7      	lsls	r7, r0, #27
 80012e4:	f140 8091 	bpl.w	800140a <XMC_USBD_EndpointConfigure+0x256>
 80012e8:	0687      	lsls	r7, r0, #26
 80012ea:	f140 8092 	bpl.w	8001412 <XMC_USBD_EndpointConfigure+0x25e>
 80012ee:	0647      	lsls	r7, r0, #25
 80012f0:	f140 8093 	bpl.w	800141a <XMC_USBD_EndpointConfigure+0x266>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80012f4:	0607      	lsls	r7, r0, #24
 80012f6:	d449      	bmi.n	800138c <XMC_USBD_EndpointConfigure+0x1d8>
 80012f8:	2707      	movs	r7, #7
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 80012fa:	f04f 0880 	mov.w	r8, #128	; 0x80
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
  {
    xmc_device.txfifomsk |= mask;
 80012fe:	ea48 0000 	orr.w	r0, r8, r0
 8001302:	f8a5 01fc 	strh.w	r0, [r5, #508]	; 0x1fc
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001306:	2034      	movs	r0, #52	; 0x34
 8001308:	fb00 fc0c 	mul.w	ip, r0, ip
 800130c:	eb05 090c 	add.w	r9, r5, ip
		data.b.txfnum = ep->txFifoNum;
 8001310:	f367 5499 	bfi	r4, r7, #22, #4
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001314:	f8b9 a004 	ldrh.w	sl, [r9, #4]
 8001318:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001424 <XMC_USBD_EndpointConfigure+0x270>
 800131c:	f367 1a89 	bfi	sl, r7, #6, #4
 8001320:	f8a9 a004 	strh.w	sl, [r9, #4]
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001324:	2001      	movs	r0, #1
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8001326:	6034      	str	r4, [r6, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001328:	4098      	lsls	r0, r3
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800132a:	f815 400c 	ldrb.w	r4, [r5, ip]
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800132e:	b280      	uxth	r0, r0
 8001330:	ea40 060e 	orr.w	r6, r0, lr
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001334:	0624      	lsls	r4, r4, #24
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001336:	f366 0e0f 	bfi	lr, r6, #0, #16
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800133a:	d529      	bpl.n	8001390 <XMC_USBD_EndpointConfigure+0x1dc>
 800133c:	2900      	cmp	r1, #0
 800133e:	d1a9      	bne.n	8001294 <XMC_USBD_EndpointConfigure+0xe0>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001340:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001344:	f8d3 61c4 	ldr.w	r6, [r3, #452]	; 0x1c4
 8001348:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 800134a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800134e:	f361 4493 	bfi	r4, r1, #18, #2
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 8001352:	2a10      	cmp	r2, #16
 8001354:	d03c      	beq.n	80013d0 <XMC_USBD_EndpointConfigure+0x21c>
 8001356:	d934      	bls.n	80013c2 <XMC_USBD_EndpointConfigure+0x20e>
 8001358:	2a20      	cmp	r2, #32
 800135a:	d02e      	beq.n	80013ba <XMC_USBD_EndpointConfigure+0x206>
 800135c:	2a40      	cmp	r2, #64	; 0x40
 800135e:	d190      	bne.n	8001282 <XMC_USBD_EndpointConfigure+0xce>
			{
				case (64U):
					data.b.mps = 0x0U;
 8001360:	f36f 040a 	bfc	r4, #0, #11
					break;
 8001364:	e78d      	b.n	8001282 <XMC_USBD_EndpointConfigure+0xce>
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001366:	f103 006a 	add.w	r0, r3, #106	; 0x6a
 800136a:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 800136e:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8001370:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8001374:	f361 4493 	bfi	r4, r1, #18, #2
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 8001378:	2a10      	cmp	r2, #16
 800137a:	d031      	beq.n	80013e0 <XMC_USBD_EndpointConfigure+0x22c>
 800137c:	d915      	bls.n	80013aa <XMC_USBD_EndpointConfigure+0x1f6>
 800137e:	2a20      	cmp	r2, #32
 8001380:	d02a      	beq.n	80013d8 <XMC_USBD_EndpointConfigure+0x224>
 8001382:	2a40      	cmp	r2, #64	; 0x40
 8001384:	d19a      	bne.n	80012bc <XMC_USBD_EndpointConfigure+0x108>
			{
				case (64U):
				data.b.mps = 0x0U;
 8001386:	f36f 040a 	bfc	r4, #0, #11
				break;
 800138a:	e797      	b.n	80012bc <XMC_USBD_EndpointConfigure+0x108>
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 800138c:	2700      	movs	r7, #0
 800138e:	e7ba      	b.n	8001306 <XMC_USBD_EndpointConfigure+0x152>
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001390:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001394:	f8d3 61c4 	ldr.w	r6, [r3, #452]	; 0x1c4
 8001398:	6834      	ldr	r4, [r6, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 800139a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800139e:	f361 4493 	bfi	r4, r1, #18, #2
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 80013a2:	2900      	cmp	r1, #0
 80013a4:	f47f af6b 	bne.w	800127e <XMC_USBD_EndpointConfigure+0xca>
 80013a8:	e7d3      	b.n	8001352 <XMC_USBD_EndpointConfigure+0x19e>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 80013aa:	2a08      	cmp	r2, #8
 80013ac:	d186      	bne.n	80012bc <XMC_USBD_EndpointConfigure+0x108>
				break;
				case (16U):
				data.b.mps = 0x2U;
				break;
				case (8U):
				data.b.mps = 0x3U;
 80013ae:	2703      	movs	r7, #3
 80013b0:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 80013b4:	f367 040a 	bfi	r4, r7, #0, #11
				break;
 80013b8:	e780      	b.n	80012bc <XMC_USBD_EndpointConfigure+0x108>
			{
				case (64U):
					data.b.mps = 0x0U;
					break;
				case (32U):
					data.b.mps = 0x1U;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f363 040a 	bfi	r4, r3, #0, #11
					break;
 80013c0:	e75f      	b.n	8001282 <XMC_USBD_EndpointConfigure+0xce>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 80013c2:	2a08      	cmp	r2, #8
 80013c4:	f47f af5d 	bne.w	8001282 <XMC_USBD_EndpointConfigure+0xce>
					break;
				case (16U):
					data.b.mps = 0x2U;
					break;
				case (8U):
					data.b.mps = 0x3U;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f363 040a 	bfi	r4, r3, #0, #11
					break;
 80013ce:	e758      	b.n	8001282 <XMC_USBD_EndpointConfigure+0xce>
					break;
				case (32U):
					data.b.mps = 0x1U;
					break;
				case (16U):
					data.b.mps = 0x2U;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f363 040a 	bfi	r4, r3, #0, #11
					break;
 80013d6:	e754      	b.n	8001282 <XMC_USBD_EndpointConfigure+0xce>
			{
				case (64U):
				data.b.mps = 0x0U;
				break;
				case (32U):
				data.b.mps = 0x1U;
 80013d8:	2001      	movs	r0, #1
 80013da:	f360 040a 	bfi	r4, r0, #0, #11
				break;
 80013de:	e76d      	b.n	80012bc <XMC_USBD_EndpointConfigure+0x108>
				case (16U):
				data.b.mps = 0x2U;
 80013e0:	2702      	movs	r7, #2
 80013e2:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 80013e6:	f367 040a 	bfi	r4, r7, #0, #11
				break;
 80013ea:	e767      	b.n	80012bc <XMC_USBD_EndpointConfigure+0x108>
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
 80013ec:	f04f 0801 	mov.w	r8, #1
 80013f0:	e785      	b.n	80012fe <XMC_USBD_EndpointConfigure+0x14a>
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
    i++;
 80013f2:	2701      	movs	r7, #1
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 80013f4:	f04f 0802 	mov.w	r8, #2
 80013f8:	e781      	b.n	80012fe <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 80013fa:	2702      	movs	r7, #2
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 80013fc:	f04f 0804 	mov.w	r8, #4
 8001400:	e77d      	b.n	80012fe <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 8001402:	2703      	movs	r7, #3
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 8001404:	f04f 0808 	mov.w	r8, #8
 8001408:	e779      	b.n	80012fe <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 800140a:	2704      	movs	r7, #4
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 800140c:	f04f 0810 	mov.w	r8, #16
 8001410:	e775      	b.n	80012fe <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 8001412:	2705      	movs	r7, #5
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 8001414:	f04f 0820 	mov.w	r8, #32
 8001418:	e771      	b.n	80012fe <XMC_USBD_EndpointConfigure+0x14a>
    i++;
 800141a:	2706      	movs	r7, #6
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
  {
    mask = (uint16_t)(mask << 1U);
 800141c:	f04f 0840 	mov.w	r8, #64	; 0x40
 8001420:	e76d      	b.n	80012fe <XMC_USBD_EndpointConfigure+0x14a>
 8001422:	bf00      	nop
 8001424:	1fff1190 	.word	0x1fff1190
 8001428:	20000000 	.word	0x20000000
 800142c:	1ffed788 	.word	0x1ffed788
 8001430:	1ffed76c 	.word	0x1ffed76c

08001434 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
  if (length > ep->outBytesAvailable)
 8001436:	4f0e      	ldr	r7, [pc, #56]	; (8001470 <XMC_USBD_EndpointRead+0x3c>)
 8001438:	2434      	movs	r4, #52	; 0x34
 800143a:	fb04 7400 	mla	r4, r4, r0, r7

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 800143e:	4606      	mov	r6, r0
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
  if (length > ep->outBytesAvailable)
 8001440:	6925      	ldr	r5, [r4, #16]
  {
    length = ep->outBytesAvailable;
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8001442:	69a3      	ldr	r3, [r4, #24]
 8001444:	4295      	cmp	r5, r2
 8001446:	4608      	mov	r0, r1
 8001448:	68e1      	ldr	r1, [r4, #12]
 800144a:	bf28      	it	cs
 800144c:	4615      	movcs	r5, r2
 800144e:	4419      	add	r1, r3
 8001450:	462a      	mov	r2, r5
 8001452:	f00c fa33 	bl	800d8bc <memcpy>
  ep->outBytesAvailable -= length;
 8001456:	6923      	ldr	r3, [r4, #16]
 8001458:	1b5b      	subs	r3, r3, r5
 800145a:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 800145c:	b10b      	cbz	r3, 8001462 <XMC_USBD_EndpointRead+0x2e>
  {
    ep->outOffset += length;
 800145e:	69a3      	ldr	r3, [r4, #24]
 8001460:	442b      	add	r3, r5
 8001462:	2234      	movs	r2, #52	; 0x34
 8001464:	fb02 7606 	mla	r6, r2, r6, r7
  else
  {
    ep->outOffset = 0U;
  }
  return (int32_t)length;
}
 8001468:	4628      	mov	r0, r5
 800146a:	61b3      	str	r3, [r6, #24]
 800146c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800146e:	bf00      	nop
 8001470:	1fff1190 	.word	0x1fff1190

08001474 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8001474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001478:	4607      	mov	r7, r0
 800147a:	b083      	sub	sp, #12
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 800147c:	4869      	ldr	r0, [pc, #420]	; (8001624 <XMC_USBD_Init+0x1b0>)
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 800147e:	4c6a      	ldr	r4, [pc, #424]	; (8001628 <XMC_USBD_Init+0x1b4>)
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8001480:	4e6a      	ldr	r6, [pc, #424]	; (800162c <XMC_USBD_Init+0x1b8>)
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8001482:	4d6b      	ldr	r5, [pc, #428]	; (8001630 <XMC_USBD_Init+0x1bc>)
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 8001484:	f7fe fffc 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001488:	4866      	ldr	r0, [pc, #408]	; (8001624 <XMC_USBD_Init+0x1b0>)
 800148a:	f7fe ff83 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 800148e:	f7ff f825 	bl	80004dc <XMC_SCU_POWER_EnableUsb>
  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
  
  usbd_init = obj;
 8001492:	4b68      	ldr	r3, [pc, #416]	; (8001634 <XMC_USBD_Init+0x1c0>)
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8001494:	2100      	movs	r1, #0
  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
  
  usbd_init = obj;
 8001496:	601f      	str	r7, [r3, #0]
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8001498:	f44f 7202 	mov.w	r2, #520	; 0x208
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 800149c:	2340      	movs	r3, #64	; 0x40
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 800149e:	4620      	mov	r0, r4
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80014a0:	6033      	str	r3, [r6, #0]
 80014a2:	6073      	str	r3, [r6, #4]
 80014a4:	60b3      	str	r3, [r6, #8]
 80014a6:	60f3      	str	r3, [r6, #12]
 80014a8:	6133      	str	r3, [r6, #16]
 80014aa:	6173      	str	r3, [r6, #20]
 80014ac:	61b3      	str	r3, [r6, #24]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80014ae:	602b      	str	r3, [r5, #0]
 80014b0:	606b      	str	r3, [r5, #4]
 80014b2:	60ab      	str	r3, [r5, #8]
 80014b4:	60eb      	str	r3, [r5, #12]
 80014b6:	612b      	str	r3, [r5, #16]
 80014b8:	616b      	str	r3, [r5, #20]
 80014ba:	61ab      	str	r3, [r5, #24]
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80014bc:	f00c fa09 	bl	800d8d2 <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80014c2:	7b7d      	ldrb	r5, [r7, #13]
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 80014c4:	689a      	ldr	r2, [r3, #8]

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 80014c6:	6878      	ldr	r0, [r7, #4]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 80014c8:	68be      	ldr	r6, [r7, #8]
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80014ca:	fab5 f185 	clz	r1, r5
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 80014ce:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80014d2:	0949      	lsrs	r1, r1, #5
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 80014d4:	f503 6910 	add.w	r9, r3, #2304	; 0x900
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 80014d8:	f042 0281 	orr.w	r2, r2, #129	; 0x81

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 80014dc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 80014e0:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 80014e4:	f8c4 a1a4 	str.w	sl, [r4, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 80014e8:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
 80014ec:	f361 1245 	bfi	r2, r1, #5, #1
 80014f0:	f503 6812 	add.w	r8, r3, #2336	; 0x920
 80014f4:	f503 6c14 	add.w	ip, r3, #2368	; 0x940
 80014f8:	f503 6e16 	add.w	lr, r3, #2400	; 0x960
 80014fc:	f503 6718 	add.w	r7, r3, #2432	; 0x980
 8001500:	f503 601a 	add.w	r0, r3, #2464	; 0x9a0
 8001504:	f503 6b1c 	add.w	fp, r3, #2496	; 0x9c0
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8001508:	f503 6130 	add.w	r1, r3, #2816	; 0xb00
 800150c:	f503 6632 	add.w	r6, r3, #2848	; 0xb20
 8001510:	f503 6a34 	add.w	sl, r3, #2880	; 0xb40
 8001514:	f503 6936 	add.w	r9, r3, #2912	; 0xb60
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001518:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
 800151c:	f8c4 c1b0 	str.w	ip, [r4, #432]	; 0x1b0
 8001520:	f8c4 e1b4 	str.w	lr, [r4, #436]	; 0x1b4
 8001524:	f8c4 71b8 	str.w	r7, [r4, #440]	; 0x1b8
 8001528:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
 800152c:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8001530:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
 8001534:	f8c4 61c8 	str.w	r6, [r4, #456]	; 0x1c8
 8001538:	f8c4 a1cc 	str.w	sl, [r4, #460]	; 0x1cc
 800153c:	f8c4 91d0 	str.w	r9, [r4, #464]	; 0x1d0
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8001540:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8001544:	f503 6838 	add.w	r8, r3, #2944	; 0xb80
 8001548:	f503 6c3a 	add.w	ip, r3, #2976	; 0xba0
 800154c:	f503 6e3c 	add.w	lr, r3, #3008	; 0xbc0
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8001550:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
 8001554:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
 8001558:	f503 5b40 	add.w	fp, r3, #12288	; 0x3000
 800155c:	f503 46a0 	add.w	r6, r3, #20480	; 0x5000
 8001560:	f503 4ac0 	add.w	sl, r3, #24576	; 0x6000
 8001564:	f503 49e0 	add.w	r9, r3, #28672	; 0x7000
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8001568:	f8c4 11ec 	str.w	r1, [r4, #492]	; 0x1ec
  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 800156c:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8001570:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
 8001574:	f8c4 c1d8 	str.w	ip, [r4, #472]	; 0x1d8
 8001578:	f8c4 e1dc 	str.w	lr, [r4, #476]	; 0x1dc
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 800157c:	f8c4 71e0 	str.w	r7, [r4, #480]	; 0x1e0
 8001580:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
 8001584:	f8c4 b1e8 	str.w	fp, [r4, #488]	; 0x1e8
 8001588:	f8c4 61f0 	str.w	r6, [r4, #496]	; 0x1f0
 800158c:	f8c4 a1f4 	str.w	sl, [r4, #500]	; 0x1f4
 8001590:	f8c4 91f8 	str.w	r9, [r4, #504]	; 0x1f8
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8001594:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8001596:	68d9      	ldr	r1, [r3, #12]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8001598:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800159c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80015a0:	60d9      	str	r1, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80015a2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 80015a6:	f042 0203 	orr.w	r2, r2, #3
  dcfg.b.descdma = 0U;
 80015aa:	f36f 52d7 	bfc	r2, #23, #1
  xmc_device.device_register->dcfg = dcfg.d32;
 80015ae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 80015b2:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 80015b6:	2100      	movs	r1, #0
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
  dcfg.b.descdma = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 80015b8:	f042 0202 	orr.w	r2, r2, #2
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 80015bc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 80015c0:	9100      	str	r1, [sp, #0]
  /*flush fifo */
  data.b.txfflsh = 1U;
 80015c2:	9a00      	ldr	r2, [sp, #0]
 80015c4:	f042 0220 	orr.w	r2, r2, #32
 80015c8:	9200      	str	r2, [sp, #0]
  data.b.txfnum = fifo_num;
 80015ca:	9900      	ldr	r1, [sp, #0]
 80015cc:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 80015d0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80015d4:	9100      	str	r1, [sp, #0]
  xmc_device.global_register->grstctl = data.d32;
 80015d6:	9a00      	ldr	r2, [sp, #0]
 80015d8:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	9200      	str	r2, [sp, #0]
  } while (data.b.txfflsh);
 80015de:	9a00      	ldr	r2, [sp, #0]
 80015e0:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d1f8      	bne.n	80015da <XMC_USBD_Init+0x166>
static void XMC_USBD_lFlushRXFifo(void) 
{
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 80015e8:	9201      	str	r2, [sp, #4]
  data.b.rxfflsh = 1U;
 80015ea:	9a01      	ldr	r2, [sp, #4]
 80015ec:	f042 0210 	orr.w	r2, r2, #16
 80015f0:	9201      	str	r2, [sp, #4]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 80015f2:	9a01      	ldr	r2, [sp, #4]
 80015f4:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	9201      	str	r2, [sp, #4]
  } while (data.b.rxfflsh);
 80015fa:	9801      	ldr	r0, [sp, #4]
 80015fc:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001600:	2800      	cmp	r0, #0
 8001602:	d1f8      	bne.n	80015f6 <XMC_USBD_Init+0x182>
  gintmsk.b.usbsuspend = 1U;
  gintmsk.b.wkupintr = 1U;
  gintmsk.b.sofintr = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    gintmsk.b.rxstsqlvl = 1U;
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <XMC_USBD_Init+0x1c4>)
 8001606:	4a0d      	ldr	r2, [pc, #52]	; (800163c <XMC_USBD_Init+0x1c8>)
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
  XMC_USBD_lFlushRXFifo();
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001608:	6198      	str	r0, [r3, #24]
  gintmsk.b.usbsuspend = 1U;
  gintmsk.b.wkupintr = 1U;
  gintmsk.b.sofintr = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    gintmsk.b.rxstsqlvl = 1U;
 800160a:	2d01      	cmp	r5, #1
 800160c:	bf18      	it	ne
 800160e:	460a      	movne	r2, r1
  }
  gintmsk.b.outepintr = 1U;
  gintmsk.b.inepintr = 1U;
 8001610:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
  XMC_USBD_lFlushRXFifo();
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	6159      	str	r1, [r3, #20]
  {
    gintmsk.b.rxstsqlvl = 1U;
  }
  gintmsk.b.outepintr = 1U;
  gintmsk.b.inepintr = 1U;
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800161a:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
}
 800161c:	b003      	add	sp, #12
 800161e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001622:	bf00      	nop
 8001624:	20000080 	.word	0x20000080
 8001628:	1fff1190 	.word	0x1fff1190
 800162c:	1ffed76c 	.word	0x1ffed76c
 8001630:	1ffed788 	.word	0x1ffed788
 8001634:	1fff118c 	.word	0x1fff118c
 8001638:	c0003c0e 	.word	0xc0003c0e
 800163c:	c0003c1e 	.word	0xc0003c1e

08001640 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8001640:	b4f0      	push	{r4, r5, r6, r7}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001642:	f000 000f 	and.w	r0, r0, #15
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8001646:	2434      	movs	r4, #52	; 0x34
 8001648:	4e33      	ldr	r6, [pc, #204]	; (8001718 <XMC_USBD_EndpointReadStart+0xd8>)
 800164a:	fb04 f400 	mul.w	r4, r4, r0
 800164e:	1932      	adds	r2, r6, r4

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8001650:	b082      	sub	sp, #8
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8001652:	6853      	ldr	r3, [r2, #4]
 8001654:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d136      	bne.n	80016ca <XMC_USBD_EndpointReadStart+0x8a>
 800165c:	7915      	ldrb	r5, [r2, #4]
 800165e:	076d      	lsls	r5, r5, #29
 8001660:	d533      	bpl.n	80016ca <XMC_USBD_EndpointReadStart+0x8a>
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001662:	6895      	ldr	r5, [r2, #8]
 8001664:	9501      	str	r5, [sp, #4]
 8001666:	6955      	ldr	r5, [r2, #20]
    }
    /* set ep values */
    ep->xferTotal = size;
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
 8001668:	68d7      	ldr	r7, [r2, #12]
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
    ep->xferCount = 0U;
 800166a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800166c:	42a9      	cmp	r1, r5
 800166e:	bf28      	it	cs
 8001670:	4629      	movcs	r1, r5
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001672:	9d01      	ldr	r5, [sp, #4]
    /* set ep values */
    ep->xferTotal = size;
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
    ep->outBytesAvailable = 0U;
 8001674:	6113      	str	r3, [r2, #16]
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001676:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800167a:	428d      	cmp	r5, r1
 800167c:	bf28      	it	cs
 800167e:	460d      	movcs	r5, r1
    if (size > ep->outBufferSize)
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
 8001680:	6311      	str	r1, [r2, #48]	; 0x30
 8001682:	6295      	str	r5, [r2, #40]	; 0x28
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
 8001684:	6257      	str	r7, [r2, #36]	; 0x24
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 8001686:	5d34      	ldrb	r4, [r6, r4]
 8001688:	0724      	lsls	r4, r4, #28
 800168a:	d022      	beq.n	80016d2 <XMC_USBD_EndpointReadStart+0x92>
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 800168c:	2d00      	cmp	r5, #0
 800168e:	d137      	bne.n	8001700 <XMC_USBD_EndpointReadStart+0xc0>
    {
      data.b.xfersize = 0U;
      data.b.pktcnt = 1U;
 8001690:	2201      	movs	r2, #1
 8001692:	f362 43dc 	bfi	r3, r2, #19, #10
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <XMC_USBD_EndpointReadStart+0xdc>)
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	7b52      	ldrb	r2, [r2, #13]
 800169c:	bb2a      	cbnz	r2, 80016ea <XMC_USBD_EndpointReadStart+0xaa>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 800169e:	2234      	movs	r2, #52	; 0x34
 80016a0:	fb02 f000 	mul.w	r0, r2, r0
 80016a4:	1831      	adds	r1, r6, r0
 80016a6:	5c32      	ldrb	r2, [r6, r0]
 80016a8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80016aa:	f002 020f 	and.w	r2, r2, #15
 80016ae:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80016b2:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 80016b6:	6151      	str	r1, [r2, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 80016b8:	6113      	str	r3, [r2, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80016ba:	6813      	ldr	r3, [r2, #0]
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
 80016bc:	2000      	movs	r0, #0
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 80016be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80016c2:	6013      	str	r3, [r2, #0]
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
  }
  return result;
}
 80016c4:	b002      	add	sp, #8
 80016c6:	bcf0      	pop	{r4, r5, r6, r7}
 80016c8:	4770      	bx	lr
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
  {
    result = XMC_USBD_STATUS_ERROR;
 80016ca:	2001      	movs	r0, #1
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
  }
  return result;
}
 80016cc:	b002      	add	sp, #8
 80016ce:	bcf0      	pop	{r4, r5, r6, r7}
 80016d0:	4770      	bx	lr
  if (ep->address_u.address_st.number == 0U)
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 80016d2:	2201      	movs	r2, #1
 80016d4:	f362 43d4 	bfi	r3, r2, #19, #2
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016d8:	4a10      	ldr	r2, [pc, #64]	; (800171c <XMC_USBD_EndpointReadStart+0xdc>)
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	7b52      	ldrb	r2, [r2, #13]
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
    ep0_data->b.supcnt = 0x3U;
 80016de:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80016e2:	f361 0306 	bfi	r3, r1, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d0d9      	beq.n	800169e <XMC_USBD_EndpointReadStart+0x5e>
 80016ea:	2234      	movs	r2, #52	; 0x34
 80016ec:	fb02 f000 	mul.w	r0, r2, r0
 80016f0:	5c32      	ldrb	r2, [r6, r0]
 80016f2:	f002 020f 	and.w	r2, r2, #15
 80016f6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80016fa:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 80016fe:	e7db      	b.n	80016b8 <XMC_USBD_EndpointReadStart+0x78>
      data.b.pktcnt = 1U;
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001700:	6852      	ldr	r2, [r2, #4]
 8001702:	f3c2 21c6 	ubfx	r1, r2, #11, #7
 8001706:	1e4a      	subs	r2, r1, #1
 8001708:	442a      	add	r2, r5
 800170a:	fbb2 f2f1 	udiv	r2, r2, r1
 800170e:	f362 43dc 	bfi	r3, r2, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001712:	f365 0312 	bfi	r3, r5, #0, #19
 8001716:	e7be      	b.n	8001696 <XMC_USBD_EndpointReadStart+0x56>
 8001718:	1fff1190 	.word	0x1fff1190
 800171c:	1fff118c 	.word	0x1fff118c

08001720 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8001720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001724:	f000 070f 	and.w	r7, r0, #15
  int32_t result;
  if (!ep->isConfigured)
 8001728:	2634      	movs	r6, #52	; 0x34
 800172a:	4d39      	ldr	r5, [pc, #228]	; (8001810 <XMC_USBD_EndpointWrite+0xf0>)
 800172c:	fb06 f607 	mul.w	r6, r6, r7
 8001730:	19ac      	adds	r4, r5, r6
 8001732:	7923      	ldrb	r3, [r4, #4]
 8001734:	075b      	lsls	r3, r3, #29
 8001736:	d553      	bpl.n	80017e0 <XMC_USBD_EndpointWrite+0xc0>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
  }
  else if (ep->inInUse == 1U)
 8001738:	6863      	ldr	r3, [r4, #4]
 800173a:	0718      	lsls	r0, r3, #28
 800173c:	d457      	bmi.n	80017ee <XMC_USBD_EndpointWrite+0xce>
  {
    result=(int32_t)0;
  }
  else
  {
    if (length > ep->inBufferSize)
 800173e:	6a23      	ldr	r3, [r4, #32]
    {
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8001740:	69e0      	ldr	r0, [r4, #28]
 8001742:	429a      	cmp	r2, r3
 8001744:	bf28      	it	cs
 8001746:	461a      	movcs	r2, r3
 8001748:	4691      	mov	r9, r2
 800174a:	f00c f8b7 	bl	800d8bc <memcpy>
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
 800174e:	6863      	ldr	r3, [r4, #4]
    {
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
 8001750:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8001754:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
 8001758:	f043 0308 	orr.w	r3, r3, #8
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
 800175c:	2100      	movs	r1, #0
    ep->inInUse = 1U;
 800175e:	6063      	str	r3, [r4, #4]
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
 8001760:	62e1      	str	r1, [r4, #44]	; 0x2c
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
 8001762:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001766:	5da8      	ldrb	r0, [r5, r6]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001768:	68a3      	ldr	r3, [r4, #8]
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800176a:	f000 000f 	and.w	r0, r0, #15
 800176e:	f100 0e6a 	add.w	lr, r0, #106	; 0x6a

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001772:	f3c3 0212 	ubfx	r2, r3, #0, #19
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001776:	f855 802e 	ldr.w	r8, [r5, lr, lsl #2]
 800177a:	454a      	cmp	r2, r9
 800177c:	bf28      	it	cs
 800177e:	464a      	movcs	r2, r9
 8001780:	f8d8 e000 	ldr.w	lr, [r8]
 8001784:	62a2      	str	r2, [r4, #40]	; 0x28
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
 8001786:	b3aa      	cbz	r2, 80017f4 <XMC_USBD_EndpointWrite+0xd4>
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001788:	5dab      	ldrb	r3, [r5, r6]
 800178a:	071b      	lsls	r3, r3, #28
 800178c:	d02b      	beq.n	80017e6 <XMC_USBD_EndpointWrite+0xc6>
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 800178e:	6863      	ldr	r3, [r4, #4]
 8001790:	f3c3 24c6 	ubfx	r4, r3, #11, #7
 8001794:	1e63      	subs	r3, r4, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	fa13 f382 	uxtah	r3, r3, r2
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800179c:	f3c2 0212 	ubfx	r2, r2, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80017a0:	fb93 f3f4 	sdiv	r3, r3, r4
 80017a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80017a8:	4c1a      	ldr	r4, [pc, #104]	; (8001814 <XMC_USBD_EndpointWrite+0xf4>)
 80017aa:	6824      	ldr	r4, [r4, #0]
 80017ac:	7b64      	ldrb	r4, [r4, #13]
 80017ae:	f362 0112 	bfi	r1, r2, #0, #19
 80017b2:	f363 41dc 	bfi	r1, r3, #19, #10
 80017b6:	bb0c      	cbnz	r4, 80017fc <XMC_USBD_EndpointWrite+0xdc>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80017b8:	f8c8 c014 	str.w	ip, [r8, #20]
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 80017bc:	2334      	movs	r3, #52	; 0x34
 80017be:	fb03 f707 	mul.w	r7, r3, r7
 80017c2:	19ea      	adds	r2, r5, r7
 80017c4:	5deb      	ldrb	r3, [r5, r7]
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
    result=(int32_t)ep->xferTotal;
 80017c6:	6b10      	ldr	r0, [r2, #48]	; 0x30
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	336a      	adds	r3, #106	; 0x6a
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 80017ce:	f04e 4e04 	orr.w	lr, lr, #2214592512	; 0x84000000
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 80017d2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80017d6:	6119      	str	r1, [r3, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 80017d8:	f8c3 e000 	str.w	lr, [r3]
 80017dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
  int32_t result;
  if (!ep->isConfigured)
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 80017e0:	2001      	movs	r0, #1
 80017e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 80017e6:	f3c2 0212 	ubfx	r2, r2, #0, #19
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e7dc      	b.n	80017a8 <XMC_USBD_EndpointWrite+0x88>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
  }
  else if (ep->inInUse == 1U)
  {
    result=(int32_t)0;
 80017ee:	2000      	movs	r0, #0
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
    result=(int32_t)ep->xferTotal;
  }
  return result;
}
 80017f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
  {
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f363 41dc 	bfi	r1, r3, #19, #10
 80017fa:	e7df      	b.n	80017bc <XMC_USBD_EndpointWrite+0x9c>
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80017fc:	2c01      	cmp	r4, #1
 80017fe:	d1dd      	bne.n	80017bc <XMC_USBD_EndpointWrite+0x9c>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8001800:	f8d5 21a4 	ldr.w	r2, [r5, #420]	; 0x1a4
 8001804:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001806:	4084      	lsls	r4, r0
 8001808:	431c      	orrs	r4, r3
 800180a:	6354      	str	r4, [r2, #52]	; 0x34
 800180c:	e7d6      	b.n	80017bc <XMC_USBD_EndpointWrite+0x9c>
 800180e:	bf00      	nop
 8001810:	1fff1190 	.word	0x1fff1190
 8001814:	1fff118c 	.word	0x1fff118c

08001818 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 800181c:	4cb9      	ldr	r4, [pc, #740]	; (8001b04 <XMC_USBD_IRQHandler+0x2ec>)
 800181e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001822:	699d      	ldr	r5, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001824:	695a      	ldr	r2, [r3, #20]
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001826:	b08f      	sub	sp, #60	; 0x3c
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001828:	ea02 0a05 	and.w	sl, r2, r5
	
  if (data.b.sofintr)
 800182c:	fa5f f68a 	uxtb.w	r6, sl
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001830:	9001      	str	r0, [sp, #4]
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
	
  if (data.b.sofintr)
 8001832:	0730      	lsls	r0, r6, #28
 8001834:	f100 82eb 	bmi.w	8001e0e <XMC_USBD_IRQHandler+0x5f6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001838:	9a01      	ldr	r2, [sp, #4]
 800183a:	7b52      	ldrb	r2, [r2, #13]
 800183c:	2a01      	cmp	r2, #1
 800183e:	f000 82f3 	beq.w	8001e28 <XMC_USBD_IRQHandler+0x610>
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
      gintmsk.b.rxstsqlvl = 1U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
    }
  }
  if (data.b.erlysuspend)
 8001842:	f3ca 2507 	ubfx	r5, sl, #8, #8
 8001846:	0769      	lsls	r1, r5, #29
	  break;
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
	  break;
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8001848:	bf44      	itt	mi
 800184a:	f44f 6280 	movmi.w	r2, #1024	; 0x400
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 800184e:	615a      	strmi	r2, [r3, #20]
  }
  if (data.b.erlysuspend)
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
  }
  if (data.b.usbsuspend)
 8001850:	072a      	lsls	r2, r5, #28
 8001852:	f100 82d2 	bmi.w	8001dfa <XMC_USBD_IRQHandler+0x5e2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
  }
  if (data.b.wkupintr)
 8001856:	ea4f 661a 	mov.w	r6, sl, lsr #24
 800185a:	0637      	lsls	r7, r6, #24
 800185c:	f100 82c3 	bmi.w	8001de6 <XMC_USBD_IRQHandler+0x5ce>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
  }
  if (data.b.sessreqintr)
 8001860:	0670      	lsls	r0, r6, #25
 8001862:	f100 82b0 	bmi.w	8001dc6 <XMC_USBD_IRQHandler+0x5ae>
  {
    xmc_device.IsPowered = 1U;
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
  }
  if (data.b.usbreset)
 8001866:	06e9      	lsls	r1, r5, #27
 8001868:	f100 81f1 	bmi.w	8001c4e <XMC_USBD_IRQHandler+0x436>
  {
    XMC_USBD_lHandleUSBReset(obj);
  }
  if (data.b.enumdone)
 800186c:	06aa      	lsls	r2, r5, #26
 800186e:	f100 81d3 	bmi.w	8001c18 <XMC_USBD_IRQHandler+0x400>
  {
    XMC_USBD_lHandleEnumDone();
  }
  if (data.b.inepint)
 8001872:	f41a 2f80 	tst.w	sl, #262144	; 0x40000
 8001876:	f040 8105 	bne.w	8001a84 <XMC_USBD_IRQHandler+0x26c>
  {
    XMC_USBD_lHandleIEPInt(obj);
  }
  if (data.b.outepintr)
 800187a:	f41a 2f00 	tst.w	sl, #524288	; 0x80000
 800187e:	d118      	bne.n	80018b2 <XMC_USBD_IRQHandler+0x9a>
  {
		XMC_USBD_lHandleOEPInt(obj);
  }
	if (data.b.otgintr)
 8001880:	f01a 0f04 	tst.w	sl, #4
 8001884:	d102      	bne.n	800188c <XMC_USBD_IRQHandler+0x74>
  {
	  XMC_USBD_lHandleOTGInt();
  }

}
 8001886:	b00f      	add	sp, #60	; 0x3c
 8001888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 800188c:	685d      	ldr	r5, [r3, #4]
  if (data.b.sesenddet)
 800188e:	0768      	lsls	r0, r5, #29
 8001890:	d50b      	bpl.n	80018aa <XMC_USBD_IRQHandler+0x92>
  {
		xmc_device.IsPowered = 0U;
 8001892:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001896:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
{
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
  if (data.b.sesenddet)
  {
		xmc_device.IsPowered = 0U;
 800189a:	f36f 0382 	bfc	r3, #2, #1
 800189e:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80018a2:	2001      	movs	r0, #1
 80018a4:	4790      	blx	r2
 80018a6:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
  gotgint_data_t clear = { .d32 = 0U};
  clear.d32 = event;
  xmc_device.global_register->gotgint = clear.d32;
 80018aa:	605d      	str	r5, [r3, #4]
	if (data.b.otgintr)
  {
	  XMC_USBD_lHandleOTGInt();
  }

}
 80018ac:	b00f      	add	sp, #60	; 0x3c
 80018ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 80018b2:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 80018b6:	6993      	ldr	r3, [r2, #24]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80018b8:	69d7      	ldr	r7, [r2, #28]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 80018ba:	6952      	ldr	r2, [r2, #20]
 80018bc:	9202      	str	r2, [sp, #8]
  
  mask = daint.ep.out & daintmsk.ep.out;
 80018be:	f3c3 430f 	ubfx	r3, r3, #16, #16
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 80018c2:	2200      	movs	r2, #0
 
  while ((uint16_t)mask >> ep_num)
 80018c4:	ea13 4717 	ands.w	r7, r3, r7, lsr #16
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 80018c8:	9203      	str	r2, [sp, #12]
 
  while ((uint16_t)mask >> ep_num)
 80018ca:	f000 8097 	beq.w	80019fc <XMC_USBD_IRQHandler+0x1e4>
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 80018ce:	f8dd b004 	ldr.w	fp, [sp, #4]
 80018d2:	f8cd a010 	str.w	sl, [sp, #16]
 80018d6:	4616      	mov	r6, r2
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 80018d8:	463b      	mov	r3, r7
 80018da:	4615      	mov	r5, r2
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 80018dc:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80018e0:	46b8      	mov	r8, r7
 
  while ((uint16_t)mask >> ep_num)
  {
    temp1 = (mask >> (uint16_t)ep_num);
    temp = temp1 & 0x1U;
    if (temp)
 80018e2:	07df      	lsls	r7, r3, #31
 80018e4:	f140 8081 	bpl.w	80019ea <XMC_USBD_IRQHandler+0x1d2>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80018e8:	f106 0970 	add.w	r9, r6, #112	; 0x70
 80018ec:	eb04 0289 	add.w	r2, r4, r9, lsl #2
 80018f0:	9902      	ldr	r1, [sp, #8]
 80018f2:	6852      	ldr	r2, [r2, #4]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80018f4:	f89b 300d 	ldrb.w	r3, [fp, #13]
    temp = temp1 & 0x1U;
    if (temp)
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80018f8:	6897      	ldr	r7, [r2, #8]
 80018fa:	400f      	ands	r7, r1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 80018fc:	fa5f fa87 	uxtb.w	sl, r7
    if (temp)
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001900:	2b00      	cmp	r3, #0
 8001902:	f040 8081 	bne.w	8001a08 <XMC_USBD_IRQHandler+0x1f0>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8001906:	6911      	ldr	r1, [r2, #16]
 8001908:	9103      	str	r1, [sp, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 800190a:	f01a 0f08 	tst.w	sl, #8
 800190e:	d021      	beq.n	8001954 <XMC_USBD_IRQHandler+0x13c>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001910:	4a7c      	ldr	r2, [pc, #496]	; (8001b04 <XMC_USBD_IRQHandler+0x2ec>)
 8001912:	fb0c 2006 	mla	r0, ip, r6, r2
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8001916:	9a03      	ldr	r2, [sp, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001918:	7901      	ldrb	r1, [r0, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 800191a:	f3c2 7241 	ubfx	r2, r2, #29, #2
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800191e:	00d2      	lsls	r2, r2, #3
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001920:	f363 1145 	bfi	r1, r3, #5, #1
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8001924:	f1c2 0218 	rsb	r2, r2, #24
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001928:	7101      	strb	r1, [r0, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800192a:	6102      	str	r2, [r0, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
		{
			ep->outBytesAvailable += ep->xferCount;
		}
		ep->outInUse = 0U;
 800192c:	fb0c 4306 	mla	r3, ip, r6, r4
 8001930:	f8cd c004 	str.w	ip, [sp, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	f022 0210 	bic.w	r2, r2, #16
 800193a:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800193c:	2000      	movs	r0, #0
 800193e:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001942:	4601      	mov	r1, r0
 8001944:	4798      	blx	r3
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
  doepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001946:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 800194a:	2108      	movs	r1, #8
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001952:	6091      	str	r1, [r2, #8]
		ep->outInUse = 0U;
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
      }
      if (doepint.b.xfercompl)
 8001954:	f01a 0f01 	tst.w	sl, #1
 8001958:	d046      	beq.n	80019e8 <XMC_USBD_IRQHandler+0x1d0>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800195a:	f89b 300d 	ldrb.w	r3, [fp, #13]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <XMC_USBD_IRQHandler+0x212>
 8001962:	fb0c 4306 	mla	r3, ip, r6, r4
 8001966:	6a99      	ldr	r1, [r3, #40]	; 0x28
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
				}
        if (ep->xferTotal == ep->xferLength)
 8001968:	fb0c 4306 	mla	r3, ip, r6, r4
 800196c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196e:	428a      	cmp	r2, r1
 8001970:	d072      	beq.n	8001a58 <XMC_USBD_IRQHandler+0x240>
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8001972:	6898      	ldr	r0, [r3, #8]
 8001974:	ebc1 0e02 	rsb	lr, r1, r2
 8001978:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800197c:	4586      	cmp	lr, r0
 800197e:	fb0c fe06 	mul.w	lr, ip, r6
  {
    ep->xferLength += ep->maxTransferSize;
 8001982:	bf88      	it	hi
 8001984:	1809      	addhi	r1, r1, r0
 8001986:	eb04 000e 	add.w	r0, r4, lr
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 800198a:	bf98      	it	ls
 800198c:	4611      	movls	r1, r2
 800198e:	6281      	str	r1, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 8001990:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8001994:	f01e 0f0f 	tst.w	lr, #15
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	f100 0a28 	add.w	sl, r0, #40	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 80019a0:	f040 82ae 	bne.w	8001f00 <XMC_USBD_IRQHandler+0x6e8>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 80019a4:	2101      	movs	r1, #1
 80019a6:	f361 43d4 	bfi	r3, r1, #19, #2
    ep0_data->b.supcnt = 0x3U;
 80019aa:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80019ae:	f362 0306 	bfi	r3, r2, #0, #7
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80019b2:	4a55      	ldr	r2, [pc, #340]	; (8001b08 <XMC_USBD_IRQHandler+0x2f0>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	7b52      	ldrb	r2, [r2, #13]
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80019b8:	fb0c f606 	mul.w	r6, ip, r6
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80019bc:	2a00      	cmp	r2, #0
 80019be:	f040 82a6 	bne.w	8001f0e <XMC_USBD_IRQHandler+0x6f6>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 80019c2:	5da2      	ldrb	r2, [r4, r6]
 80019c4:	f002 020f 	and.w	r2, r2, #15
 80019c8:	19a1      	adds	r1, r4, r6
 80019ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80019ce:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80019d0:	f8d2 11c4 	ldr.w	r1, [r2, #452]	; 0x1c4
 80019d4:	6148      	str	r0, [r1, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 80019d6:	610b      	str	r3, [r1, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80019d8:	680b      	ldr	r3, [r1, #0]
 80019da:	eb04 0989 	add.w	r9, r4, r9, lsl #2
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 80019de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80019e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80019e6:	600b      	str	r3, [r1, #0]
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
  doepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80019e8:	6097      	str	r7, [r2, #8]

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
    }
    ep_num++;
 80019ea:	3501      	adds	r5, #1
 80019ec:	b2ed      	uxtb	r5, r5
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 80019ee:	fa58 f305 	asrs.w	r3, r8, r5
 80019f2:	462e      	mov	r6, r5
 80019f4:	f47f af75 	bne.w	80018e2 <XMC_USBD_IRQHandler+0xca>
 80019f8:	f8dd a010 	ldr.w	sl, [sp, #16]
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 80019fc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
	  break;
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8001a00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	e73b      	b.n	8001880 <XMC_USBD_IRQHandler+0x68>
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8001a08:	f01a 0f08 	tst.w	sl, #8
 8001a0c:	d0a2      	beq.n	8001954 <XMC_USBD_IRQHandler+0x13c>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001a0e:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <XMC_USBD_IRQHandler+0x2ec>)
 8001a10:	fb0c 2106 	mla	r1, ip, r6, r2
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a14:	2b01      	cmp	r3, #1
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8001a16:	790a      	ldrb	r2, [r1, #4]
 8001a18:	f36f 1245 	bfc	r2, #5, #1
 8001a1c:	710a      	strb	r2, [r1, #4]
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001a1e:	d185      	bne.n	800192c <XMC_USBD_IRQHandler+0x114>
		{
			ep->outBytesAvailable += ep->xferCount;
 8001a20:	690b      	ldr	r3, [r1, #16]
 8001a22:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001a24:	4413      	add	r3, r2
 8001a26:	610b      	str	r3, [r1, #16]
 8001a28:	e780      	b.n	800192c <XMC_USBD_IRQHandler+0x114>
      }
      if (doepint.b.xfercompl)
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001a2a:	fb0c 4006 	mla	r0, ip, r6, r4
 8001a2e:	9b03      	ldr	r3, [sp, #12]
 8001a30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001a32:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	ebc2 0e01 	rsb	lr, r2, r1
 8001a3c:	ebc3 030e 	rsb	r3, r3, lr
          ep->xferCount += bytes;
 8001a40:	eb02 0e03 	add.w	lr, r2, r3
          ep->xferBuffer += bytes;
 8001a44:	6a42      	ldr	r2, [r0, #36]	; 0x24
      if (doepint.b.xfercompl)
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
          ep->xferCount += bytes;
 8001a46:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001a4a:	4413      	add	r3, r2
 8001a4c:	6243      	str	r3, [r0, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8001a4e:	fb0c 4306 	mla	r3, ip, r6, r4
 8001a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a54:	428a      	cmp	r2, r1
 8001a56:	d18c      	bne.n	8001972 <XMC_USBD_IRQHandler+0x15a>
 8001a58:	f8cd c004 	str.w	ip, [sp, #4]
        {
          ep->outBytesAvailable = ep->xferCount;
          ep->outInUse = 0U;
 8001a5c:	685a      	ldr	r2, [r3, #4]
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
				}
        if (ep->xferTotal == ep->xferLength)
        {
          ep->outBytesAvailable = ep->xferCount;
 8001a5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a60:	6119      	str	r1, [r3, #16]
          ep->outInUse = 0U;
 8001a62:	f022 0210 	bic.w	r2, r2, #16
 8001a66:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <XMC_USBD_IRQHandler+0x2ec>)
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a70:	2101      	movs	r1, #1
 8001a72:	4798      	blx	r3
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <XMC_USBD_IRQHandler+0x2ec>)
 8001a76:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001a7a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8001a7e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001a82:	e7b1      	b.n	80019e8 <XMC_USBD_IRQHandler+0x1d0>
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8001a84:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8001a88:	699a      	ldr	r2, [r3, #24]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	9303      	str	r3, [sp, #12]
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 8001a8e:	b297      	uxth	r7, r2
 8001a90:	2f00      	cmp	r7, #0
 8001a92:	d061      	beq.n	8001b58 <XMC_USBD_IRQHandler+0x340>
 8001a94:	2600      	movs	r6, #0
 8001a96:	46b6      	mov	lr, r6
 8001a98:	463b      	mov	r3, r7
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001a9a:	f04f 0b34 	mov.w	fp, #52	; 0x34
 8001a9e:	f8cd a010 	str.w	sl, [sp, #16]
 8001aa2:	46b9      	mov	r9, r7
  
  while ((uint16_t)mask >> ep_num)
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
 8001aa4:	07db      	lsls	r3, r3, #31
 8001aa6:	d54f      	bpl.n	8001b48 <XMC_USBD_IRQHandler+0x330>
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001aa8:	f10e 036a 	add.w	r3, lr, #106	; 0x6a
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001aac:	fb0b f00e 	mul.w	r0, fp, lr
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001ab0:	9302      	str	r3, [sp, #8]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001ab2:	f8d4 a1a4 	ldr.w	sl, [r4, #420]	; 0x1a4
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001ab6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001aba:	f814 8000 	ldrb.w	r8, [r4, r0]
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001abe:	689d      	ldr	r5, [r3, #8]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001ac0:	f8da 1034 	ldr.w	r1, [sl, #52]	; 0x34
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001ac4:	9a01      	ldr	r2, [sp, #4]
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001ac6:	9f03      	ldr	r7, [sp, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001ac8:	7b52      	ldrb	r2, [r2, #13]
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001aca:	f008 0c0f 	and.w	ip, r8, #15
 8001ace:	fa21 f10c 	lsr.w	r1, r1, ip
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001ad2:	01c9      	lsls	r1, r1, #7
 8001ad4:	b2c9      	uxtb	r1, r1
 8001ad6:	4339      	orrs	r1, r7
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001ad8:	4420      	add	r0, r4
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 8001ada:	400d      	ands	r5, r1
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001adc:	b9b2      	cbnz	r2, 8001b0c <XMC_USBD_IRQHandler+0x2f4>
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
        }
      }
      if (diepint.b.xfercompl)
 8001ade:	07ef      	lsls	r7, r5, #31
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001ae0:	691a      	ldr	r2, [r3, #16]
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
        }
      }
      if (diepint.b.xfercompl)
 8001ae2:	d530      	bpl.n	8001b46 <XMC_USBD_IRQHandler+0x32e>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8001ae4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	f000 8218 	beq.w	8001f1e <XMC_USBD_IRQHandler+0x706>
 8001aee:	6a81      	ldr	r1, [r0, #40]	; 0x28
            uint32_t Bytes = ep->xferLength - ep->xferCount;
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8001af0:	fb0b 420e 	mla	r2, fp, lr, r4
 8001af4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001af6:	428b      	cmp	r3, r1
 8001af8:	d133      	bne.n	8001b62 <XMC_USBD_IRQHandler+0x34a>
        {
          ep->inInUse = 0U;
 8001afa:	6853      	ldr	r3, [r2, #4]
 8001afc:	f023 0308 	bic.w	r3, r3, #8
 8001b00:	6053      	str	r3, [r2, #4]
 8001b02:	e017      	b.n	8001b34 <XMC_USBD_IRQHandler+0x31c>
 8001b04:	1fff1190 	.word	0x1fff1190
 8001b08:	1fff118c 	.word	0x1fff118c
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001b0c:	2a01      	cmp	r2, #1
 8001b0e:	d102      	bne.n	8001b16 <XMC_USBD_IRQHandler+0x2fe>
      {
        if (diepint.b.emptyintr)
 8001b10:	0629      	lsls	r1, r5, #24
 8001b12:	f100 822a 	bmi.w	8001f6a <XMC_USBD_IRQHandler+0x752>
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
          ep->xferBuffer += bytes;
        }
      }
      if (diepint.b.xfercompl)
 8001b16:	07e9      	lsls	r1, r5, #31
 8001b18:	d515      	bpl.n	8001b46 <XMC_USBD_IRQHandler+0x32e>
            uint32_t Bytes = ep->xferLength - ep->xferCount;
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8001b1a:	fb0b 400e 	mla	r0, fp, lr, r4
 8001b1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001b20:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001b22:	428b      	cmp	r3, r1
 8001b24:	d11d      	bne.n	8001b62 <XMC_USBD_IRQHandler+0x34a>
        {
          ep->inInUse = 0U;
 8001b26:	6843      	ldr	r3, [r0, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001b28:	2a01      	cmp	r2, #1
            ep->xferBuffer += Bytes;
          }
        }
        if (ep->xferTotal==ep->xferLength)
        {
          ep->inInUse = 0U;
 8001b2a:	f023 0308 	bic.w	r3, r3, #8
 8001b2e:	6043      	str	r3, [r0, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001b30:	f000 8273 	beq.w	800201a <XMC_USBD_IRQHandler+0x802>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 8001b34:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001b38:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4798      	blx	r3
 8001b40:	9b02      	ldr	r3, [sp, #8]
 8001b42:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
  diepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001b46:	609d      	str	r5, [r3, #8]

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
 8001b48:	3601      	adds	r6, #1
 8001b4a:	b2f6      	uxtb	r6, r6
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 8001b4c:	fa59 f306 	asrs.w	r3, r9, r6
 8001b50:	46b6      	mov	lr, r6
 8001b52:	d1a7      	bne.n	8001aa4 <XMC_USBD_IRQHandler+0x28c>
 8001b54:	f8dd a010 	ldr.w	sl, [sp, #16]
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001b58:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	e68b      	b.n	800187a <XMC_USBD_IRQHandler+0x62>
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001b62:	fb0b f20e 	mul.w	r2, fp, lr
 8001b66:	18a0      	adds	r0, r4, r2
 8001b68:	5ca2      	ldrb	r2, [r4, r2]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001b6a:	6880      	ldr	r0, [r0, #8]
 8001b6c:	ebc1 0803 	rsb	r8, r1, r3
 8001b70:	f3c0 0c12 	ubfx	ip, r0, #0, #19
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001b74:	f002 020f 	and.w	r2, r2, #15

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8001b78:	45e0      	cmp	r8, ip
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001b7a:	9206      	str	r2, [sp, #24]
 8001b7c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
  {
    ep->xferLength = ep->xferTotal;
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8001b80:	bf28      	it	cs
 8001b82:	eb01 030c 	addcs.w	r3, r1, ip
 8001b86:	fb0b fc0e 	mul.w	ip, fp, lr
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001b8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001b8e:	9205      	str	r2, [sp, #20]
 8001b90:	eb04 010c 	add.w	r1, r4, ip
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	628b      	str	r3, [r1, #40]	; 0x28
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f101 0828 	add.w	r8, r1, #40	; 0x28
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 81dd 	beq.w	8001f5e <XMC_USBD_IRQHandler+0x746>
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8001ba4:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001ba8:	f01c 0f0f 	tst.w	ip, #15
 8001bac:	f000 81cf 	beq.w	8001f4e <XMC_USBD_IRQHandler+0x736>
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001bb0:	6849      	ldr	r1, [r1, #4]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001bb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001bb6:	f3c1 2cc6 	ubfx	ip, r1, #11, #7
 8001bba:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001bbe:	1bd9      	subs	r1, r3, r7
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001bc0:	460b      	mov	r3, r1
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001bc2:	fa1f f888 	uxth.w	r8, r8
 8001bc6:	fa18 f181 	uxtah	r1, r8, r1
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8001bce:	fb91 fcfc 	sdiv	ip, r1, ip
 8001bd2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001bd6:	49c2      	ldr	r1, [pc, #776]	; (8001ee0 <XMC_USBD_IRQHandler+0x6c8>)
 8001bd8:	6809      	ldr	r1, [r1, #0]
 8001bda:	7b49      	ldrb	r1, [r1, #13]
 8001bdc:	f363 0012 	bfi	r0, r3, #0, #19
 8001be0:	f36c 40dc 	bfi	r0, ip, #19, #10
 8001be4:	2900      	cmp	r1, #0
 8001be6:	f040 820d 	bne.w	8002004 <XMC_USBD_IRQHandler+0x7ec>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8001bea:	fb0b 430e 	mla	r3, fp, lr, r4
 8001bee:	9905      	ldr	r1, [sp, #20]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	614b      	str	r3, [r1, #20]
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001bf4:	fb0b fe0e 	mul.w	lr, fp, lr
 8001bf8:	9b02      	ldr	r3, [sp, #8]
 8001bfa:	f814 100e 	ldrb.w	r1, [r4, lr]
 8001bfe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001c02:	f001 010f 	and.w	r1, r1, #15
 8001c06:	316a      	adds	r1, #106	; 0x6a
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 8001c08:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8001c0c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8001c10:	6108      	str	r0, [r1, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8001c12:	600a      	str	r2, [r1, #0]
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
  diepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001c14:	609d      	str	r5, [r3, #8]
 8001c16:	e797      	b.n	8001b48 <XMC_USBD_IRQHandler+0x330>
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001c18:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8001c1c:	f894 21fe 	ldrb.w	r2, [r4, #510]	; 0x1fe
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001c20:	680b      	ldr	r3, [r1, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001c22:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001c26:	f36f 030a 	bfc	r3, #0, #11
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;
 8001c2a:	f042 0205 	orr.w	r2, r2, #5
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8001c2e:	600b      	str	r3, [r1, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001c30:	2002      	movs	r0, #2
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
  xmc_device.IsPowered = 1U;
 8001c32:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001c36:	47a8      	blx	r5

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001c38:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001c3c:	68da      	ldr	r2, [r3, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001c3e:	2109      	movs	r1, #9
 8001c40:	f361 228d 	bfi	r2, r1, #10, #4
	  break;
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
	  break;
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8001c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001c48:	60da      	str	r2, [r3, #12]
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001c4a:	6159      	str	r1, [r3, #20]
 8001c4c:	e611      	b.n	8001872 <XMC_USBD_IRQHandler+0x5a>
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001c4e:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c52:	f8d4 91c4 	ldr.w	r9, [r4, #452]	; 0x1c4
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001c56:	684a      	ldr	r2, [r1, #4]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c58:	f8d4 71d4 	ldr.w	r7, [r4, #468]	; 0x1d4
 8001c5c:	f8d4 61d8 	ldr.w	r6, [r4, #472]	; 0x1d8
 8001c60:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
 8001c64:	f042 0201 	orr.w	r2, r2, #1
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c68:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
 8001c6c:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;
 8001c70:	604a      	str	r2, [r1, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c72:	f8d9 2000 	ldr.w	r2, [r9]
		epctl.b.snak = 1U;
 8001c76:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001c7a:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001c7e:	f8c9 2000 	str.w	r2, [r9]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c82:	f8d8 2000 	ldr.w	r2, [r8]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001c86:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8001ef0 <XMC_USBD_IRQHandler+0x6d8>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001c8a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001c8e:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001c92:	f8c8 2000 	str.w	r2, [r8]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001c96:	f8dc 2000 	ldr.w	r2, [ip]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001c9a:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8001ef4 <XMC_USBD_IRQHandler+0x6dc>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001c9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001ca2:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001ca6:	f8cc 2000 	str.w	r2, [ip]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001caa:	f8de 2000 	ldr.w	r2, [lr]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001cae:	f8df c248 	ldr.w	ip, [pc, #584]	; 8001ef8 <XMC_USBD_IRQHandler+0x6e0>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001cb2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001cb6:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001cba:	f8ce 2000 	str.w	r2, [lr]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001cbe:	683a      	ldr	r2, [r7, #0]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001cc0:	f8df e238 	ldr.w	lr, [pc, #568]	; 8001efc <XMC_USBD_IRQHandler+0x6e4>

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001cc4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001cc8:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001ccc:	603a      	str	r2, [r7, #0]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001cce:	6832      	ldr	r2, [r6, #0]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001cd0:	4f84      	ldr	r7, [pc, #528]	; (8001ee4 <XMC_USBD_IRQHandler+0x6cc>)

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001cd2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001cd6:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001cda:	6032      	str	r2, [r6, #0]
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001cdc:	6802      	ldr	r2, [r0, #0]
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001cde:	4e82      	ldr	r6, [pc, #520]	; (8001ee8 <XMC_USBD_IRQHandler+0x6d0>)

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
 8001ce0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 8001ce4:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001ce8:	6002      	str	r2, [r0, #0]
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001cea:	2040      	movs	r0, #64	; 0x40
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
 8001cec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001cf0:	6258      	str	r0, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
 8001cf2:	f360 020f 	bfi	r2, r0, #0, #16
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001cf6:	2000      	movs	r0, #0
  xmc_device.global_register->grxfsiz = 64U;
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001cfa:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
 8001cfe:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
 8001d02:	f8c3 c10c 	str.w	ip, [r3, #268]	; 0x10c
 8001d06:	f8c3 e110 	str.w	lr, [r3, #272]	; 0x110
 8001d0a:	f8c3 7114 	str.w	r7, [r3, #276]	; 0x114
 8001d0e:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001d12:	900d      	str	r0, [sp, #52]	; 0x34
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001d14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d16:	f042 0220 	orr.w	r2, r2, #32
 8001d1a:	920d      	str	r2, [sp, #52]	; 0x34
  data.b.txfnum = fifo_num;
 8001d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d1e:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8001d22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d26:	920d      	str	r2, [sp, #52]	; 0x34
  xmc_device.global_register->grstctl = data.d32;
 8001d28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d2a:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	920d      	str	r2, [sp, #52]	; 0x34
  } while (data.b.txfflsh);
 8001d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d32:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001d36:	2a00      	cmp	r2, #0
 8001d38:	d1f8      	bne.n	8001d2c <XMC_USBD_IRQHandler+0x514>
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8001d3a:	920c      	str	r2, [sp, #48]	; 0x30
  /*flush fifo */
  data.b.txfflsh = 1U;
 8001d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	920c      	str	r2, [sp, #48]	; 0x30
  data.b.txfnum = fifo_num;
 8001d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d46:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8001d4a:	920c      	str	r2, [sp, #48]	; 0x30
  xmc_device.global_register->grstctl = data.d32;
 8001d4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d4e:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	920c      	str	r2, [sp, #48]	; 0x30
  } while (data.b.txfflsh);
 8001d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d56:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d1f8      	bne.n	8001d50 <XMC_USBD_IRQHandler+0x538>
static void XMC_USBD_lFlushRXFifo(void) 
{
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8001d5e:	920b      	str	r2, [sp, #44]	; 0x2c
  data.b.rxfflsh = 1U;
 8001d60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d62:	f042 0210 	orr.w	r2, r2, #16
 8001d66:	920b      	str	r2, [sp, #44]	; 0x2c
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8001d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d6a:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	920b      	str	r2, [sp, #44]	; 0x2c
  } while (data.b.rxfflsh);
 8001d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d72:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d1f8      	bne.n	8001d6c <XMC_USBD_IRQHandler+0x554>
  XMC_USBD_lFlushRXFifo();
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
  daint.b.inep0 = 1U;
  daint.b.outep0 = 1U;
 8001d7a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  xmc_device.device_register->daintmsk = daint.d32;
 8001d7e:	61cb      	str	r3, [r1, #28]
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
	doepint_data_t doepint;
	doepint.d32 = event;
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001d80:	694b      	ldr	r3, [r1, #20]
  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
  dcfg.b.devaddr = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001d82:	9801      	ldr	r0, [sp, #4]
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
	doepint_data_t doepint;
	doepint.d32 = event;
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001d84:	f043 030f 	orr.w	r3, r3, #15
  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
  dcfg.b.devaddr = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001d88:	7b40      	ldrb	r0, [r0, #13]
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
	doepint_data_t doepint;
	doepint.d32 = event;
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001d8a:	614b      	str	r3, [r1, #20]
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
	diepint_data_t diepint;
	diepint.d32 = event;
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001d8c:	690b      	ldr	r3, [r1, #16]
 8001d8e:	f043 030f 	orr.w	r3, r3, #15
 8001d92:	610b      	str	r3, [r1, #16]
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001d94:	680b      	ldr	r3, [r1, #0]
  dcfg.b.devaddr = 0U;
  xmc_device.device_register->dcfg = dcfg.d32;

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001d96:	2801      	cmp	r0, #1
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
  dcfg.b.devaddr = 0U;
 8001d98:	f362 130a 	bfi	r3, r2, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 8001d9c:	600b      	str	r3, [r1, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001d9e:	bf08      	it	eq
 8001da0:	634a      	streq	r2, [r1, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001da2:	6863      	ldr	r3, [r4, #4]
  xmc_device.ep[0U].inInUse = 0U;

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001da4:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
  }

  xmc_device.ep[0U].outInUse = 0U;
 8001da8:	f023 0310 	bic.w	r3, r3, #16
 8001dac:	6063      	str	r3, [r4, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001dae:	6863      	ldr	r3, [r4, #4]
 8001db0:	f023 0308 	bic.w	r3, r3, #8
 8001db4:	6063      	str	r3, [r4, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8001db6:	2004      	movs	r0, #4
 8001db8:	4790      	blx	r2
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001dba:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
	  break;
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8001dbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001dc2:	615a      	str	r2, [r3, #20]
 8001dc4:	e552      	b.n	800186c <XMC_USBD_IRQHandler+0x54>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
  }
  if (data.b.sessreqintr)
  {
    xmc_device.IsPowered = 1U;
 8001dc6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001dca:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
  }
  if (data.b.sessreqintr)
  {
    xmc_device.IsPowered = 1U;
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	4790      	blx	r2
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001dda:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  gintsts_data_t clear;
  clear.d32 = 0U;
  switch(event)
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8001dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	e53f      	b.n	8001866 <XMC_USBD_IRQHandler+0x4e>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
  }
  if (data.b.wkupintr)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001de6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001dea:	2008      	movs	r0, #8
 8001dec:	4798      	blx	r3
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001dee:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
	  break;
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8001df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001df6:	615a      	str	r2, [r3, #20]
 8001df8:	e532      	b.n	8001860 <XMC_USBD_IRQHandler+0x48>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
  }
  if (data.b.usbsuspend)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8001dfa:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001dfe:	2006      	movs	r0, #6
 8001e00:	4798      	blx	r3
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001e02:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
	  break;
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8001e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	e523      	b.n	8001856 <XMC_USBD_IRQHandler+0x3e>
  gintmsk.d32 = xmc_device.global_register->gintmsk;
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
	
  if (data.b.sofintr)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001e0e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001e12:	2009      	movs	r0, #9
 8001e14:	4798      	blx	r3
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001e16:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
	  break;
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
	  break;
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8001e1a:	2208      	movs	r2, #8
	  clear.b.outepintr = 1U;
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001e1c:	615a      	str	r2, [r3, #20]
  if (data.b.sofintr)
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001e1e:	9a01      	ldr	r2, [sp, #4]
 8001e20:	7b52      	ldrb	r2, [r2, #13]
 8001e22:	2a01      	cmp	r2, #1
 8001e24:	f47f ad0d 	bne.w	8001842 <XMC_USBD_IRQHandler+0x2a>
  {
    if (data.b.rxstsqlvl)
 8001e28:	06f1      	lsls	r1, r6, #27
 8001e2a:	f57f ad0a 	bpl.w	8001842 <XMC_USBD_IRQHandler+0x2a>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8001e2e:	f36f 1504 	bfc	r5, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001e32:	619d      	str	r5, [r3, #24]
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8001e34:	6a1a      	ldr	r2, [r3, #32]

  switch (data.b.pktsts)
 8001e36:	f3c2 4143 	ubfx	r1, r2, #17, #4
 8001e3a:	2902      	cmp	r1, #2
 8001e3c:	f000 80ff 	beq.w	800203e <XMC_USBD_IRQHandler+0x826>
 8001e40:	2906      	cmp	r1, #6
 8001e42:	d149      	bne.n	8001ed8 <XMC_USBD_IRQHandler+0x6c0>
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
      break;
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001e44:	f002 070f 	and.w	r7, r2, #15
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001e48:	eb04 0187 	add.w	r1, r4, r7, lsl #2
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
      break;
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8001e4c:	f3c2 120a 	ubfx	r2, r2, #4, #11
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001e50:	f8d1 11c4 	ldr.w	r1, [r1, #452]	; 0x1c4
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8001e54:	4825      	ldr	r0, [pc, #148]	; (8001eec <XMC_USBD_IRQHandler+0x6d4>)
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8001e56:	6809      	ldr	r1, [r1, #0]
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8001e58:	f8d4 81e0 	ldr.w	r8, [r4, #480]	; 0x1e0
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8001e5c:	040e      	lsls	r6, r1, #16
 8001e5e:	d53b      	bpl.n	8001ed8 <XMC_USBD_IRQHandler+0x6c0>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8001e60:	2134      	movs	r1, #52	; 0x34
 8001e62:	fb01 0e07 	mla	lr, r1, r7, r0
 8001e66:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
 8001e6a:	b3a8      	cbz	r0, 8001ed8 <XMC_USBD_IRQHandler+0x6c0>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001e6c:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 8001e70:	d00b      	beq.n	8001e8a <XMC_USBD_IRQHandler+0x672>
 8001e72:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001e76:	2100      	movs	r1, #0
 8001e78:	e001      	b.n	8001e7e <XMC_USBD_IRQHandler+0x666>
 8001e7a:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8001e7e:	f8d8 6000 	ldr.w	r6, [r8]
 8001e82:	5046      	str	r6, [r0, r1]
 8001e84:	3104      	adds	r1, #4
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8001e86:	4561      	cmp	r1, ip
 8001e88:	d1f7      	bne.n	8001e7a <XMC_USBD_IRQHandler+0x662>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8001e8a:	4562      	cmp	r2, ip
 8001e8c:	d01b      	beq.n	8001ec6 <XMC_USBD_IRQHandler+0x6ae>
    {
      temp_data = *fifo;
 8001e8e:	f8d8 8000 	ldr.w	r8, [r8]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001e92:	d918      	bls.n	8001ec6 <XMC_USBD_IRQHandler+0x6ae>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001e94:	f04f 0e34 	mov.w	lr, #52	; 0x34
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001e98:	4663      	mov	r3, ip
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001e9a:	fb0e 4e07 	mla	lr, lr, r7, r4
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001e9e:	2600      	movs	r6, #0
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8001ea0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8001ea4:	fa09 f106 	lsl.w	r1, r9, r6
 8001ea8:	ea01 0108 	and.w	r1, r1, r8
 8001eac:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
 8001eb0:	f8df c038 	ldr.w	ip, [pc, #56]	; 8001eec <XMC_USBD_IRQHandler+0x6d4>
 8001eb4:	40f1      	lsrs	r1, r6
 8001eb6:	54c1      	strb	r1, [r0, r3]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8001eb8:	3301      	adds	r3, #1
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	f106 0608 	add.w	r6, r6, #8
 8001ec0:	d1f0      	bne.n	8001ea4 <XMC_USBD_IRQHandler+0x68c>
 8001ec2:	f8dc 31a0 	ldr.w	r3, [ip, #416]	; 0x1a0
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001ec6:	2634      	movs	r6, #52	; 0x34
 8001ec8:	fb06 4607 	mla	r6, r6, r7, r4
 8001ecc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001ece:	6a70      	ldr	r0, [r6, #36]	; 0x24
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001ed0:	4411      	add	r1, r2
    ep->xferBuffer += byte_count;
 8001ed2:	4402      	add	r2, r0
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8001ed4:	62f1      	str	r1, [r6, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8001ed6:	6272      	str	r2, [r6, #36]	; 0x24
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
      gintmsk.b.rxstsqlvl = 1U;
 8001ed8:	f045 0510 	orr.w	r5, r5, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001edc:	619d      	str	r5, [r3, #24]
 8001ede:	e4b0      	b.n	8001842 <XMC_USBD_IRQHandler+0x2a>
 8001ee0:	1fff118c 	.word	0x1fff118c
 8001ee4:	00100090 	.word	0x00100090
 8001ee8:	001000a0 	.word	0x001000a0
 8001eec:	1fff1190 	.word	0x1fff1190
 8001ef0:	00100050 	.word	0x00100050
 8001ef4:	00100060 	.word	0x00100060
 8001ef8:	00100070 	.word	0x00100070
 8001efc:	00100080 	.word	0x00100080
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8001f00:	b9a9      	cbnz	r1, 8001f2e <XMC_USBD_IRQHandler+0x716>
    {
      data.b.xfersize = 0U;
 8001f02:	f361 0312 	bfi	r3, r1, #0, #19
      data.b.pktcnt = 1U;
 8001f06:	2201      	movs	r2, #1
 8001f08:	f362 43dc 	bfi	r3, r2, #19, #10
 8001f0c:	e551      	b.n	80019b2 <XMC_USBD_IRQHandler+0x19a>
 8001f0e:	5da2      	ldrb	r2, [r4, r6]
 8001f10:	f002 020f 	and.w	r2, r2, #15
 8001f14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f18:	f8d2 11c4 	ldr.w	r1, [r2, #452]	; 0x1c4
 8001f1c:	e55b      	b.n	80019d6 <XMC_USBD_IRQHandler+0x1be>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001f1e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001f20:	6a81      	ldr	r1, [r0, #40]	; 0x28
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
 8001f22:	6a43      	ldr	r3, [r0, #36]	; 0x24
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
            ep->xferCount += Bytes;
 8001f24:	62c1      	str	r1, [r0, #44]	; 0x2c
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001f26:	1a8a      	subs	r2, r1, r2
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
 8001f28:	441a      	add	r2, r3
 8001f2a:	6242      	str	r2, [r0, #36]	; 0x24
 8001f2c:	e5e0      	b.n	8001af0 <XMC_USBD_IRQHandler+0x2d8>
      data.b.pktcnt = 1U;
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8001f2e:	6842      	ldr	r2, [r0, #4]
 8001f30:	f8da 0004 	ldr.w	r0, [sl, #4]
 8001f34:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8001f38:	1a09      	subs	r1, r1, r0
 8001f3a:	f102 3eff 	add.w	lr, r2, #4294967295
 8001f3e:	448e      	add	lr, r1
 8001f40:	fbbe f2f2 	udiv	r2, lr, r2
 8001f44:	f362 43dc 	bfi	r3, r2, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8001f48:	f361 0312 	bfi	r3, r1, #0, #19
 8001f4c:	e531      	b.n	80019b2 <XMC_USBD_IRQHandler+0x19a>
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8001f4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001f52:	1a5b      	subs	r3, r3, r1
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
    {
      size.b.pktcnt = 1U;
 8001f58:	f04f 0c01 	mov.w	ip, #1
 8001f5c:	e63b      	b.n	8001bd6 <XMC_USBD_IRQHandler+0x3be>
  {
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
  {
    size.b.xfersize = 0U;
 8001f5e:	f363 0012 	bfi	r0, r3, #0, #19
    size.b.pktcnt = 1U;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f363 40dc 	bfi	r0, r3, #19, #10
 8001f68:	e644      	b.n	8001bf4 <XMC_USBD_IRQHandler+0x3dc>
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001f6a:	f008 080f 	and.w	r8, r8, #15
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001f6e:	f108 016a 	add.w	r1, r8, #106	; 0x6a
 8001f72:	4f5e      	ldr	r7, [pc, #376]	; (80020ec <XMC_USBD_IRQHandler+0x8d4>)
 8001f74:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8001f78:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8001f7a:	f8d1 c018 	ldr.w	ip, [r1, #24]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001f7e:	495b      	ldr	r1, [pc, #364]	; (80020ec <XMC_USBD_IRQHandler+0x8d4>)
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8001f80:	9706      	str	r7, [sp, #24]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001f82:	f108 0878 	add.w	r8, r8, #120	; 0x78
 8001f86:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
 8001f8a:	9107      	str	r1, [sp, #28]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
  if (!byte_count)
 8001f8c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001f8e:	1bc9      	subs	r1, r1, r7
 8001f90:	9105      	str	r1, [sp, #20]
 8001f92:	d051      	beq.n	8002038 <XMC_USBD_IRQHandler+0x820>
    result = 0U;
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001f94:	f101 0803 	add.w	r8, r1, #3
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8001f98:	fa1f fc8c 	uxth.w	ip, ip
    result = 0U;
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8001f9c:	ea4f 0898 	mov.w	r8, r8, lsr #2
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8001fa0:	45e0      	cmp	r8, ip
 8001fa2:	d844      	bhi.n	800202e <XMC_USBD_IRQHandler+0x816>
 8001fa4:	fb0b 410e 	mla	r1, fp, lr, r4
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001fa8:	f1b8 0f00 	cmp.w	r8, #0
 8001fac:	f000 809b 	beq.w	80020e6 <XMC_USBD_IRQHandler+0x8ce>
 8001fb0:	9106      	str	r1, [sp, #24]
 8001fb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001fb6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001fb8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001fbc:	9f02      	ldr	r7, [sp, #8]
 8001fbe:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001fc2:	f8cd e020 	str.w	lr, [sp, #32]
 8001fc6:	2000      	movs	r0, #0
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8001fc8:	6809      	ldr	r1, [r1, #0]
 8001fca:	f8cc 1000 	str.w	r1, [ip]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001fce:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
      i++;
 8001fd2:	3001      	adds	r0, #1
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001fd4:	3104      	adds	r1, #4
 8001fd6:	4540      	cmp	r0, r8
 8001fd8:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
 8001fdc:	d1f4      	bne.n	8001fc8 <XMC_USBD_IRQHandler+0x7b0>
 8001fde:	9806      	ldr	r0, [sp, #24]
 8001fe0:	f8dd e020 	ldr.w	lr, [sp, #32]
 8001fe4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001fe6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8001fea:	9702      	str	r7, [sp, #8]
 8001fec:	9006      	str	r0, [sp, #24]
 8001fee:	4607      	mov	r7, r0
      {
        if (diepint.b.emptyintr)
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
 8001ff0:	46bc      	mov	ip, r7
 8001ff2:	9f05      	ldr	r7, [sp, #20]
 8001ff4:	fb0b 400e 	mla	r0, fp, lr, r4
 8001ff8:	44bc      	add	ip, r7
          ep->xferBuffer += bytes;
 8001ffa:	4439      	add	r1, r7
      {
        if (diepint.b.emptyintr)
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
 8001ffc:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8002000:	6241      	str	r1, [r0, #36]	; 0x24
 8002002:	e588      	b.n	8001b16 <XMC_USBD_IRQHandler+0x2fe>
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8002004:	2901      	cmp	r1, #1
 8002006:	f47f adf5 	bne.w	8001bf4 <XMC_USBD_IRQHandler+0x3dc>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 800200a:	9f06      	ldr	r7, [sp, #24]
 800200c:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8002010:	40b9      	lsls	r1, r7
 8002012:	4319      	orrs	r1, r3
 8002014:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
 8002018:	e5ec      	b.n	8001bf4 <XMC_USBD_IRQHandler+0x3dc>
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <XMC_USBD_IRQHandler+0x8d4>)
 800201c:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 8002020:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002022:	fa02 f20e 	lsl.w	r2, r2, lr
 8002026:	ea23 0202 	bic.w	r2, r3, r2
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800202a:	634a      	str	r2, [r1, #52]	; 0x34
 800202c:	e582      	b.n	8001b34 <XMC_USBD_IRQHandler+0x31c>
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 800202e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8002032:	9105      	str	r1, [sp, #20]
 8002034:	46e0      	mov	r8, ip
 8002036:	e7b5      	b.n	8001fa4 <XMC_USBD_IRQHandler+0x78c>
 8002038:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800203a:	9f06      	ldr	r7, [sp, #24]
 800203c:	e7d8      	b.n	8001ff0 <XMC_USBD_IRQHandler+0x7d8>
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 800203e:	f002 070f 	and.w	r7, r2, #15
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8002042:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8002046:	f3c2 100a 	ubfx	r0, r2, #4, #11
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 800204a:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 800204e:	f8d4 c1e0 	ldr.w	ip, [r4, #480]	; 0x1e0
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8002052:	6812      	ldr	r2, [r2, #0]
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8002054:	4925      	ldr	r1, [pc, #148]	; (80020ec <XMC_USBD_IRQHandler+0x8d4>)
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8002056:	0412      	lsls	r2, r2, #16
 8002058:	f57f af3e 	bpl.w	8001ed8 <XMC_USBD_IRQHandler+0x6c0>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 800205c:	2234      	movs	r2, #52	; 0x34
 800205e:	fb02 1e07 	mla	lr, r2, r7, r1
 8002062:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
 8002066:	2900      	cmp	r1, #0
 8002068:	f43f af36 	beq.w	8001ed8 <XMC_USBD_IRQHandler+0x6c0>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 800206c:	ea5f 0890 	movs.w	r8, r0, lsr #2
 8002070:	d00f      	beq.n	8002092 <XMC_USBD_IRQHandler+0x87a>
 8002072:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002076:	2200      	movs	r2, #0
 8002078:	e001      	b.n	800207e <XMC_USBD_IRQHandler+0x866>
 800207a:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 800207e:	f8dc 6000 	ldr.w	r6, [ip]
 8002082:	508e      	str	r6, [r1, r2]
 8002084:	3204      	adds	r2, #4
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8002086:	4542      	cmp	r2, r8
 8002088:	d1f7      	bne.n	800207a <XMC_USBD_IRQHandler+0x862>
 800208a:	2234      	movs	r2, #52	; 0x34
 800208c:	fb02 4207 	mla	r2, r2, r7, r4
 8002090:	6a51      	ldr	r1, [r2, #36]	; 0x24
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8002092:	4540      	cmp	r0, r8
 8002094:	d01e      	beq.n	80020d4 <XMC_USBD_IRQHandler+0x8bc>
    {
      temp_data = *fifo;
 8002096:	f8dc c000 	ldr.w	ip, [ip]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800209a:	d91b      	bls.n	80020d4 <XMC_USBD_IRQHandler+0x8bc>
 800209c:	f04f 0e34 	mov.w	lr, #52	; 0x34
 80020a0:	4643      	mov	r3, r8
 80020a2:	fb0e 4e07 	mla	lr, lr, r7, r4
 80020a6:	2600      	movs	r6, #0
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 80020a8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80020ac:	e001      	b.n	80020b2 <XMC_USBD_IRQHandler+0x89a>
 80020ae:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
 80020b2:	fa08 f206 	lsl.w	r2, r8, r6
 80020b6:	ea02 020c 	and.w	r2, r2, ip
 80020ba:	40f2      	lsrs	r2, r6
 80020bc:	54ca      	strb	r2, [r1, r3]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80020be:	3301      	adds	r3, #1
 80020c0:	4298      	cmp	r0, r3
 80020c2:	f106 0608 	add.w	r6, r6, #8
 80020c6:	d1f2      	bne.n	80020ae <XMC_USBD_IRQHandler+0x896>
 80020c8:	2234      	movs	r2, #52	; 0x34
 80020ca:	fb02 4207 	mla	r2, r2, r7, r4
 80020ce:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80020d2:	6a51      	ldr	r1, [r2, #36]	; 0x24
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 80020d4:	2234      	movs	r2, #52	; 0x34
 80020d6:	fb02 4707 	mla	r7, r2, r7, r4
    ep->xferBuffer += byte_count;
 80020da:	4401      	add	r1, r0
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 80020dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 80020de:	6279      	str	r1, [r7, #36]	; 0x24
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 80020e0:	4402      	add	r2, r0
 80020e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020e4:	e6f8      	b.n	8001ed8 <XMC_USBD_IRQHandler+0x6c0>
 80020e6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80020e8:	9f06      	ldr	r7, [sp, #24]
 80020ea:	e781      	b.n	8001ff0 <XMC_USBD_IRQHandler+0x7d8>
 80020ec:	1fff1190 	.word	0x1fff1190

080020f0 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80020f0:	b510      	push	{r4, lr}
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80020f2:	4c05      	ldr	r4, [pc, #20]	; (8002108 <XMC_USBD_Disable+0x18>)
 80020f4:	4620      	mov	r0, r4
 80020f6:	f7fe f941 	bl	800037c <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7fe f9b4 	bl	8000468 <XMC_SCU_CLOCK_GatePeripheralClock>
#endif
  XMC_SCU_POWER_DisableUsb();
}
 8002100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8002104:	f7fe b9f2 	b.w	80004ec <XMC_SCU_POWER_DisableUsb>
 8002108:	20000080 	.word	0x20000080

0800210c <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <XMC_USIC_CH_Enable+0x70>)
 800210e:	4298      	cmp	r0, r3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002110:	b510      	push	{r4, lr}
 8002112:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002114:	d01b      	beq.n	800214e <XMC_USIC_CH_Enable+0x42>
 8002116:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800211a:	4298      	cmp	r0, r3
 800211c:	d017      	beq.n	800214e <XMC_USIC_CH_Enable+0x42>
  {
    XMC_USIC_Enable(XMC_USIC0);
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <XMC_USIC_CH_Enable+0x74>)
 8002120:	4298      	cmp	r0, r3
 8002122:	d024      	beq.n	800216e <XMC_USIC_CH_Enable+0x62>
 8002124:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002128:	4298      	cmp	r0, r3
 800212a:	d020      	beq.n	800216e <XMC_USIC_CH_Enable+0x62>
  {
    XMC_USIC_Enable(XMC_USIC1);
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <XMC_USIC_CH_Enable+0x78>)
 800212e:	4298      	cmp	r0, r3
 8002130:	d016      	beq.n	8002160 <XMC_USIC_CH_Enable+0x54>
 8002132:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002136:	4298      	cmp	r0, r3
 8002138:	d012      	beq.n	8002160 <XMC_USIC_CH_Enable+0x54>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800213a:	2303      	movs	r3, #3
 800213c:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800213e:	68e3      	ldr	r3, [r4, #12]
 8002140:	07db      	lsls	r3, r3, #31
 8002142:	d5fc      	bpl.n	800213e <XMC_USIC_CH_Enable+0x32>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002146:	f023 030f 	bic.w	r3, r3, #15
 800214a:	6423      	str	r3, [r4, #64]	; 0x40
 800214c:	bd10      	pop	{r4, pc}
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
  if (usic == USIC0)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 800214e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002152:	f7fe f995 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8002156:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800215a:	f7fe f91b 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 800215e:	e7ec      	b.n	800213a <XMC_USIC_CH_Enable+0x2e>
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8002160:	4809      	ldr	r0, [pc, #36]	; (8002188 <XMC_USIC_CH_Enable+0x7c>)
 8002162:	f7fe f98d 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <XMC_USIC_CH_Enable+0x7c>)
 8002168:	f7fe f914 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 800216c:	e7e5      	b.n	800213a <XMC_USIC_CH_Enable+0x2e>
  }
#if defined(USIC1)  
  else if (usic == USIC1)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <XMC_USIC_CH_Enable+0x80>)
 8002170:	f7fe f986 	bl	8000480 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <XMC_USIC_CH_Enable+0x80>)
 8002176:	f7fe f90d 	bl	8000394 <XMC_SCU_RESET_DeassertPeripheralReset>
 800217a:	e7de      	b.n	800213a <XMC_USIC_CH_Enable+0x2e>
 800217c:	40030000 	.word	0x40030000
 8002180:	48020000 	.word	0x48020000
 8002184:	48024000 	.word	0x48024000
 8002188:	10000100 	.word	0x10000100
 800218c:	10000080 	.word	0x10000080

08002190 <XMC_USIC_CH_SetBaudrate>:
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8002190:	2963      	cmp	r1, #99	; 0x63
 8002192:	d900      	bls.n	8002196 <XMC_USIC_CH_SetBaudrate+0x6>
 8002194:	b90a      	cbnz	r2, 800219a <XMC_USIC_CH_SetBaudrate+0xa>
                    
    status = XMC_USIC_CH_STATUS_OK;
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002196:	2001      	movs	r0, #1
 8002198:	4770      	bx	lr
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 800219a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800219e:	4617      	mov	r7, r2
 80021a0:	460c      	mov	r4, r1
 80021a2:	4606      	mov	r6, r0
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80021a4:	f7fe f902 	bl	80003ac <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80021a8:	4d18      	ldr	r5, [pc, #96]	; (800220c <XMC_USIC_CH_SetBaudrate+0x7c>)
 80021aa:	fba5 3200 	umull	r3, r2, r5, r0
    rate = rate / 100U;
 80021ae:	fba5 3504 	umull	r3, r5, r5, r4
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80021b2:	0952      	lsrs	r2, r2, #5
    rate = rate / 100U;
 80021b4:	096d      	lsrs	r5, r5, #5

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
 80021b6:	f240 3eff 	movw	lr, #1023	; 0x3ff
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
 80021ba:	f04f 0c01 	mov.w	ip, #1
 80021be:	fb07 f505 	mul.w	r5, r7, r5
 80021c2:	ebc2 2182 	rsb	r1, r2, r2, lsl #10
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80021c6:	4670      	mov	r0, lr
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
 80021c8:	46e0      	mov	r8, ip
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80021ca:	fbb1 f3f5 	udiv	r3, r1, r5
      pdiv_int = pdiv >> 10U;
 80021ce:	0a9c      	lsrs	r4, r3, #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80021d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
 80021d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d8:	eba1 0102 	sub.w	r1, r1, r2

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80021dc:	d204      	bcs.n	80021e8 <XMC_USIC_CH_SetBaudrate+0x58>
 80021de:	4573      	cmp	r3, lr
 80021e0:	d202      	bcs.n	80021e8 <XMC_USIC_CH_SetBaudrate+0x58>
 80021e2:	469e      	mov	lr, r3
 80021e4:	46a4      	mov	ip, r4
 80021e6:	4680      	mov	r8, r0

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80021e8:	3801      	subs	r0, #1
 80021ea:	d1ee      	bne.n	80021ca <XMC_USIC_CH_SetBaudrate+0x3a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80021ec:	f448 4300 	orr.w	r3, r8, #32768	; 0x8000
 80021f0:	6133      	str	r3, [r6, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80021f2:	6972      	ldr	r2, [r6, #20]
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <XMC_USIC_CH_SetBaudrate+0x80>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80021f6:	3f01      	subs	r7, #1
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80021f8:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80021fa:	f10c 3cff 	add.w	ip, ip, #4294967295
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80021fe:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002202:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002206:	6173      	str	r3, [r6, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8002208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800220c:	51eb851f 	.word	0x51eb851f
 8002210:	fc0080ef 	.word	0xfc0080ef

08002214 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002214:	b430      	push	{r4, r5}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8002216:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800221a:	4c08      	ldr	r4, [pc, #32]	; (800223c <XMC_USIC_CH_TXFIFO_Configure+0x28>)
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800221c:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 8002220:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002224:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8002228:	402c      	ands	r4, r5
 800222a:	4321      	orrs	r1, r4
 800222c:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8002230:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002234:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8002238:	bc30      	pop	{r4, r5}
 800223a:	4770      	bx	lr
 800223c:	f8ffc0c0 	.word	0xf8ffc0c0

08002240 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002240:	b430      	push	{r4, r5}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002242:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002246:	4c09      	ldr	r4, [pc, #36]	; (800226c <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002248:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 800224c:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002250:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 8002254:	402c      	ands	r4, r5
 8002256:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800225a:	4321      	orrs	r1, r4
 800225c:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8002260:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002264:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8002268:	bc30      	pop	{r4, r5}
 800226a:	4770      	bx	lr
 800226c:	efffc0c0 	.word	0xefffc0c0

08002270 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002270:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002274:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002278:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800227c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8002280:	0609      	lsls	r1, r1, #24
 8002282:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8002286:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop

08002294 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8002294:	b410      	push	{r4}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002296:	6983      	ldr	r3, [r0, #24]
 8002298:	2407      	movs	r4, #7
 800229a:	408c      	lsls	r4, r1
 800229c:	ea23 0304 	bic.w	r3, r3, r4
                  (service_request << (uint32_t)interrupt_node));
 80022a0:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80022a2:	431a      	orrs	r2, r3
 80022a4:	6182      	str	r2, [r0, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 80022a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80022ac:	b410      	push	{r4}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80022ae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80022b2:	2407      	movs	r4, #7
 80022b4:	408c      	lsls	r4, r1
 80022b6:	ea23 0304 	bic.w	r3, r3, r4
                   (service_request << (uint32_t)interrupt_node));
 80022ba:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80022bc:	431a      	orrs	r2, r3
 80022be:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 80022c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80022c8:	b410      	push	{r4}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80022ca:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80022ce:	2407      	movs	r4, #7
 80022d0:	408c      	lsls	r4, r1
 80022d2:	ea23 0304 	bic.w	r3, r3, r4
                   (service_request << (uint32_t)interrupt_node));
 80022d6:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80022d8:	431a      	orrs	r2, r3
 80022da:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 80022de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <SystemCoreClockUpdate>:
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <SystemCoreClockUpdate+0x74>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	03d9      	lsls	r1, r3, #15

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80022ea:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80022ec:	d51d      	bpl.n	800232a <SystemCoreClockUpdate+0x46>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <SystemCoreClockUpdate+0x78>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	07da      	lsls	r2, r3, #31
 80022f4:	d52c      	bpl.n	8002350 <SystemCoreClockUpdate+0x6c>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80022f6:	481a      	ldr	r0, [pc, #104]	; (8002360 <SystemCoreClockUpdate+0x7c>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <SystemCoreClockUpdate+0x78>)
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	075b      	lsls	r3, r3, #29
 80022fe:	d416      	bmi.n	800232e <SystemCoreClockUpdate+0x4a>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002300:	6893      	ldr	r3, [r2, #8]
 8002302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002306:	3301      	adds	r3, #1

      temp = (temp / kdiv);
 8002308:	fbb0 f3f3 	udiv	r3, r0, r3
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800230c:	4a12      	ldr	r2, [pc, #72]	; (8002358 <SystemCoreClockUpdate+0x74>)
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);

  SystemCoreClock = temp;
 800230e:	4915      	ldr	r1, [pc, #84]	; (8002364 <SystemCoreClockUpdate+0x80>)
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002310:	68d0      	ldr	r0, [r2, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002312:	6912      	ldr	r2, [r2, #16]
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002314:	b2c0      	uxtb	r0, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002316:	f002 0201 	and.w	r2, r2, #1
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800231a:	3001      	adds	r0, #1
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800231c:	3201      	adds	r2, #1
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800231e:	fbb3 f0f0 	udiv	r0, r3, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002322:	fbb0 f0f2 	udiv	r0, r0, r2

  SystemCoreClock = temp;
 8002326:	6008      	str	r0, [r1, #0]
 8002328:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <SystemCoreClockUpdate+0x7c>)
 800232c:	e7ee      	b.n	800230c <SystemCoreClockUpdate+0x28>
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800232e:	6891      	ldr	r1, [r2, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8002330:	6893      	ldr	r3, [r2, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8002332:	6894      	ldr	r4, [r2, #8]
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8002334:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8002338:	3201      	adds	r2, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800233a:	f3c4 4106 	ubfx	r1, r4, #16, #7
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800233e:	f3c3 2306 	ubfx	r3, r3, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002342:	fb01 2202 	mla	r2, r1, r2, r2
 8002346:	fbb0 f0f2 	udiv	r0, r0, r2
 800234a:	fb03 0300 	mla	r3, r3, r0, r0
 800234e:	e7dd      	b.n	800230c <SystemCoreClockUpdate+0x28>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8002350:	f002 fc82 	bl	8004c58 <OSCHP_GetFrequency>
 8002354:	e7d0      	b.n	80022f8 <SystemCoreClockUpdate+0x14>
 8002356:	bf00      	nop
 8002358:	50004600 	.word	0x50004600
 800235c:	50004710 	.word	0x50004710
 8002360:	016e3600 	.word	0x016e3600
 8002364:	2003ffc0 	.word	0x2003ffc0

08002368 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002368:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 800236a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800236e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002370:	4c03      	ldr	r4, [pc, #12]	; (8002380 <SystemInit+0x18>)
 8002372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8002376:	f002 fc31 	bl	8004bdc <SystemCoreSetup>
  SystemCoreClockSetup();
 800237a:	f002 fc71 	bl	8004c60 <SystemCoreClockSetup>
 800237e:	bd10      	pop	{r4, pc}
 8002380:	2003ffc4 	.word	0x2003ffc4

08002384 <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <_sbrk+0x34>)

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002386:	b508      	push	{r3, lr}
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002388:	6813      	ldr	r3, [r2, #0]
 800238a:	b18b      	cbz	r3, 80023b0 <_sbrk+0x2c>
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800238c:	3003      	adds	r0, #3
 800238e:	f020 0003 	bic.w	r0, r0, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <_sbrk+0x38>)
 8002394:	4418      	add	r0, r3
 8002396:	4288      	cmp	r0, r1
 8002398:	d202      	bcs.n	80023a0 <_sbrk+0x1c>
  {
    heap_ptr += nbytes;
 800239a:	6010      	str	r0, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd08      	pop	{r3, pc}
    return (base);
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80023a0:	f00b fa48 	bl	800d834 <__errno>
 80023a4:	230c      	movs	r3, #12
 80023a6:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd08      	pop	{r3, pc}
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <_sbrk+0x3c>)
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e7ea      	b.n	800238c <_sbrk+0x8>
 80023b6:	bf00      	nop
 80023b8:	1ffed7a4 	.word	0x1ffed7a4
 80023bc:	2003ffc0 	.word	0x2003ffc0
 80023c0:	20000e00 	.word	0x20000e00

080023c4 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop

080023c8 <USBD_VCOM_Event_GetDescriptor>:
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
	const void* address = NULL;
	uint16_t    size    = NO_DESCRIPTOR;

	switch (descriptor_type)
 80023c8:	0a03      	lsrs	r3, r0, #8
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d016      	beq.n	80023fc <USBD_VCOM_Event_GetDescriptor+0x34>
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d009      	beq.n	80023e6 <USBD_VCOM_Event_GetDescriptor+0x1e>
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d003      	beq.n	80023de <USBD_VCOM_Event_GetDescriptor+0x16>
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
 80023d6:	2000      	movs	r0, #0
 80023d8:	4603      	mov	r3, r0
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 80023da:	6013      	str	r3, [r2, #0]
	return size;
}
 80023dc:	4770      	bx	lr
	uint16_t    size    = NO_DESCRIPTOR;

	switch (descriptor_type)
	{
		case DTYPE_Device:
			address = &device_descriptor;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <USBD_VCOM_Event_GetDescriptor+0x3c>)
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 80023e0:	6013      	str	r3, [r2, #0]

	switch (descriptor_type)
	{
		case DTYPE_Device:
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
 80023e2:	2012      	movs	r0, #18
	}

	(void)w_index;
	*descriptor_address = address;
	return size;
}
 80023e4:	4770      	bx	lr
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
 80023e6:	b2c0      	uxtb	r0, r0
 80023e8:	2802      	cmp	r0, #2
 80023ea:	d8f4      	bhi.n	80023d6 <USBD_VCOM_Event_GetDescriptor+0xe>
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <USBD_VCOM_Event_GetDescriptor+0x40>)
 80023ee:	4907      	ldr	r1, [pc, #28]	; (800240c <USBD_VCOM_Event_GetDescriptor+0x44>)
 80023f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
	return size;
}
 80023fa:	4770      	bx	lr
		case DTYPE_Device:
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <USBD_VCOM_Event_GetDescriptor+0x48>)
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 80023fe:	6013      	str	r3, [r2, #0]
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			address = &configuration_descriptor;
			size    = sizeof(USB_Descriptor_Configuration_t);
 8002400:	203e      	movs	r0, #62	; 0x3e
	}

	(void)w_index;
	*descriptor_address = address;
	return size;
}
 8002402:	4770      	bx	lr
 8002404:	0800dbe4 	.word	0x0800dbe4
 8002408:	0800dcc8 	.word	0x0800dcc8
 800240c:	0800dcd4 	.word	0x0800dcd4
 8002410:	0800dcdc 	.word	0x0800dcdc

08002414 <CDC_Device_ProcessControlRequest>:
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8002414:	4a45      	ldr	r2, [pc, #276]	; (800252c <CDC_Device_ProcessControlRequest+0x118>)
 8002416:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 800241a:	079b      	lsls	r3, r3, #30
 800241c:	d510      	bpl.n	8002440 <CDC_Device_ProcessControlRequest+0x2c>
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800241e:	b570      	push	{r4, r5, r6, lr}
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8002420:	4943      	ldr	r1, [pc, #268]	; (8002530 <CDC_Device_ProcessControlRequest+0x11c>)
 8002422:	7c84      	ldrb	r4, [r0, #18]
 8002424:	888b      	ldrh	r3, [r1, #4]
 8002426:	b29b      	uxth	r3, r3
 8002428:	429c      	cmp	r4, r3
 800242a:	d000      	beq.n	800242e <CDC_Device_ProcessControlRequest+0x1a>
 800242c:	bd70      	pop	{r4, r5, r6, pc}
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 800242e:	784b      	ldrb	r3, [r1, #1]
 8002430:	3b20      	subs	r3, #32
 8002432:	4604      	mov	r4, r0
 8002434:	2b03      	cmp	r3, #3
 8002436:	d8f9      	bhi.n	800242c <CDC_Device_ProcessControlRequest+0x18>
 8002438:	e8df f003 	tbb	[pc, r3]
 800243c:	03633f18 	.word	0x03633f18
 8002440:	4770      	bx	lr

				}

				break;
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002442:	780b      	ldrb	r3, [r1, #0]
 8002444:	493a      	ldr	r1, [pc, #232]	; (8002530 <CDC_Device_ProcessControlRequest+0x11c>)
 8002446:	2b21      	cmp	r3, #33	; 0x21
 8002448:	d1f0      	bne.n	800242c <CDC_Device_ProcessControlRequest+0x18>
				{
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.Device_BreakSent)
 800244a:	483a      	ldr	r0, [pc, #232]	; (8002534 <CDC_Device_ProcessControlRequest+0x120>)
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 800244c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002450:	6885      	ldr	r5, [r0, #8]
 8002452:	f023 0302 	bic.w	r3, r3, #2
 8002456:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 800245a:	2d00      	cmp	r5, #0
 800245c:	d0e6      	beq.n	800242c <CDC_Device_ProcessControlRequest+0x18>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 800245e:	8849      	ldrh	r1, [r1, #2]
 8002460:	4620      	mov	r0, r4
 8002462:	462b      	mov	r3, r5
 8002464:	b2c9      	uxtb	r1, r1
				}

				break;
		}
	}
}
 8002466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.Device_BreakSent)
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 800246a:	4718      	bx	r3
					Endpoint_ClearStatusStage();
				}

				break;
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 800246c:	780b      	ldrb	r3, [r1, #0]
 800246e:	2b21      	cmp	r3, #33	; 0x21
 8002470:	d1dc      	bne.n	800242c <CDC_Device_ProcessControlRequest+0x18>
 8002472:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
 8002476:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 800247a:	492f      	ldr	r1, [pc, #188]	; (8002538 <CDC_Device_ProcessControlRequest+0x124>)
 800247c:	f020 0002 	bic.w	r0, r0, #2
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 8002480:	252c      	movs	r5, #44	; 0x2c
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8002482:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 8002486:	fb05 2203 	mla	r2, r5, r3, r2
 800248a:	e002      	b.n	8002492 <CDC_Device_ProcessControlRequest+0x7e>
 800248c:	780b      	ldrb	r3, [r1, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0cc      	beq.n	800242c <CDC_Device_ProcessControlRequest+0x18>
 8002492:	6893      	ldr	r3, [r2, #8]
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 8002494:	069b      	lsls	r3, r3, #26
 8002496:	d5f9      	bpl.n	800248c <CDC_Device_ProcessControlRequest+0x78>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8002498:	f000 fbf0 	bl	8002c7c <Endpoint_Read_32_LE>
 800249c:	61a0      	str	r0, [r4, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 800249e:	f000 fbc1 	bl	8002c24 <Endpoint_Read_8>
 80024a2:	7720      	strb	r0, [r4, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80024a4:	f000 fbbe 	bl	8002c24 <Endpoint_Read_8>
 80024a8:	7760      	strb	r0, [r4, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80024aa:	f000 fbbb 	bl	8002c24 <Endpoint_Read_8>

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.LineEncodingChanged)
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <CDC_Device_ProcessControlRequest+0x120>)
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80024b0:	77a0      	strb	r0, [r4, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.LineEncodingChanged)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d134      	bne.n	8002522 <CDC_Device_ProcessControlRequest+0x10e>
 80024b8:	e7b8      	b.n	800242c <CDC_Device_ProcessControlRequest+0x18>
	{

		switch (USB_ControlRequest.bRequest)
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 80024ba:	780b      	ldrb	r3, [r1, #0]
 80024bc:	2ba1      	cmp	r3, #161	; 0xa1
 80024be:	d1b5      	bne.n	800242c <CDC_Device_ProcessControlRequest+0x18>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 80024c0:	f892 113e 	ldrb.w	r1, [r2, #318]	; 0x13e
 80024c4:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 80024c8:	f021 0102 	bic.w	r1, r1, #2
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 80024cc:	202c      	movs	r0, #44	; 0x2c
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 80024ce:	f882 113e 	strb.w	r1, [r2, #318]	; 0x13e
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 80024d2:	fb00 2203 	mla	r2, r0, r3, r2
 80024d6:	6893      	ldr	r3, [r2, #8]
 80024d8:	06d8      	lsls	r0, r3, #27
 80024da:	d4fc      	bmi.n	80024d6 <CDC_Device_ProcessControlRequest+0xc2>
 80024dc:	6893      	ldr	r3, [r2, #8]
 80024de:	0799      	lsls	r1, r3, #30
 80024e0:	d5f9      	bpl.n	80024d6 <CDC_Device_ProcessControlRequest+0xc2>
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsINReady()));

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 80024e2:	69a0      	ldr	r0, [r4, #24]
 80024e4:	f000 fbb4 	bl	8002c50 <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 80024e8:	7f20      	ldrb	r0, [r4, #28]
 80024ea:	f000 fb85 	bl	8002bf8 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 80024ee:	7f60      	ldrb	r0, [r4, #29]
 80024f0:	f000 fb82 	bl	8002bf8 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 80024f4:	7fa0      	ldrb	r0, [r4, #30]
 80024f6:	f000 fb7f 	bl	8002bf8 <Endpoint_Write_8>
				}

				break;
		}
	}
}
 80024fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

					Endpoint_ClearIN();
 80024fe:	f000 bb2b 	b.w	8002b58 <Endpoint_ClearIN>

				}

				break;
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8002502:	780b      	ldrb	r3, [r1, #0]
 8002504:	490a      	ldr	r1, [pc, #40]	; (8002530 <CDC_Device_ProcessControlRequest+0x11c>)
 8002506:	2b21      	cmp	r3, #33	; 0x21
 8002508:	d190      	bne.n	800242c <CDC_Device_ProcessControlRequest+0x18>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 800250a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

					if(0 != cdc_class_events.ControLineStateChanged)
 800250e:	4809      	ldr	r0, [pc, #36]	; (8002534 <CDC_Device_ProcessControlRequest+0x120>)
 8002510:	f023 0302 	bic.w	r3, r3, #2
 8002514:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 8002518:	6843      	ldr	r3, [r0, #4]
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 800251a:	884a      	ldrh	r2, [r1, #2]
 800251c:	82a2      	strh	r2, [r4, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 800251e:	2b00      	cmp	r3, #0
 8002520:	d084      	beq.n	800242c <CDC_Device_ProcessControlRequest+0x18>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8002522:	4620      	mov	r0, r4
				}

				break;
		}
	}
}
 8002524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

					if(0 != cdc_class_events.ControLineStateChanged)
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8002528:	4718      	bx	r3
 800252a:	bf00      	nop
 800252c:	1fff1688 	.word	0x1fff1688
 8002530:	1fff1480 	.word	0x1fff1480
 8002534:	1ffed000 	.word	0x1ffed000
 8002538:	1fff147d 	.word	0x1fff147d

0800253c <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800253c:	b538      	push	{r3, r4, r5, lr}
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 800253e:	2202      	movs	r2, #2


bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002540:	2300      	movs	r3, #0

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8002542:	2103      	movs	r1, #3


bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8002544:	7503      	strb	r3, [r0, #20]
 8002546:	7543      	strb	r3, [r0, #21]
 8002548:	7583      	strb	r3, [r0, #22]
 800254a:	75c3      	strb	r3, [r0, #23]
 800254c:	7603      	strb	r3, [r0, #24]
 800254e:	7643      	strb	r3, [r0, #25]
 8002550:	7683      	strb	r3, [r0, #26]
 8002552:	76c3      	strb	r3, [r0, #27]
 8002554:	7703      	strb	r3, [r0, #28]
 8002556:	7743      	strb	r3, [r0, #29]
 8002558:	7783      	strb	r3, [r0, #30]
 800255a:	77c3      	strb	r3, [r0, #31]

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 800255c:	7102      	strb	r2, [r0, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 800255e:	7282      	strb	r2, [r0, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8002560:	7401      	strb	r1, [r0, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8002562:	2101      	movs	r1, #1




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002564:	4604      	mov	r4, r0

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8002566:	f000 fb9f 	bl	8002ca8 <Endpoint_ConfigureEndpointTable>
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 800256a:	2101      	movs	r1, #1

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 800256c:	4605      	mov	r5, r0
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 800256e:	1da0      	adds	r0, r4, #6
 8002570:	f000 fb9a 	bl	8002ca8 <Endpoint_ConfigureEndpointTable>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002574:	2101      	movs	r1, #1
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002576:	2800      	cmp	r0, #0
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002578:	f104 000c 	add.w	r0, r4, #12
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 800257c:	bf08      	it	eq
 800257e:	2500      	moveq	r5, #0
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8002580:	f000 fb92 	bl	8002ca8 <Endpoint_ConfigureEndpointTable>
 8002584:	2800      	cmp	r0, #0
	{
		status = false;
	}

	return status;
}
 8002586:	bf14      	ite	ne
 8002588:	4628      	movne	r0, r5
 800258a:	2000      	moveq	r0, #0
 800258c:	bd38      	pop	{r3, r4, r5, pc}
 800258e:	bf00      	nop

08002590 <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <CDC_Device_USBTask+0x74>)
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	2a04      	cmp	r2, #4
 8002596:	d000      	beq.n	800259a <CDC_Device_USBTask+0xa>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
		}
		#endif
	}
}
 8002598:	4770      	bx	lr
	return status;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800259a:	6982      	ldr	r2, [r0, #24]
 800259c:	2a00      	cmp	r2, #0
 800259e:	d0fb      	beq.n	8002598 <CDC_Device_USBTask+0x8>

	return status;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80025a0:	b470      	push	{r4, r5, r6}
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80025a2:	7802      	ldrb	r2, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025a4:	4918      	ldr	r1, [pc, #96]	; (8002608 <CDC_Device_USBTask+0x78>)
 80025a6:	f002 040f 	and.w	r4, r2, #15
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 80025aa:	262c      	movs	r6, #44	; 0x2c
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025ac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 80025b0:	fb06 1504 	mla	r5, r6, r4, r1
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025b4:	f881 413c 	strb.w	r4, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025b8:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 80025bc:	68aa      	ldr	r2, [r5, #8]
 80025be:	06d4      	lsls	r4, r2, #27
 80025c0:	d405      	bmi.n	80025ce <CDC_Device_USBTask+0x3e>
 80025c2:	68aa      	ldr	r2, [r5, #8]
 80025c4:	0792      	lsls	r2, r2, #30
 80025c6:	d502      	bpl.n	80025ce <CDC_Device_USBTask+0x3e>
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d001      	beq.n	80025d2 <CDC_Device_USBTask+0x42>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
		}
		#endif
	}
}
 80025ce:	bc70      	pop	{r4, r5, r6}
 80025d0:	4770      	bx	lr
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80025d2:	6983      	ldr	r3, [r0, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0fa      	beq.n	80025ce <CDC_Device_USBTask+0x3e>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80025d8:	7803      	ldrb	r3, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025da:	f003 020f 	and.w	r2, r3, #15
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 80025de:	fb06 1602 	mla	r6, r6, r2, r1
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80025e6:	f881 213c 	strb.w	r2, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80025ea:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 80025ee:	7933      	ldrb	r3, [r6, #4]
 80025f0:	061b      	lsls	r3, r3, #24
			return (uint16_t)(ep->InBytesAvailable);
 80025f2:	bf4c      	ite	mi
 80025f4:	8bb3      	ldrhmi	r3, [r6, #28]
		else
			return (uint16_t)(ep->OutBytesAvailable);
 80025f6:	89b3      	ldrhpl	r3, [r6, #12]

		if (Endpoint_BytesInEndpoint())
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0e8      	beq.n	80025ce <CDC_Device_USBTask+0x3e>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
		}
		#endif
	}
}
 80025fc:	bc70      	pop	{r4, r5, r6}
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

		if (Endpoint_BytesInEndpoint())
		{
			Endpoint_ClearIN();
 80025fe:	f000 baab 	b.w	8002b58 <Endpoint_ClearIN>
 8002602:	bf00      	nop
 8002604:	1fff147d 	.word	0x1fff147d
 8002608:	1fff1688 	.word	0x1fff1688

0800260c <CDC_Device_SendData>:
uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <CDC_Device_SendData+0x34>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d001      	beq.n	8002618 <CDC_Device_SendData+0xc>
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
	}
	return status;
}
 8002614:	2002      	movs	r0, #2
 8002616:	4770      	bx	lr
uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002618:	6983      	ldr	r3, [r0, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0fa      	beq.n	8002614 <CDC_Device_SendData+0x8>
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 800261e:	b430      	push	{r4, r5}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8002620:	7803      	ldrb	r3, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002622:	4c08      	ldr	r4, [pc, #32]	; (8002644 <CDC_Device_SendData+0x38>)
 8002624:	f003 050f 	and.w	r5, r3, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002628:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 800262c:	4608      	mov	r0, r1
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800262e:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
 8002632:	4611      	mov	r1, r2
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002634:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
 8002638:	2200      	movs	r2, #0
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
	}
	return status;
}
 800263a:	bc30      	pop	{r4, r5}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 800263c:	f000 b974 	b.w	8002928 <Endpoint_Write_Stream_LE>
 8002640:	1fff147d 	.word	0x1fff147d
 8002644:	1fff1688 	.word	0x1fff1688

08002648 <CDC_Device_Flush>:
	return status;

}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8002648:	b508      	push	{r3, lr}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <CDC_Device_Flush+0x44>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d001      	beq.n	8002656 <CDC_Device_Flush+0xe>

		status = ENDPOINT_READYWAIT_NoError;
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8002652:	2002      	movs	r0, #2
	}

	return status;
}
 8002654:	bd08      	pop	{r3, pc}
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8002656:	6983      	ldr	r3, [r0, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0fa      	beq.n	8002652 <CDC_Device_Flush+0xa>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 800265c:	7803      	ldrb	r3, [r0, #0]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800265e:	490c      	ldr	r1, [pc, #48]	; (8002690 <CDC_Device_Flush+0x48>)
 8002660:	f003 000f 	and.w	r0, r3, #15
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 8002664:	222c      	movs	r2, #44	; 0x2c
 8002666:	fb02 1200 	mla	r2, r2, r0, r1
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800266a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800266e:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002672:	f881 313d 	strb.w	r3, [r1, #317]	; 0x13d
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 8002676:	7913      	ldrb	r3, [r2, #4]
 8002678:	061b      	lsls	r3, r3, #24
			return (uint16_t)(ep->InBytesAvailable);
 800267a:	bf4c      	ite	mi
 800267c:	8b90      	ldrhmi	r0, [r2, #28]
		else
			return (uint16_t)(ep->OutBytesAvailable);
 800267e:	8990      	ldrhpl	r0, [r2, #12]

		if (Endpoint_BytesInEndpoint())
 8002680:	2800      	cmp	r0, #0
 8002682:	d0e7      	beq.n	8002654 <CDC_Device_Flush+0xc>
		{
			Endpoint_ClearIN();
 8002684:	f000 fa68 	bl	8002b58 <Endpoint_ClearIN>
 8002688:	2000      	movs	r0, #0
 800268a:	bd08      	pop	{r3, pc}
 800268c:	1fff147d 	.word	0x1fff147d
 8002690:	1fff1688 	.word	0x1fff1688

08002694 <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 8002694:	4b01      	ldr	r3, [pc, #4]	; (800269c <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x8>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	4770      	bx	lr
 800269c:	1fff13d8 	.word	0x1fff13d8

080026a0 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x8>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	705a      	strb	r2, [r3, #1]
 80026a6:	4770      	bx	lr
 80026a8:	1fff13d8 	.word	0x1fff13d8

080026ac <USBD_VCOM_CDCClass_Event_BreakSent>:
/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 80026ac:	4b01      	ldr	r3, [pc, #4]	; (80026b4 <USBD_VCOM_CDCClass_Event_BreakSent+0x8>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	709a      	strb	r2, [r3, #2]
 80026b2:	4770      	bx	lr
 80026b4:	1fff13d8 	.word	0x1fff13d8

080026b8 <USBD_VCOM_Event_ConfigurationChanged>:

}

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 80026b8:	b508      	push	{r3, lr}
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 80026ba:	2081      	movs	r0, #129	; 0x81
 80026bc:	490e      	ldr	r1, [pc, #56]	; (80026f8 <USBD_VCOM_Event_ConfigurationChanged+0x40>)
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	f000 ffe4 	bl	800368c <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 80026c4:	2082      	movs	r0, #130	; 0x82
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	f000 ffdf 	bl	800368c <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 80026ce:	2003      	movs	r0, #3
 80026d0:	490b      	ldr	r1, [pc, #44]	; (8002700 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	f000 ffda 	bl	800368c <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 80026d8:	480a      	ldr	r0, [pc, #40]	; (8002704 <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 80026da:	f7ff ff2f 	bl	800253c <CDC_Device_ConfigureEndpoints>
 80026de:	b148      	cbz	r0, 80026f4 <USBD_VCOM_Event_ConfigurationChanged+0x3c>
  {
    device.IsConfigured = 1U;
 80026e0:	4a09      	ldr	r2, [pc, #36]	; (8002708 <USBD_VCOM_Event_ConfigurationChanged+0x50>)
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <USBD_VCOM_Event_ConfigurationChanged+0x54>)
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
  {
    device.IsConfigured = 1U;
 80026e4:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 80026e8:	2004      	movs	r0, #4
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
  {
    device.IsConfigured = 1U;
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 80026f2:	7008      	strb	r0, [r1, #0]
 80026f4:	bd08      	pop	{r3, pc}
 80026f6:	bf00      	nop
 80026f8:	1fff13dc 	.word	0x1fff13dc
 80026fc:	1fff1398 	.word	0x1fff1398
 8002700:	1fff141c 	.word	0x1fff141c
 8002704:	1fff145c 	.word	0x1fff145c
 8002708:	1fff1688 	.word	0x1fff1688
 800270c:	1fff147d 	.word	0x1fff147d

08002710 <USBD_VCOM_Event_ControlRequest>:
}

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 8002710:	4801      	ldr	r0, [pc, #4]	; (8002718 <USBD_VCOM_Event_ControlRequest+0x8>)
 8002712:	f7ff be7f 	b.w	8002414 <CDC_Device_ProcessControlRequest>
 8002716:	bf00      	nop
 8002718:	1fff145c 	.word	0x1fff145c

0800271c <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 800271c:	492d      	ldr	r1, [pc, #180]	; (80027d4 <USBD_VCOM_Event_Reset+0xb8>)
 800271e:	f891 213e 	ldrb.w	r2, [r1, #318]	; 0x13e
 8002722:	07d3      	lsls	r3, r2, #31
 8002724:	d400      	bmi.n	8002728 <USBD_VCOM_Event_Reset+0xc>
 8002726:	4770      	bx	lr

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002728:	482b      	ldr	r0, [pc, #172]	; (80027d8 <USBD_VCOM_Event_Reset+0xbc>)
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <USBD_VCOM_Event_Reset+0xc0>)

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 800272c:	6800      	ldr	r0, [r0, #0]
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
}

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 800272e:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
  {
    device.IsConfigured = 0U;
 8002732:	f36f 0200 	bfc	r2, #0, #1
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002736:	f04f 0a00 	mov.w	sl, #0
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 800273a:	f04f 0903 	mov.w	r9, #3

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 800273e:	4c28      	ldr	r4, [pc, #160]	; (80027e0 <USBD_VCOM_Event_Reset+0xc4>)
void USBD_VCOM_Event_Reset(void)
{
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
  {
    device.IsConfigured = 0U;
 8002740:	f881 213e 	strb.w	r2, [r1, #318]	; 0x13e
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002744:	f883 a012 	strb.w	sl, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 8002748:	f883 a011 	strb.w	sl, [r3, #17]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 800274c:	f883 9010 	strb.w	r9, [r3, #16]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002750:	6902      	ldr	r2, [r0, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8002752:	6966      	ldr	r6, [r4, #20]
 8002754:	6156      	str	r6, [r2, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 8002756:	69e6      	ldr	r6, [r4, #28]
 8002758:	61d6      	str	r6, [r2, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 800275a:	69a6      	ldr	r6, [r4, #24]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 800275c:	f883 a00b 	strb.w	sl, [r3, #11]
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
}

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 8002760:	b082      	sub	sp, #8
  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 8002762:	f883 a005 	strb.w	sl, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 8002766:	f883 9006 	strb.w	r9, [r3, #6]
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 800276a:	6196      	str	r6, [r2, #24]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 800276c:	f04f 0a81 	mov.w	sl, #129	; 0x81

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002770:	6926      	ldr	r6, [r4, #16]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8002772:	f883 a00c 	strb.w	sl, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8002776:	f04f 0908 	mov.w	r9, #8
 800277a:	f8a3 900e 	strh.w	r9, [r3, #14]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 800277e:	6821      	ldr	r1, [r4, #0]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 8002780:	68a7      	ldr	r7, [r4, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 8002782:	68e5      	ldr	r5, [r4, #12]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002784:	6116      	str	r6, [r2, #16]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 8002786:	f04f 0b40 	mov.w	fp, #64	; 0x40
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 800278a:	6a26      	ldr	r6, [r4, #32]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 800278c:	f8a3 b008 	strh.w	fp, [r3, #8]

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8002790:	f04f 0a02 	mov.w	sl, #2

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 8002794:	f04f 0982 	mov.w	r9, #130	; 0x82
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8002798:	f883 a00a 	strb.w	sl, [r3, #10]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 800279c:	9101      	str	r1, [sp, #4]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 800279e:	f8a3 b002 	strh.w	fp, [r3, #2]
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 80027a2:	6861      	ldr	r1, [r4, #4]

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80027a4:	f883 a004 	strb.w	sl, [r3, #4]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 80027a8:	f883 9000 	strb.w	r9, [r3]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 80027ac:	6216      	str	r6, [r2, #32]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 80027ae:	6097      	str	r7, [r2, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 80027b0:	60d5      	str	r5, [r2, #12]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 80027b2:	9b01      	ldr	r3, [sp, #4]
 80027b4:	6013      	str	r3, [r2, #0]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
    USBD_handle->event_cb->reset = event_callback->reset;
 80027b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 80027b8:	6051      	str	r1, [r2, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
    USBD_handle->event_cb->reset = event_callback->reset;
 80027ba:	6253      	str	r3, [r2, #36]	; 0x24
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 80027bc:	f000 fece 	bl	800355c <USBD_Init>
 80027c0:	b110      	cbz	r0, 80027c8 <USBD_VCOM_Event_Reset+0xac>
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
      {
      }
    }
  }
}
 80027c2:	b002      	add	sp, #8
 80027c4:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
 80027c8:	b002      	add	sp, #8
 80027ca:	e8bd 4ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
}

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 80027ce:	f000 bf51 	b.w	8003674 <USBD_Connect>
 80027d2:	bf00      	nop
 80027d4:	1fff1688 	.word	0x1fff1688
 80027d8:	1ffed034 	.word	0x1ffed034
 80027dc:	1fff145c 	.word	0x1fff145c
 80027e0:	1ffed00c 	.word	0x1ffed00c

080027e4 <USBD_VCOM_Init>:

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80027e4:	4a26      	ldr	r2, [pc, #152]	; (8002880 <USBD_VCOM_Init+0x9c>)
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 80027e6:	4b27      	ldr	r3, [pc, #156]	; (8002884 <USBD_VCOM_Init+0xa0>)

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80027e8:	6810      	ldr	r0, [r2, #0]
 80027ea:	4927      	ldr	r1, [pc, #156]	; (8002888 <USBD_VCOM_Init+0xa4>)
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 80027ec:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 80027f0:	f04f 0a00 	mov.w	sl, #0
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 80027f4:	f04f 0903 	mov.w	r9, #3
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 80027f8:	f883 a012 	strb.w	sl, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 80027fc:	f883 a011 	strb.w	sl, [r3, #17]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 8002800:	f883 9010 	strb.w	r9, [r3, #16]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002804:	6902      	ldr	r2, [r0, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8002806:	694e      	ldr	r6, [r1, #20]
 8002808:	6156      	str	r6, [r2, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 800280a:	69ce      	ldr	r6, [r1, #28]
 800280c:	61d6      	str	r6, [r2, #28]
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 800280e:	b082      	sub	sp, #8
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 8002810:	698e      	ldr	r6, [r1, #24]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 8002812:	680c      	ldr	r4, [r1, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 8002814:	6196      	str	r6, [r2, #24]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 8002816:	f883 a00b 	strb.w	sl, [r3, #11]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 800281a:	690e      	ldr	r6, [r1, #16]
  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 800281c:	f883 a005 	strb.w	sl, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 8002820:	f883 9006 	strb.w	r9, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8002824:	f04f 0a81 	mov.w	sl, #129	; 0x81
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8002828:	f04f 0908 	mov.w	r9, #8
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 800282c:	68cd      	ldr	r5, [r1, #12]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 800282e:	688f      	ldr	r7, [r1, #8]

  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8002830:	6116      	str	r6, [r2, #16]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8002832:	f883 a00c 	strb.w	sl, [r3, #12]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 8002836:	6a0e      	ldr	r6, [r1, #32]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8002838:	f8a3 900e 	strh.w	r9, [r3, #14]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 800283c:	9401      	str	r4, [sp, #4]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 800283e:	f04f 0b40 	mov.w	fp, #64	; 0x40
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8002842:	f04f 0a02 	mov.w	sl, #2

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 8002846:	f04f 0982 	mov.w	r9, #130	; 0x82
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 800284a:	684c      	ldr	r4, [r1, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 800284c:	f8a3 b008 	strh.w	fp, [r3, #8]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 8002850:	6216      	str	r6, [r2, #32]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8002852:	f883 a00a 	strb.w	sl, [r3, #10]
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
    USBD_handle->event_cb->control_request = event_callback->control_request;
 8002856:	60d5      	str	r5, [r2, #12]
  /*Register USB event call backs*/
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 8002858:	6097      	str	r7, [r2, #8]
  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 800285a:	f8a3 b002 	strh.w	fp, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800285e:	f883 a004 	strb.w	sl, [r3, #4]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 8002862:	f883 9000 	strb.w	r9, [r3]
  if (event_callback != NULL)
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
    USBD_handle->event_cb->connect = event_callback->connect;
 8002866:	9b01      	ldr	r3, [sp, #4]
    USBD_handle->event_cb->control_request = event_callback->control_request;
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 8002868:	e882 0018 	stmia.w	r2, {r3, r4}
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
    USBD_handle->event_cb->suspend = event_callback->suspend;
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
    USBD_handle->event_cb->reset = event_callback->reset;
 800286c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800286e:	6253      	str	r3, [r2, #36]	; 0x24
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 8002870:	f000 fe74 	bl	800355c <USBD_Init>
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
}
 8002874:	3000      	adds	r0, #0
 8002876:	bf18      	it	ne
 8002878:	2001      	movne	r0, #1
 800287a:	b002      	add	sp, #8
 800287c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
 8002880:	1ffed034 	.word	0x1ffed034
 8002884:	1fff145c 	.word	0x1fff145c
 8002888:	1ffed00c 	.word	0x1ffed00c

0800288c <USBD_VCOM_IsEnumDone>:

/*The function check if the enumeration has been done already. */
uint32_t USBD_VCOM_IsEnumDone(void)
{
 800288c:	b508      	push	{r3, lr}
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
 800288e:	f000 fef7 	bl	8003680 <USBD_IsEnumDone>
 8002892:	b130      	cbz	r0, 80028a2 <USBD_VCOM_IsEnumDone+0x16>
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <USBD_VCOM_IsEnumDone+0x18>)
 8002896:	7818      	ldrb	r0, [r3, #0]
 8002898:	f1a0 0004 	sub.w	r0, r0, #4
 800289c:	fab0 f080 	clz	r0, r0
 80028a0:	0940      	lsrs	r0, r0, #5
}
 80028a2:	bd08      	pop	{r3, pc}
 80028a4:	1fff147d 	.word	0x1fff147d

080028a8 <USBD_VCOM_SendData>:
  return status;
}

/* This function sends multiple bytes to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendData(const int8_t* const data_buffer, const uint16_t length)
{
 80028a8:	b510      	push	{r4, lr}
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  if ((length == 0U) || (data_buffer == NULL))
 80028aa:	b911      	cbnz	r1, 80028b2 <USBD_VCOM_SendData+0xa>
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
 80028ac:	2406      	movs	r4, #6
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
  }
  return status;
}
 80028ae:	4620      	mov	r0, r4
 80028b0:	bd10      	pop	{r4, pc}
/* This function sends multiple bytes to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendData(const int8_t* const data_buffer, const uint16_t length)
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  if ((length == 0U) || (data_buffer == NULL))
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d0fa      	beq.n	80028ac <USBD_VCOM_SendData+0x4>
 80028b6:	460a      	mov	r2, r1
 80028b8:	4601      	mov	r1, r0
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
 80028ba:	4807      	ldr	r0, [pc, #28]	; (80028d8 <USBD_VCOM_SendData+0x30>)
 80028bc:	f7ff fea6 	bl	800260c <CDC_Device_SendData>
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
 80028c0:	2800      	cmp	r0, #0
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <USBD_VCOM_SendData+0x30>)
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80028c4:	bf14      	ite	ne
 80028c6:	2406      	movne	r4, #6
 80028c8:	2400      	moveq	r4, #0
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 80028ca:	f7ff febd 	bl	8002648 <CDC_Device_Flush>
 80028ce:	2800      	cmp	r0, #0
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80028d0:	bf18      	it	ne
 80028d2:	2406      	movne	r4, #6
    }
  }
  return status;
}
 80028d4:	4620      	mov	r0, r4
 80028d6:	bd10      	pop	{r4, pc}
 80028d8:	1fff145c 	.word	0x1fff145c

080028dc <USBD_VCOM_ReceiveData>:
  return status;
}

/* This function receives number of bytes from the USB host.*/
USBD_VCOM_STATUS_t USBD_VCOM_ReceiveData(int8_t* data_buffer, uint16_t data_byte)
{
 80028dc:	b530      	push	{r4, r5, lr}
 80028de:	b083      	sub	sp, #12
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
  uint16_t bytes_processed = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t ret = 0U;

  if ((data_byte > 0U) && (data_buffer != NULL))
 80028e6:	b911      	cbnz	r1, 80028ee <USBD_VCOM_ReceiveData+0x12>
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 80028e8:	2006      	movs	r0, #6
  }

  return status;
}
 80028ea:	b003      	add	sp, #12
 80028ec:	bd30      	pop	{r4, r5, pc}
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
  uint16_t bytes_processed = 0U;
  uint8_t ret = 0U;

  if ((data_byte > 0U) && (data_buffer != NULL))
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d0fa      	beq.n	80028e8 <USBD_VCOM_ReceiveData+0xc>
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <USBD_VCOM_ReceiveData+0x44>)
 80028f4:	460c      	mov	r4, r1
 80028f6:	2103      	movs	r1, #3
 80028f8:	4605      	mov	r5, r0
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 80028fa:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 80028fe:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
  {
    /* Fix for new read/write */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);
    while ((uint8_t)ENDPOINT_RWSTREAM_IncompleteTransfer == 
 8002902:	4628      	mov	r0, r5
 8002904:	4621      	mov	r1, r4
 8002906:	f10d 0206 	add.w	r2, sp, #6
 800290a:	f000 f85d 	bl	80029c8 <Endpoint_Read_Stream_LE>
 800290e:	2805      	cmp	r0, #5
 8002910:	d0f7      	beq.n	8002902 <USBD_VCOM_ReceiveData+0x26>
    (ret = Endpoint_Read_Stream_LE(data_buffer, data_byte,	&bytes_processed)))
    {      
    }      
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError != ret )
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8002912:	2800      	cmp	r0, #0
 8002914:	bf0c      	ite	eq
 8002916:	2000      	moveq	r0, #0
 8002918:	2006      	movne	r0, #6
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
  }

  return status;
}
 800291a:	b003      	add	sp, #12
 800291c:	bd30      	pop	{r4, r5, pc}
 800291e:	bf00      	nop
 8002920:	1fff1688 	.word	0x1fff1688

08002924 <USBD_VCOM_Connect>:
}

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 8002924:	f000 bea6 	b.w	8003674 <USBD_Connect>

08002928 <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 8002928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <Endpoint_Write_Stream_LE+0x9c>)
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 800292e:	460c      	mov	r4, r1
 8002930:	4680      	mov	r8, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8002932:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 8002936:	4691      	mov	r9, r2
 8002938:	2a00      	cmp	r2, #0
 800293a:	d03b      	beq.n	80029b4 <Endpoint_Write_Stream_LE+0x8c>
	{
		Length -= *BytesProcessed;
 800293c:	8817      	ldrh	r7, [r2, #0]
 800293e:	1be4      	subs	r4, r4, r7
 8002940:	b2a4      	uxth	r4, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
	{
		if (ep->InInUse)
 8002942:	262c      	movs	r6, #44	; 0x2c
 8002944:	fb06 3601 	mla	r6, r6, r1, r3
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8002948:	b1f4      	cbz	r4, 8002988 <Endpoint_Write_Stream_LE+0x60>
	{
		if (ep->InInUse)
 800294a:	68b3      	ldr	r3, [r6, #8]
 800294c:	06db      	lsls	r3, r3, #27
 800294e:	d4fc      	bmi.n	800294a <Endpoint_Write_Stream_LE+0x22>
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
 8002950:	f000 f93a 	bl	8002bc8 <Endpoint_IsReadWriteAllowed>
 8002954:	b1f8      	cbz	r0, 8002996 <Endpoint_Write_Stream_LE+0x6e>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 8002956:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8002958:	69f0      	ldr	r0, [r6, #28]
 800295a:	1a2d      	subs	r5, r5, r0
 800295c:	42a5      	cmp	r5, r4
 800295e:	d816      	bhi.n	800298e <Endpoint_Write_Stream_LE+0x66>
			{
				Bytes = Length;
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 8002960:	b2ad      	uxth	r5, r5
 8002962:	1b64      	subs	r4, r4, r5
 8002964:	fa1f fb84 	uxth.w	fp, r4
 8002968:	462c      	mov	r4, r5
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 800296a:	6a33      	ldr	r3, [r6, #32]
 800296c:	eb08 0107 	add.w	r1, r8, r7
 8002970:	462a      	mov	r2, r5
 8002972:	4418      	add	r0, r3
 8002974:	f00a ffa2 	bl	800d8bc <memcpy>
			ep->InBytesAvailable += Bytes;
 8002978:	69f3      	ldr	r3, [r6, #28]
			BytesTransfered += Bytes;
 800297a:	4427      	add	r7, r4
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
			ep->InBytesAvailable += Bytes;
 800297c:	441d      	add	r5, r3
			BytesTransfered += Bytes;
			Length -= Bytes;
 800297e:	465c      	mov	r4, fp
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
 8002980:	b2bf      	uxth	r7, r7
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
			ep->InBytesAvailable += Bytes;
 8002982:	61f5      	str	r5, [r6, #28]
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8002984:	2c00      	cmp	r4, #0
 8002986:	d1e0      	bne.n	800294a <Endpoint_Write_Stream_LE+0x22>
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 8002988:	4620      	mov	r0, r4
}
 800298a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298e:	4625      	mov	r5, r4
 8002990:	f04f 0b00 	mov.w	fp, #0
 8002994:	e7e9      	b.n	800296a <Endpoint_Write_Stream_LE+0x42>
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else 
		{
			Endpoint_ClearIN();
 8002996:	f000 f8df 	bl	8002b58 <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 800299a:	8933      	ldrh	r3, [r6, #8]
 800299c:	f3c3 1386 	ubfx	r3, r3, #6, #7
 80029a0:	429c      	cmp	r4, r3
 80029a2:	da02      	bge.n	80029aa <Endpoint_Write_Stream_LE+0x82>
			{
				if (BytesProcessed!=NULL) 
 80029a4:	f1b9 0f00 	cmp.w	r9, #0
 80029a8:	d106      	bne.n	80029b8 <Endpoint_Write_Stream_LE+0x90>
					*BytesProcessed = BytesTransfered;
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 80029aa:	f000 f85d 	bl	8002a68 <Endpoint_WaitUntilReady>
			if (ErrorCode) 
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d0ca      	beq.n	8002948 <Endpoint_Write_Stream_LE+0x20>
 80029b2:	e7ea      	b.n	800298a <Endpoint_Write_Stream_LE+0x62>
uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
 80029b4:	4617      	mov	r7, r2
 80029b6:	e7c4      	b.n	8002942 <Endpoint_Write_Stream_LE+0x1a>
			Endpoint_ClearIN();
			if(Length < ep->MaxPacketSize)
			{
				if (BytesProcessed!=NULL) 
				{
					*BytesProcessed = BytesTransfered;
 80029b8:	f8a9 7000 	strh.w	r7, [r9]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80029bc:	2005      	movs	r0, #5
 80029be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	1fff1688 	.word	0x1fff1688

080029c8 <Endpoint_Read_Stream_LE>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
 80029c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <Endpoint_Read_Stream_LE+0x9c>)
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
 80029ce:	460c      	mov	r4, r1
 80029d0:	4681      	mov	r9, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80029d2:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 80029d6:	4692      	mov	sl, r2
 80029d8:	2a00      	cmp	r2, #0
 80029da:	d03b      	beq.n	8002a54 <Endpoint_Read_Stream_LE+0x8c>
	{
		Length -= *BytesProcessed;
 80029dc:	f8b2 8000 	ldrh.w	r8, [r2]
 80029e0:	ebc8 0404 	rsb	r4, r8, r4
 80029e4:	b2a4      	uxth	r4, r4
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
	{
		if (ep->OutInUse)
 80029e6:	252c      	movs	r5, #44	; 0x2c
 80029e8:	fb05 3501 	mla	r5, r5, r1, r3
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 80029ec:	b30c      	cbz	r4, 8002a32 <Endpoint_Read_Stream_LE+0x6a>
	{
		if (ep->OutInUse)
 80029ee:	68ab      	ldr	r3, [r5, #8]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	d4fc      	bmi.n	80029ee <Endpoint_Read_Stream_LE+0x26>
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
 80029f4:	f000 f8e8 	bl	8002bc8 <Endpoint_IsReadWriteAllowed>
 80029f8:	b310      	cbz	r0, 8002a40 <Endpoint_Read_Stream_LE+0x78>
		{
			if(ep->OutBytesAvailable  > Length)
 80029fa:	68ee      	ldr	r6, [r5, #12]
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d81b      	bhi.n	8002a38 <Endpoint_Read_Stream_LE+0x70>
			{
				Bytes = Length;
			}
			else
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
 8002a00:	b2b3      	uxth	r3, r6
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	fa1f fb84 	uxth.w	fp, r4
 8002a08:	461c      	mov	r4, r3
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
 8002a0a:	692b      	ldr	r3, [r5, #16]
 8002a0c:	6969      	ldr	r1, [r5, #20]
			else
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
 8002a0e:	4632      	mov	r2, r6
 8002a10:	eb09 0008 	add.w	r0, r9, r8
 8002a14:	4419      	add	r1, r3
 8002a16:	f00a ff51 	bl	800d8bc <memcpy>
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
 8002a1a:	68ea      	ldr	r2, [r5, #12]
			ep->OutOffset += Bytes;
 8002a1c:	692b      	ldr	r3, [r5, #16]
			BytesTransfered += Bytes;
 8002a1e:	44a0      	add	r8, r4
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
 8002a20:	1b92      	subs	r2, r2, r6
			ep->OutOffset += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
 8002a22:	465c      	mov	r4, fp
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
			ep->OutOffset += Bytes;
 8002a24:	441e      	add	r6, r3
			BytesTransfered += Bytes;
 8002a26:	fa1f f888 	uxth.w	r8, r8
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
 8002a2a:	60ea      	str	r2, [r5, #12]
			ep->OutOffset += Bytes;
 8002a2c:	612e      	str	r6, [r5, #16]
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8002a2e:	2c00      	cmp	r4, #0
 8002a30:	d1dd      	bne.n	80029ee <Endpoint_Read_Stream_LE+0x26>
			{
				return ErrorCode;
			}
		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 8002a32:	4620      	mov	r0, r4
}
 8002a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a38:	4626      	mov	r6, r4
 8002a3a:	f04f 0b00 	mov.w	fp, #0
 8002a3e:	e7e4      	b.n	8002a0a <Endpoint_Read_Stream_LE+0x42>
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else 
		{
			Endpoint_ClearOUT();
 8002a40:	f000 f85e 	bl	8002b00 <Endpoint_ClearOUT>
			if (BytesProcessed != NULL) 
 8002a44:	f1ba 0f00 	cmp.w	sl, #0
 8002a48:	d106      	bne.n	8002a58 <Endpoint_Read_Stream_LE+0x90>
			{
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			ErrorCode = Endpoint_WaitUntilReady();
 8002a4a:	f000 f80d 	bl	8002a68 <Endpoint_WaitUntilReady>
			if (ErrorCode) 
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d0cc      	beq.n	80029ec <Endpoint_Read_Stream_LE+0x24>
 8002a52:	e7ef      	b.n	8002a34 <Endpoint_Read_Stream_LE+0x6c>
uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
 8002a54:	4690      	mov	r8, r2
 8002a56:	e7c6      	b.n	80029e6 <Endpoint_Read_Stream_LE+0x1e>
		else 
		{
			Endpoint_ClearOUT();
			if (BytesProcessed != NULL) 
			{
				*BytesProcessed = BytesTransfered;
 8002a58:	f8aa 8000 	strh.w	r8, [sl]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8002a5c:	2005      	movs	r0, #5
 8002a5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a62:	bf00      	nop
 8002a64:	1fff1688 	.word	0x1fff1688

08002a68 <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 8002a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
	return device.Driver->GetFrameNumber();
 8002a6c:	4c22      	ldr	r4, [pc, #136]	; (8002af8 <Endpoint_WaitUntilReady+0x90>)
			{
			  return ENDPOINT_READYWAIT_NoError;
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002a6e:	4d23      	ldr	r5, [pc, #140]	; (8002afc <Endpoint_WaitUntilReady+0x94>)
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	4798      	blx	r3
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
		bool status = false;
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8002a76:	46a1      	mov	r9, r4
 8002a78:	4680      	mov	r8, r0


uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8002a7a:	2664      	movs	r6, #100	; 0x64
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->Address & ENDPOINT_DIR_MASK;
 8002a7c:	272c      	movs	r7, #44	; 0x2c
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002a7e:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 8002a82:	fb07 4203 	mla	r2, r7, r3, r4
 8002a86:	7911      	ldrb	r1, [r2, #4]

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002a88:	0608      	lsls	r0, r1, #24
 8002a8a:	d41a      	bmi.n	8002ac2 <Endpoint_WaitUntilReady+0x5a>
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 8002a8c:	6892      	ldr	r2, [r2, #8]
			  return ENDPOINT_READYWAIT_NoError;
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8002a8e:	0692      	lsls	r2, r2, #26
 8002a90:	d42b      	bmi.n	8002aea <Endpoint_WaitUntilReady+0x82>
			{
			  return ENDPOINT_READYWAIT_NoError;
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002a92:	782a      	ldrb	r2, [r5, #0]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8002a94:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002a98:	b322      	cbz	r2, 8002ae4 <Endpoint_WaitUntilReady+0x7c>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8002a9a:	2905      	cmp	r1, #5
 8002a9c:	d01f      	beq.n	8002ade <Endpoint_WaitUntilReady+0x76>
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
		bool status = false;
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8002a9e:	fb07 4303 	mla	r3, r7, r3, r4
 8002aa2:	6898      	ldr	r0, [r3, #8]
 8002aa4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002aa8:	b9a8      	cbnz	r0, 8002ad6 <Endpoint_WaitUntilReady+0x6e>
 8002aaa:	f8d9 3000 	ldr.w	r3, [r9]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	4798      	blx	r3
		  return ENDPOINT_READYWAIT_EndpointStalled;
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8002ab2:	4580      	cmp	r8, r0
 8002ab4:	d011      	beq.n	8002ada <Endpoint_WaitUntilReady+0x72>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8002ab6:	1e73      	subs	r3, r6, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	b1ce      	cbz	r6, 8002af0 <Endpoint_WaitUntilReady+0x88>
 8002abc:	4680      	mov	r8, r0
 8002abe:	461e      	mov	r6, r3
 8002ac0:	e7dd      	b.n	8002a7e <Endpoint_WaitUntilReady+0x16>
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 8002ac2:	6890      	ldr	r0, [r2, #8]
 8002ac4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d1e2      	bne.n	8002a92 <Endpoint_WaitUntilReady+0x2a>
 8002acc:	6892      	ldr	r2, [r2, #8]
 8002ace:	0791      	lsls	r1, r2, #30
 8002ad0:	d5df      	bpl.n	8002a92 <Endpoint_WaitUntilReady+0x2a>
			{
			  return ENDPOINT_READYWAIT_Timeout;
			}
		}
	}
}
 8002ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ada:	4633      	mov	r3, r6
 8002adc:	e7ee      	b.n	8002abc <Endpoint_WaitUntilReady+0x54>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 8002ade:	2003      	movs	r0, #3
 8002ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			{
			  return ENDPOINT_READYWAIT_NoError;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			{
			  return ENDPOINT_READYWAIT_Timeout;
 8002af0:	2004      	movs	r0, #4
 8002af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002af6:	bf00      	nop
 8002af8:	1fff1688 	.word	0x1fff1688
 8002afc:	1fff147d 	.word	0x1fff147d

08002b00 <Endpoint_ClearOUT>:
		}
	}
}

void Endpoint_ClearOUT(void) 
{
 8002b00:	b570      	push	{r4, r5, r6, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002b02:	4d14      	ldr	r5, [pc, #80]	; (8002b54 <Endpoint_ClearOUT+0x54>)
 8002b04:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to
	 * not override it */
	if (ep->IsEnabled == 0)
 8002b08:	242c      	movs	r4, #44	; 0x2c
 8002b0a:	fb04 5403 	mla	r4, r4, r3, r5
 8002b0e:	68a3      	ldr	r3, [r4, #8]
 8002b10:	079a      	lsls	r2, r3, #30
 8002b12:	d400      	bmi.n	8002b16 <Endpoint_ClearOUT+0x16>
 8002b14:	bd70      	pop	{r4, r5, r6, pc}
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002b16:	682b      	ldr	r3, [r5, #0]
 8002b18:	6961      	ldr	r1, [r4, #20]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	69a2      	ldr	r2, [r4, #24]
 8002b1e:	7920      	ldrb	r0, [r4, #4]
 8002b20:	4798      	blx	r3
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002b22:	68a3      	ldr	r3, [r4, #8]
	if (ep->IsEnabled == 0)
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002b24:	60e0      	str	r0, [r4, #12]
	ep->OutOffset = 0;
 8002b26:	2100      	movs	r1, #0
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002b28:	071b      	lsls	r3, r3, #28
	if (ep->IsEnabled == 0)
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8002b2a:	4602      	mov	r2, r0
	ep->OutOffset = 0;
 8002b2c:	6121      	str	r1, [r4, #16]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002b2e:	d4f1      	bmi.n	8002b14 <Endpoint_ClearOUT+0x14>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1ef      	bne.n	8002b14 <Endpoint_ClearOUT+0x14>
	{
		ep->OutInUse = true;
 8002b34:	8923      	ldrh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002b36:	7920      	ldrb	r0, [r4, #4]
 8002b38:	69a1      	ldr	r1, [r4, #24]
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
	{
		ep->OutInUse = true;
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
 8002b3e:	8123      	strh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
 8002b40:	8923      	ldrh	r3, [r4, #8]
 8002b42:	f362 1345 	bfi	r3, r2, #5, #1
 8002b46:	8123      	strh	r3, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002b48:	682b      	ldr	r3, [r5, #0]
	}
}
 8002b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
	{
		ep->OutInUse = true;
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	4718      	bx	r3
 8002b52:	bf00      	nop
 8002b54:	1fff1688 	.word	0x1fff1688

08002b58 <Endpoint_ClearIN>:
	}
}

void Endpoint_ClearIN(void)
{
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002b5a:	4919      	ldr	r1, [pc, #100]	; (8002bc0 <Endpoint_ClearIN+0x68>)
 8002b5c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8002b60:	222c      	movs	r2, #44	; 0x2c
 8002b62:	fb02 1303 	mla	r3, r2, r3, r1
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	06d0      	lsls	r0, r2, #27
 8002b6a:	d402      	bmi.n	8002b72 <Endpoint_ClearIN+0x1a>
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	0792      	lsls	r2, r2, #30
 8002b70:	d400      	bmi.n	8002b74 <Endpoint_ClearIN+0x1c>
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return;
	ep->InInUse = true;
 8002b74:	8918      	ldrh	r0, [r3, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002b76:	6a1f      	ldr	r7, [r3, #32]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b78:	4e12      	ldr	r6, [pc, #72]	; (8002bc4 <Endpoint_ClearIN+0x6c>)
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
 8002b7a:	f040 0010 	orr.w	r0, r0, #16
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002b7e:	f103 0528 	add.w	r5, r3, #40	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8002b82:	f103 0420 	add.w	r4, r3, #32
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
 8002b86:	8118      	strh	r0, [r3, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
 8002b88:	69d8      	ldr	r0, [r3, #28]
 8002b8a:	60a0      	str	r0, [r4, #8]
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002b8c:	606f      	str	r7, [r5, #4]
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8002b94:	61d8      	str	r0, [r3, #28]
 8002b96:	f8c6 708c 	str.w	r7, [r6, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b9a:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002b9e:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002ba2:	680a      	ldr	r2, [r1, #0]
 8002ba4:	7918      	ldrb	r0, [r3, #4]
 8002ba6:	6869      	ldr	r1, [r5, #4]
 8002ba8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002baa:	68a2      	ldr	r2, [r4, #8]
 8002bac:	4798      	blx	r3
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002bae:	686a      	ldr	r2, [r5, #4]
	ep->InDataLeft -= data_count;
 8002bb0:	68a3      	ldr	r3, [r4, #8]
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002bb2:	4402      	add	r2, r0
	ep->InDataLeft -= data_count;
 8002bb4:	1a1b      	subs	r3, r3, r0
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002bb6:	606a      	str	r2, [r5, #4]
	ep->InDataLeft -= data_count;
 8002bb8:	60a3      	str	r3, [r4, #8]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	60f7      	str	r7, [r6, #12]
 8002bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	1fff1688 	.word	0x1fff1688
 8002bc4:	e000e100 	.word	0xe000e100

08002bc8 <Endpoint_IsReadWriteAllowed>:
	NVIC_EnableIRQ(USB0_0_IRQn);

}

bool Endpoint_IsReadWriteAllowed() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <Endpoint_IsReadWriteAllowed+0x2c>)
 8002bca:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 3302 	mla	r3, r1, r2, r3
 8002bd4:	791a      	ldrb	r2, [r3, #4]
 8002bd6:	0612      	lsls	r2, r2, #24
 8002bd8:	d404      	bmi.n	8002be4 <Endpoint_IsReadWriteAllowed+0x1c>
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 8002bda:	68d8      	ldr	r0, [r3, #12]
 8002bdc:	3000      	adds	r0, #0
 8002bde:	bf18      	it	ne
 8002be0:	2001      	movne	r0, #1
	}
	return Retval;
}
 8002be2:	4770      	bx	lr
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
	bool Retval = false;

	if(EndPoint->Direction)
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002be4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	4282      	cmp	r2, r0
 8002bea:	bf2c      	ite	cs
 8002bec:	2000      	movcs	r0, #0
 8002bee:	2001      	movcc	r0, #1
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	1fff1688 	.word	0x1fff1688

08002bf8 <Endpoint_Write_8>:
	}
	return Retval;
}

void Endpoint_Write_8(const uint8_t Data) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002bf8:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <Endpoint_Write_8+0x28>)
 8002bfa:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 2203 	mla	r2, r1, r3, r2
 8002c04:	f102 0318 	add.w	r3, r2, #24
 8002c08:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	428a      	cmp	r2, r1
 8002c0e:	d300      	bcc.n	8002c12 <Endpoint_Write_8+0x1a>
 8002c10:	e7fe      	b.n	8002c10 <Endpoint_Write_8+0x18>

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002c12:	6899      	ldr	r1, [r3, #8]
 8002c14:	5488      	strb	r0, [r1, r2]
	      EndPoint->InBytesAvailable++;
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	3201      	adds	r2, #1
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	1fff1688 	.word	0x1fff1688

08002c24 <Endpoint_Read_8>:
	    }
	  }while(!Success);
}

uint8_t Endpoint_Read_8() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <Endpoint_Read_8+0x28>)
 8002c26:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 3302 	mla	r3, r1, r2, r3
 8002c30:	f103 0208 	add.w	r2, r3, #8
 8002c34:	6851      	ldr	r1, [r2, #4]
 8002c36:	b901      	cbnz	r1, 8002c3a <Endpoint_Read_8+0x16>
 8002c38:	e7fe      	b.n	8002c38 <Endpoint_Read_8+0x14>

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002c3a:	6958      	ldr	r0, [r3, #20]
 8002c3c:	6893      	ldr	r3, [r2, #8]
		  EndPoint->OutOffset++;
		  EndPoint->OutBytesAvailable--;
 8002c3e:	3901      	subs	r1, #1

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002c40:	5cc0      	ldrb	r0, [r0, r3]
		  EndPoint->OutOffset++;
		  EndPoint->OutBytesAvailable--;
 8002c42:	6051      	str	r1, [r2, #4]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
		  EndPoint->OutOffset++;
 8002c44:	3301      	adds	r3, #1
 8002c46:	6093      	str	r3, [r2, #8]

		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	1fff1688 	.word	0x1fff1688

08002c50 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002c50:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <Endpoint_Write_32_LE+0x28>)
 8002c52:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 2203 	mla	r2, r1, r3, r2
 8002c5c:	f102 0318 	add.w	r3, r2, #24
 8002c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	3a03      	subs	r2, #3
 8002c66:	4291      	cmp	r1, r2
 8002c68:	d300      	bcc.n	8002c6c <Endpoint_Write_32_LE+0x1c>
 8002c6a:	e7fe      	b.n	8002c6a <Endpoint_Write_32_LE+0x1a>
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	5050      	str	r0, [r2, r1]
																		Data;
			EndPoint->InBytesAvailable+=4;
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	3204      	adds	r2, #4
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	4770      	bx	lr
 8002c78:	1fff1688 	.word	0x1fff1688

08002c7c <Endpoint_Read_32_LE>:
		}
	}while(!Success);
}

uint32_t Endpoint_Read_32_LE() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <Endpoint_Read_32_LE+0x28>)
 8002c7e:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 3302 	mla	r3, r1, r2, r3
 8002c88:	f103 0208 	add.w	r2, r3, #8
 8002c8c:	6851      	ldr	r1, [r2, #4]
 8002c8e:	2903      	cmp	r1, #3
 8002c90:	d800      	bhi.n	8002c94 <Endpoint_Read_32_LE+0x18>
 8002c92:	e7fe      	b.n	8002c92 <Endpoint_Read_32_LE+0x16>
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002c94:	6958      	ldr	r0, [r3, #20]
 8002c96:	6893      	ldr	r3, [r2, #8]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 8002c98:	3904      	subs	r1, #4
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002c9a:	58c0      	ldr	r0, [r0, r3]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 8002c9c:	6051      	str	r1, [r2, #4]
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
			EndPoint->OutOffset+=4;
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	6093      	str	r3, [r2, #8]

			Success = true;
		}
	} while(!Success);
	return data;
}
 8002ca2:	4770      	bx	lr
 8002ca4:	1fff1688 	.word	0x1fff1688

08002ca8 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002ca8:	2900      	cmp	r1, #0
 8002caa:	d042      	beq.n	8002d32 <Endpoint_ConfigureEndpointTable+0x8a>
	} while(!Success);
	return data;
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8002cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb0:	1e4d      	subs	r5, r1, #1
 8002cb2:	b2e9      	uxtb	r1, r5
 8002cb4:	4f20      	ldr	r7, [pc, #128]	; (8002d38 <Endpoint_ConfigureEndpointTable+0x90>)
 8002cb6:	2506      	movs	r5, #6
 8002cb8:	fb05 0501 	mla	r5, r5, r1, r0
 8002cbc:	350a      	adds	r5, #10
 8002cbe:	f100 0904 	add.w	r9, r0, #4
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002cc2:	463e      	mov	r6, r7
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002cc4:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8002cc8:	e01c      	b.n	8002d04 <Endpoint_ConfigureEndpointTable+0x5c>
 8002cca:	f819 2c04 	ldrb.w	r2, [r9, #-4]
 8002cce:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002cd0:	f839 2c02 	ldrh.w	r2, [r9, #-2]
 8002cd4:	8919      	ldrh	r1, [r3, #8]
 8002cd6:	f362 118c 	bfi	r1, r2, #6, #7
		device.Endpoints[Number].IsConfigured = 1;
 8002cda:	b2ca      	uxtb	r2, r1
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002ce0:	8119      	strh	r1, [r3, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8002ce2:	721a      	strb	r2, [r3, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8002ce4:	891a      	ldrh	r2, [r3, #8]
 8002ce6:	f042 0202 	orr.w	r2, r2, #2
 8002cea:	811a      	strh	r2, [r3, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8002cec:	f819 0c04 	ldrb.w	r0, [r9, #-4]
 8002cf0:	0602      	lsls	r2, r0, #24
 8002cf2:	f109 0906 	add.w	r9, r9, #6
 8002cf6:	d403      	bmi.n	8002d00 <Endpoint_ConfigureEndpointTable+0x58>
			device.Driver->EndpointReadStart(Table[i].Address,
 8002cf8:	6832      	ldr	r2, [r6, #0]
 8002cfa:	6999      	ldr	r1, [r3, #24]
 8002cfc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002cfe:	4798      	blx	r3

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002d00:	45a9      	cmp	r9, r5
 8002d02:	d013      	beq.n	8002d2c <Endpoint_ConfigureEndpointTable+0x84>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002d04:	f819 3c04 	ldrb.w	r3, [r9, #-4]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	f899 1000 	ldrb.w	r1, [r9]
 8002d0e:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8002d12:	f839 2c02 	ldrh.w	r2, [r9, #-2]
 8002d16:	4618      	mov	r0, r3
bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002d18:	f003 040f 	and.w	r4, r3, #15
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002d1c:	47e0      	blx	ip
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002d1e:	fb08 6304 	mla	r3, r8, r4, r6
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d0d1      	beq.n	8002cca <Endpoint_ConfigureEndpointTable+0x22>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8002d26:	2000      	movs	r0, #0
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
}
 8002d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d32:	2001      	movs	r0, #1
}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	1fff1688 	.word	0x1fff1688

08002d3c <USBD_SignalDeviceEventHandler>:
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
  uint32_t i;

  switch (event)
 8002d3c:	2809      	cmp	r0, #9
 8002d3e:	d80e      	bhi.n	8002d5e <USBD_SignalDeviceEventHandler+0x22>
 8002d40:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002d44:	0019000a 	.word	0x0019000a
 8002d48:	002a0023 	.word	0x002a0023
 8002d4c:	000d0034 	.word	0x000d0034
 8002d50:	000e00e8 	.word	0x000e00e8
 8002d54:	00f6000d 	.word	0x00f6000d
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8002d58:	4bb7      	ldr	r3, [pc, #732]	; (8003038 <USBD_SignalDeviceEventHandler+0x2fc>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	4770      	bx	lr
      break;
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002d60:	4bb6      	ldr	r3, [pc, #728]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002d62:	4ab5      	ldr	r2, [pc, #724]	; (8003038 <USBD_SignalDeviceEventHandler+0x2fc>)
      if (NULL != device.events->wakeup)
 8002d64:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
      break;
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002d68:	f893 113a 	ldrb.w	r1, [r3, #314]	; 0x13a
      if (NULL != device.events->wakeup)
 8002d6c:	6983      	ldr	r3, [r0, #24]
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
      break;
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002d6e:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->wakeup)
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f4      	beq.n	8002d5e <USBD_SignalDeviceEventHandler+0x22>
      {
        device.events->wakeup();
 8002d74:	4718      	bx	r3
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
      if (NULL != device.events->disconnect)
 8002d76:	4bb1      	ldr	r3, [pc, #708]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8002d78:	4aaf      	ldr	r2, [pc, #700]	; (8003038 <USBD_SignalDeviceEventHandler+0x2fc>)
      if (NULL != device.events->disconnect)
 8002d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d7e:	685b      	ldr	r3, [r3, #4]
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8002d80:	2100      	movs	r1, #0
 8002d82:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->disconnect)
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f5      	bne.n	8002d74 <USBD_SignalDeviceEventHandler+0x38>
 8002d88:	e7e9      	b.n	8002d5e <USBD_SignalDeviceEventHandler+0x22>
      {
        device.events->start_of_frame();
      }
      break;
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8002d8a:	4bac      	ldr	r3, [pc, #688]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002d8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ee      	bne.n	8002d74 <USBD_SignalDeviceEventHandler+0x38>
 8002d96:	e7e2      	b.n	8002d5e <USBD_SignalDeviceEventHandler+0x22>
        device.events->connect();
      }
      break;
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
      if (NULL != device.events->disconnect)
 8002d98:	4ba8      	ldr	r3, [pc, #672]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
      {
        device.events->connect();
      }
      break;
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8002d9a:	4aa7      	ldr	r2, [pc, #668]	; (8003038 <USBD_SignalDeviceEventHandler+0x2fc>)
      if (NULL != device.events->disconnect)
 8002d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002da0:	685b      	ldr	r3, [r3, #4]
      {
        device.events->connect();
      }
      break;
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8002da2:	2101      	movs	r1, #1
 8002da4:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->disconnect)
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e4      	bne.n	8002d74 <USBD_SignalDeviceEventHandler+0x38>
 8002daa:	e7d8      	b.n	8002d5e <USBD_SignalDeviceEventHandler+0x22>
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 8002dac:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8002dae:	4ba2      	ldr	r3, [pc, #648]	; (8003038 <USBD_SignalDeviceEventHandler+0x2fc>)
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8002db0:	4ca2      	ldr	r4, [pc, #648]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
  uint32_t i;

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8002db2:	2202      	movs	r2, #2
 8002db4:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002db6:	8922      	ldrh	r2, [r4, #8]
  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
 8002db8:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002dbc:	f36f 1204 	bfc	r2, #4, #1
 8002dc0:	8122      	strh	r2, [r4, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002dc2:	8922      	ldrh	r2, [r4, #8]
 8002dc4:	f36f 02c3 	bfc	r2, #3, #1
 8002dc8:	8122      	strh	r2, [r4, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002dca:	8922      	ldrh	r2, [r4, #8]
 8002dcc:	f36f 0282 	bfc	r2, #2, #1
 8002dd0:	8122      	strh	r2, [r4, #8]
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002dd2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8002dd4:	f36f 1204 	bfc	r2, #4, #1
 8002dd8:	86a2      	strh	r2, [r4, #52]	; 0x34
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002dda:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8002ddc:	f36f 02c3 	bfc	r2, #3, #1
 8002de0:	86a2      	strh	r2, [r4, #52]	; 0x34
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002de2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8002de4:	f36f 0282 	bfc	r2, #2, #1
 8002de8:	86a2      	strh	r2, [r4, #52]	; 0x34
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002dea:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
 8002dee:	f36f 0382 	bfc	r3, #2, #1

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8002df2:	2101      	movs	r1, #1
      device.remote_wakeup = (uint8_t)0;
 8002df4:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002df8:	07d3      	lsls	r3, r2, #31

  switch (event)
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
 8002dfa:	f884 113b 	strb.w	r1, [r4, #315]	; 0x13b
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002dfe:	f100 809f 	bmi.w	8002f40 <USBD_SignalDeviceEventHandler+0x204>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002e02:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8002e06:	4d8d      	ldr	r5, [pc, #564]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002e08:	f36f 1304 	bfc	r3, #4, #1
 8002e0c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002e10:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8002e14:	f36f 03c3 	bfc	r3, #3, #1
 8002e18:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002e1c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8002e20:	f36f 0382 	bfc	r3, #2, #1
 8002e24:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002e28:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002e2c:	07de      	lsls	r6, r3, #31
 8002e2e:	f100 80ec 	bmi.w	800300a <USBD_SignalDeviceEventHandler+0x2ce>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002e32:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8002e36:	4d81      	ldr	r5, [pc, #516]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002e38:	f36f 1304 	bfc	r3, #4, #1
 8002e3c:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002e40:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8002e44:	f36f 03c3 	bfc	r3, #3, #1
 8002e48:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002e4c:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 8002e50:	f36f 0382 	bfc	r3, #2, #1
 8002e54:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002e58:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002e5c:	07d8      	lsls	r0, r3, #31
 8002e5e:	f100 80bf 	bmi.w	8002fe0 <USBD_SignalDeviceEventHandler+0x2a4>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002e62:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8002e66:	4d75      	ldr	r5, [pc, #468]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002e68:	f36f 1304 	bfc	r3, #4, #1
 8002e6c:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002e70:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8002e74:	f36f 03c3 	bfc	r3, #3, #1
 8002e78:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002e7c:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8002e80:	f36f 0382 	bfc	r3, #2, #1
 8002e84:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002e88:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002e8c:	07d9      	lsls	r1, r3, #31
 8002e8e:	f100 8092 	bmi.w	8002fb6 <USBD_SignalDeviceEventHandler+0x27a>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002e92:	f8b4 30e4 	ldrh.w	r3, [r4, #228]	; 0xe4
 8002e96:	4d69      	ldr	r5, [pc, #420]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002e98:	f36f 1304 	bfc	r3, #4, #1
 8002e9c:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002ea0:	f8b4 30e4 	ldrh.w	r3, [r4, #228]	; 0xe4
 8002ea4:	f36f 03c3 	bfc	r3, #3, #1
 8002ea8:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002eac:	f8b4 30e4 	ldrh.w	r3, [r4, #228]	; 0xe4
 8002eb0:	f36f 0382 	bfc	r3, #2, #1
 8002eb4:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002eb8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002ebc:	07da      	lsls	r2, r3, #31
 8002ebe:	d466      	bmi.n	8002f8e <USBD_SignalDeviceEventHandler+0x252>
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 8002ec0:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
 8002ec4:	4d5d      	ldr	r5, [pc, #372]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002ec6:	f36f 1304 	bfc	r3, #4, #1
 8002eca:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8002ece:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
 8002ed2:	f36f 03c3 	bfc	r3, #3, #1
 8002ed6:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 8002eda:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
 8002ede:	f36f 0382 	bfc	r3, #2, #1
 8002ee2:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8002ee6:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8002eea:	07db      	lsls	r3, r3, #31
 8002eec:	d43b      	bmi.n	8002f66 <USBD_SignalDeviceEventHandler+0x22a>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 8002eee:	2300      	movs	r3, #0
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8002ef0:	6822      	ldr	r2, [r4, #0]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 8002ef2:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 8002ef6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8002efa:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002efc:	7920      	ldrb	r0, [r4, #4]
 8002efe:	2118      	movs	r1, #24
 8002f00:	4798      	blx	r3
      if (NULL != device.events->reset)
 8002f02:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8093 	beq.w	8003034 <USBD_SignalDeviceEventHandler+0x2f8>
      }
      break;
    default:
      break;
  }
}
 8002f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
      if (NULL != device.events->reset)
      {
        device.events->reset();
 8002f12:	4718      	bx	r3
      {
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 8002f14:	4a49      	ldr	r2, [pc, #292]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002f16:	4b48      	ldr	r3, [pc, #288]	; (8003038 <USBD_SignalDeviceEventHandler+0x2fc>)
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
      if (NULL != device.events->suspend)
 8002f18:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
      {
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 8002f1c:	7818      	ldrb	r0, [r3, #0]
 8002f1e:	f882 013a 	strb.w	r0, [r2, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
      if (NULL != device.events->suspend)
 8002f22:	69ca      	ldr	r2, [r1, #28]
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 8002f24:	2105      	movs	r1, #5
 8002f26:	7019      	strb	r1, [r3, #0]
      if (NULL != device.events->suspend)
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	f43f af18 	beq.w	8002d5e <USBD_SignalDeviceEventHandler+0x22>
      {
        device.events->suspend();
 8002f2e:	4710      	bx	r2
      {
        device.events->reset();
      }
      break;
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <USBD_SignalDeviceEventHandler+0x300>)
 8002f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f af1b 	bne.w	8002d74 <USBD_SignalDeviceEventHandler+0x38>
 8002f3e:	e70e      	b.n	8002d5e <USBD_SignalDeviceEventHandler+0x22>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	f47f af59 	bne.w	8002e02 <USBD_SignalDeviceEventHandler+0xc6>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002f50:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002f54:	f360 0300 	bfi	r3, r0, #0, #1
 8002f58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002f5c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8002f5e:	f360 0341 	bfi	r3, r0, #1, #1
 8002f62:	86a3      	strh	r3, [r4, #52]	; 0x34
 8002f64:	e74d      	b.n	8002e02 <USBD_SignalDeviceEventHandler+0xc6>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002f66:	682b      	ldr	r3, [r5, #0]
 8002f68:	f895 010c 	ldrb.w	r0, [r5, #268]	; 0x10c
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d1bc      	bne.n	8002eee <USBD_SignalDeviceEventHandler+0x1b2>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002f74:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
 8002f78:	f360 0300 	bfi	r3, r0, #0, #1
 8002f7c:	f885 3110 	strb.w	r3, [r5, #272]	; 0x110
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002f80:	f8b5 3110 	ldrh.w	r3, [r5, #272]	; 0x110
 8002f84:	f360 0341 	bfi	r3, r0, #1, #1
 8002f88:	f8a5 3110 	strh.w	r3, [r5, #272]	; 0x110
 8002f8c:	e7af      	b.n	8002eee <USBD_SignalDeviceEventHandler+0x1b2>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002f8e:	682b      	ldr	r3, [r5, #0]
 8002f90:	f895 00e0 	ldrb.w	r0, [r5, #224]	; 0xe0
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d191      	bne.n	8002ec0 <USBD_SignalDeviceEventHandler+0x184>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002f9c:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
 8002fa0:	f360 0300 	bfi	r3, r0, #0, #1
 8002fa4:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002fa8:	f8b5 30e4 	ldrh.w	r3, [r5, #228]	; 0xe4
 8002fac:	f360 0341 	bfi	r3, r0, #1, #1
 8002fb0:	f8a5 30e4 	strh.w	r3, [r5, #228]	; 0xe4
 8002fb4:	e784      	b.n	8002ec0 <USBD_SignalDeviceEventHandler+0x184>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002fb6:	682b      	ldr	r3, [r5, #0]
 8002fb8:	f895 00b4 	ldrb.w	r0, [r5, #180]	; 0xb4
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	f47f af66 	bne.w	8002e92 <USBD_SignalDeviceEventHandler+0x156>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002fc6:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
 8002fca:	f360 0300 	bfi	r3, r0, #0, #1
 8002fce:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002fd2:	f8b5 30b8 	ldrh.w	r3, [r5, #184]	; 0xb8
 8002fd6:	f360 0341 	bfi	r3, r0, #1, #1
 8002fda:	f8a5 30b8 	strh.w	r3, [r5, #184]	; 0xb8
 8002fde:	e758      	b.n	8002e92 <USBD_SignalDeviceEventHandler+0x156>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	f895 0088 	ldrb.w	r0, [r5, #136]	; 0x88
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8002fea:	2800      	cmp	r0, #0
 8002fec:	f47f af39 	bne.w	8002e62 <USBD_SignalDeviceEventHandler+0x126>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 8002ff0:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
 8002ff4:	f360 0300 	bfi	r3, r0, #0, #1
 8002ff8:	f885 308c 	strb.w	r3, [r5, #140]	; 0x8c
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8002ffc:	f8b5 308c 	ldrh.w	r3, [r5, #140]	; 0x8c
 8003000:	f360 0341 	bfi	r3, r0, #1, #1
 8003004:	f8a5 308c 	strh.w	r3, [r5, #140]	; 0x8c
 8003008:	e72b      	b.n	8002e62 <USBD_SignalDeviceEventHandler+0x126>
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 800300a:	682b      	ldr	r3, [r5, #0]
 800300c:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 8003014:	2800      	cmp	r0, #0
 8003016:	f47f af0c 	bne.w	8002e32 <USBD_SignalDeviceEventHandler+0xf6>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 800301a:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 800301e:	f360 0300 	bfi	r3, r0, #0, #1
 8003022:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 8003026:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800302a:	f360 0341 	bfi	r3, r0, #1, #1
 800302e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
 8003032:	e6fe      	b.n	8002e32 <USBD_SignalDeviceEventHandler+0xf6>
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	bf00      	nop
 8003038:	1fff147d 	.word	0x1fff147d
 800303c:	1fff1688 	.word	0x1fff1688

08003040 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 8003040:	b510      	push	{r4, lr}
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8003042:	4c08      	ldr	r4, [pc, #32]	; (8003064 <USBD_HandleEP0_Stall+0x24>)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	2080      	movs	r0, #128	; 0x80
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2101      	movs	r1, #1
 800304c:	4798      	blx	r3
 800304e:	b100      	cbz	r0, 8003052 <USBD_HandleEP0_Stall+0x12>
 8003050:	bd10      	pop	{r4, pc}
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8003052:	6823      	ldr	r3, [r4, #0]
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8003054:	2201      	movs	r2, #1
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8003058:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 800305c:	2118      	movs	r1, #24
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 800305e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8003062:	4718      	bx	r3
 8003064:	1fff1688 	.word	0x1fff1688

08003068 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8003068:	b570      	push	{r4, r5, r6, lr}
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 800306a:	4ca2      	ldr	r4, [pc, #648]	; (80032f4 <USBD_Handle_DeviceRequest+0x28c>)
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 800306c:	4ea2      	ldr	r6, [pc, #648]	; (80032f8 <USBD_Handle_DeviceRequest+0x290>)

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 800306e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8003072:	8870      	ldrh	r0, [r6, #2]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8003074:	68da      	ldr	r2, [r3, #12]
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8003076:	b082      	sub	sp, #8
  uint32_t length = 0U;
  uint32_t ret;
  void *buffer = NULL;
 8003078:	2300      	movs	r3, #0
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 800307a:	b285      	uxth	r5, r0
 */
static void USBD_Handle_DeviceRequest(void)
{
  uint32_t length = 0U;
  uint32_t ret;
  void *buffer = NULL;
 800307c:	9300      	str	r3, [sp, #0]
  uint32_t status = 0U;
 800307e:	9301      	str	r3, [sp, #4]
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8003080:	b102      	cbz	r2, 8003084 <USBD_Handle_DeviceRequest+0x1c>
  {
    device.events->control_request();
 8003082:	4790      	blx	r2
  }

  if (1U == device.IsSetupRecieved)
 8003084:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8003088:	079b      	lsls	r3, r3, #30
 800308a:	d407      	bmi.n	800309c <USBD_Handle_DeviceRequest+0x34>
      default:
        USBD_HandleEP0_Stall();
        break;
    }
  }
  device.IsSetupRecieved = 0U;
 800308c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8003090:	f023 0302 	bic.w	r3, r3, #2
 8003094:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 8003098:	b002      	add	sp, #8
 800309a:	bd70      	pop	{r4, r5, r6, pc}
  }

  if (1U == device.IsSetupRecieved)
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 800309c:	7873      	ldrb	r3, [r6, #1]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 800309e:	b2ed      	uxtb	r5, r5
  }

  if (1U == device.IsSetupRecieved)
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d816      	bhi.n	80030d2 <USBD_Handle_DeviceRequest+0x6a>
 80030a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030a8:	00be0025 	.word	0x00be0025
 80030ac:	009d0015 	.word	0x009d0015
 80030b0:	00d00015 	.word	0x00d00015
 80030b4:	00150056 	.word	0x00150056
 80030b8:	008a0083 	.word	0x008a0083
 80030bc:	0078000d 	.word	0x0078000d
 80030c0:	0015      	.short	0x0015
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80030c2:	4b8e      	ldr	r3, [pc, #568]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	2a04      	cmp	r2, #4
 80030c8:	f000 8136 	beq.w	8003338 <USBD_Handle_DeviceRequest+0x2d0>
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
          break;
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d1dc      	bne.n	800308c <USBD_Handle_DeviceRequest+0x24>
 */
static void USBD_HandleEP0_Stall(void)
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	4d87      	ldr	r5, [pc, #540]	; (80032f4 <USBD_Handle_DeviceRequest+0x28c>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2080      	movs	r0, #128	; 0x80
 80030da:	2101      	movs	r1, #1
 80030dc:	4798      	blx	r3
 80030de:	2800      	cmp	r0, #0
 80030e0:	d1d4      	bne.n	800308c <USBD_Handle_DeviceRequest+0x24>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 80030e2:	682b      	ldr	r3, [r5, #0]
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80030e4:	2201      	movs	r2, #1
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80030e8:	f885 213b 	strb.w	r2, [r5, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 80030ec:	2118      	movs	r1, #24
 80030ee:	4798      	blx	r3
 80030f0:	e7cc      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
          break;
        }
        break;

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80030f2:	7830      	ldrb	r0, [r6, #0]
 80030f4:	4b80      	ldr	r3, [pc, #512]	; (80032f8 <USBD_Handle_DeviceRequest+0x290>)
 80030f6:	f010 0003 	ands.w	r0, r0, #3
 80030fa:	f000 8103 	beq.w	8003304 <USBD_Handle_DeviceRequest+0x29c>
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b01      	cmp	r3, #1
 8003106:	f000 80e7 	beq.w	80032d8 <USBD_Handle_DeviceRequest+0x270>
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 800310a:	7833      	ldrb	r3, [r6, #0]
 800310c:	4a7a      	ldr	r2, [pc, #488]	; (80032f8 <USBD_Handle_DeviceRequest+0x290>)
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d1dd      	bne.n	80030d2 <USBD_Handle_DeviceRequest+0x6a>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8003116:	4979      	ldr	r1, [pc, #484]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 8003118:	8893      	ldrh	r3, [r2, #4]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800311a:	7809      	ldrb	r1, [r1, #0]
 800311c:	2904      	cmp	r1, #4
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800311e:	b29b      	uxth	r3, r3
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8003120:	d003      	beq.n	800312a <USBD_Handle_DeviceRequest+0xc2>
 8003122:	8892      	ldrh	r2, [r2, #4]
 8003124:	b292      	uxth	r2, r2
 8003126:	2a00      	cmp	r2, #0
 8003128:	d1d3      	bne.n	80030d2 <USBD_Handle_DeviceRequest+0x6a>
              (1U == device.Endpoints[index].IsConfigured))
 800312a:	222c      	movs	r2, #44	; 0x2c
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800312c:	f003 030f 	and.w	r3, r3, #15
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
              (1U == device.Endpoints[index].IsConfigured))
 8003130:	fb02 4303 	mla	r3, r2, r3, r4
 8003134:	496f      	ldr	r1, [pc, #444]	; (80032f4 <USBD_Handle_DeviceRequest+0x28c>)
 8003136:	7a1a      	ldrb	r2, [r3, #8]
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8003138:	07d0      	lsls	r0, r2, #31
 800313a:	d5ca      	bpl.n	80030d2 <USBD_Handle_DeviceRequest+0x6a>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 800313c:	689b      	ldr	r3, [r3, #8]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800313e:	680a      	ldr	r2, [r1, #0]
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 8003140:	a902      	add	r1, sp, #8
 8003142:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003146:	f841 3d04 	str.w	r3, [r1, #-4]!
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800314a:	2000      	movs	r0, #0
 800314c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800314e:	2202      	movs	r2, #2
 8003150:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 8003152:	e79b      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 8003154:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0b9      	beq.n	80030d2 <USBD_Handle_DeviceRequest+0x6a>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 800315e:	8870      	ldrh	r0, [r6, #2]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 8003160:	88b1      	ldrh	r1, [r6, #4]
        break;

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8003162:	4e65      	ldr	r6, [pc, #404]	; (80032f8 <USBD_Handle_DeviceRequest+0x290>)
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 8003164:	b280      	uxth	r0, r0
 8003166:	b289      	uxth	r1, r1
 8003168:	466a      	mov	r2, sp
 800316a:	4798      	blx	r3
        }

        if (0U == length)
 800316c:	4605      	mov	r5, r0
 800316e:	2800      	cmp	r0, #0
 8003170:	d0af      	beq.n	80030d2 <USBD_Handle_DeviceRequest+0x6a>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8003172:	88f3      	ldrh	r3, [r6, #6]
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 8003174:	9900      	ldr	r1, [sp, #0]
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8003176:	b29b      	uxth	r3, r3
 8003178:	4298      	cmp	r0, r3
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 800317a:	bf28      	it	cs
 800317c:	88f5      	ldrhcs	r5, [r6, #6]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 800317e:	6823      	ldr	r3, [r4, #0]
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 8003180:	bf28      	it	cs
 8003182:	b2ad      	uxthcs	r5, r5
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	462a      	mov	r2, r5
 8003188:	2000      	movs	r0, #0
 800318a:	4798      	blx	r3
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 800318c:	9b00      	ldr	r3, [sp, #0]
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
 800318e:	1a2d      	subs	r5, r5, r0
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8003190:	4418      	add	r0, r3
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
 8003192:	62a5      	str	r5, [r4, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8003194:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003196:	e779      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
        break;

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8003198:	4b58      	ldr	r3, [pc, #352]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	2a04      	cmp	r2, #4
 800319e:	d195      	bne.n	80030cc <USBD_Handle_DeviceRequest+0x64>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80031a0:	8872      	ldrh	r2, [r6, #2]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 80031a2:	88b3      	ldrh	r3, [r6, #4]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 80031a4:	fa14 f383 	uxtah	r3, r4, r3
 80031a8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
          break;
 80031ac:	e76e      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
        }
        USBD_HandleEP0_Stall();
        break;

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	4953      	ldr	r1, [pc, #332]	; (8003300 <USBD_Handle_DeviceRequest+0x298>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	2201      	movs	r2, #1
 80031b6:	2000      	movs	r0, #0
 80031b8:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 80031ba:	e767      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
        if (NULL != device.events->config_changed)
 80031bc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
        break;

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 80031c0:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
        if (NULL != device.events->config_changed)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	b103      	cbz	r3, 80031ca <USBD_Handle_DeviceRequest+0x162>
        {
          device.events->config_changed();
 80031c8:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 80031ca:	2d00      	cmp	r5, #0
 80031cc:	d054      	beq.n	8003278 <USBD_Handle_DeviceRequest+0x210>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
          break;
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 80031ce:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80031d2:	4d48      	ldr	r5, [pc, #288]	; (80032f4 <USBD_Handle_DeviceRequest+0x28c>)
 80031d4:	07d9      	lsls	r1, r3, #31
 80031d6:	f140 80a6 	bpl.w	8003326 <USBD_Handle_DeviceRequest+0x2be>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 80031da:	4b48      	ldr	r3, [pc, #288]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
 80031dc:	2204      	movs	r2, #4
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e754      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
        }
        break;

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 80031e2:	2d02      	cmp	r5, #2
 80031e4:	f43f af75 	beq.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
        {
          USBD_HandleEP0_Stall();
          break;
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80031e8:	4b44      	ldr	r3, [pc, #272]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
 80031ea:	781a      	ldrb	r2, [r3, #0]
 80031ec:	2a04      	cmp	r2, #4
 80031ee:	d067      	beq.n	80032c0 <USBD_Handle_DeviceRequest+0x258>
              break;
          }
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	f47f af6d 	bne.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	f47f af6a 	bne.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80031fe:	7833      	ldrb	r3, [r6, #0]
 8003200:	4a3d      	ldr	r2, [pc, #244]	; (80032f8 <USBD_Handle_DeviceRequest+0x290>)
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b02      	cmp	r3, #2
 8003208:	f47f af63 	bne.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 800320c:	8893      	ldrh	r3, [r2, #4]
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800320e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003212:	f47f af5e 	bne.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 8003216:	8923      	ldrh	r3, [r4, #8]
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	8123      	strh	r3, [r4, #8]
            USBD_HandleEP0_Stall();
 800321e:	f7ff ff0f 	bl	8003040 <USBD_HandleEP0_Stall>
            break;
 8003222:	e733      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 8003224:	7833      	ldrb	r3, [r6, #0]
 8003226:	4a34      	ldr	r2, [pc, #208]	; (80032f8 <USBD_Handle_DeviceRequest+0x290>)
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d027      	beq.n	8003280 <USBD_Handle_DeviceRequest+0x218>
          {
            USBD_HandleEP0_Stall();
          }
          break;
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8003230:	7813      	ldrb	r3, [r2, #0]
 8003232:	f013 0303 	ands.w	r3, r3, #3
 8003236:	f47f af4c 	bne.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
        {
          device.remote_wakeup = 0U;
 800323a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
 800323e:	f363 0282 	bfi	r2, r3, #2, #1
 8003242:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
          break;
 8003246:	e721      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
        break;

      case REQ_SetAddress:
        if (0U == value)
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
        /* default stall */
        USBD_HandleEP0_Stall();
        break;

      case REQ_SetAddress:
        if (0U == value)
 800324a:	b995      	cbnz	r5, 8003272 <USBD_Handle_DeviceRequest+0x20a>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	4e28      	ldr	r6, [pc, #160]	; (80032f4 <USBD_Handle_DeviceRequest+0x28c>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	4628      	mov	r0, r5
 8003258:	2100      	movs	r1, #0
 800325a:	4798      	blx	r3
 800325c:	2800      	cmp	r0, #0
 800325e:	f47f af15 	bne.w	800308c <USBD_Handle_DeviceRequest+0x24>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 8003262:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f43f af0f 	beq.w	800308c <USBD_Handle_DeviceRequest+0x24>
          {
            device.events->set_address();
 800326e:	4798      	blx	r3
 8003270:	e70c      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8003272:	2203      	movs	r2, #3
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e7eb      	b.n	8003250 <USBD_Handle_DeviceRequest+0x1e8>
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8003278:	4b20      	ldr	r3, [pc, #128]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
 800327a:	2203      	movs	r2, #3
 800327c:	701a      	strb	r2, [r3, #0]
          break;
 800327e:	e705      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8003280:	491e      	ldr	r1, [pc, #120]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8003282:	8893      	ldrh	r3, [r2, #4]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8003284:	7809      	ldrb	r1, [r1, #0]
 8003286:	2904      	cmp	r1, #4
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8003288:	b29b      	uxth	r3, r3
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 800328a:	d004      	beq.n	8003296 <USBD_Handle_DeviceRequest+0x22e>
 800328c:	8892      	ldrh	r2, [r2, #4]
 800328e:	b292      	uxth	r2, r2
 8003290:	2a00      	cmp	r2, #0
 8003292:	f47f af1e 	bne.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
                  (1U == device.Endpoints[index].IsConfigured))
 8003296:	222c      	movs	r2, #44	; 0x2c
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8003298:	f003 030f 	and.w	r3, r3, #15
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
 800329c:	fb02 4303 	mla	r3, r2, r3, r4
 80032a0:	4914      	ldr	r1, [pc, #80]	; (80032f4 <USBD_Handle_DeviceRequest+0x28c>)
 80032a2:	7a1a      	ldrb	r2, [r3, #8]
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80032a4:	07d5      	lsls	r5, r2, #31
 80032a6:	f57f af14 	bpl.w	80030d2 <USBD_Handle_DeviceRequest+0x6a>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 80032aa:	891a      	ldrh	r2, [r3, #8]
 80032ac:	f36f 0282 	bfc	r2, #2, #1
 80032b0:	811a      	strh	r2, [r3, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 80032b2:	88b0      	ldrh	r0, [r6, #4]
 80032b4:	680b      	ldr	r3, [r1, #0]
 80032b6:	b2c0      	uxtb	r0, r0
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2100      	movs	r1, #0
 80032bc:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 80032be:	e6e5      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
          break;
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	d044      	beq.n	800334e <USBD_Handle_DeviceRequest+0x2e6>
 80032c4:	2d01      	cmp	r5, #1
 80032c6:	f47f aee1 	bne.w	800308c <USBD_Handle_DeviceRequest+0x24>
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 80032ca:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
              break;
 80032d6:	e6d9      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <USBD_Handle_DeviceRequest+0x294>)
 80032da:	781b      	ldrb	r3, [r3, #0]
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80032dc:	2b04      	cmp	r3, #4
 80032de:	f47f af14 	bne.w	800310a <USBD_Handle_DeviceRequest+0xa2>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 80032e2:	a902      	add	r1, sp, #8
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80032e4:	6823      	ldr	r3, [r4, #0]
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 80032e6:	2000      	movs	r0, #0
 80032e8:	f841 0d04 	str.w	r0, [r1, #-4]!
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	2202      	movs	r2, #2
 80032f0:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 80032f2:	e6cb      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
 80032f4:	1fff1688 	.word	0x1fff1688
 80032f8:	1fff1480 	.word	0x1fff1480
 80032fc:	1fff147d 	.word	0x1fff147d
 8003300:	1fff17c1 	.word	0x1fff17c1
        break;

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 8003304:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 8003308:	6822      	ldr	r2, [r4, #0]
        break;

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 800330a:	f3c3 0580 	ubfx	r5, r3, #2, #1
 800330e:	006d      	lsls	r5, r5, #1
 8003310:	b2ed      	uxtb	r5, r5
 8003312:	a902      	add	r1, sp, #8
 8003314:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003318:	432b      	orrs	r3, r5
 800331a:	f841 3d04 	str.w	r3, [r1, #-4]!
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800331e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003320:	2202      	movs	r2, #2
 8003322:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 8003324:	e6b2      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
 */
static void USBD_HandleEP0_Stall(void)
{
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	2080      	movs	r0, #128	; 0x80
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	2101      	movs	r1, #1
 800332e:	4798      	blx	r3
 8003330:	2800      	cmp	r0, #0
 8003332:	f47f aeab 	bne.w	800308c <USBD_Handle_DeviceRequest+0x24>
 8003336:	e6d4      	b.n	80030e2 <USBD_Handle_DeviceRequest+0x7a>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 8003338:	88b1      	ldrh	r1, [r6, #4]
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 800333a:	6823      	ldr	r3, [r4, #0]
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 800333c:	b289      	uxth	r1, r1
 800333e:	f501 719c 	add.w	r1, r1, #312	; 0x138
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 8003342:	4421      	add	r1, r4
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	2201      	movs	r2, #1
 8003348:	2000      	movs	r0, #0
 800334a:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 800334c:	e69e      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
              break;
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 800334e:	88b3      	ldrh	r3, [r6, #4]
 8003350:	480a      	ldr	r0, [pc, #40]	; (800337c <USBD_Handle_DeviceRequest+0x314>)
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 8003352:	490b      	ldr	r1, [pc, #44]	; (8003380 <USBD_Handle_DeviceRequest+0x318>)
 8003354:	222c      	movs	r2, #44	; 0x2c
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
              break;
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 8003356:	f003 030f 	and.w	r3, r3, #15
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 800335a:	fb02 4303 	mla	r3, r2, r3, r4
 800335e:	7a1a      	ldrb	r2, [r3, #8]
 8003360:	07d2      	lsls	r2, r2, #31
 8003362:	f57f af5c 	bpl.w	800321e <USBD_Handle_DeviceRequest+0x1b6>
              {
                USBD_HandleEP0_Stall();
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 8003366:	891a      	ldrh	r2, [r3, #8]
 8003368:	f042 0204 	orr.w	r2, r2, #4
 800336c:	811a      	strh	r2, [r3, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 800336e:	680b      	ldr	r3, [r1, #0]
 8003370:	8880      	ldrh	r0, [r0, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2101      	movs	r1, #1
 8003376:	b2c0      	uxtb	r0, r0
 8003378:	4798      	blx	r3
 800337a:	e687      	b.n	800308c <USBD_Handle_DeviceRequest+0x24>
 800337c:	1fff1480 	.word	0x1fff1480
 8003380:	1fff1688 	.word	0x1fff1688

08003384 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 8003384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8003388:	4c72      	ldr	r4, [pc, #456]	; (8003554 <USBD_SignalEndpointEvent_Handler+0x1d0>)
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 800338a:	f000 050f 	and.w	r5, r0, #15
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
 800338e:	2901      	cmp	r1, #1
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 8003390:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
  temp_dir = (uint32_t)device.CurrentDirection;
 8003394:	f894 713d 	ldrb.w	r7, [r4, #317]	; 0x13d
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8003398:	f894 813c 	ldrb.w	r8, [r4, #316]	; 0x13c
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 800339c:	f884 013d 	strb.w	r0, [r4, #317]	; 0x13d
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 80033a0:	462e      	mov	r6, r5
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80033a2:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
 80033a6:	d067      	beq.n	8003478 <USBD_SignalEndpointEvent_Handler+0xf4>
 80033a8:	d33a      	bcc.n	8003420 <USBD_SignalEndpointEvent_Handler+0x9c>
 80033aa:	2902      	cmp	r1, #2
 80033ac:	d132      	bne.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
          break;
      }
      break;
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 80033ae:	232c      	movs	r3, #44	; 0x2c
 80033b0:	fb03 4305 	mla	r3, r3, r5, r4
 80033b4:	f103 0920 	add.w	r9, r3, #32
 80033b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	f040 8091 	bne.w	80034e2 <USBD_SignalEndpointEvent_Handler+0x15e>
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 80033c0:	7918      	ldrb	r0, [r3, #4]
 80033c2:	0702      	lsls	r2, r0, #28
 80033c4:	d114      	bne.n	80033f0 <USBD_SignalEndpointEvent_Handler+0x6c>
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	b192      	cbz	r2, 80033f0 <USBD_SignalEndpointEvent_Handler+0x6c>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 80033ca:	4963      	ldr	r1, [pc, #396]	; (8003558 <USBD_SignalEndpointEvent_Handler+0x1d4>)
 80033cc:	88c9      	ldrh	r1, [r1, #6]
 80033ce:	b289      	uxth	r1, r1
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 80033d0:	428a      	cmp	r2, r1
 80033d2:	d00d      	beq.n	80033f0 <USBD_SignalEndpointEvent_Handler+0x6c>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 80033d4:	891b      	ldrh	r3, [r3, #8]
 80033d6:	f3c3 1386 	ubfx	r3, r3, #6, #7
 80033da:	fbb2 f1f3 	udiv	r1, r2, r3
 80033de:	fb03 2111 	mls	r1, r3, r1, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 80033e2:	b929      	cbnz	r1, 80033f0 <USBD_SignalEndpointEvent_Handler+0x6c>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	460a      	mov	r2, r1
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4798      	blx	r3
 80033ec:	f894 513c 	ldrb.w	r5, [r4, #316]	; 0x13c
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 80033f0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8003554 <USBD_SignalEndpointEvent_Handler+0x1d0>
 80033f4:	232c      	movs	r3, #44	; 0x2c
 80033f6:	fb03 4606 	mla	r6, r3, r6, r4
 80033fa:	2200      	movs	r2, #0
      ep->InInUse = (uint8_t)0;
 80033fc:	8933      	ldrh	r3, [r6, #8]
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 80033fe:	61f2      	str	r2, [r6, #28]
      ep->InInUse = (uint8_t)0;
 8003400:	f362 1304 	bfi	r3, r2, #4, #1
 8003404:	8133      	strh	r3, [r6, #8]
      switch (device.CurrentEndpoint)
 8003406:	b92d      	cbnz	r5, 8003414 <USBD_SignalEndpointEvent_Handler+0x90>
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 8003408:	f899 313b 	ldrb.w	r3, [r9, #315]	; 0x13b
 800340c:	2b02      	cmp	r3, #2
 800340e:	d078      	beq.n	8003502 <USBD_SignalEndpointEvent_Handler+0x17e>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 8003410:	2b03      	cmp	r3, #3
 8003412:	d04e      	beq.n	80034b2 <USBD_SignalEndpointEvent_Handler+0x12e>
      }
      break;
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 8003414:	f884 813c 	strb.w	r8, [r4, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 8003418:	f884 713d 	strb.w	r7, [r4, #317]	; 0x13d
 800341c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 8003420:	232c      	movs	r3, #44	; 0x2c
 8003422:	fb03 4305 	mla	r3, r3, r5, r4
 8003426:	891a      	ldrh	r2, [r3, #8]
 8003428:	f36f 02c3 	bfc	r2, #3, #1
 800342c:	811a      	strh	r2, [r3, #8]
      switch (device.CurrentEndpoint)
 800342e:	2d00      	cmp	r5, #0
 8003430:	d1f0      	bne.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
static void USBD_HandleEP0_SETUP()
{
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	4e48      	ldr	r6, [pc, #288]	; (8003558 <USBD_SignalEndpointEvent_Handler+0x1d4>)
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	4631      	mov	r1, r6
 800343a:	4628      	mov	r0, r5
 800343c:	2208      	movs	r2, #8
 800343e:	4798      	blx	r3
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8003440:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 8003444:	2808      	cmp	r0, #8
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 800344e:	d1e1      	bne.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 8003450:	f8b6 9006 	ldrh.w	r9, [r6, #6]
 8003454:	fa1f f989 	uxth.w	r9, r9
 8003458:	f1b9 0f00 	cmp.w	r9, #0
 800345c:	d068      	beq.n	8003530 <USBD_SignalEndpointEvent_Handler+0x1ac>
      USBD_Handle_DeviceRequest();
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 800345e:	7833      	ldrb	r3, [r6, #0]
 8003460:	0619      	lsls	r1, r3, #24
 8003462:	d471      	bmi.n	8003548 <USBD_SignalEndpointEvent_Handler+0x1c4>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 8003464:	88f1      	ldrh	r1, [r6, #6]
 8003466:	6823      	ldr	r3, [r4, #0]
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
        USBD_Handle_DeviceRequest();
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 8003468:	2204      	movs	r2, #4
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
        USBD_Handle_DeviceRequest();
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 800346c:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 8003470:	b289      	uxth	r1, r1
 8003472:	4628      	mov	r0, r5
 8003474:	4798      	blx	r3
 8003476:	e7cd      	b.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
        default:
          break;
      }
      break;
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 8003478:	232c      	movs	r3, #44	; 0x2c
 800347a:	fb03 4305 	mla	r3, r3, r5, r4
 800347e:	4699      	mov	r9, r3
 8003480:	891a      	ldrh	r2, [r3, #8]
 8003482:	f042 0220 	orr.w	r2, r2, #32
 8003486:	f829 2f08 	strh.w	r2, [r9, #8]!
      if (ep->OutBytesAvailable == 0U)
 800348a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800348e:	b1da      	cbz	r2, 80034c8 <USBD_SignalEndpointEvent_Handler+0x144>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 8003490:	232c      	movs	r3, #44	; 0x2c
 8003492:	fb03 4606 	mla	r6, r3, r6, r4
 8003496:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8003554 <USBD_SignalEndpointEvent_Handler+0x1d0>
 800349a:	8933      	ldrh	r3, [r6, #8]
 800349c:	f36f 03c3 	bfc	r3, #3, #1
 80034a0:	8133      	strh	r3, [r6, #8]
      switch (device.CurrentEndpoint)
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	d1b6      	bne.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 80034a6:	f899 313b 	ldrb.w	r3, [r9, #315]	; 0x13b
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d033      	beq.n	8003516 <USBD_SignalEndpointEvent_Handler+0x192>
    USBD_Handle_DeviceRequest();
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d1b0      	bne.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80034b2:	f8d9 3000 	ldr.w	r3, [r9]
 80034b6:	f899 0004 	ldrb.w	r0, [r9, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	2118      	movs	r1, #24
 80034be:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f889 313b 	strb.w	r3, [r9, #315]	; 0x13b
 80034c6:	e7a5      	b.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
      if (ep->OutBytesAvailable == 0U)
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 80034c8:	6821      	ldr	r1, [r4, #0]
      break;
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
      if (ep->OutBytesAvailable == 0U)
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 80034ca:	f8c9 2008 	str.w	r2, [r9, #8]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 80034ce:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80034d0:	7918      	ldrb	r0, [r3, #4]
 80034d2:	6959      	ldr	r1, [r3, #20]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	47a8      	blx	r5
 80034d8:	f894 513c 	ldrb.w	r5, [r4, #316]	; 0x13c
 80034dc:	f8c9 0004 	str.w	r0, [r9, #4]
 80034e0:	e7d6      	b.n	8003490 <USBD_SignalEndpointEvent_Handler+0x10c>
      break;
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 80034e2:	6821      	ldr	r1, [r4, #0]
 80034e4:	7918      	ldrb	r0, [r3, #4]
 80034e6:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80034e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ea:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80034ee:	47b0      	blx	r6
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
 80034f0:	686a      	ldr	r2, [r5, #4]
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
 80034f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
        ep->InDataBuffer += (uint32_t)data_count;
 80034f6:	4402      	add	r2, r0
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
 80034f8:	1a1b      	subs	r3, r3, r0
        ep->InDataBuffer += (uint32_t)data_count;
 80034fa:	606a      	str	r2, [r5, #4]
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
 80034fc:	f8c9 3008 	str.w	r3, [r9, #8]
        ep->InDataBuffer += (uint32_t)data_count;
        break;
 8003500:	e788      	b.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
static void USBD_HandleEP0_IN()
{
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 8003502:	f8d9 3000 	ldr.w	r3, [r9]
 8003506:	4628      	mov	r0, r5
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	4629      	mov	r1, r5
 800350c:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 800350e:	2305      	movs	r3, #5
 8003510:	f889 313b 	strb.w	r3, [r9, #315]	; 0x13b
 8003514:	e77e      	b.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
static void USBD_HandleEP0_OUT()
{
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 8003516:	f7ff fda7 	bl	8003068 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 800351a:	f8d9 3000 	ldr.w	r3, [r9]
 800351e:	4628      	mov	r0, r5
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4629      	mov	r1, r5
 8003524:	462a      	mov	r2, r5
 8003526:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8003528:	2303      	movs	r3, #3
 800352a:	f889 313b 	strb.w	r3, [r9, #315]	; 0x13b
 800352e:	e771      	b.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8003530:	2303      	movs	r3, #3
 8003532:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 8003536:	f7ff fd97 	bl	8003068 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	4648      	mov	r0, r9
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	4649      	mov	r1, r9
 8003542:	464a      	mov	r2, r9
 8003544:	4798      	blx	r3
 8003546:	e765      	b.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 8003548:	2302      	movs	r3, #2
 800354a:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 800354e:	f7ff fd8b 	bl	8003068 <USBD_Handle_DeviceRequest>
 8003552:	e75f      	b.n	8003414 <USBD_SignalEndpointEvent_Handler+0x90>
 8003554:	1fff1688 	.word	0x1fff1688
 8003558:	1fff1480 	.word	0x1fff1480

0800355c <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 800355c:	b570      	push	{r4, r5, r6, lr}
	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
 800355e:	4c3c      	ldr	r4, [pc, #240]	; (8003650 <USBD_Init+0xf4>)
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 8003560:	4605      	mov	r5, r0


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 8003562:	f7fe fdc5 	bl	80020f0 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 8003566:	2100      	movs	r1, #0
 8003568:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800356c:	4620      	mov	r0, r4
 800356e:	f00a f9b0 	bl	800d8d2 <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <USBD_Init+0xf8>)
	device.Driver = &Driver_USBD0;
 8003574:	4838      	ldr	r0, [pc, #224]	; (8003658 <USBD_Init+0xfc>)
 8003576:	6020      	str	r0, [r4, #0]
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 8003578:	2601      	movs	r6, #1
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 800357a:	2000      	movs	r0, #0
 800357c:	7018      	strb	r0, [r3, #0]
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 800357e:	7226      	strb	r6, [r4, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8003580:	8923      	ldrh	r3, [r4, #8]
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8003582:	4a36      	ldr	r2, [pc, #216]	; (800365c <USBD_Init+0x100>)
 8003584:	6162      	str	r2, [r4, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8003586:	f043 0302 	orr.w	r3, r3, #2
 800358a:	8123      	strh	r3, [r4, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 800358c:	8923      	ldrh	r3, [r4, #8]

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <USBD_Init+0x104>)
 8003590:	6221      	str	r1, [r4, #32]
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 8003592:	2240      	movs	r2, #64	; 0x40
 8003594:	f362 138c 	bfi	r3, r2, #6, #7
 8003598:	8123      	strh	r3, [r4, #8]

	if ((handle->event_cb->control_request == 0) ||
 800359a:	692b      	ldr	r3, [r5, #16]
 800359c:	68d9      	ldr	r1, [r3, #12]
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
 800359e:	f884 613b 	strb.w	r6, [r4, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 80035a2:	f44f 7280 	mov.w	r2, #256	; 0x100
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
 80035a6:	4630      	mov	r0, r6
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 80035a8:	6262      	str	r2, [r4, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 80035aa:	61a2      	str	r2, [r4, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 80035ac:	b321      	cbz	r1, 80035f8 <USBD_Init+0x9c>
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	b312      	cbz	r2, 80035f8 <USBD_Init+0x9c>
	    (handle->event_cb->get_descriptor == 0) ||
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	b302      	cbz	r2, 80035f8 <USBD_Init+0x9c>
	{
	  status = USBD_STATUS_FAILURE;
	}
	else
	{
	  device.events = handle->event_cb;
 80035b6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 80035ba:	f7fc ff4f 	bl	800045c <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 80035be:	6823      	ldr	r3, [r4, #0]
	  device.events = handle->event_cb;

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 80035c0:	4928      	ldr	r1, [pc, #160]	; (8003664 <USBD_Init+0x108>)
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 80035c2:	4a29      	ldr	r2, [pc, #164]	; (8003668 <USBD_Init+0x10c>)

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 80035c4:	685b      	ldr	r3, [r3, #4]
	  device.events = handle->event_cb;

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 80035c6:	6069      	str	r1, [r5, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 80035c8:	60aa      	str	r2, [r5, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 80035ca:	4628      	mov	r0, r5
 80035cc:	4798      	blx	r3
	  if (USBD_STATUS_SUCCESS == status)
 80035ce:	4605      	mov	r5, r0
 80035d0:	b1a8      	cbz	r0, 80035fe <USBD_Init+0xa2>
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
	  {
	  XMC_USBD_Disable();
 80035d2:	f7fe fd8d 	bl	80020f0 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4798      	blx	r3
 80035dc:	b950      	cbnz	r0, 80035f4 <USBD_Init+0x98>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <USBD_Init+0x110>)
 80035e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035ec:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80035f0:	f3bf 8f6f 	isb	sy
	  }
	}


	return status;
}
 80035f4:	4628      	mov	r0, r5
 80035f6:	bd70      	pop	{r4, r5, r6, pc}

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 80035f8:	4605      	mov	r5, r0
	  }
	}


	return status;
}
 80035fa:	4628      	mov	r0, r5
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <USBD_Init+0x114>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003606:	f1c3 0107 	rsb	r1, r3, #7
 800360a:	2906      	cmp	r1, #6
 800360c:	bf28      	it	cs
 800360e:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003610:	b1db      	cbz	r3, 800364a <USBD_Init+0xee>
 8003612:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	2301      	movs	r3, #1
 8003616:	408b      	lsls	r3, r1
 8003618:	3b01      	subs	r3, #1
 800361a:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 800361e:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4a12      	ldr	r2, [pc, #72]	; (800366c <USBD_Init+0x110>)
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 800362a:	6823      	ldr	r3, [r4, #0]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003630:	2000      	movs	r0, #0
 8003632:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
 8003636:	69db      	ldr	r3, [r3, #28]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003638:	60d1      	str	r1, [r2, #12]
 800363a:	4601      	mov	r1, r0
 800363c:	2240      	movs	r2, #64	; 0x40
 800363e:	4798      	blx	r3
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 8003640:	4605      	mov	r5, r0
 8003642:	2800      	cmp	r0, #0
 8003644:	d1c5      	bne.n	80035d2 <USBD_Init+0x76>
	  }
	}


	return status;
}
 8003646:	4628      	mov	r0, r5
 8003648:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	461a      	mov	r2, r3
 800364c:	e7e2      	b.n	8003614 <USBD_Init+0xb8>
 800364e:	bf00      	nop
 8003650:	1fff1688 	.word	0x1fff1688
 8003654:	1fff147d 	.word	0x1fff147d
 8003658:	0800db3c 	.word	0x0800db3c
 800365c:	1fff1588 	.word	0x1fff1588
 8003660:	1fff1488 	.word	0x1fff1488
 8003664:	08002d3d 	.word	0x08002d3d
 8003668:	08003385 	.word	0x08003385
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <USBD_Connect>:
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 8003674:	4b01      	ldr	r3, [pc, #4]	; (800367c <USBD_Connect+0x8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4718      	bx	r3
 800367c:	1fff1688 	.word	0x1fff1688

08003680 <USBD_IsEnumDone>:
 * Check with the USB device controller driver if the enumeration is done.
 * Returns 1 on completion of enumeration.
 */
uint32_t USBD_IsEnumDone(void)
{
  return device.Driver->IsEnumDone();
 8003680:	4b01      	ldr	r3, [pc, #4]	; (8003688 <USBD_IsEnumDone+0x8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	4718      	bx	r3
 8003688:	1fff1688 	.word	0x1fff1688

0800368c <USBD_SetEndpointBuffer>:
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 800368c:	f010 0f80 	tst.w	r0, #128	; 0x80
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8003690:	b410      	push	{r4}
  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
  {
    device.Endpoints[number].InBuffer = buf;
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <USBD_SetEndpointBuffer+0x30>)
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 8003694:	f000 040f 	and.w	r4, r0, #15
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
  {
    device.Endpoints[number].InBuffer = buf;
 8003698:	f04f 002c 	mov.w	r0, #44	; 0x2c
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 800369c:	d106      	bne.n	80036ac <USBD_SetEndpointBuffer+0x20>
    device.Endpoints[number].InBuffer = buf;
    device.Endpoints[number].InBufferLength = len;
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 800369e:	fb00 3304 	mla	r3, r0, r4, r3
    device.Endpoints[number].OutBufferLength = len;
  }

}
 80036a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    device.Endpoints[number].InBuffer = buf;
    device.Endpoints[number].InBufferLength = len;
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 80036a6:	6159      	str	r1, [r3, #20]
    device.Endpoints[number].OutBufferLength = len;
 80036a8:	619a      	str	r2, [r3, #24]
  }

}
 80036aa:	4770      	bx	lr
  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
  {
    device.Endpoints[number].InBuffer = buf;
 80036ac:	fb00 3404 	mla	r4, r0, r4, r3
 80036b0:	6221      	str	r1, [r4, #32]
    device.Endpoints[number].InBufferLength = len;
 80036b2:	6262      	str	r2, [r4, #36]	; 0x24
  {
    device.Endpoints[number].OutBuffer = buf;
    device.Endpoints[number].OutBufferLength = len;
  }

}
 80036b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	1fff1688 	.word	0x1fff1688

080036c0 <USB0_0_IRQHandler>:
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 80036c0:	4b01      	ldr	r3, [pc, #4]	; (80036c8 <USB0_0_IRQHandler+0x8>)
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	f7fe b8a8 	b.w	8001818 <XMC_USBD_IRQHandler>
 80036c8:	1ffed034 	.word	0x1ffed034

080036cc <UART_Init>:
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 80036cc:	6843      	ldr	r3, [r0, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4718      	bx	r3
 80036d2:	bf00      	nop

080036d4 <UART_Transmit>:
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 80036d4:	6843      	ldr	r3, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80036d6:	b470      	push	{r4, r5, r6}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 80036d8:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 80036dc:	b114      	cbz	r4, 80036e4 <UART_Transmit+0x10>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80036de:	2004      	movs	r0, #4
#endif
  default:
    break;
  }
  return ret_stat;
}
 80036e0:	bc70      	pop	{r4, r5, r6}
 80036e2:	4770      	bx	lr
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80036e4:	6885      	ldr	r5, [r0, #8]
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
 80036e6:	7e2c      	ldrb	r4, [r5, #24]
 80036e8:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 80036ec:	b114      	cbz	r4, 80036f4 <UART_Transmit+0x20>
  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 80036ee:	2002      	movs	r0, #2
#endif
  default:
    break;
  }
  return ret_stat;
}
 80036f0:	bc70      	pop	{r4, r5, r6}
 80036f2:	4770      	bx	lr
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 80036f4:	b101      	cbz	r1, 80036f8 <UART_Transmit+0x24>
 80036f6:	b90a      	cbnz	r2, 80036fc <UART_Transmit+0x28>
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 80036f8:	2003      	movs	r0, #3
 80036fa:	e7f1      	b.n	80036e0 <UART_Transmit+0xc>
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80036fc:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8003700:	6029      	str	r1, [r5, #0]
        ptr_runtime->tx_data_count = count;
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;
 8003702:	2101      	movs	r1, #1
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
        ptr_runtime->tx_data_count = count;
 8003704:	60aa      	str	r2, [r5, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8003706:	60ee      	str	r6, [r5, #12]
        ptr_runtime->tx_busy = true;
 8003708:	7629      	strb	r1, [r5, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 800370a:	6802      	ldr	r2, [r0, #0]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800370c:	b18c      	cbz	r4, 8003732 <UART_Transmit+0x5e>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 800370e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003712:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 8003716:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
 800371a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800371e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8003722:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8003726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800372a:	408b      	lsls	r3, r1
 800372c:	6693      	str	r3, [r2, #104]	; 0x68
 800372e:	2000      	movs	r0, #0
 8003730:	e7d6      	b.n	80036e0 <UART_Transmit+0xc>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8003732:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003734:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8003738:	6411      	str	r1, [r2, #64]	; 0x40
 800373a:	e7f2      	b.n	8003722 <UART_Transmit+0x4e>

0800373c <UART_Receive>:
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 800373c:	6843      	ldr	r3, [r0, #4]
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800373e:	b570      	push	{r4, r5, r6, lr}
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 8003740:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 8003744:	b10c      	cbz	r4, 800374a <UART_Receive+0xe>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8003746:	2004      	movs	r0, #4
 8003748:	bd70      	pop	{r4, r5, r6, pc}
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 800374a:	6885      	ldr	r5, [r0, #8]
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
 800374c:	7e6c      	ldrb	r4, [r5, #25]
 800374e:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8003752:	b10c      	cbz	r4, 8003758 <UART_Receive+0x1c>
  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 8003754:	2002      	movs	r0, #2
 8003756:	bd70      	pop	{r4, r5, r6, pc}
    if (ptr_runtime->rx_busy == false)
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8003758:	b101      	cbz	r1, 800375c <UART_Receive+0x20>
 800375a:	b90a      	cbnz	r2, 8003760 <UART_Receive+0x24>
        }
        ret_stat = UART_STATUS_SUCCESS;
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 800375c:	2003      	movs	r0, #3
#endif
  default:
    break;
  }
  return ret_stat;
}
 800375e:	bd70      	pop	{r4, r5, r6, pc}
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
        ptr_runtime->rx_data_index = 0U;

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8003760:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 8003764:	6069      	str	r1, [r5, #4]
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
 8003766:	2101      	movs	r1, #1
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
 8003768:	612a      	str	r2, [r5, #16]
        ptr_runtime->rx_busy = true;
        ptr_runtime->rx_data_index = 0U;
 800376a:	616e      	str	r6, [r5, #20]
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
 800376c:	7669      	strb	r1, [r5, #25]
        ptr_runtime->rx_data_index = 0U;

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800376e:	b933      	cbnz	r3, 800377e <UART_Receive+0x42>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8003770:	6801      	ldr	r1, [r0, #0]
 8003772:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003774:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003778:	4618      	mov	r0, r3
 800377a:	640a      	str	r2, [r1, #64]	; 0x40
 800377c:	bd70      	pop	{r4, r5, r6, pc}

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800377e:	6804      	ldr	r4, [r0, #0]
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8003780:	4099      	lsls	r1, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8003782:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8003786:	428a      	cmp	r2, r1
 8003788:	4625      	mov	r5, r4
 800378a:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
 800378e:	4604      	mov	r4, r0
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8003790:	bf2c      	ite	cs
 8003792:	f101 32ff 	addcs.w	r2, r1, #4294967295
  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8003796:	f102 32ff 	addcc.w	r2, r2, #4294967295
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 800379a:	4628      	mov	r0, r5
 800379c:	4619      	mov	r1, r3
 800379e:	f7fe fd67 	bl	8002270 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 80037a2:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 80037a4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80037a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80037ac:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 80037b0:	2000      	movs	r0, #0
 80037b2:	bd70      	pop	{r4, r5, r6, pc}

080037b4 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 80037b4:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80037b6:	6884      	ldr	r4, [r0, #8]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80037b8:	68e3      	ldr	r3, [r4, #12]
 80037ba:	68a2      	ldr	r2, [r4, #8]
 80037bc:	4293      	cmp	r3, r2
 80037be:	d21b      	bcs.n	80037f8 <UART_lTransmitHandler+0x44>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80037c0:	6842      	ldr	r2, [r0, #4]
 80037c2:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 80037c6:	4605      	mov	r5, r0
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	d035      	beq.n	8003838 <UART_lTransmitHandler+0x84>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80037cc:	6800      	ldr	r0, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80037ce:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80037d2:	04d2      	lsls	r2, r2, #19
 80037d4:	d503      	bpl.n	80037de <UART_lTransmitHandler+0x2a>
 80037d6:	e038      	b.n	800384a <UART_lTransmitHandler+0x96>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80037d8:	68a2      	ldr	r2, [r4, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d924      	bls.n	8003828 <UART_lTransmitHandler+0x74>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	5cd1      	ldrb	r1, [r2, r3]
 80037e2:	f7fd fafb 	bl	8000ddc <XMC_UART_CH_Transmit>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80037e6:	6828      	ldr	r0, [r5, #0]
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
          (ptr_runtime->tx_data_index)++;
 80037e8:	68e3      	ldr	r3, [r4, #12]
 80037ea:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80037ee:	3301      	adds	r3, #1
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80037f0:	04d6      	lsls	r6, r2, #19
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
          (ptr_runtime->tx_data_index)++;
 80037f2:	60e3      	str	r3, [r4, #12]
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80037f4:	d5f0      	bpl.n	80037d8 <UART_lTransmitHandler+0x24>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
      (ptr_runtime->tx_data_index)++;
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 80037f8:	6802      	ldr	r2, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80037fa:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 80037fe:	0519      	lsls	r1, r3, #20
 8003800:	d512      	bpl.n	8003828 <UART_lTransmitHandler+0x74>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8003802:	6841      	ldr	r1, [r0, #4]
 8003804:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8003808:	b97b      	cbnz	r3, 800382a <UART_lTransmitHandler+0x76>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 800380a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800380c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8003812:	6b93      	ldr	r3, [r2, #56]	; 0x38
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	d4fc      	bmi.n	8003812 <UART_lTransmitHandler+0x5e>
      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
      ptr_runtime->tx_data = NULL;

      if (handle->config->tx_cbhandler != NULL)
 8003818:	688a      	ldr	r2, [r1, #8]
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 800381a:	2300      	movs	r3, #0
 800381c:	7623      	strb	r3, [r4, #24]
      ptr_runtime->tx_data = NULL;
 800381e:	6023      	str	r3, [r4, #0]

      if (handle->config->tx_cbhandler != NULL)
 8003820:	b112      	cbz	r2, 8003828 <UART_lTransmitHandler+0x74>
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
      }
    }
  }
}
 8003822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ptr_runtime->tx_data = NULL;

      if (handle->config->tx_cbhandler != NULL)
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8003826:	4710      	bx	r2
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 800382a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800382e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003832:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8003836:	e7ec      	b.n	8003812 <UART_lTransmitHandler+0x5e>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	6800      	ldr	r0, [r0, #0]
 800383c:	5cd1      	ldrb	r1, [r2, r3]
 800383e:	f7fd facd 	bl	8000ddc <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8003842:	68e3      	ldr	r3, [r4, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60e3      	str	r3, [r4, #12]
 8003848:	bd70      	pop	{r4, r5, r6, pc}
 800384a:	bd70      	pop	{r4, r5, r6, pc}

0800384c <UART_lReceiveHandler>:
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800384c:	6843      	ldr	r3, [r0, #4]
 800384e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8003852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003856:	4606      	mov	r6, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8003858:	6885      	ldr	r5, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800385a:	b343      	cbz	r3, 80038ae <UART_lReceiveHandler+0x62>
 800385c:	696c      	ldr	r4, [r5, #20]
 800385e:	692b      	ldr	r3, [r5, #16]
 8003860:	6800      	ldr	r0, [r0, #0]
 8003862:	e001      	b.n	8003868 <UART_lReceiveHandler+0x1c>
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
        (ptr_runtime->rx_data_index)++;
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8003864:	429c      	cmp	r4, r3
 8003866:	d010      	beq.n	800388a <UART_lReceiveHandler+0x3e>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8003868:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 800386c:	0712      	lsls	r2, r2, #28
 800386e:	d41a      	bmi.n	80038a6 <UART_lReceiveHandler+0x5a>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8003870:	42a3      	cmp	r3, r4
 8003872:	d9f7      	bls.n	8003864 <UART_lReceiveHandler+0x18>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8003874:	686f      	ldr	r7, [r5, #4]
 8003876:	f7fd fac3 	bl	8000e00 <XMC_UART_CH_GetReceivedData>
 800387a:	5538      	strb	r0, [r7, r4]
        (ptr_runtime->rx_data_index)++;
 800387c:	696c      	ldr	r4, [r5, #20]
 800387e:	692b      	ldr	r3, [r5, #16]
 8003880:	6830      	ldr	r0, [r6, #0]
 8003882:	3401      	adds	r4, #1
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8003884:	429c      	cmp	r4, r3
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
        (ptr_runtime->rx_data_index)++;
 8003886:	616c      	str	r4, [r5, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8003888:	d1ee      	bne.n	8003868 <UART_lReceiveHandler+0x1c>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 800388a:	2300      	movs	r3, #0
 800388c:	766b      	strb	r3, [r5, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 800388e:	6872      	ldr	r2, [r6, #4]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8003890:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003894:	68d2      	ldr	r2, [r2, #12]
 8003896:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800389a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800389e:	b122      	cbz	r2, 80038aa <UART_lReceiveHandler+0x5e>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 80038a0:	4790      	blx	r2
 80038a2:	696c      	ldr	r4, [r5, #20]
 80038a4:	692b      	ldr	r3, [r5, #16]
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80038a6:	429c      	cmp	r4, r3
 80038a8:	d315      	bcc.n	80038d6 <UART_lReceiveHandler+0x8a>
 80038aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80038ae:	696c      	ldr	r4, [r5, #20]
 80038b0:	692b      	ldr	r3, [r5, #16]
 80038b2:	429c      	cmp	r4, r3
 80038b4:	d321      	bcc.n	80038fa <UART_lReceiveHandler+0xae>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      (ptr_runtime->rx_data_index)++;
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80038b6:	429c      	cmp	r4, r3
 80038b8:	d1f7      	bne.n	80038aa <UART_lReceiveHandler+0x5e>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 80038ba:	6832      	ldr	r2, [r6, #0]
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 80038bc:	6871      	ldr	r1, [r6, #4]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 80038be:	2300      	movs	r3, #0
 80038c0:	766b      	strb	r3, [r5, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 80038c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 80038c4:	68c9      	ldr	r1, [r1, #12]
 80038c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038ca:	6413      	str	r3, [r2, #64]	; 0x40
 80038cc:	2900      	cmp	r1, #0
 80038ce:	d0ec      	beq.n	80038aa <UART_lReceiveHandler+0x5e>
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 80038d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 80038d4:	4708      	bx	r1
 80038d6:	e896 0005 	ldmia.w	r6, {r0, r2}
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 80038da:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 80038de:	2201      	movs	r2, #1
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 80038e0:	1b1c      	subs	r4, r3, r4
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 80038e2:	fa02 f301 	lsl.w	r3, r2, r1
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 80038e6:	429c      	cmp	r4, r3
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 80038e8:	bf34      	ite	cc
 80038ea:	f104 32ff 	addcc.w	r2, r4, #4294967295
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 80038ee:	f103 32ff 	addcs.w	r2, r3, #4294967295
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 80038f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 80038f6:	f7fe bcbb 	b.w	8002270 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 80038fa:	6800      	ldr	r0, [r0, #0]
 80038fc:	686f      	ldr	r7, [r5, #4]
 80038fe:	f7fd fa7f 	bl	8000e00 <XMC_UART_CH_GetReceivedData>
 8003902:	5538      	strb	r0, [r7, r4]
      (ptr_runtime->rx_data_index)++;
 8003904:	696c      	ldr	r4, [r5, #20]
 8003906:	692b      	ldr	r3, [r5, #16]
 8003908:	3401      	adds	r4, #1
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800390a:	429c      	cmp	r4, r3
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
      (ptr_runtime->rx_data_index)++;
 800390c:	616c      	str	r4, [r5, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800390e:	d1cc      	bne.n	80038aa <UART_lReceiveHandler+0x5e>
 8003910:	e7d3      	b.n	80038ba <UART_lReceiveHandler+0x6e>
 8003912:	bf00      	nop

08003914 <cunit_logger_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
 8003914:	b510      	push	{r4, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 2U, &cunit_logger_rx_pin_config);
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
 8003916:	4c38      	ldr	r4, [pc, #224]	; (80039f8 <cunit_logger_init+0xe4>)
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 2U, &cunit_logger_rx_pin_config);
 8003918:	4a38      	ldr	r2, [pc, #224]	; (80039fc <cunit_logger_init+0xe8>)
 800391a:	4839      	ldr	r0, [pc, #228]	; (8003a00 <cunit_logger_init+0xec>)
 800391c:	2102      	movs	r1, #2
 800391e:	f7fc fce7 	bl	80002f0 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &cunit_logger_channel_config);
 8003922:	4620      	mov	r0, r4
 8003924:	4937      	ldr	r1, [pc, #220]	; (8003a04 <cunit_logger_init+0xf0>)
 8003926:	f7fd fa27 	bl	8000d78 <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800392a:	69e3      	ldr	r3, [r4, #28]
 800392c:	f023 0307 	bic.w	r3, r3, #7
 8003930:	61e3      	str	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 0U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
 8003932:	4620      	mov	r0, r4
 8003934:	2110      	movs	r1, #16
 8003936:	2204      	movs	r2, #4
 8003938:	2301      	movs	r3, #1
 800393a:	f7fe fc6b 	bl	8002214 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
 800393e:	2100      	movs	r1, #0
 8003940:	460b      	mov	r3, r1
 8003942:	4620      	mov	r0, r4
 8003944:	2204      	movs	r2, #4
 8003946:	f7fe fc7b 	bl	8002240 <XMC_USIC_CH_RXFIFO_Configure>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 800394a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 5U, &cunit_logger_tx_pin_config);
 800394c:	482c      	ldr	r0, [pc, #176]	; (8003a00 <cunit_logger_init+0xec>)
 800394e:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <cunit_logger_init+0xf4>)
 8003950:	f023 030f 	bic.w	r3, r3, #15
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	6423      	str	r3, [r4, #64]	; 0x40
 800395a:	2105      	movs	r1, #5
 800395c:	f7fc fcc8 	bl	80002f0 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8003960:	4620      	mov	r0, r4
 8003962:	2110      	movs	r1, #16
 8003964:	2200      	movs	r2, #0
 8003966:	f7fe fc95 	bl	8002294 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 800396a:	4620      	mov	r0, r4
 800396c:	2110      	movs	r1, #16
 800396e:	2204      	movs	r2, #4
 8003970:	f7fe fc9c 	bl	80022ac <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      4U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8003974:	4620      	mov	r0, r4
 8003976:	2110      	movs	r1, #16
 8003978:	2205      	movs	r2, #5
 800397a:	f7fe fca5 	bl	80022c8 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 800397e:	2113      	movs	r1, #19
 8003980:	4620      	mov	r0, r4
 8003982:	2205      	movs	r2, #5
 8003984:	f7fe fca0 	bl	80022c8 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <cunit_logger_init+0xf8>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003990:	f1c3 0107 	rsb	r1, r3, #7
 8003994:	2906      	cmp	r1, #6
 8003996:	bf28      	it	cs
 8003998:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	b34b      	cbz	r3, 80039f0 <cunit_logger_init+0xdc>
 800399c:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800399e:	2301      	movs	r3, #1
 80039a0:	408b      	lsls	r3, r1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80039a8:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <cunit_logger_init+0xfc>)
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ae:	4917      	ldr	r1, [pc, #92]	; (8003a0c <cunit_logger_init+0xf8>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b6:	f882 3358 	strb.w	r3, [r2, #856]	; 0x358
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ba:	6090      	str	r0, [r2, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	68cb      	ldr	r3, [r1, #12]
 80039be:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c2:	f1c3 0107 	rsb	r1, r3, #7
 80039c6:	2906      	cmp	r1, #6
 80039c8:	bf28      	it	cs
 80039ca:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039cc:	b193      	cbz	r3, 80039f4 <cunit_logger_init+0xe0>
 80039ce:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	2301      	movs	r3, #1
 80039d2:	408b      	lsls	r3, r1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80039da:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <cunit_logger_init+0xfc>)
 80039e0:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e6:	f882 3359 	strb.w	r3, [r2, #857]	; 0x359
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                      62U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
  return status;
}
 80039ea:	2000      	movs	r0, #0
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ec:	6091      	str	r1, [r2, #8]
 80039ee:	bd10      	pop	{r4, pc}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f0:	461a      	mov	r2, r3
 80039f2:	e7d4      	b.n	800399e <cunit_logger_init+0x8a>
 80039f4:	461a      	mov	r2, r3
 80039f6:	e7eb      	b.n	80039d0 <cunit_logger_init+0xbc>
 80039f8:	40030200 	.word	0x40030200
 80039fc:	0800dd70 	.word	0x0800dd70
 8003a00:	48028200 	.word	0x48028200
 8003a04:	0800dd4c 	.word	0x0800dd4c
 8003a08:	0800dd64 	.word	0x0800dd64
 8003a0c:	e000ed00 	.word	0xe000ed00
 8003a10:	e000e100 	.word	0xe000e100

08003a14 <USIC0_4_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void cunit_logger_TX_HANDLER()
{
  UART_lTransmitHandler(&cunit_logger);
 8003a14:	4801      	ldr	r0, [pc, #4]	; (8003a1c <USIC0_4_IRQHandler+0x8>)
 8003a16:	f7ff becd 	b.w	80037b4 <UART_lTransmitHandler>
 8003a1a:	bf00      	nop
 8003a1c:	1ffed04c 	.word	0x1ffed04c

08003a20 <USIC0_5_IRQHandler>:
}

/*Receive ISR*/
void cunit_logger_RX_HANDLER()
{
  UART_lReceiveHandler(&cunit_logger);
 8003a20:	4801      	ldr	r0, [pc, #4]	; (8003a28 <USIC0_5_IRQHandler+0x8>)
 8003a22:	f7ff bf13 	b.w	800384c <UART_lReceiveHandler>
 8003a26:	bf00      	nop
 8003a28:	1ffed04c 	.word	0x1ffed04c

08003a2c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8003a2e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003a32:	b943      	cbnz	r3, 8003a46 <TIMER_Init+0x1a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003a34:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
 8003a38:	4604      	mov	r4, r0
 8003a3a:	b13d      	cbz	r5, 8003a4c <TIMER_Init+0x20>
      status = TIMER_CCU4_lInit(handle_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003a3c:	2d01      	cmp	r5, #1
{
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8003a3e:	461e      	mov	r6, r3
      status = TIMER_CCU4_lInit(handle_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003a40:	d02f      	beq.n	8003aa2 <TIMER_Init+0x76>
    }
#endif
  }

  return (status);
}
 8003a42:	4630      	mov	r0, r6
 8003a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8003a46:	2600      	movs	r6, #0
    }
#endif
  }

  return (status);
}
 8003a48:	4630      	mov	r0, r6
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8003a4c:	6900      	ldr	r0, [r0, #16]
 8003a4e:	f000 ff43 	bl	80048d8 <GLOBAL_CCU4_Init>

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8003a52:	6923      	ldr	r3, [r4, #16]
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8003a54:	f894 e018 	ldrb.w	lr, [r4, #24]
 8003a58:	689f      	ldr	r7, [r3, #8]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8003a5a:	69e1      	ldr	r1, [r4, #28]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	fa03 f30e 	lsl.w	r3, r3, lr
 8003a64:	4313      	orrs	r3, r2
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8003a66:	4606      	mov	r6, r0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8003a68:	6960      	ldr	r0, [r4, #20]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	f7fc ff6c 	bl	8000948 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8003a70:	6923      	ldr	r3, [r4, #16]
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8003a72:	6960      	ldr	r0, [r4, #20]
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8003a74:	689a      	ldr	r2, [r3, #8]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8003a76:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003a7a:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8003a7c:	68e1      	ldr	r1, [r4, #12]
 8003a7e:	6347      	str	r7, [r0, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8003a80:	63c5      	str	r5, [r0, #60]	; 0x3c
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003a82:	6111      	str	r1, [r2, #16]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d138      	bne.n	8003afa <TIMER_Init+0xce>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003a88:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8003a8c:	2102      	movs	r1, #2
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	6101      	str	r1, [r0, #16]
 8003a92:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003a96:	b102      	cbz	r2, 8003a9a <TIMER_Init+0x6e>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003a98:	60c3      	str	r3, [r0, #12]
 8003a9a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
      status = TIMER_CCU4_lInit(handle_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003a9e:	2d01      	cmp	r5, #1
 8003aa0:	d1cf      	bne.n	8003a42 <TIMER_Init+0x16>
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 8003aa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003aa4:	f000 ff04 	bl	80048b0 <GLOBAL_CCU8_Init>

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 8003aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8003aaa:	f894 702c 	ldrb.w	r7, [r4, #44]	; 0x2c
 8003aae:	689a      	ldr	r2, [r3, #8]
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8003ab0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003ab2:	68d3      	ldr	r3, [r2, #12]
 8003ab4:	40bd      	lsls	r5, r7
 8003ab6:	431d      	orrs	r5, r3
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 8003ab8:	4606      	mov	r6, r0

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8003aba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003abc:	60d5      	str	r5, [r2, #12]
 8003abe:	f7fc ffad 	bl	8000a1c <XMC_CCU8_SLICE_CompareInit>
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8003ac2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003ac4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003ac6:	f7fc ffc7 	bl	8000a58 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8003aca:	2100      	movs	r1, #0
 8003acc:	460a      	mov	r2, r1
 8003ace:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003ad0:	f7fc ffcc 	bl	8000a6c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8003ad4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8003ad6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	68e1      	ldr	r1, [r4, #12]
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003ade:	6111      	str	r1, [r2, #16]
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8003ae0:	b9c3      	cbnz	r3, 8003b14 <TIMER_Init+0xe8>
 8003ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003ae4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8003ae8:	2002      	movs	r0, #2
#endif
  /* Clears the timer register */
  XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8003aea:	2201      	movs	r2, #1
 8003aec:	6118      	str	r0, [r3, #16]
 8003aee:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003af2:	2900      	cmp	r1, #0
 8003af4:	d0a5      	beq.n	8003a42 <TIMER_Init+0x16>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	e7a3      	b.n	8003a42 <TIMER_Init+0x16>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8003afa:	4629      	mov	r1, r5
 8003afc:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003b00:	f7fc ff44 	bl	800098c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003b04:	6960      	ldr	r0, [r4, #20]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003b06:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8003b12:	e7b9      	b.n	8003a88 <TIMER_Init+0x5c>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8003b14:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003b18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f7fc ffac 	bl	8000a78 <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8003b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003b22:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8003b2e:	e7d9      	b.n	8003ae4 <TIMER_Init+0xb8>

08003b30 <TIMER_Start>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8003b30:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003b34:	b16b      	cbz	r3, 8003b52 <TIMER_Start+0x22>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003b36:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003b3a:	b12b      	cbz	r3, 8003b48 <TIMER_Start+0x18>
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10a      	bne.n	8003b56 <TIMER_Start+0x26>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8003b40:	6a82      	ldr	r2, [r0, #40]	; 0x28
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003b42:	2000      	movs	r0, #0
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8003b44:	60d3      	str	r3, [r2, #12]
 8003b46:	4770      	bx	lr
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8003b48:	6942      	ldr	r2, [r0, #20]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003b4a:	2101      	movs	r1, #1
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	60d1      	str	r1, [r2, #12]
 8003b50:	4770      	bx	lr
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8003b52:	2001      	movs	r0, #1
 8003b54:	4770      	bx	lr
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003b56:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <TIMER_Stop>:
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003b5c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003b60:	b972      	cbnz	r2, 8003b80 <TIMER_Stop+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8003b62:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0301 	and.w	r3, r3, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8003b6a:	b15b      	cbz	r3, 8003b84 <TIMER_Stop+0x28>
 8003b6c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003b70:	b143      	cbz	r3, 8003b84 <TIMER_Stop+0x28>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003b72:	b172      	cbz	r2, 8003b92 <TIMER_Stop+0x36>
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003b74:	2a01      	cmp	r2, #1
 8003b76:	d111      	bne.n	8003b9c <TIMER_Stop+0x40>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8003b78:	6a83      	ldr	r3, [r0, #40]	; 0x28
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003b7a:	2000      	movs	r0, #0
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8003b7c:	611a      	str	r2, [r3, #16]
 8003b7e:	4770      	bx	lr
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003b80:	2a01      	cmp	r2, #1
 8003b82:	d001      	beq.n	8003b88 <TIMER_Stop+0x2c>
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8003b84:	2001      	movs	r0, #1
 8003b86:	4770      	bx	lr

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 8003b88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	e7eb      	b.n	8003b6a <TIMER_Stop+0xe>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8003b92:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8003b94:	2101      	movs	r1, #1
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003b96:	4610      	mov	r0, r2
 8003b98:	6119      	str	r1, [r3, #16]
 8003b9a:	4770      	bx	lr
 8003b9c:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003b9e:	4770      	bx	lr

08003ba0 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8003ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003ba4:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
 8003ba8:	2e00      	cmp	r6, #0
 8003baa:	d15f      	bne.n	8003c6c <TIMER_SetTimeInterval+0xcc>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8003bac:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d156      	bne.n	8003c66 <TIMER_SetTimeInterval+0xc6>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8003bb8:	6883      	ldr	r3, [r0, #8]
 8003bba:	428b      	cmp	r3, r1
 8003bbc:	d853      	bhi.n	8003c66 <TIMER_SetTimeInterval+0xc6>
 8003bbe:	6845      	ldr	r5, [r0, #4]
 8003bc0:	42a9      	cmp	r1, r5
 8003bc2:	d850      	bhi.n	8003c66 <TIMER_SetTimeInterval+0xc6>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003bc4:	ebb1 3fd5 	cmp.w	r1, r5, lsr #15
 8003bc8:	f240 8091 	bls.w	8003cee <TIMER_SetTimeInterval+0x14e>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f1c3 020e 	rsb	r2, r3, #14
 8003bd2:	fa25 f202 	lsr.w	r2, r5, r2
      {
        lprescaler++;
 8003bd6:	1c5c      	adds	r4, r3, #1
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003bd8:	4291      	cmp	r1, r2
      {
        lprescaler++;
 8003bda:	4623      	mov	r3, r4
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003bdc:	d8f7      	bhi.n	8003bce <TIMER_SetTimeInterval+0x2e>
 8003bde:	460d      	mov	r5, r1
 8003be0:	4607      	mov	r7, r0
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003be2:	2e00      	cmp	r6, #0
 8003be4:	d04b      	beq.n	8003c7e <TIMER_SetTimeInterval+0xde>
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8003be6:	2001      	movs	r0, #1
        status = TIMER_STATUS_SUCCESS;
      }
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003be8:	2e01      	cmp	r6, #1
 8003bea:	d13d      	bne.n	8003c68 <TIMER_SetTimeInterval+0xc8>
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003bee:	f8d7 e030 	ldr.w	lr, [r7, #48]	; 0x30
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8003bf2:	681a      	ldr	r2, [r3, #0]
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003bf4:	f89e c00c 	ldrb.w	ip, [lr, #12]
 8003bf8:	f004 060f 	and.w	r6, r4, #15
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003bfc:	fba5 2302 	umull	r2, r3, r5, r2
 8003c00:	f1c6 0120 	rsb	r1, r6, #32
 8003c04:	fa22 f006 	lsr.w	r0, r2, r6
 8003c08:	fa03 f101 	lsl.w	r1, r3, r1
 8003c0c:	f1a6 0220 	sub.w	r2, r6, #32
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003c10:	f364 0c03 	bfi	ip, r4, #0, #4
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003c14:	4308      	orrs	r0, r1
 8003c16:	fa23 f202 	lsr.w	r2, r3, r2
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003c1a:	f88e c00c 	strb.w	ip, [lr, #12]
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 8003c1e:	fa23 f106 	lsr.w	r1, r3, r6
 8003c22:	4310      	orrs	r0, r2
 8003c24:	a334      	add	r3, pc, #208	; (adr r3, 8003cf8 <TIMER_SetTimeInterval+0x158>)
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f009 fb2d 	bl	800d288 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003c2e:	b280      	uxth	r0, r0
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8003c30:	2801      	cmp	r0, #1
        {
          (handle_ptr->period_value)--;
 8003c32:	bf88      	it	hi
 8003c34:	f100 30ff 	addhi.w	r0, r0, #4294967295
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 8003c38:	b2e1      	uxtb	r1, r4
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
 8003c3a:	86f8      	strh	r0, [r7, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
 8003c3c:	f001 010f 	and.w	r1, r1, #15
 8003c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c42:	f7fc ff0b 	bl	8000a5c <XMC_CCU8_SLICE_SetPrescaler>
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8003c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c48:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003c4a:	f7fc ff05 	bl	8000a58 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8003c4e:	2100      	movs	r1, #0
 8003c50:	460a      	mov	r2, r1
 8003c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c54:	f7fc ff0a 	bl	8000a6c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
        /* update period, compare and prescaler values */
        TIMER_CCU8_lShadowTransfer(handle_ptr);
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8003c5e:	2000      	movs	r0, #0
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003c60:	611a      	str	r2, [r3, #16]
 8003c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8003c66:	2001      	movs	r0, #1
      }
#endif
    }
  }
  return (status);
}
 8003c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003c6c:	2e01      	cmp	r6, #1
 8003c6e:	d1a3      	bne.n	8003bb8 <TIMER_SetTimeInterval+0x18>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 8003c70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return(bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d09d      	beq.n	8003bb8 <TIMER_SetTimeInterval+0x18>
 8003c7c:	e7f3      	b.n	8003c66 <TIMER_SetTimeInterval+0xc6>
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8003c7e:	6903      	ldr	r3, [r0, #16]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003c80:	69c6      	ldr	r6, [r0, #28]
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8003c82:	681a      	ldr	r2, [r3, #0]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003c84:	f896 e004 	ldrb.w	lr, [r6, #4]
 8003c88:	f004 030f 	and.w	r3, r4, #15
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003c8c:	fba1 8902 	umull	r8, r9, r1, r2
 8003c90:	f1c3 0120 	rsb	r1, r3, #32
 8003c94:	fa28 f003 	lsr.w	r0, r8, r3
 8003c98:	fa09 f101 	lsl.w	r1, r9, r1
 8003c9c:	f1a3 0220 	sub.w	r2, r3, #32
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003ca0:	f364 0e03 	bfi	lr, r4, #0, #4
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003ca4:	4308      	orrs	r0, r1
 8003ca6:	fa29 f202 	lsr.w	r2, r9, r2
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003caa:	f886 e004 	strb.w	lr, [r6, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8003cae:	4310      	orrs	r0, r2
 8003cb0:	fa29 f103 	lsr.w	r1, r9, r3
 8003cb4:	a310      	add	r3, pc, #64	; (adr r3, 8003cf8 <TIMER_SetTimeInterval+0x158>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f009 fae5 	bl	800d288 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8003cbe:	b280      	uxth	r0, r0
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8003cc0:	2801      	cmp	r0, #1
        {
          (handle_ptr->period_value)--;
 8003cc2:	bf88      	it	hi
 8003cc4:	f100 30ff 	addhi.w	r0, r0, #4294967295
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8003cc8:	b2e1      	uxtb	r1, r4
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
 8003cca:	86f8      	strh	r0, [r7, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, (XMC_CCU4_SLICE_PRESCALER_t)handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 8003ccc:	f001 010f 	and.w	r1, r1, #15
 8003cd0:	6978      	ldr	r0, [r7, #20]
 8003cd2:	f7fc fe53 	bl	800097c <XMC_CCU4_SLICE_SetPrescaler>
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8003cd6:	693a      	ldr	r2, [r7, #16]
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003cda:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	6358      	str	r0, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003ce6:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003cea:	6111      	str	r1, [r2, #16]
 8003cec:	e77c      	b.n	8003be8 <TIMER_SetTimeInterval+0x48>
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003cee:	2400      	movs	r4, #0
 8003cf0:	e775      	b.n	8003bde <TIMER_SetTimeInterval+0x3e>
 8003cf2:	bf00      	nop
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	05f5e100 	.word	0x05f5e100
 8003cfc:	00000000 	.word	0x00000000

08003d00 <TIMER_ClearEvent>:
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003d00:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003d04:	b93b      	cbnz	r3, 8003d16 <TIMER_ClearEvent+0x16>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003d06:	6942      	ldr	r2, [r0, #20]
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8003d08:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003d14:	4770      	bx	lr
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d106      	bne.n	8003d28 <TIMER_ClearEvent+0x28>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8003d1a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8003d1c:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop

08003d2c <TIMER_Clear>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8003d2c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003d30:	b173      	cbz	r3, 8003d50 <TIMER_Clear+0x24>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003d32:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003d36:	b133      	cbz	r3, 8003d46 <TIMER_Clear+0x1a>
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10b      	bne.n	8003d54 <TIMER_Clear+0x28>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 8003d3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8003d3e:	2202      	movs	r2, #2
 8003d40:	611a      	str	r2, [r3, #16]
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003d42:	2000      	movs	r0, #0
 8003d44:	4770      	bx	lr
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8003d46:	6942      	ldr	r2, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8003d48:	2102      	movs	r1, #2
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	6111      	str	r1, [r2, #16]
 8003d4e:	4770      	bx	lr
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8003d50:	2001      	movs	r0, #1
 8003d52:	4770      	bx	lr
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003d54:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003d56:	4770      	bx	lr

08003d58 <INTERRUPT_Init>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d58:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <INTERRUPT_Init+0x84>)

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8003d5a:	b4f0      	push	{r4, r5, r6, r7}
 8003d5c:	68db      	ldr	r3, [r3, #12]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003d5e:	7804      	ldrb	r4, [r0, #0]
 8003d60:	7841      	ldrb	r1, [r0, #1]
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8003d62:	7887      	ldrb	r7, [r0, #2]
 8003d64:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d68:	f1c3 0507 	rsb	r5, r3, #7
 8003d6c:	2d06      	cmp	r5, #6
 8003d6e:	bf28      	it	cs
 8003d70:	2506      	movcs	r5, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d72:	b34b      	cbz	r3, 8003dc8 <INTERRUPT_Init+0x70>
 8003d74:	1e5e      	subs	r6, r3, #1
 8003d76:	2201      	movs	r2, #1
 8003d78:	40b2      	lsls	r2, r6
 8003d7a:	3a01      	subs	r2, #1
 8003d7c:	ea02 0307 	and.w	r3, r2, r7

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	2201      	movs	r2, #1
 8003d82:	40aa      	lsls	r2, r5
 8003d84:	3a01      	subs	r2, #1
 8003d86:	400a      	ands	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003d88:	b261      	sxtb	r1, r4

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8a:	40b2      	lsls	r2, r6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003d8c:	2900      	cmp	r1, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003d8e:	ea43 0302 	orr.w	r3, r3, r2
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003d92:	db1b      	blt.n	8003dcc <INTERRUPT_Init+0x74>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d94:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
 8003d98:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
  if (handler->enable_at_init == true)
 8003da4:	78c3      	ldrb	r3, [r0, #3]
 8003da6:	b163      	cbz	r3, 8003dc2 <INTERRUPT_Init+0x6a>
 8003da8:	7802      	ldrb	r2, [r0, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003daa:	b253      	sxtb	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	db08      	blt.n	8003dc2 <INTERRUPT_Init+0x6a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db0:	f002 021f 	and.w	r2, r2, #31
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	2101      	movs	r1, #1
 8003db8:	4809      	ldr	r0, [pc, #36]	; (8003de0 <INTERRUPT_Init+0x88>)
 8003dba:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8003dc6:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc8:	461e      	mov	r6, r3
 8003dca:	e7d9      	b.n	8003d80 <INTERRUPT_Init+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dcc:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <INTERRUPT_Init+0x8c>)
 8003dce:	f004 040f 	and.w	r4, r4, #15
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4422      	add	r2, r4
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	7613      	strb	r3, [r2, #24]
 8003dda:	e7e3      	b.n	8003da4 <INTERRUPT_Init+0x4c>
 8003ddc:	e000ed00 	.word	0xe000ed00
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ecfc 	.word	0xe000ecfc

08003de8 <I2C_MASTER_Init>:
/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8003de8:	b128      	cbz	r0, 8003df6 <I2C_MASTER_Init+0xe>
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8003dea:	b508      	push	{r3, lr}
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8003dec:	6843      	ldr	r3, [r0, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8003df2:	2000      	movs	r0, #0
 8003df4:	bd08      	pop	{r3, pc}
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003df6:	2001      	movs	r0, #1
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <I2C_MASTER_Transmit>:
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8003dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e00:	460c      	mov	r4, r1
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003e02:	6841      	ldr	r1, [r0, #4]
 8003e04:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8003e08:	4605      	mov	r5, r0
 8003e0a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003e0e:	b111      	cbz	r1, 8003e16 <I2C_MASTER_Transmit+0x1a>
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8003e10:	2002      	movs	r0, #2
 8003e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e16:	4616      	mov	r6, r2
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
 8003e18:	68af      	ldr	r7, [r5, #8]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
 8003e1a:	b914      	cbnz	r4, 8003e22 <I2C_MASTER_Transmit+0x26>
 8003e1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003e20:	b352      	cbz	r2, 8003e78 <I2C_MASTER_Transmit+0x7c>
 8003e22:	b34b      	cbz	r3, 8003e78 <I2C_MASTER_Transmit+0x7c>
 8003e24:	9a08      	ldr	r2, [sp, #32]
 8003e26:	b33a      	cbz	r2, 8003e78 <I2C_MASTER_Transmit+0x7c>
  {
  status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 8003e28:	2200      	movs	r2, #0
 8003e2a:	61ba      	str	r2, [r7, #24]

    if (ptr_runtime->tx_busy == false)
 8003e2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003e30:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d1eb      	bne.n	8003e10 <I2C_MASTER_Transmit+0x14>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
 8003e38:	603b      	str	r3, [r7, #0]
    ptr_runtime->tx_data_count = size;

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
 8003e3a:	f04f 0901 	mov.w	r9, #1

    if (ptr_runtime->tx_busy == false)
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;
 8003e3e:	9b08      	ldr	r3, [sp, #32]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
 8003e40:	f8c7 800c 	str.w	r8, [r7, #12]
    ptr_runtime->tx_busy = true;
    ptr_runtime->send_stop = send_stop;
 8003e44:	61f8      	str	r0, [r7, #28]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 8003e46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e4a:	6828      	ldr	r0, [r5, #0]

    if (ptr_runtime->tx_busy == false)
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;
 8003e4c:	60bb      	str	r3, [r7, #8]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
 8003e4e:	f887 9026 	strb.w	r9, [r7, #38]	; 0x26
 8003e52:	f7fc ff6f 	bl	8000d34 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 8003e56:	6828      	ldr	r0, [r5, #0]
 8003e58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e5c:	2110      	movs	r1, #16
 8003e5e:	f7fe fa19 	bl	8002294 <XMC_USIC_CH_SetInterruptNodePointer>

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);

    if (send_start == true)
 8003e62:	b964      	cbnz	r4, 8003e7e <I2C_MASTER_Transmit+0x82>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8003e64:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 8003e68:	682a      	ldr	r2, [r5, #0]
 8003e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e6e:	408b      	lsls	r3, r1
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8003e70:	4620      	mov	r0, r4
 8003e72:	6693      	str	r3, [r2, #104]	; 0x68
 8003e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
  {
  status = I2C_MASTER_STATUS_FAILURE;
 8003e78:	2001      	movs	r0, #1
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
} /* end of function */
 8003e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
  if (handle->runtime->bus_acquired == true)
 8003e7e:	68aa      	ldr	r2, [r5, #8]
 8003e80:	6828      	ldr	r0, [r5, #0]
 8003e82:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003e86:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8003e8a:	b963      	cbnz	r3, 8003ea6 <I2C_MASTER_Transmit+0xaa>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8003e8c:	f882 9028 	strb.w	r9, [r2, #40]	; 0x28
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8003e90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8003e98:	b2b1      	uxth	r1, r6
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	f7fc febc 	bl	8000c18 <XMC_I2C_CH_MasterStart>
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ea6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003ea8:	f043 0308 	orr.w	r3, r3, #8
 8003eac:	64c3      	str	r3, [r0, #76]	; 0x4c
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8003eae:	b2b1      	uxth	r1, r6
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	f7fc fec9 	bl	8000c48 <XMC_I2C_CH_MasterRepeatedStart>
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ebc <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4606      	mov	r6, r0
/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8003ec0:	6800      	ldr	r0, [r0, #0]
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8003ec2:	68b4      	ldr	r4, [r6, #8]
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return (channel->PSR_IICMode);
 8003ec4:	6c83      	ldr	r3, [r0, #72]	; 0x48
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 8003ec6:	f413 7fb1 	tst.w	r3, #354	; 0x162
 8003eca:	d163      	bne.n	8003f94 <I2C_MASTER_TransmitHandler+0xd8>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 8003ecc:	69a3      	ldr	r3, [r4, #24]
 8003ece:	bb4b      	cbnz	r3, 8003f24 <I2C_MASTER_TransmitHandler+0x68>
  {
    if (handle->config->txFIFO_size > 0)
 8003ed0:	6873      	ldr	r3, [r6, #4]
 8003ed2:	f893 5026 	ldrb.w	r5, [r3, #38]	; 0x26
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	f000 808b 	beq.w	8003ff2 <I2C_MASTER_TransmitHandler+0x136>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003edc:	68e1      	ldr	r1, [r4, #12]
 8003ede:	68a2      	ldr	r2, [r4, #8]
 8003ee0:	4291      	cmp	r1, r2
 8003ee2:	f0c0 80c0 	bcc.w	8004066 <I2C_MASTER_TransmitHandler+0x1aa>
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 8003ee6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003eea:	f8d0 1108 	ldr.w	r1, [r0, #264]	; 0x108
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003eee:	b253      	sxtb	r3, r2
 8003ef0:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8003efa:	db09      	blt.n	8003f10 <I2C_MASTER_TransmitHandler+0x54>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	3360      	adds	r3, #96	; 0x60
 8003f00:	f002 021f 	and.w	r2, r2, #31
 8003f04:	2101      	movs	r1, #1
 8003f06:	4d83      	ldr	r5, [pc, #524]	; (8004114 <I2C_MASTER_TransmitHandler+0x258>)
 8003f08:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8003f10:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8003f14:	051d      	lsls	r5, r3, #20
 8003f16:	d5fb      	bpl.n	8003f10 <I2C_MASTER_TransmitHandler+0x54>

          if (ptr_runtime->bus_acquired == true)
 8003f18:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 80ca 	bne.w	80040b6 <I2C_MASTER_TransmitHandler+0x1fa>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8003f24:	6873      	ldr	r3, [r6, #4]
 8003f26:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	d07f      	beq.n	800402e <I2C_MASTER_TransmitHandler+0x172>
    {
      if ((handle->config->rxFIFO_size > 0))
 8003f2e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8095 	beq.w	8004062 <I2C_MASTER_TransmitHandler+0x1a6>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8003f38:	2101      	movs	r1, #1
 8003f3a:	fa01 f502 	lsl.w	r5, r1, r2
 8003f3e:	4099      	lsls	r1, r3
 8003f40:	42a9      	cmp	r1, r5
 8003f42:	bf28      	it	cs
 8003f44:	4629      	movcs	r1, r5
 8003f46:	b2cd      	uxtb	r5, r1
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003f48:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f50:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8003f54:	4602      	mov	r2, r0
 8003f56:	e008      	b.n	8003f6a <I2C_MASTER_TransmitHandler+0xae>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003f58:	f7fc feb6 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 8003f5c:	68e3      	ldr	r3, [r4, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60e3      	str	r3, [r4, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 8003f62:	68e3      	ldr	r3, [r4, #12]
 8003f64:	42ab      	cmp	r3, r5
 8003f66:	d26f      	bcs.n	8004048 <I2C_MASTER_TransmitHandler+0x18c>
 8003f68:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003f6a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8003f6e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003f72:	4610      	mov	r0, r2
 8003f74:	d168      	bne.n	8004048 <I2C_MASTER_TransmitHandler+0x18c>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	68a1      	ldr	r1, [r4, #8]
 8003f7a:	428b      	cmp	r3, r1
 8003f7c:	d264      	bcs.n	8004048 <I2C_MASTER_TransmitHandler+0x18c>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	4299      	cmp	r1, r3
 8003f84:	d1e8      	bne.n	8003f58 <I2C_MASTER_TransmitHandler+0x9c>
 8003f86:	6a23      	ldr	r3, [r4, #32]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d1e5      	bne.n	8003f58 <I2C_MASTER_TransmitHandler+0x9c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fc feb1 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 8003f92:	e7e3      	b.n	8003f5c <I2C_MASTER_TransmitHandler+0xa0>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003f94:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8003f98:	6873      	ldr	r3, [r6, #4]
 8003f9a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003f9e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8003fa2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003faa:	6402      	str	r2, [r0, #64]	; 0x40
 8003fac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003fae:	b139      	cbz	r1, 8003fc0 <I2C_MASTER_TransmitHandler+0x104>
 8003fb0:	06a5      	lsls	r5, r4, #26
 8003fb2:	d505      	bpl.n	8003fc0 <I2C_MASTER_TransmitHandler+0x104>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8003fb4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003fb6:	f043 0320 	orr.w	r3, r3, #32
 8003fba:	64c3      	str	r3, [r0, #76]	; 0x4c
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
    handle->config->nack_cbhandler();
 8003fbc:	4788      	blx	r1
 8003fbe:	6873      	ldr	r3, [r6, #4]
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	b142      	cbz	r2, 8003fd6 <I2C_MASTER_TransmitHandler+0x11a>
 8003fc4:	0661      	lsls	r1, r4, #25
 8003fc6:	d506      	bpl.n	8003fd6 <I2C_MASTER_TransmitHandler+0x11a>
}

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8003fc8:	6831      	ldr	r1, [r6, #0]
 8003fca:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd0:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
    handle->config->arbitration_cbhandler();
 8003fd2:	4790      	blx	r2
 8003fd4:	6873      	ldr	r3, [r6, #4]
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0a2      	beq.n	8003f22 <I2C_MASTER_TransmitHandler+0x66>
 8003fdc:	f414 7f81 	tst.w	r4, #258	; 0x102
 8003fe0:	d09f      	beq.n	8003f22 <I2C_MASTER_TransmitHandler+0x66>
}

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8003fe2:	6831      	ldr	r1, [r6, #0]
 8003fe4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fea:	64ca      	str	r2, [r1, #76]	; 0x4c
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 8003fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
    handle->config->error_cbhandler();
 8003ff0:	4718      	bx	r3
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003ff2:	68e2      	ldr	r2, [r4, #12]
 8003ff4:	68a3      	ldr	r3, [r4, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d369      	bcc.n	80040ce <I2C_MASTER_TransmitHandler+0x212>
        ptr_runtime->tx_data_index++;
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8003ffa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d08f      	beq.n	8003f22 <I2C_MASTER_TransmitHandler+0x66>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 8004002:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004006:	f7fc fea5 	bl	8000d54 <XMC_I2C_CH_DisableEvent>

  ptr_runtime = handle->runtime;

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
 800400a:	69e3      	ldr	r3, [r4, #28]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d06a      	beq.n	80040e6 <I2C_MASTER_TransmitHandler+0x22a>
 8004010:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004012:	6b93      	ldr	r3, [r2, #56]	; 0x38
  {
    ptr_runtime->bus_acquired = false;
    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	d4fc      	bmi.n	8004012 <I2C_MASTER_TransmitHandler+0x156>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;

  if (handle->config->tx_cbhandler != NULL)
 8004018:	6873      	ldr	r3, [r6, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 800401c:	2200      	movs	r2, #0
 800401e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8004022:	2b00      	cmp	r3, #0
 8004024:	f43f af7d 	beq.w	8003f22 <I2C_MASTER_TransmitHandler+0x66>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 8004028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ptr_runtime->tx_busy = false;

  if (handle->config->tx_cbhandler != NULL)
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 800402c:	4718      	bx	r3
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	68a2      	ldr	r2, [r4, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	4293      	cmp	r3, r2
 8004036:	d102      	bne.n	800403e <I2C_MASTER_TransmitHandler+0x182>
 8004038:	6a23      	ldr	r3, [r4, #32]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d050      	beq.n	80040e0 <I2C_MASTER_TransmitHandler+0x224>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800403e:	f7fc fe43 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }
      ptr_runtime->tx_data_index++;
 8004042:	68e3      	ldr	r3, [r4, #12]
 8004044:	3301      	adds	r3, #1
 8004046:	60e3      	str	r3, [r4, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8004048:	68b3      	ldr	r3, [r6, #8]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	f47f af67 	bne.w	8003f22 <I2C_MASTER_TransmitHandler+0x66>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 8004054:	6830      	ldr	r0, [r6, #0]
 8004056:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 800405a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800405e:	f7fc be79 	b.w	8000d54 <XMC_I2C_CH_DisableEvent>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8004062:	2502      	movs	r5, #2
 8004064:	e770      	b.n	8003f48 <I2C_MASTER_TransmitHandler+0x8c>
 8004066:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800406a:	f7fc fe73 	bl	8000d54 <XMC_I2C_CH_DisableEvent>
    if (handle->config->txFIFO_size > 0)
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800406e:	6830      	ldr	r0, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 8004070:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004078:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800407c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004080:	04da      	lsls	r2, r3, #19
 8004082:	f53f af4e 	bmi.w	8003f22 <I2C_MASTER_TransmitHandler+0x66>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004086:	68e3      	ldr	r3, [r4, #12]
 8004088:	68a2      	ldr	r2, [r4, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d805      	bhi.n	800409a <I2C_MASTER_TransmitHandler+0x1de>
 800408e:	e03f      	b.n	8004110 <I2C_MASTER_TransmitHandler+0x254>
 8004090:	68e2      	ldr	r2, [r4, #12]
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	429a      	cmp	r2, r3
 8004096:	f4bf af44 	bcs.w	8003f22 <I2C_MASTER_TransmitHandler+0x66>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	6822      	ldr	r2, [r4, #0]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 800409e:	5cd1      	ldrb	r1, [r2, r3]
 80040a0:	f7fc fe00 	bl	8000ca4 <XMC_I2C_CH_MasterTransmit>
            ptr_runtime->tx_data_index++;
 80040a4:	68e3      	ldr	r3, [r4, #12]
 80040a6:	6830      	ldr	r0, [r6, #0]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60e3      	str	r3, [r4, #12]
 80040ac:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80040b0:	04db      	lsls	r3, r3, #19
 80040b2:	d5ed      	bpl.n	8004090 <I2C_MASTER_TransmitHandler+0x1d4>
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80040b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80040ba:	f7fc fe4b 	bl	8000d54 <XMC_I2C_CH_DisableEvent>

  ptr_runtime = handle->runtime;

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
 80040be:	69e3      	ldr	r3, [r4, #28]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d01a      	beq.n	80040fa <I2C_MASTER_TransmitHandler+0x23e>
 80040c4:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80040c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
  {
    ptr_runtime->bus_acquired = false;
    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 80040c8:	0619      	lsls	r1, r3, #24
 80040ca:	d4fc      	bmi.n	80040c6 <I2C_MASTER_TransmitHandler+0x20a>
 80040cc:	e7a4      	b.n	8004018 <I2C_MASTER_TransmitHandler+0x15c>
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	6822      	ldr	r2, [r4, #0]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80040d2:	5cd1      	ldrb	r1, [r2, r3]
 80040d4:	f7fc fde6 	bl	8000ca4 <XMC_I2C_CH_MasterTransmit>
        ptr_runtime->tx_data_index++;
 80040d8:	68e3      	ldr	r3, [r4, #12]
 80040da:	3301      	adds	r3, #1
 80040dc:	60e3      	str	r3, [r4, #12]
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80040e0:	f7fc fe08 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 80040e4:	e7ad      	b.n	8004042 <I2C_MASTER_TransmitHandler+0x186>
 80040e6:	6830      	ldr	r0, [r6, #0]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
  {
    ptr_runtime->bus_acquired = false;
 80040e8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 80040ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80040ee:	f043 0310 	orr.w	r3, r3, #16
 80040f2:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
 80040f4:	f7fc fdc0 	bl	8000c78 <XMC_I2C_CH_MasterStop>
 80040f8:	e78a      	b.n	8004010 <I2C_MASTER_TransmitHandler+0x154>
 80040fa:	6830      	ldr	r0, [r6, #0]
 80040fc:	2300      	movs	r3, #0
 80040fe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8004102:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004104:	f043 0310 	orr.w	r3, r3, #16
 8004108:	64c3      	str	r3, [r0, #76]	; 0x4c
 800410a:	f7fc fdb5 	bl	8000c78 <XMC_I2C_CH_MasterStop>
 800410e:	e7d9      	b.n	80040c4 <I2C_MASTER_TransmitHandler+0x208>
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	bf00      	nop
 8004114:	e000e100 	.word	0xe000e100

08004118 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8004118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800411c:	6845      	ldr	r5, [r0, #4]
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 800411e:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
 8004122:	460e      	mov	r6, r1
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8004124:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8004128:	4604      	mov	r4, r0
 800412a:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800412e:	b111      	cbz	r1, 8004136 <I2C_MASTER_Receive+0x1e>
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8004130:	2002      	movs	r0, #2
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
}
 8004132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
 8004136:	68a7      	ldr	r7, [r4, #8]
 8004138:	4690      	mov	r8, r2
 800413a:	46b9      	mov	r9, r7

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
 800413c:	b91e      	cbnz	r6, 8004146 <I2C_MASTER_Receive+0x2e>
 800413e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004142:	2a00      	cmp	r2, #0
 8004144:	d055      	beq.n	80041f2 <I2C_MASTER_Receive+0xda>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d053      	beq.n	80041f2 <I2C_MASTER_Receive+0xda>
 800414a:	9a08      	ldr	r2, [sp, #32]
 800414c:	2a00      	cmp	r2, #0
 800414e:	d050      	beq.n	80041f2 <I2C_MASTER_Receive+0xda>
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
 8004150:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004154:	f002 0cff 	and.w	ip, r2, #255	; 0xff
 8004158:	2a00      	cmp	r2, #0
 800415a:	d1e9      	bne.n	8004130 <I2C_MASTER_Receive+0x18>
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
 800415c:	f895 a027 	ldrb.w	sl, [r5, #39]	; 0x27
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
 8004160:	9908      	ldr	r1, [sp, #32]
    if (ptr_runtime->rx_busy == false)
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
 8004162:	607b      	str	r3, [r7, #4]
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 8004164:	2201      	movs	r2, #1
 8004166:	61ba      	str	r2, [r7, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
 8004168:	6139      	str	r1, [r7, #16]
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
 800416a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
 800416e:	603b      	str	r3, [r7, #0]
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
 8004170:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
 8004174:	60b9      	str	r1, [r7, #8]
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
 8004176:	f8c7 c014 	str.w	ip, [r7, #20]
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
 800417a:	f8c7 e01c 	str.w	lr, [r7, #28]
    ptr_runtime->send_nack = send_nack;
 800417e:	6238      	str	r0, [r7, #32]
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;
 8004180:	f8c7 c00c 	str.w	ip, [r7, #12]

    if (handle->config->rxFIFO_size > 0)
 8004184:	f1ba 0f00 	cmp.w	sl, #0
 8004188:	d136      	bne.n	80041f8 <I2C_MASTER_Receive+0xe0>
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 800418a:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 800418c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
 8004194:	2e00      	cmp	r6, #0
 8004196:	f000 809c 	beq.w	80042d2 <I2C_MASTER_Receive+0x1ba>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 800419a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800419e:	3a01      	subs	r2, #1
 80041a0:	2a01      	cmp	r2, #1
 80041a2:	d90b      	bls.n	80041bc <I2C_MASTER_Receive+0xa4>
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 80041a4:	4618      	mov	r0, r3
 80041a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80041aa:	f7fc fdc3 	bl	8000d34 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 80041ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	2110      	movs	r1, #16
 80041b6:	f7fe f86d 	bl	8002294 <XMC_USIC_CH_SetInterruptNodePointer>
 80041ba:	68a7      	ldr	r7, [r4, #8]
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
  if (handle->runtime->bus_acquired == true)
 80041bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 80fa 	bne.w	80043ba <I2C_MASTER_Receive+0x2a2>
 80041c6:	6820      	ldr	r0, [r4, #0]
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
 80041c8:	2201      	movs	r2, #1
 80041ca:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 80041ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80041d0:	f043 0304 	orr.w	r3, r3, #4
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 80041d4:	fa1f f188 	uxth.w	r1, r8
 80041d8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80041da:	f7fc fd1d 	bl	8000c18 <XMC_I2C_CH_MasterStart>
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e4:	3b01      	subs	r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	f240 80f2 	bls.w	80043d0 <I2C_MASTER_Receive+0x2b8>
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
    }
    status = I2C_MASTER_STATUS_SUCCESS;
 80041ec:	2000      	movs	r0, #0
 80041ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80041f2:	2001      	movs	r0, #1
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);

  if ((handle->config->txFIFO_size > 0))
 80041f8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26

  ptr_runtime = handle->runtime;

  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 80041fc:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80041fe:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8004202:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004206:	fa02 f50a 	lsl.w	r5, r2, sl

  if ((handle->config->txFIFO_size > 0))
 800420a:	2b00      	cmp	r3, #0
 800420c:	d074      	beq.n	80042f8 <I2C_MASTER_Receive+0x1e0>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 800420e:	409a      	lsls	r2, r3
 8004210:	b2d3      	uxtb	r3, r2
 8004212:	9908      	ldr	r1, [sp, #32]
 8004214:	b2ea      	uxtb	r2, r5
 8004216:	428a      	cmp	r2, r1
 8004218:	bf28      	it	cs
 800421a:	460a      	movcs	r2, r1
 800421c:	429a      	cmp	r2, r3
 800421e:	bf28      	it	cs
 8004220:	461a      	movcs	r2, r3
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8004222:	3a01      	subs	r2, #1
 8004224:	4651      	mov	r1, sl
 8004226:	f7fe f823 	bl	8002270 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 800422a:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 800422c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8004230:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004234:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8004238:	6863      	ldr	r3, [r4, #4]
  I2C_MASTER_lReconfigureRxFIFO(handle, count);

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
 800423a:	2e00      	cmp	r6, #0
 800423c:	d05e      	beq.n	80042fc <I2C_MASTER_Receive+0x1e4>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 800423e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004242:	3b01      	subs	r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d90a      	bls.n	800425e <I2C_MASTER_Receive+0x146>
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 8004248:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800424c:	f7fc fd72 	bl	8000d34 <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004256:	2110      	movs	r1, #16
 8004258:	f7fe f81c 	bl	8002294 <XMC_USIC_CH_SetInterruptNodePointer>
 800425c:	6820      	ldr	r0, [r4, #0]
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
  if (handle->runtime->bus_acquired == true)
 800425e:	68a3      	ldr	r3, [r4, #8]
 8004260:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004264:	2a00      	cmp	r2, #0
 8004266:	f040 80dc 	bne.w	8004422 <I2C_MASTER_Receive+0x30a>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8004270:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004272:	f043 0304 	orr.w	r3, r3, #4
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8004276:	fa1f f188 	uxth.w	r1, r8
 800427a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800427c:	f7fc fccc 	bl	8000c18 <XMC_I2C_CH_MasterStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004286:	2a02      	cmp	r2, #2
 8004288:	d1b0      	bne.n	80041ec <I2C_MASTER_Receive+0xd4>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800428a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80d1 	beq.w	8004436 <I2C_MASTER_Receive+0x31e>
 8004294:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8004296:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800429a:	04db      	lsls	r3, r3, #19
 800429c:	d4a6      	bmi.n	80041ec <I2C_MASTER_Receive+0xd4>
 800429e:	e009      	b.n	80042b4 <I2C_MASTER_Receive+0x19c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80042a0:	f7fc fd12 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
        }
      ptr_runtime->tx_data_index++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80042b0:	04de      	lsls	r6, r3, #19
 80042b2:	d49b      	bmi.n	80041ec <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	428b      	cmp	r3, r1
 80042ba:	d297      	bcs.n	80041ec <I2C_MASTER_Receive+0xd4>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	4299      	cmp	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	d1ec      	bne.n	80042a0 <I2C_MASTER_Receive+0x188>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d1e9      	bne.n	80042a0 <I2C_MASTER_Receive+0x188>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80042cc:	f7fc fd12 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 80042d0:	e7e8      	b.n	80042a4 <I2C_MASTER_Receive+0x18c>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
 80042d2:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d141      	bne.n	800435e <I2C_MASTER_Receive+0x246>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	9908      	ldr	r1, [sp, #32]
 80042de:	3201      	adds	r2, #1
 80042e0:	4291      	cmp	r1, r2
 80042e2:	d102      	bne.n	80042ea <I2C_MASTER_Receive+0x1d2>
 80042e4:	2801      	cmp	r0, #1
 80042e6:	f000 80b2 	beq.w	800444e <I2C_MASTER_Receive+0x336>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc fcec 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }

      ptr_runtime->tx_data_index++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e779      	b.n	80041ec <I2C_MASTER_Receive+0xd4>
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);

  if ((handle->config->txFIFO_size > 0))
 80042f8:	4613      	mov	r3, r2
 80042fa:	e78a      	b.n	8004212 <I2C_MASTER_Receive+0xfa>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
 80042fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004300:	2b00      	cmp	r3, #0
 8004302:	d07b      	beq.n	80043fc <I2C_MASTER_Receive+0x2e4>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8004304:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800430c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8004310:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004314:	04dd      	lsls	r5, r3, #19
 8004316:	f53f af69 	bmi.w	80041ec <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	428b      	cmp	r3, r1
 8004320:	bf38      	it	cc
 8004322:	4602      	movcc	r2, r0
 8004324:	d310      	bcc.n	8004348 <I2C_MASTER_Receive+0x230>
 8004326:	e761      	b.n	80041ec <I2C_MASTER_Receive+0xd4>
 8004328:	f7fc fcce 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    if (handle->config->txFIFO_size > 0)
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004338:	04d9      	lsls	r1, r3, #19
 800433a:	f53f af57 	bmi.w	80041ec <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	428b      	cmp	r3, r1
 8004344:	f4bf af52 	bcs.w	80041ec <I2C_MASTER_Receive+0xd4>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3301      	adds	r3, #1
 800434c:	4299      	cmp	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	d1ea      	bne.n	8004328 <I2C_MASTER_Receive+0x210>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d1e7      	bne.n	8004328 <I2C_MASTER_Receive+0x210>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8004358:	f7fc fccc 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 800435c:	e7e6      	b.n	800432c <I2C_MASTER_Receive+0x214>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 800435e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004368:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800436c:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004370:	04da      	lsls	r2, r3, #19
 8004372:	f53f af3b 	bmi.w	80041ec <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	9a08      	ldr	r2, [sp, #32]
 800437a:	429a      	cmp	r2, r3
 800437c:	bf88      	it	hi
 800437e:	4613      	movhi	r3, r2
 8004380:	d810      	bhi.n	80043a4 <I2C_MASTER_Receive+0x28c>
 8004382:	e733      	b.n	80041ec <I2C_MASTER_Receive+0xd4>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8004384:	f7fc fca0 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	f8d1 3114 	ldr.w	r3, [r1, #276]	; 0x114
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004394:	04db      	lsls	r3, r3, #19
 8004396:	f53f af29 	bmi.w	80041ec <I2C_MASTER_Receive+0xd4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	f4bf af24 	bcs.w	80041ec <I2C_MASTER_Receive+0xd4>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	3201      	adds	r2, #1
 80043a8:	4293      	cmp	r3, r2
 80043aa:	4608      	mov	r0, r1
 80043ac:	d1ea      	bne.n	8004384 <I2C_MASTER_Receive+0x26c>
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d1e7      	bne.n	8004384 <I2C_MASTER_Receive+0x26c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80043b4:	f7fc fc9e 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 80043b8:	e7e6      	b.n	8004388 <I2C_MASTER_Receive+0x270>
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80043be:	f043 0308 	orr.w	r3, r3, #8
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 80043c2:	fa1f f188 	uxth.w	r1, r8
 80043c6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80043c8:	2201      	movs	r2, #1
 80043ca:	f7fc fc3d 	bl	8000c48 <XMC_I2C_CH_MasterRepeatedStart>
 80043ce:	e706      	b.n	80041de <I2C_MASTER_Receive+0xc6>
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80043d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80043d4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80043d8:	3301      	adds	r3, #1
 80043da:	4293      	cmp	r3, r2
 80043dc:	d103      	bne.n	80043e6 <I2C_MASTER_Receive+0x2ce>
 80043de:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d037      	beq.n	8004456 <I2C_MASTER_Receive+0x33e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	f7fc fc6e 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
    }
    else
    {
    I2C_MASTER_ReceiveACK(handle);
      }
    ptr_runtime->tx_data_index++;
 80043ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	f8c9 300c 	str.w	r3, [r9, #12]
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
    }
    status = I2C_MASTER_STATUS_SUCCESS;
 80043f6:	2000      	movs	r0, #0
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	f4bf aef3 	bcs.w	80041ec <I2C_MASTER_Receive+0xd4>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	3201      	adds	r2, #1
 800440a:	4293      	cmp	r3, r2
 800440c:	d102      	bne.n	8004414 <I2C_MASTER_Receive+0x2fc>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d01d      	beq.n	8004450 <I2C_MASTER_Receive+0x338>
 8004414:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004416:	f443 4372 	orr.w	r3, r3, #61952	; 0xf200
 800441a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800441c:	f7fc fc54 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
 8004420:	e766      	b.n	80042f0 <I2C_MASTER_Receive+0x1d8>
 8004422:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004424:	f043 0308 	orr.w	r3, r3, #8
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8004428:	fa1f f188 	uxth.w	r1, r8
 800442c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800442e:	2201      	movs	r2, #1
 8004430:	f7fc fc0a 	bl	8000c48 <XMC_I2C_CH_MasterRepeatedStart>
 8004434:	e724      	b.n	8004280 <I2C_MASTER_Receive+0x168>
    } /* end of while */
      }
      else
      {
        /* if it is last byte and send_nack true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	3301      	adds	r3, #1
 800443c:	4293      	cmp	r3, r2
 800443e:	d102      	bne.n	8004446 <I2C_MASTER_Receive+0x32e>
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d00b      	beq.n	800445e <I2C_MASTER_Receive+0x346>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8004446:	6820      	ldr	r0, [r4, #0]
 8004448:	f7fc fc3e 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
 800444c:	e750      	b.n	80042f0 <I2C_MASTER_Receive+0x1d8>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 800444e:	4618      	mov	r0, r3
 8004450:	f7fc fc50 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 8004454:	e74c      	b.n	80042f0 <I2C_MASTER_Receive+0x1d8>
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	f7fc fc4c 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 800445c:	e7c6      	b.n	80043ec <I2C_MASTER_Receive+0x2d4>
 800445e:	6820      	ldr	r0, [r4, #0]
 8004460:	f7fc fc48 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 8004464:	e744      	b.n	80042f0 <I2C_MASTER_Receive+0x1d8>
 8004466:	bf00      	nop

08004468 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 8004468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 800446c:	6884      	ldr	r4, [r0, #8]
  fifo_lindex = 0U;

  if (ptr_runtime->rx_busy == true)
 800446e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8004472:	2b00      	cmp	r3, #0
 8004474:	d040      	beq.n	80044f8 <I2C_MASTER_ReceiveHandler+0x90>
  {
    if (handle->config->rxFIFO_size > 0)
 8004476:	6843      	ldr	r3, [r0, #4]
 8004478:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800447c:	4606      	mov	r6, r0
 800447e:	bb63      	cbnz	r3, 80044da <I2C_MASTER_ReceiveHandler+0x72>
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8004480:	6800      	ldr	r0, [r0, #0]
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8004482:	6965      	ldr	r5, [r4, #20]
 8004484:	6867      	ldr	r7, [r4, #4]
 8004486:	f7fc fc4b 	bl	8000d20 <XMC_I2C_CH_GetReceivedData>
 800448a:	5578      	strb	r0, [r7, r5]
      ptr_runtime->rx_data_index++;
 800448c:	6963      	ldr	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800448e:	6922      	ldr	r2, [r4, #16]
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
      ptr_runtime->rx_data_index++;
 8004490:	3301      	adds	r3, #1
 8004492:	6163      	str	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8004494:	6963      	ldr	r3, [r4, #20]
 8004496:	4293      	cmp	r3, r2
 8004498:	f080 80aa 	bcs.w	80045f0 <I2C_MASTER_ReceiveHandler+0x188>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800449c:	68e2      	ldr	r2, [r4, #12]
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d229      	bcs.n	80044f8 <I2C_MASTER_ReceiveHandler+0x90>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 80044a4:	68e2      	ldr	r2, [r4, #12]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f000 80e5 	beq.w	8004678 <I2C_MASTER_ReceiveHandler+0x210>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80044ae:	6830      	ldr	r0, [r6, #0]
 80044b0:	f7fc fc0a 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 80044b4:	68e3      	ldr	r3, [r4, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60e3      	str	r3, [r4, #12]
 80044ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 80044be:	6967      	ldr	r7, [r4, #20]
 80044c0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 80044c4:	f7fc fc2c 	bl	8000d20 <XMC_I2C_CH_GetReceivedData>
 80044c8:	f808 0007 	strb.w	r0, [r8, r7]
        ptr_runtime->rx_data_index++;
 80044cc:	6963      	ldr	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80044ce:	6920      	ldr	r0, [r4, #16]
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
        ptr_runtime->rx_data_index++;
 80044d0:	3301      	adds	r3, #1
 80044d2:	6163      	str	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80044d4:	6963      	ldr	r3, [r4, #20]
 80044d6:	4283      	cmp	r3, r0
 80044d8:	d010      	beq.n	80044fc <I2C_MASTER_ReceiveHandler+0x94>
 80044da:	6833      	ldr	r3, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80044dc:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 80044e0:	f012 0508 	ands.w	r5, r2, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	d0ea      	beq.n	80044be <I2C_MASTER_ReceiveHandler+0x56>
 80044e8:	6920      	ldr	r0, [r4, #16]
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80044ea:	6961      	ldr	r1, [r4, #20]
 80044ec:	4281      	cmp	r1, r0
 80044ee:	4602      	mov	r2, r0
 80044f0:	d311      	bcc.n	8004516 <I2C_MASTER_ReceiveHandler+0xae>
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80044f2:	6963      	ldr	r3, [r4, #20]
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d059      	beq.n	80045ac <I2C_MASTER_ReceiveHandler+0x144>
 80044f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 80044fc:	6833      	ldr	r3, [r6, #0]
        ptr_runtime->rx_data_index++;

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 80044fe:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8004502:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004506:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 800450a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800450e:	6961      	ldr	r1, [r4, #20]
 8004510:	4281      	cmp	r1, r0
 8004512:	4602      	mov	r2, r0
 8004514:	d2ed      	bcs.n	80044f2 <I2C_MASTER_ReceiveHandler+0x8a>
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004516:	6872      	ldr	r2, [r6, #4]
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8004518:	6965      	ldr	r5, [r4, #20]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 800451a:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27

  if ((handle->config->txFIFO_size > 0))
 800451e:	f892 e026 	ldrb.w	lr, [r2, #38]	; 0x26
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8004522:	2201      	movs	r2, #1
 8004524:	fa02 f701 	lsl.w	r7, r2, r1
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8004528:	1b45      	subs	r5, r0, r5
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);

  if ((handle->config->txFIFO_size > 0))
 800452a:	f1be 0f00 	cmp.w	lr, #0
 800452e:	d002      	beq.n	8004536 <I2C_MASTER_ReceiveHandler+0xce>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8004530:	fa02 f20e 	lsl.w	r2, r2, lr
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	b2f8      	uxtb	r0, r7
 8004538:	42a8      	cmp	r0, r5
 800453a:	bf28      	it	cs
 800453c:	4628      	movcs	r0, r5
 800453e:	4282      	cmp	r2, r0
 8004540:	bf28      	it	cs
 8004542:	4602      	movcs	r2, r0
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8004544:	3a01      	subs	r2, #1
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd fe92 	bl	8002270 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
 800454c:	6873      	ldr	r3, [r6, #4]
 800454e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004552:	2a00      	cmp	r2, #0
 8004554:	d060      	beq.n	8004618 <I2C_MASTER_ReceiveHandler+0x1b0>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8004556:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 800455a:	2301      	movs	r3, #1
 800455c:	fa03 f501 	lsl.w	r5, r3, r1
 8004560:	4093      	lsls	r3, r2
 8004562:	42ab      	cmp	r3, r5
 8004564:	bf28      	it	cs
 8004566:	462b      	movcs	r3, r5
 8004568:	b2dd      	uxtb	r5, r3
 800456a:	2700      	movs	r7, #0
 800456c:	e008      	b.n	8004580 <I2C_MASTER_ReceiveHandler+0x118>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800456e:	f7fc fbab 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	3701      	adds	r7, #1

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 8004576:	b2fa      	uxtb	r2, r7
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
 8004578:	3301      	adds	r3, #1

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 800457a:	4295      	cmp	r5, r2
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
 800457c:	60e3      	str	r3, [r4, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 800457e:	d949      	bls.n	8004614 <I2C_MASTER_ReceiveHandler+0x1ac>
 8004580:	6832      	ldr	r2, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8004582:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8004586:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800458a:	4610      	mov	r0, r2
 800458c:	d142      	bne.n	8004614 <I2C_MASTER_ReceiveHandler+0x1ac>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	68a1      	ldr	r1, [r4, #8]
 8004592:	428b      	cmp	r3, r1
 8004594:	d23e      	bcs.n	8004614 <I2C_MASTER_ReceiveHandler+0x1ac>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	4299      	cmp	r1, r3
 800459c:	d1e7      	bne.n	800456e <I2C_MASTER_ReceiveHandler+0x106>
 800459e:	6a23      	ldr	r3, [r4, #32]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d1e4      	bne.n	800456e <I2C_MASTER_ReceiveHandler+0x106>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7fc fba5 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 80045aa:	e7e2      	b.n	8004572 <I2C_MASTER_ReceiveHandler+0x10a>
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 80045ac:	6830      	ldr	r0, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 80045ae:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80045b2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045b6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 80045ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80045c0:	6403      	str	r3, [r0, #64]	; 0x40

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 80045c2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d096      	beq.n	80044f8 <I2C_MASTER_ReceiveHandler+0x90>
/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 80045ca:	68b4      	ldr	r4, [r6, #8]

  if (ptr_runtime->send_stop == true)
 80045cc:	69e3      	ldr	r3, [r4, #28]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d02f      	beq.n	8004632 <I2C_MASTER_ReceiveHandler+0x1ca>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80045d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ptr_runtime->bus_acquired = false;

    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 80045d4:	0619      	lsls	r1, r3, #24
 80045d6:	d4fc      	bmi.n	80045d2 <I2C_MASTER_ReceiveHandler+0x16a>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
  ptr_runtime->tx_busy = false;

  if (handle->config->rx_cbhandler != NULL)
 80045d8:	6873      	ldr	r3, [r6, #4]
 80045da:	695a      	ldr	r2, [r3, #20]
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 80045dc:	2300      	movs	r3, #0
 80045de:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 80045e2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 80045e6:	2a00      	cmp	r2, #0
 80045e8:	d086      	beq.n	80044f8 <I2C_MASTER_ReceiveHandler+0x90>
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 80045ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ptr_runtime->tx_busy = false;

  if (handle->config->rx_cbhandler != NULL)
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 80045ee:	4710      	bx	r2
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 80045f0:	6830      	ldr	r0, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 80045f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80045f8:	6403      	str	r3, [r0, #64]	; 0x40
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 80045fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f43f af7a 	beq.w	80044f8 <I2C_MASTER_ReceiveHandler+0x90>
/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8004604:	68b4      	ldr	r4, [r6, #8]

  if (ptr_runtime->send_stop == true)
 8004606:	69e3      	ldr	r3, [r4, #28]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d020      	beq.n	800464e <I2C_MASTER_ReceiveHandler+0x1e6>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800460c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ptr_runtime->bus_acquired = false;

    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 800460e:	061b      	lsls	r3, r3, #24
 8004610:	d4fc      	bmi.n	800460c <I2C_MASTER_ReceiveHandler+0x1a4>
 8004612:	e7e1      	b.n	80045d8 <I2C_MASTER_ReceiveHandler+0x170>
 8004614:	6922      	ldr	r2, [r4, #16]
 8004616:	e76c      	b.n	80044f2 <I2C_MASTER_ReceiveHandler+0x8a>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8004618:	68e3      	ldr	r3, [r4, #12]
 800461a:	68a2      	ldr	r2, [r4, #8]
 800461c:	3301      	adds	r3, #1
 800461e:	4293      	cmp	r3, r2
 8004620:	d023      	beq.n	800466a <I2C_MASTER_ReceiveHandler+0x202>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8004622:	6830      	ldr	r0, [r6, #0]
 8004624:	f7fc fb50 	bl	8000cc8 <XMC_I2C_CH_MasterReceiveAck>
         else
         {
           I2C_MASTER_ReceiveACK(handle);
         }

         ptr_runtime->tx_data_index++;
 8004628:	68e3      	ldr	r3, [r4, #12]
 800462a:	6922      	ldr	r2, [r4, #16]
 800462c:	3301      	adds	r3, #1
 800462e:	60e3      	str	r3, [r4, #12]
 8004630:	e75f      	b.n	80044f2 <I2C_MASTER_ReceiveHandler+0x8a>
 8004632:	6b83      	ldr	r3, [r0, #56]	; 0x38

  ptr_runtime = handle->runtime;

  if (ptr_runtime->send_stop == true)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004634:	061d      	lsls	r5, r3, #24
 8004636:	d4fc      	bmi.n	8004632 <I2C_MASTER_ReceiveHandler+0x1ca>

    ptr_runtime->bus_acquired = false;
 8004638:	2300      	movs	r3, #0
 800463a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800463e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004640:	f043 0310 	orr.w	r3, r3, #16
 8004644:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
 8004646:	f7fc fb17 	bl	8000c78 <XMC_I2C_CH_MasterStop>
 800464a:	6830      	ldr	r0, [r6, #0]
 800464c:	e7c1      	b.n	80045d2 <I2C_MASTER_ReceiveHandler+0x16a>
 800464e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  ptr_runtime = handle->runtime;

  if (ptr_runtime->send_stop == true)
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8004650:	061a      	lsls	r2, r3, #24
 8004652:	d4fc      	bmi.n	800464e <I2C_MASTER_ReceiveHandler+0x1e6>

    ptr_runtime->bus_acquired = false;
 8004654:	2300      	movs	r3, #0
 8004656:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800465a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800465c:	f043 0310 	orr.w	r3, r3, #16
 8004660:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004662:	f7fc fb09 	bl	8000c78 <XMC_I2C_CH_MasterStop>
 8004666:	6830      	ldr	r0, [r6, #0]
 8004668:	e7d0      	b.n	800460c <I2C_MASTER_ReceiveHandler+0x1a4>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 800466a:	6a23      	ldr	r3, [r4, #32]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d1d8      	bne.n	8004622 <I2C_MASTER_ReceiveHandler+0x1ba>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8004670:	6830      	ldr	r0, [r6, #0]
 8004672:	f7fc fb3f 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 8004676:	e7d7      	b.n	8004628 <I2C_MASTER_ReceiveHandler+0x1c0>
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 8004678:	6a23      	ldr	r3, [r4, #32]
 800467a:	2b01      	cmp	r3, #1
 800467c:	f47f af17 	bne.w	80044ae <I2C_MASTER_ReceiveHandler+0x46>
 8004680:	6830      	ldr	r0, [r6, #0]
 8004682:	f7fc fb37 	bl	8000cf4 <XMC_I2C_CH_MasterReceiveNack>
 8004686:	e715      	b.n	80044b4 <I2C_MASTER_ReceiveHandler+0x4c>

08004688 <I2C_MASTER_AbortTransmit>:
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8004688:	6843      	ldr	r3, [r0, #4]
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 800468a:	b510      	push	{r4, lr}
 800468c:	4604      	mov	r4, r0
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800468e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8004692:	b150      	cbz	r0, 80046aa <I2C_MASTER_AbortTransmit+0x22>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8004694:	f110 30ff 	adds.w	r0, r0, #4294967295
 8004698:	bf18      	it	ne
 800469a:	2001      	movne	r0, #1
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 80046a0:	2102      	movs	r1, #2
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 80046a2:	430a      	orrs	r2, r1
 80046a4:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 80046a6:	6699      	str	r1, [r3, #104]	; 0x68

  return (status);
}
 80046a8:	bd10      	pop	{r4, pc}
  handle->runtime->tx_busy = false;
  handle->runtime->tx_data = NULL;
  handle->runtime->bus_acquired = false;

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 80046aa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
  handle->runtime->tx_busy = false;
 80046ae:	68a3      	ldr	r3, [r4, #8]
 80046b0:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
  handle->runtime->tx_data = NULL;
 80046b4:	6018      	str	r0, [r3, #0]
  handle->runtime->bus_acquired = false;
 80046b6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 80046ba:	b152      	cbz	r2, 80046d2 <I2C_MASTER_AbortTransmit+0x4a>
  {
    /*Disable the transmit FIFO event*/
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80046bc:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 80046be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80046c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 80046c6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80046ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80046ce:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80046d2:	6820      	ldr	r0, [r4, #0]
 80046d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80046d8:	f7fc fb3c 	bl	8000d54 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 80046dc:	2000      	movs	r0, #0
 80046de:	e7dd      	b.n	800469c <I2C_MASTER_AbortTransmit+0x14>

080046e0 <I2C_MASTER_AbortReceive>:
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80046e0:	6842      	ldr	r2, [r0, #4]
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
 80046e2:	b508      	push	{r3, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80046e4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80046e8:	b123      	cbz	r3, 80046f4 <I2C_MASTER_AbortReceive+0x14>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 80046ea:	f113 30ff 	adds.w	r0, r3, #4294967295
 80046ee:	bf18      	it	ne
 80046f0:	2001      	movne	r0, #1
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }

  return (status);
}
 80046f2:	bd08      	pop	{r3, pc}
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 80046f4:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
 80046f8:	6882      	ldr	r2, [r0, #8]
 80046fa:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
  handle->runtime->tx_busy = false;
  handle->runtime->rx_data = NULL;
 80046fe:	6053      	str	r3, [r2, #4]

static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
  handle->runtime->tx_busy = false;
 8004700:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;
 8004704:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8004708:	6802      	ldr	r2, [r0, #0]
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800470a:	b951      	cbnz	r1, 8004722 <I2C_MASTER_AbortReceive+0x42>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 800470c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800470e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004712:	6413      	str	r3, [r2, #64]	; 0x40
 8004714:	6800      	ldr	r0, [r0, #0]
 8004716:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800471a:	f7fc fb1b 	bl	8000d54 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 800471e:	2000      	movs	r0, #0
 8004720:	bd08      	pop	{r3, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8004722:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8004726:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800472a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800472e:	e7f1      	b.n	8004714 <I2C_MASTER_AbortReceive+0x34>

08004730 <i2c_master_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void i2c_master_0_disable_io(void)
{
 8004730:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8004732:	4806      	ldr	r0, [pc, #24]	; (800474c <i2c_master_0_disable_io+0x1c>)
 8004734:	2105      	movs	r1, #5
 8004736:	2200      	movs	r2, #0
 8004738:	f7fc f9e8 	bl	8000b0c <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, XMC_GPIO_MODE_INPUT_TRISTATE);
 800473c:	4804      	ldr	r0, [pc, #16]	; (8004750 <i2c_master_0_disable_io+0x20>)
 800473e:	2108      	movs	r1, #8
 8004740:	2200      	movs	r2, #0
}
 8004742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
};

static void i2c_master_0_disable_io(void)
{
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, XMC_GPIO_MODE_INPUT_TRISTATE);
 8004746:	f7fc b9e1 	b.w	8000b0c <XMC_GPIO_SetMode>
 800474a:	bf00      	nop
 800474c:	48028100 	.word	0x48028100
 8004750:	48028000 	.word	0x48028000

08004754 <i2c_master_0_enable_io>:
}

static void i2c_master_0_enable_io(void)
{
 8004754:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, i2c_master_0_sda_pin_config.mode);
 8004756:	4806      	ldr	r0, [pc, #24]	; (8004770 <i2c_master_0_enable_io+0x1c>)
 8004758:	2105      	movs	r1, #5
 800475a:	22d0      	movs	r2, #208	; 0xd0
 800475c:	f7fc f9d6 	bl	8000b0c <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, i2c_master_0_scl_pin_config.mode);
 8004760:	4804      	ldr	r0, [pc, #16]	; (8004774 <i2c_master_0_enable_io+0x20>)
 8004762:	2108      	movs	r1, #8
 8004764:	22d0      	movs	r2, #208	; 0xd0
}
 8004766:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

static void i2c_master_0_enable_io(void)
{
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, i2c_master_0_sda_pin_config.mode);
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, i2c_master_0_scl_pin_config.mode);
 800476a:	f7fc b9cf 	b.w	8000b0c <XMC_GPIO_SetMode>
 800476e:	bf00      	nop
 8004770:	48028100 	.word	0x48028100
 8004774:	48028000 	.word	0x48028000

08004778 <i2c_master_0_init>:
  .config = &i2c_master_0_config,
  .runtime = &i2c_master_0_runtime,
};

void i2c_master_0_init(void)
{
 8004778:	b510      	push	{r4, lr}

  const uint32_t enabled_channel_events = (uint32_t)(XMC_USIC_CH_EVENT_TRANSMIT_BUFFER | 
XMC_USIC_CH_EVENT_STANDARD_RECEIVE | 
XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE);

  XMC_I2C_CH_Init(XMC_I2C0_CH0, &i2c_master_0_channel_config);
 800477a:	4c3f      	ldr	r4, [pc, #252]	; (8004878 <i2c_master_0_init+0x100>)
 800477c:	493f      	ldr	r1, [pc, #252]	; (800487c <i2c_master_0_init+0x104>)
 800477e:	4620      	mov	r0, r4
 8004780:	f7fc f9e8 	bl	8000b54 <XMC_I2C_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8004784:	69e3      	ldr	r3, [r4, #28]
 8004786:	f023 0307 	bic.w	r3, r3, #7
 800478a:	61e3      	str	r3, [r4, #28]
 800478c:	6a23      	ldr	r3, [r4, #32]
 800478e:	f023 0307 	bic.w	r3, r3, #7
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6223      	str	r3, [r4, #32]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 8004798:	69e3      	ldr	r3, [r4, #28]
 800479a:	f043 0320 	orr.w	r3, r3, #32
 800479e:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 80047a0:	69e3      	ldr	r3, [r4, #28]
 80047a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a6:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 80047a8:	6a23      	ldr	r3, [r4, #32]
 80047aa:	f043 0320 	orr.w	r3, r3, #32
 80047ae:	6223      	str	r3, [r4, #32]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 80047b0:	6a23      	ldr	r3, [r4, #32]
 80047b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b6:	6223      	str	r3, [r4, #32]
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX0);
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX0);
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX1);
  XMC_USIC_CH_EnableInputSync(XMC_I2C0_CH0, XMC_USIC_CH_INPUT_DX1);
    
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH0,
 80047b8:	4620      	mov	r0, r4
 80047ba:	2108      	movs	r1, #8
 80047bc:	2203      	movs	r2, #3
 80047be:	f7fd fd69 	bl	8002294 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                       ((uint32_t)3));
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH0,
 80047c2:	4620      	mov	r0, r4
 80047c4:	210c      	movs	r1, #12
 80047c6:	2203      	movs	r2, #3
 80047c8:	f7fd fd64 	bl	8002294 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                       ((uint32_t)3));
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C0_CH0,
 80047cc:	2200      	movs	r2, #0
 80047ce:	4620      	mov	r0, r4
 80047d0:	2110      	movs	r1, #16
 80047d2:	f7fd fd5f 	bl	8002294 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)0));
  XMC_I2C_CH_EnableEvent(XMC_I2C0_CH0, enabled_protocol_events);
 80047d6:	4620      	mov	r0, r4
 80047d8:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
 80047dc:	f7fc faaa 	bl	8000d34 <XMC_I2C_CH_EnableEvent>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 80047e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  XMC_USIC_CH_EnableEvent(XMC_I2C0_CH0, enabled_channel_events);
  XMC_I2C_CH_Start(XMC_I2C0_CH0);

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &i2c_master_0_sda_pin_config);
 80047e2:	4827      	ldr	r0, [pc, #156]	; (8004880 <i2c_master_0_init+0x108>)
 80047e4:	4a27      	ldr	r2, [pc, #156]	; (8004884 <i2c_master_0_init+0x10c>)
 80047e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ea:	6423      	str	r3, [r4, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80047ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ee:	f023 030f 	bic.w	r3, r3, #15
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6423      	str	r3, [r4, #64]	; 0x40
 80047f8:	2105      	movs	r1, #5
 80047fa:	f7fb fd79 	bl	80002f0 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)8, &i2c_master_0_scl_pin_config);
 80047fe:	2108      	movs	r1, #8
 8004800:	4821      	ldr	r0, [pc, #132]	; (8004888 <i2c_master_0_init+0x110>)
 8004802:	4a22      	ldr	r2, [pc, #136]	; (800488c <i2c_master_0_init+0x114>)
 8004804:	f7fb fd74 	bl	80002f0 <XMC_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004808:	4b21      	ldr	r3, [pc, #132]	; (8004890 <i2c_master_0_init+0x118>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004810:	f1c3 0107 	rsb	r1, r3, #7
 8004814:	2906      	cmp	r1, #6
 8004816:	bf28      	it	cs
 8004818:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481a:	b343      	cbz	r3, 800486e <i2c_master_0_init+0xf6>
 800481c:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800481e:	2301      	movs	r3, #1
 8004820:	408b      	lsls	r3, r1
 8004822:	3b01      	subs	r3, #1
 8004824:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004828:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4a19      	ldr	r2, [pc, #100]	; (8004894 <i2c_master_0_init+0x11c>)
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800482e:	4918      	ldr	r1, [pc, #96]	; (8004890 <i2c_master_0_init+0x118>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004830:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004832:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004836:	f882 3355 	strb.w	r3, [r2, #853]	; 0x355
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483a:	6090      	str	r0, [r2, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800483c:	68cb      	ldr	r3, [r1, #12]
 800483e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004842:	f1c3 0107 	rsb	r1, r3, #7
 8004846:	2906      	cmp	r1, #6
 8004848:	bf28      	it	cs
 800484a:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800484c:	b18b      	cbz	r3, 8004872 <i2c_master_0_init+0xfa>
 800484e:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	2301      	movs	r3, #1
 8004852:	408b      	lsls	r3, r1
 8004854:	3b01      	subs	r3, #1
 8004856:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800485a:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <i2c_master_0_init+0x11c>)
 8004860:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004862:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004866:	f882 3357 	strb.w	r3, [r2, #855]	; 0x357
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486a:	6091      	str	r1, [r2, #8]
 800486c:	bd10      	pop	{r4, pc}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486e:	461a      	mov	r2, r3
 8004870:	e7d5      	b.n	800481e <i2c_master_0_init+0xa6>
 8004872:	461a      	mov	r2, r3
 8004874:	e7ec      	b.n	8004850 <i2c_master_0_init+0xd8>
 8004876:	bf00      	nop
 8004878:	40030000 	.word	0x40030000
 800487c:	0800ddcc 	.word	0x0800ddcc
 8004880:	48028100 	.word	0x48028100
 8004884:	0800dd88 	.word	0x0800dd88
 8004888:	48028000 	.word	0x48028000
 800488c:	0800dd94 	.word	0x0800dd94
 8004890:	e000ed00 	.word	0xe000ed00
 8004894:	e000e100 	.word	0xe000e100

08004898 <USIC0_1_IRQHandler>:
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),60,0));
  NVIC_EnableIRQ((IRQn_Type)87);}
/*Transmit ISR*/
void i2c_master_0_TX_HANDLER()
{
  I2C_MASTER_TransmitHandler(&i2c_master_0);
 8004898:	4801      	ldr	r0, [pc, #4]	; (80048a0 <USIC0_1_IRQHandler+0x8>)
 800489a:	f7ff bb0f 	b.w	8003ebc <I2C_MASTER_TransmitHandler>
 800489e:	bf00      	nop
 80048a0:	1ffed158 	.word	0x1ffed158

080048a4 <USIC0_3_IRQHandler>:
}
/*Receive ISR*/
void i2c_master_0_RX_HANDLER()
{
  I2C_MASTER_ReceiveHandler(&i2c_master_0);
 80048a4:	4801      	ldr	r0, [pc, #4]	; (80048ac <USIC0_3_IRQHandler+0x8>)
 80048a6:	f7ff bddf 	b.w	8004468 <I2C_MASTER_ReceiveHandler>
 80048aa:	bf00      	nop
 80048ac:	1ffed158 	.word	0x1ffed158

080048b0 <GLOBAL_CCU8_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80048b0:	7b43      	ldrb	r3, [r0, #13]
 80048b2:	b10b      	cbz	r3, 80048b8 <GLOBAL_CCU8_Init+0x8>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 80048b4:	2000      	movs	r0, #0
 80048b6:	4770      	bx	lr
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 80048b8:	b510      	push	{r4, lr}
 80048ba:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 80048bc:	6880      	ldr	r0, [r0, #8]
 80048be:	7b21      	ldrb	r1, [r4, #12]
 80048c0:	f7fc f880 	bl	80009c4 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 80048c4:	68a2      	ldr	r2, [r4, #8]
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80048c6:	68d3      	ldr	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80048c8:	2101      	movs	r1, #1
 80048ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ce:	60d3      	str	r3, [r2, #12]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 80048d0:	2000      	movs	r0, #0
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80048d2:	7361      	strb	r1, [r4, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 80048d4:	bd10      	pop	{r4, pc}
 80048d6:	bf00      	nop

080048d8 <GLOBAL_CCU4_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80048d8:	7b43      	ldrb	r3, [r0, #13]
 80048da:	b10b      	cbz	r3, 80048e0 <GLOBAL_CCU4_Init+0x8>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 80048dc:	2000      	movs	r0, #0
 80048de:	4770      	bx	lr
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80048e0:	b510      	push	{r4, lr}
 80048e2:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80048e4:	6880      	ldr	r0, [r0, #8]
 80048e6:	7b21      	ldrb	r1, [r4, #12]
 80048e8:	f7fb ffea 	bl	80008c0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80048ec:	68a2      	ldr	r2, [r4, #8]
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80048ee:	68d3      	ldr	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80048f0:	2101      	movs	r1, #1
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	60d3      	str	r3, [r2, #12]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 80048f8:	2000      	movs	r0, #0
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80048fa:	7361      	strb	r1, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	bf00      	nop

08004900 <E_EEPROM_XMC4_Init>:

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL));

  status = E_EEPROM_XMC4_STATUS_OK;
  
  if (handle->initialized == (bool)false)
 8004904:	7804      	ldrb	r4, [r0, #0]

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 8004906:	b085      	sub	sp, #20

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL));

  status = E_EEPROM_XMC4_STATUS_OK;
  
  if (handle->initialized == (bool)false)
 8004908:	b11c      	cbz	r4, 8004912 <E_EEPROM_XMC4_Init+0x12>
  uint32_t sector_count;
  E_EEPROM_XMC4_STATUS_t status ;

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL));

  status = E_EEPROM_XMC4_STATUS_OK;
 800490a:	2000      	movs	r0, #0

    handle->initialized = (bool)true;
  }

  return (status);
}
 800490c:	b005      	add	sp, #20
 800490e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  status = E_EEPROM_XMC4_STATUS_OK;
  
  if (handle->initialized == (bool)false)
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 8004912:	4b7a      	ldr	r3, [pc, #488]	; (8004afc <E_EEPROM_XMC4_Init+0x1fc>)
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 8004914:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8004b0c <E_EEPROM_XMC4_Init+0x20c>
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 8004918:	4979      	ldr	r1, [pc, #484]	; (8004b00 <E_EEPROM_XMC4_Init+0x200>)

  status = E_EEPROM_XMC4_STATUS_OK;
  
  if (handle->initialized == (bool)false)
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 800491a:	605c      	str	r4, [r3, #4]
 800491c:	f241 0218 	movw	r2, #4120	; 0x1018
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 8004920:	f8c8 4004 	str.w	r4, [r8, #4]
 8004924:	588b      	ldr	r3, [r1, r2]
 8004926:	9001      	str	r0, [sp, #4]
 8004928:	f023 030f 	bic.w	r3, r3, #15
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	508b      	str	r3, [r1, r2]
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
{
  FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 8004932:	588b      	ldr	r3, [r1, r2]
    XMC_FLASH_DisableDoubleBitErrorTrap();
  
    XMC_FCE_Enable();

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 8004934:	4f73      	ldr	r7, [pc, #460]	; (8004b04 <E_EEPROM_XMC4_Init+0x204>)
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
  engine->kernel_ptr->CRC = seedvalue;
 8004936:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8004b24 <E_EEPROM_XMC4_Init+0x224>
 800493a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493e:	508b      	str	r3, [r1, r2]
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
    XMC_FLASH_DisableDoubleBitErrorTrap();
  
    XMC_FCE_Enable();
 8004940:	f7fc f8be 	bl	8000ac0 <XMC_FCE_Enable>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 8004944:	4870      	ldr	r0, [pc, #448]	; (8004b08 <E_EEPROM_XMC4_Init+0x208>)
 8004946:	f7fc f8b3 	bl	8000ab0 <XMC_FCE_Init>
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 800494a:	9400      	str	r4, [sp, #0]
 800494c:	4623      	mov	r3, r4
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 800494e:	f04f 0900 	mov.w	r9, #0

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 8004952:	f04f 0a01 	mov.w	sl, #1
 8004956:	fa0a fa03 	lsl.w	sl, sl, r3
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 800495a:	464b      	mov	r3, r9
  uint32_t written_crc;
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 800495c:	f507 5440 	add.w	r4, r7, #12288	; 0x3000
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 8004960:	46b9      	mov	r9, r7
 8004962:	461f      	mov	r7, r3
 8004964:	e003      	b.n	800496e <E_EEPROM_XMC4_Init+0x6e>
          break;
        }
      }
    }
    /* Move the block read address to one block size up starting from the bottom of sector */
    block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8004966:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000

  /* Iterate the read process until the block read address crosses sector start address or a
   * latest valid block is identified.
   */
  } while ( block_read_addr >= sector_start_addr );
 800496a:	454c      	cmp	r4, r9
 800496c:	d32c      	bcc.n	80049c8 <E_EEPROM_XMC4_Init+0xc8>

  do
  {
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 800496e:	6865      	ldr	r5, [r4, #4]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 8004970:	4865      	ldr	r0, [pc, #404]	; (8004b08 <E_EEPROM_XMC4_Init+0x208>)
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 8004972:	4621      	mov	r1, r4
 8004974:	f04f 0e00 	mov.w	lr, #0
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 8004978:	f640 72fc 	movw	r2, #4092	; 0xffc
 800497c:	ab03      	add	r3, sp, #12
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 800497e:	2d00      	cmp	r5, #0
 8004980:	d0f1      	beq.n	8004966 <E_EEPROM_XMC4_Init+0x66>
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 8004982:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004986:	ea4a 0606 	orr.w	r6, sl, r6
 800498a:	f8c8 600c 	str.w	r6, [r8, #12]

      /* If this is the first non empty block identified, then store the address as next free address */
      if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 800498e:	b90f      	cbnz	r7, 8004994 <E_EEPROM_XMC4_Init+0x94>
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8004990:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 8004994:	f851 6b04 	ldr.w	r6, [r1], #4
 8004998:	f8cb e018 	str.w	lr, [fp, #24]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 800499c:	f7fc f8a2 	bl	8000ae4 <XMC_FCE_CalculateCRC32>

  return (result);
 80049a0:	9b03      	ldr	r3, [sp, #12]
      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
      /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
      calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);

      if (calculated_crc == written_crc)
 80049a2:	429e      	cmp	r6, r3
 80049a4:	d1df      	bne.n	8004966 <E_EEPROM_XMC4_Init+0x66>
      {
        /* If both CRC matches and the current block cycle counter is greater than the previous recorded value,
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 80049a6:	4b55      	ldr	r3, [pc, #340]	; (8004afc <E_EEPROM_XMC4_Init+0x1fc>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	429d      	cmp	r5, r3
 80049ac:	d9db      	bls.n	8004966 <E_EEPROM_XMC4_Init+0x66>
 80049ae:	463b      	mov	r3, r7
 80049b0:	464f      	mov	r7, r9
 80049b2:	4699      	mov	r9, r3
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 80049b4:	4b51      	ldr	r3, [pc, #324]	; (8004afc <E_EEPROM_XMC4_Init+0x1fc>)
          e_eeprom_xmc4_sector_info.current_sector = sector;
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 80049b6:	f8c8 4004 	str.w	r4, [r8, #4]
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 80049ba:	605d      	str	r5, [r3, #4]
          e_eeprom_xmc4_sector_info.current_sector = sector;
 80049bc:	9b00      	ldr	r3, [sp, #0]
 80049be:	f8c8 3008 	str.w	r3, [r8, #8]
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
          e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 80049c2:	f8c8 9000 	str.w	r9, [r8]
 80049c6:	e001      	b.n	80049cc <E_EEPROM_XMC4_Init+0xcc>
 80049c8:	9b00      	ldr	r3, [sp, #0]
 80049ca:	464f      	mov	r7, r9

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 80049cc:	3301      	adds	r3, #1
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 80049d6:	d1ba      	bne.n	800494e <E_EEPROM_XMC4_Init+0x4e>
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 80049d8:	4949      	ldr	r1, [pc, #292]	; (8004b00 <E_EEPROM_XMC4_Init+0x200>)
  sector_count = 0U;

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 80049da:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80049de:	4c4b      	ldr	r4, [pc, #300]	; (8004b0c <E_EEPROM_XMC4_Init+0x20c>)
 80049e0:	f241 0218 	movw	r2, #4120	; 0x1018
 80049e4:	588b      	ldr	r3, [r1, r2]
 80049e6:	f023 030f 	bic.w	r3, r3, #15
 80049ea:	508b      	str	r3, [r1, r2]
 80049ec:	b130      	cbz	r0, 80049fc <E_EEPROM_XMC4_Init+0xfc>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	07d8      	lsls	r0, r3, #31
 80049f2:	d462      	bmi.n	8004aba <E_EEPROM_XMC4_Init+0x1ba>
  sector_count = 0U;

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 80049f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d008      	beq.n	8004a0e <E_EEPROM_XMC4_Init+0x10e>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 80049fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004a00:	4c42      	ldr	r4, [pc, #264]	; (8004b0c <E_EEPROM_XMC4_Init+0x20c>)
 8004a02:	0799      	lsls	r1, r3, #30
 8004a04:	d44b      	bmi.n	8004a9e <E_EEPROM_XMC4_Init+0x19e>
  sector_count = 0U;

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 8004a06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d008      	beq.n	8004a20 <E_EEPROM_XMC4_Init+0x120>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 8004a0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004a12:	4c3e      	ldr	r4, [pc, #248]	; (8004b0c <E_EEPROM_XMC4_Init+0x20c>)
 8004a14:	075a      	lsls	r2, r3, #29
 8004a16:	d45e      	bmi.n	8004ad6 <E_EEPROM_XMC4_Init+0x1d6>
  sector_count = 0U;

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 8004a18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d004      	beq.n	8004a2a <E_EEPROM_XMC4_Init+0x12a>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 8004a20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004a24:	4c39      	ldr	r4, [pc, #228]	; (8004b0c <E_EEPROM_XMC4_Init+0x20c>)
 8004a26:	071b      	lsls	r3, r3, #28
 8004a28:	d42b      	bmi.n	8004a82 <E_EEPROM_XMC4_Init+0x182>
      {
  
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 8004a2a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004a2e:	4b37      	ldr	r3, [pc, #220]	; (8004b0c <E_EEPROM_XMC4_Init+0x20c>)
 8004a30:	b978      	cbnz	r0, 8004a52 <E_EEPROM_XMC4_Init+0x152>
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8004a32:	4a34      	ldr	r2, [pc, #208]	; (8004b04 <E_EEPROM_XMC4_Init+0x204>)
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 8004a34:	6098      	str	r0, [r3, #8]
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8004a36:	601a      	str	r2, [r3, #0]
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
{
  FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
 8004a38:	4931      	ldr	r1, [pc, #196]	; (8004b00 <E_EEPROM_XMC4_Init+0x200>)
 8004a3a:	f241 0218 	movw	r2, #4120	; 0x1018
      }
    }

    XMC_FLASH_EnableDoubleBitErrorTrap();

    handle->initialized = (bool)true;
 8004a3e:	2401      	movs	r4, #1
 8004a40:	588b      	ldr	r3, [r1, r2]
 8004a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a46:	508b      	str	r3, [r1, r2]
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	701c      	strb	r4, [r3, #0]
  }

  return (status);
}
 8004a4c:	b005      	add	sp, #20
 8004a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a52:	4a2f      	ldr	r2, [pc, #188]	; (8004b10 <E_EEPROM_XMC4_Init+0x210>)
 8004a54:	1f03      	subs	r3, r0, #4
 8004a56:	f600 74fc 	addw	r4, r0, #4092	; 0xffc
  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 8004a5a:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8004a5e:	f842 1f04 	str.w	r1, [r2, #4]!
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 8004a62:	42a3      	cmp	r3, r4
 8004a64:	d1f9      	bne.n	8004a5a <E_EEPROM_XMC4_Init+0x15a>
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 8004a66:	f8d8 3000 	ldr.w	r3, [r8]
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <E_EEPROM_XMC4_Init+0x214>)
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 8004a6c:	4927      	ldr	r1, [pc, #156]	; (8004b0c <E_EEPROM_XMC4_Init+0x20c>)
 8004a6e:	1a18      	subs	r0, r3, r0
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 8004a70:	f5b0 5080 	subs.w	r0, r0, #4096	; 0x1000
 8004a74:	bf18      	it	ne
 8004a76:	2001      	movne	r0, #1
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d9dd      	bls.n	8004a38 <E_EEPROM_XMC4_Init+0x138>
          {
            e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8004a7c:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <E_EEPROM_XMC4_Init+0x204>)
 8004a7e:	600b      	str	r3, [r1, #0]
 8004a80:	e7da      	b.n	8004a38 <E_EEPROM_XMC4_Init+0x138>
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);

        XMC_FLASH_ClearStatus();
 8004a82:	f7fb fc0b 	bl	800029c <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8004a86:	4824      	ldr	r0, [pc, #144]	; (8004b18 <E_EEPROM_XMC4_Init+0x218>)
 8004a88:	f7fb fc16 	bl	80002b8 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 8004a8c:	f7fb fc0c 	bl	80002a8 <XMC_FLASH_GetStatus>
 8004a90:	2820      	cmp	r0, #32
 8004a92:	d12e      	bne.n	8004af2 <E_EEPROM_XMC4_Init+0x1f2>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
          break;
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	f023 0308 	bic.w	r3, r3, #8
 8004a9a:	60e3      	str	r3, [r4, #12]
 8004a9c:	e7c5      	b.n	8004a2a <E_EEPROM_XMC4_Init+0x12a>
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);

        XMC_FLASH_ClearStatus();
 8004a9e:	f7fb fbfd 	bl	800029c <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8004aa2:	481e      	ldr	r0, [pc, #120]	; (8004b1c <E_EEPROM_XMC4_Init+0x21c>)
 8004aa4:	f7fb fc08 	bl	80002b8 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 8004aa8:	f7fb fbfe 	bl	80002a8 <XMC_FLASH_GetStatus>
 8004aac:	2820      	cmp	r0, #32
 8004aae:	d120      	bne.n	8004af2 <E_EEPROM_XMC4_Init+0x1f2>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
          break;
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 8004ab0:	68e3      	ldr	r3, [r4, #12]
 8004ab2:	f023 0302 	bic.w	r3, r3, #2
 8004ab6:	60e3      	str	r3, [r4, #12]
 8004ab8:	e7a5      	b.n	8004a06 <E_EEPROM_XMC4_Init+0x106>
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);

        XMC_FLASH_ClearStatus();
 8004aba:	f7fb fbef 	bl	800029c <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8004abe:	4811      	ldr	r0, [pc, #68]	; (8004b04 <E_EEPROM_XMC4_Init+0x204>)
 8004ac0:	f7fb fbfa 	bl	80002b8 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 8004ac4:	f7fb fbf0 	bl	80002a8 <XMC_FLASH_GetStatus>
 8004ac8:	2820      	cmp	r0, #32
 8004aca:	d114      	bne.n	8004af6 <E_EEPROM_XMC4_Init+0x1f6>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
          break;
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 8004acc:	68e3      	ldr	r3, [r4, #12]
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	60e3      	str	r3, [r4, #12]
 8004ad4:	e78e      	b.n	80049f4 <E_EEPROM_XMC4_Init+0xf4>
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);

        XMC_FLASH_ClearStatus();
 8004ad6:	f7fb fbe1 	bl	800029c <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8004ada:	4811      	ldr	r0, [pc, #68]	; (8004b20 <E_EEPROM_XMC4_Init+0x220>)
 8004adc:	f7fb fbec 	bl	80002b8 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 8004ae0:	f7fb fbe2 	bl	80002a8 <XMC_FLASH_GetStatus>
 8004ae4:	2820      	cmp	r0, #32
 8004ae6:	d104      	bne.n	8004af2 <E_EEPROM_XMC4_Init+0x1f2>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
          break;
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 8004ae8:	68e3      	ldr	r3, [r4, #12]
 8004aea:	f023 0304 	bic.w	r3, r3, #4
 8004aee:	60e3      	str	r3, [r4, #12]
 8004af0:	e792      	b.n	8004a18 <E_EEPROM_XMC4_Init+0x118>
        XMC_FLASH_ClearStatus();
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 8004af2:	2004      	movs	r0, #4
 8004af4:	e7a0      	b.n	8004a38 <E_EEPROM_XMC4_Init+0x138>
 8004af6:	9800      	ldr	r0, [sp, #0]
 8004af8:	e79e      	b.n	8004a38 <E_EEPROM_XMC4_Init+0x138>
 8004afa:	bf00      	nop
 8004afc:	1ffed7f0 	.word	0x1ffed7f0
 8004b00:	58001000 	.word	0x58001000
 8004b04:	0c010000 	.word	0x0c010000
 8004b08:	0800ddd4 	.word	0x0800ddd4
 8004b0c:	1ffed194 	.word	0x1ffed194
 8004b10:	1ffed7ec 	.word	0x1ffed7ec
 8004b14:	0c01ffff 	.word	0x0c01ffff
 8004b18:	0c01c000 	.word	0x0c01c000
 8004b1c:	0c014000 	.word	0x0c014000
 8004b20:	0c018000 	.word	0x0c018000
 8004b24:	50020020 	.word	0x50020020

08004b28 <E_EEPROM_XMC4_ReadArray>:



/* Read a set of bytes from RAM Buffer */
void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t length)
{
 8004b28:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t i;
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8004b2a:	4c24      	ldr	r4, [pc, #144]	; (8004bbc <E_EEPROM_XMC4_ReadArray+0x94>)
 8004b2c:	f100 0308 	add.w	r3, r0, #8
 8004b30:	4423      	add	r3, r4

  for (i=0U; i<length; i++)
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	d040      	beq.n	8004bb8 <E_EEPROM_XMC4_ReadArray+0x90>
 8004b36:	300c      	adds	r0, #12
 8004b38:	4420      	add	r0, r4
 8004b3a:	1d0c      	adds	r4, r1, #4
 8004b3c:	4281      	cmp	r1, r0
 8004b3e:	bf38      	it	cc
 8004b40:	42a3      	cmpcc	r3, r4
 8004b42:	bf2c      	ite	cs
 8004b44:	2001      	movcs	r0, #1
 8004b46:	2000      	movcc	r0, #0
 8004b48:	2a09      	cmp	r2, #9
 8004b4a:	bf94      	ite	ls
 8004b4c:	2000      	movls	r0, #0
 8004b4e:	f000 0001 	andhi.w	r0, r0, #1
 8004b52:	b330      	cbz	r0, 8004ba2 <E_EEPROM_XMC4_ReadArray+0x7a>
 8004b54:	ea43 0001 	orr.w	r0, r3, r1
 8004b58:	0780      	lsls	r0, r0, #30
 8004b5a:	d122      	bne.n	8004ba2 <E_EEPROM_XMC4_ReadArray+0x7a>
 8004b5c:	1f14      	subs	r4, r2, #4
 8004b5e:	f3c4 048d 	ubfx	r4, r4, #2, #14
 8004b62:	3401      	adds	r4, #1
 8004b64:	00a0      	lsls	r0, r4, #2
 8004b66:	b280      	uxth	r0, r0
 8004b68:	1f1f      	subs	r7, r3, #4
 8004b6a:	460e      	mov	r6, r1
 8004b6c:	2500      	movs	r5, #0
 8004b6e:	3501      	adds	r5, #1
 8004b70:	fa1f fe85 	uxth.w	lr, r5
  {
    *(data + i) = *(address_ptr + i);
 8004b74:	f857 cf04 	ldr.w	ip, [r7, #4]!
 8004b78:	f846 cb04 	str.w	ip, [r6], #4
 8004b7c:	4574      	cmp	r4, lr
 8004b7e:	d8f6      	bhi.n	8004b6e <E_EEPROM_XMC4_ReadArray+0x46>
 8004b80:	4282      	cmp	r2, r0
 8004b82:	d019      	beq.n	8004bb8 <E_EEPROM_XMC4_ReadArray+0x90>
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 8004b84:	1c44      	adds	r4, r0, #1
 8004b86:	b2a4      	uxth	r4, r4
  {
    *(data + i) = *(address_ptr + i);
 8004b88:	5c1d      	ldrb	r5, [r3, r0]
 8004b8a:	540d      	strb	r5, [r1, r0]
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 8004b8c:	42a2      	cmp	r2, r4
 8004b8e:	d913      	bls.n	8004bb8 <E_EEPROM_XMC4_ReadArray+0x90>
 8004b90:	3002      	adds	r0, #2
 8004b92:	b280      	uxth	r0, r0
  {
    *(data + i) = *(address_ptr + i);
 8004b94:	5d1d      	ldrb	r5, [r3, r4]
 8004b96:	550d      	strb	r5, [r1, r4]
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 8004b98:	4282      	cmp	r2, r0
 8004b9a:	d90e      	bls.n	8004bba <E_EEPROM_XMC4_ReadArray+0x92>
  {
    *(data + i) = *(address_ptr + i);
 8004b9c:	5c1b      	ldrb	r3, [r3, r0]
 8004b9e:	540b      	strb	r3, [r1, r0]
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba2:	3a01      	subs	r2, #1
 8004ba4:	fa13 f282 	uxtah	r2, r3, r2
 8004ba8:	3901      	subs	r1, #1
 8004baa:	3b01      	subs	r3, #1
 8004bac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004bb0:	f801 0f01 	strb.w	r0, [r1, #1]!
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d1f9      	bne.n	8004bac <E_EEPROM_XMC4_ReadArray+0x84>
 8004bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bbc:	1ffed7f0 	.word	0x1ffed7f0

08004bc0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	4604      	mov	r4, r0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8004bc4:	1d02      	adds	r2, r0, #4
 8004bc6:	7c21      	ldrb	r1, [r4, #16]
 8004bc8:	6800      	ldr	r0, [r0, #0]
 8004bca:	f7fb fb91 	bl	80002f0 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	7c21      	ldrb	r1, [r4, #16]
 8004bd2:	7c62      	ldrb	r2, [r4, #17]
 8004bd4:	f7fb ffae 	bl	8000b34 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
 8004bd8:	2000      	movs	r0, #0
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <SystemCoreSetup>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <SystemCoreSetup+0x64>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004bde:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <SystemCoreSetup+0x68>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be0:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be2:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8004be6:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 8004be8:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8004bea:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8004bee:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <SystemCoreSetup+0x6c>)
 8004bf0:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bf2:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004bf6:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004bf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8004bfc:	4813      	ldr	r0, [pc, #76]	; (8004c4c <SystemCoreSetup+0x70>)

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004bfe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8004c02:	f241 0114 	movw	r1, #4116	; 0x1014

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8004c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8004c0a:	5842      	ldr	r2, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8004c0c:	f022 020f 	bic.w	r2, r2, #15
  temp |= PMU_FLASH_WS;
 8004c10:	f042 0204 	orr.w	r2, r2, #4
  FLASH0->FCON = temp;
 8004c14:	5042      	str	r2, [r0, r1]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	f022 0210 	bic.w	r2, r2, #16
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	f022 0208 	bic.w	r2, r2, #8
 8004c24:	615a      	str	r2, [r3, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8004c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c30:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8004c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c3e:	4770      	bx	lr
 8004c40:	e000ed00 	.word	0xe000ed00
 8004c44:	05fa0100 	.word	0x05fa0100
 8004c48:	08000000 	.word	0x08000000
 8004c4c:	58001000 	.word	0x58001000

08004c50 <CLOCK_XMC4_Init>:
{
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8004c50:	2301      	movs	r3, #1
 8004c52:	7003      	strb	r3, [r0, #0]

  return (status);
}
 8004c54:	2000      	movs	r0, #0
 8004c56:	4770      	bx	lr

08004c58 <OSCHP_GetFrequency>:
#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
}
 8004c58:	4800      	ldr	r0, [pc, #0]	; (8004c5c <OSCHP_GetFrequency+0x4>)
 8004c5a:	4770      	bx	lr
 8004c5c:	00b71b00 	.word	0x00b71b00

08004c60 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8004c60:	b530      	push	{r4, r5, lr}
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8004c62:	4d15      	ldr	r5, [pc, #84]	; (8004cb8 <SystemCoreClockSetup+0x58>)
 8004c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8004c66:	b087      	sub	sp, #28
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8004c68:	ac01      	add	r4, sp, #4
 8004c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8004c70:	a801      	add	r0, sp, #4
 8004c72:	f7fb fd1d 	bl	80006b0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7fb fbb8 	bl	80003ec <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8004c7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004c80:	f7fb fba0 	bl	80003c4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8004c84:	2006      	movs	r0, #6
 8004c86:	f7fb fbc1 	bl	800040c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8004c8a:	2164      	movs	r1, #100	; 0x64
 8004c8c:	2003      	movs	r0, #3
 8004c8e:	f7fb fc03 	bl	8000498 <XMC_SCU_CLOCK_StartUsbPll>
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <SystemCoreClockSetup+0x5c>)
 8004c94:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	6393      	str	r3, [r2, #56]	; 0x38
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8004c9c:	2002      	movs	r0, #2
 8004c9e:	f7fb fbd3 	bl	8000448 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7fb fb98 	bl	80003d8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8004ca8:	2001      	movs	r0, #1
 8004caa:	f7fb fbc3 	bl	8000434 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8004cae:	2001      	movs	r0, #1
 8004cb0:	f7fb fbb6 	bl	8000420 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8004cb4:	b007      	add	sp, #28
 8004cb6:	bd30      	pop	{r4, r5, pc}
 8004cb8:	0800de08 	.word	0x0800de08
 8004cbc:	50004600 	.word	0x50004600

08004cc0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8004cc0:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8004cc2:	4820      	ldr	r0, [pc, #128]	; (8004d44 <DAVE_Init+0x84>)
 8004cc4:	f7ff ffc4 	bl	8004c50 <CLOCK_XMC4_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
 8004cc8:	b100      	cbz	r0, 8004ccc <DAVE_Init+0xc>
  {
	 /**  Initialization of E_EEPROM_XMC4 APP instance Sec_NvM */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC4_Init(&Sec_NvM); 
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8004cca:	bd08      	pop	{r3, pc}
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);

  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of I2C_MASTER APP instance i2c_master_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0); 
 8004ccc:	481e      	ldr	r0, [pc, #120]	; (8004d48 <DAVE_Init+0x88>)
 8004cce:	f7ff f88b 	bl	8003de8 <I2C_MASTER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d1f9      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of TIMER APP instance tick_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&tick_timer); 
 8004cd6:	481d      	ldr	r0, [pc, #116]	; (8004d4c <DAVE_Init+0x8c>)
 8004cd8:	f7fe fea8 	bl	8003a2c <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1f4      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance tick_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&tick_timer_intr); 
 8004ce0:	481b      	ldr	r0, [pc, #108]	; (8004d50 <DAVE_Init+0x90>)
 8004ce2:	f7ff f839 	bl	8003d58 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d1ef      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of TIMER APP instance scheduler_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&scheduler_timer); 
 8004cea:	481a      	ldr	r0, [pc, #104]	; (8004d54 <DAVE_Init+0x94>)
 8004cec:	f7fe fe9e 	bl	8003a2c <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d1ea      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance scheduler_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&scheduler_timer_intr); 
 8004cf4:	4818      	ldr	r0, [pc, #96]	; (8004d58 <DAVE_Init+0x98>)
 8004cf6:	f7ff f82f 	bl	8003d58 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d1e5      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance reset_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&reset_pin); 
 8004cfe:	4817      	ldr	r0, [pc, #92]	; (8004d5c <DAVE_Init+0x9c>)
 8004d00:	f7ff ff5e 	bl	8004bc0 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d1e0      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of UART APP instance cunit_logger */
	 init_status = (DAVE_STATUS_t)UART_Init(&cunit_logger); 
 8004d08:	4815      	ldr	r0, [pc, #84]	; (8004d60 <DAVE_Init+0xa0>)
 8004d0a:	f7fe fcdf 	bl	80036cc <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d1db      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of USBD_VCOM APP instance console_logger */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&console_logger); 
 8004d12:	4814      	ldr	r0, [pc, #80]	; (8004d64 <DAVE_Init+0xa4>)
 8004d14:	f7fd fd66 	bl	80027e4 <USBD_VCOM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d1d6      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance vdd_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&vdd_pin); 
 8004d1c:	4812      	ldr	r0, [pc, #72]	; (8004d68 <DAVE_Init+0xa8>)
 8004d1e:	f7ff ff4f 	bl	8004bc0 <DIGITAL_IO_Init>
   }  
    if (init_status == DAVE_STATUS_SUCCESS)
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d1d1      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8004d26:	4811      	ldr	r0, [pc, #68]	; (8004d6c <DAVE_Init+0xac>)
 8004d28:	f7ff f816 	bl	8003d58 <INTERRUPT_Init>
   }
    if (init_status == DAVE_STATUS_SUCCESS)
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1cc      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t) TIMER_Init(&TIMER_Cooldwon);
 8004d30:	480f      	ldr	r0, [pc, #60]	; (8004d70 <DAVE_Init+0xb0>)
 8004d32:	f7fe fe7b 	bl	8003a2c <TIMER_Init>
   }  
   
     if (init_status == DAVE_STATUS_SUCCESS)
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d1c7      	bne.n	8004cca <DAVE_Init+0xa>
  {
	 /**  Initialization of E_EEPROM_XMC4 APP instance Sec_NvM */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC4_Init(&Sec_NvM); 
 8004d3a:	480e      	ldr	r0, [pc, #56]	; (8004d74 <DAVE_Init+0xb4>)
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8004d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   }  
   
     if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of E_EEPROM_XMC4 APP instance Sec_NvM */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC4_Init(&Sec_NvM); 
 8004d40:	f7ff bdde 	b.w	8004900 <E_EEPROM_XMC4_Init>
 8004d44:	1ffee7f4 	.word	0x1ffee7f4
 8004d48:	1ffed158 	.word	0x1ffed158
 8004d4c:	1ffed058 	.word	0x1ffed058
 8004d50:	0800dd80 	.word	0x0800dd80
 8004d54:	1ffed094 	.word	0x1ffed094
 8004d58:	0800dd7c 	.word	0x0800dd7c
 8004d5c:	0800dde0 	.word	0x0800dde0
 8004d60:	1ffed04c 	.word	0x1ffed04c
 8004d64:	1ffed7a8 	.word	0x1ffed7a8
 8004d68:	0800ddf4 	.word	0x0800ddf4
 8004d6c:	0800dd84 	.word	0x0800dd84
 8004d70:	1ffed0d0 	.word	0x1ffed0d0
 8004d74:	1ffee7f0 	.word	0x1ffee7f0

08004d78 <pal_init>:


pal_status_t pal_init(void)
{
    return PAL_STATUS_SUCCESS;
}
 8004d78:	2000      	movs	r0, #0
 8004d7a:	4770      	bx	lr

08004d7c <pal_crypt_tls_prf_sha256>:
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	b0ad      	sub	sp, #180	; 0xb4
 8004d82:	460e      	mov	r6, r1
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
 8004d84:	a801      	add	r0, sp, #4
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
 8004d86:	4692      	mov	sl, r2
 8004d88:	461d      	mov	r5, r3
 8004d8a:	f8bd 80d8 	ldrh.w	r8, [sp, #216]	; 0xd8
 8004d8e:	f8bd 70e0 	ldrh.w	r7, [sp, #224]	; 0xe0
 8004d92:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
 8004d96:	f006 fbab 	bl	800b4f0 <mbedtls_md_init>
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
 8004d9a:	b1c6      	cbz	r6, 8004dce <pal_crypt_tls_prf_sha256+0x52>
 8004d9c:	b1bd      	cbz	r5, 8004dce <pal_crypt_tls_prf_sha256+0x52>
 8004d9e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8004da0:	b1ab      	cbz	r3, 8004dce <pal_crypt_tls_prf_sha256+0x52>
 8004da2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8004da4:	b19b      	cbz	r3, 8004dce <pal_crypt_tls_prf_sha256+0x52>
        {
            break;
        }
#endif  //OPTIGA_LIB_DEBUG_NULL_CHECK

        if (sizeof(md_hmac_temp_array ) < (uint32_t)(message_digest_length + label_length + seed_length))
 8004da6:	f108 0920 	add.w	r9, r8, #32
 8004daa:	eb09 0307 	add.w	r3, r9, r7
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	dd10      	ble.n	8004dd4 <pal_crypt_tls_prf_sha256+0x58>
 8004db2:	ad0c      	add	r5, sp, #48	; 0x30
        {
            return_value = PAL_STATUS_INVALID_INPUT;
 8004db4:	2404      	movs	r4, #4
        {
            return_value = PAL_STATUS_SUCCESS;
        }
    } while (FALSE);
    
    mbedtls_md_free(&message_digest_context);
 8004db6:	a801      	add	r0, sp, #4
 8004db8:	f006 fbb4 	bl	800b524 <mbedtls_md_free>

    memset(md_hmac_temp_array, 0x00, sizeof(md_hmac_temp_array));
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	2280      	movs	r2, #128	; 0x80
 8004dc2:	f008 fd86 	bl	800d8d2 <memset>
    memset(hmac_checksum_result, 0x00, sizeof(hmac_checksum_result));    
    #undef PAL_CRYPT_DIGEST_MAX_SIZE
    return return_value;
}
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	b02d      	add	sp, #180	; 0xb4
 8004dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dce:	ad0c      	add	r5, sp, #48	; 0x30
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
 8004dd0:	2401      	movs	r4, #1
 8004dd2:	e7f0      	b.n	8004db6 <pal_crypt_tls_prf_sha256+0x3a>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
 8004dd4:	2006      	movs	r0, #6
 8004dd6:	f006 fb7d 	bl	800b4d4 <mbedtls_md_info_from_type>

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
 8004dda:	4629      	mov	r1, r5
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
 8004ddc:	4683      	mov	fp, r0

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
 8004dde:	4642      	mov	r2, r8
 8004de0:	a814      	add	r0, sp, #80	; 0x50
 8004de2:	ad0c      	add	r5, sp, #48	; 0x30
 8004de4:	f008 fd6a 	bl	800d8bc <memcpy>
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
 8004de8:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8004dea:	463a      	mov	r2, r7
 8004dec:	eb05 0009 	add.w	r0, r5, r9
 8004df0:	f008 fd64 	bl	800d8bc <memcpy>
        final_seed_length = label_length + seed_length;

        if (0 != (mbedtls_md_setup(&message_digest_context,message_digest_info,1)))
 8004df4:	a801      	add	r0, sp, #4
 8004df6:	4659      	mov	r1, fp
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f006 fbad 	bl	800b558 <mbedtls_md_setup>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d1d8      	bne.n	8004db4 <pal_crypt_tls_prf_sha256+0x38>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
 8004e02:	4631      	mov	r1, r6
 8004e04:	4652      	mov	r2, sl
 8004e06:	a801      	add	r0, sp, #4
 8004e08:	f006 fbca 	bl	800b5a0 <mbedtls_md_hmac_starts>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d1df      	bne.n	8004dd0 <pal_crypt_tls_prf_sha256+0x54>

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
        final_seed_length = label_length + seed_length;
 8004e10:	eb08 0607 	add.w	r6, r8, r7
 8004e14:	b2b6      	uxth	r6, r6
        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
        {
            break;
        }
       
        if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array + message_digest_length, final_seed_length))
 8004e16:	a914      	add	r1, sp, #80	; 0x50
 8004e18:	4632      	mov	r2, r6
 8004e1a:	a801      	add	r0, sp, #4
 8004e1c:	f006 fcb8 	bl	800b790 <mbedtls_md_hmac_update>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1d5      	bne.n	8004dd0 <pal_crypt_tls_prf_sha256+0x54>
        {
            break;
        }
        
        if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
 8004e24:	a801      	add	r0, sp, #4
 8004e26:	4629      	mov	r1, r5
 8004e28:	f006 fcc6 	bl	800b7b8 <mbedtls_md_hmac_finish>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d1cf      	bne.n	8004dd0 <pal_crypt_tls_prf_sha256+0x54>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
 8004e30:	2c00      	cmp	r4, #0
 8004e32:	d042      	beq.n	8004eba <pal_crypt_tls_prf_sha256+0x13e>
            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
            {
                break;
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, 
                            message_digest_length + final_seed_length))
 8004e34:	3620      	adds	r6, #32
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
                                  (derived_key_length % message_digest_length) : (message_digest_length);
 8004e36:	f004 081f 	and.w	r8, r4, #31
 8004e3a:	2700      	movs	r7, #0
 8004e3c:	e014      	b.n	8004e68 <pal_crypt_tls_prf_sha256+0xec>

            for (hmac_checksum_result_index = 0; hmac_checksum_result_index < hmac_result_length; 
 8004e3e:	4643      	mov	r3, r8
 8004e40:	f1b8 0f00 	cmp.w	r8, #0
 8004e44:	d00c      	beq.n	8004e60 <pal_crypt_tls_prf_sha256+0xe4>
                 hmac_checksum_result_index++)
            {
                p_derived_key[derive_key_len_index + hmac_checksum_result_index] = 
 8004e46:	1e5a      	subs	r2, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	f102 0201 	add.w	r2, r2, #1
 8004e52:	eb03 0007 	add.w	r0, r3, r7
 8004e56:	bf08      	it	eq
 8004e58:	2201      	moveq	r2, #1
 8004e5a:	a904      	add	r1, sp, #16
 8004e5c:	f008 fd2e 	bl	800d8bc <memcpy>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
             derive_key_len_index += message_digest_length)
 8004e60:	fa1f f789 	uxth.w	r7, r9
        if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
 8004e64:	42bc      	cmp	r4, r7
 8004e66:	d928      	bls.n	8004eba <pal_crypt_tls_prf_sha256+0x13e>
             derive_key_len_index += message_digest_length)
        {
            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
 8004e68:	a801      	add	r0, sp, #4
 8004e6a:	f006 fcdd 	bl	800b828 <mbedtls_md_hmac_reset>
 8004e6e:	b9f8      	cbnz	r0, 8004eb0 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, 
 8004e70:	a801      	add	r0, sp, #4
 8004e72:	4629      	mov	r1, r5
 8004e74:	4632      	mov	r2, r6
 8004e76:	f006 fc8b 	bl	800b790 <mbedtls_md_hmac_update>
 8004e7a:	b9c8      	cbnz	r0, 8004eb0 <pal_crypt_tls_prf_sha256+0x134>
                            message_digest_length + final_seed_length))
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, hmac_checksum_result))
 8004e7c:	a801      	add	r0, sp, #4
 8004e7e:	a904      	add	r1, sp, #16
 8004e80:	f006 fc9a 	bl	800b7b8 <mbedtls_md_hmac_finish>
 8004e84:	b9a0      	cbnz	r0, 8004eb0 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                                
            }

            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
 8004e86:	a801      	add	r0, sp, #4
 8004e88:	f006 fcce 	bl	800b828 <mbedtls_md_hmac_reset>
 8004e8c:	b980      	cbnz	r0, 8004eb0 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, message_digest_length))
 8004e8e:	a801      	add	r0, sp, #4
 8004e90:	4629      	mov	r1, r5
 8004e92:	2220      	movs	r2, #32
 8004e94:	f006 fc7c 	bl	800b790 <mbedtls_md_hmac_update>
 8004e98:	b950      	cbnz	r0, 8004eb0 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
 8004e9a:	a801      	add	r0, sp, #4
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f006 fc8b 	bl	800b7b8 <mbedtls_md_hmac_finish>
 8004ea2:	b928      	cbnz	r0, 8004eb0 <pal_crypt_tls_prf_sha256+0x134>
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
 8004ea4:	f107 0920 	add.w	r9, r7, #32
 8004ea8:	45a1      	cmp	r9, r4
 8004eaa:	dcc8      	bgt.n	8004e3e <pal_crypt_tls_prf_sha256+0xc2>
 8004eac:	2320      	movs	r3, #32
 8004eae:	e7ca      	b.n	8004e46 <pal_crypt_tls_prf_sha256+0xca>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
 8004eb0:	42bc      	cmp	r4, r7
 8004eb2:	bf94      	ite	ls
 8004eb4:	2400      	movls	r4, #0
 8004eb6:	2401      	movhi	r4, #1
 8004eb8:	e77d      	b.n	8004db6 <pal_crypt_tls_prf_sha256+0x3a>
                                                                    hmac_checksum_result[hmac_checksum_result_index];
            }
        }
        if (derive_key_len_index >= derived_key_length)
        {
            return_value = PAL_STATUS_SUCCESS;
 8004eba:	2400      	movs	r4, #0
 8004ebc:	e77b      	b.n	8004db6 <pal_crypt_tls_prf_sha256+0x3a>
 8004ebe:	bf00      	nop

08004ec0 <pal_crypt_encrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
 8004ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	b099      	sub	sp, #100	; 0x64
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
 8004ec6:	a80a      	add	r0, sp, #40	; 0x28
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
 8004ec8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8004eca:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 8004ece:	f8bd a094 	ldrh.w	sl, [sp, #148]	; 0x94
 8004ed2:	f89d 7098 	ldrb.w	r7, [sp, #152]	; 0x98
 8004ed6:	460e      	mov	r6, r1
 8004ed8:	4690      	mov	r8, r2
 8004eda:	461c      	mov	r4, r3
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
 8004edc:	f006 f9ba 	bl	800b254 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
 8004ee0:	b165      	cbz	r5, 8004efc <pal_crypt_encrypt_aes128_ccm+0x3c>
 8004ee2:	b15e      	cbz	r6, 8004efc <pal_crypt_encrypt_aes128_ccm+0x3c>
 8004ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ee6:	b14b      	cbz	r3, 8004efc <pal_crypt_encrypt_aes128_ccm+0x3c>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_encrypt_key))
 8004ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004eea:	b13b      	cbz	r3, 8004efc <pal_crypt_encrypt_aes128_ccm+0x3c>
 8004eec:	b134      	cbz	r4, 8004efc <pal_crypt_encrypt_aes128_ccm+0x3c>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sEncrypt, MBEDTLS_CIPHER_ID_AES, p_encrypt_key, 8 * AES128_KEY_BITS_SIZE))
 8004eee:	4622      	mov	r2, r4
 8004ef0:	a80a      	add	r0, sp, #40	; 0x28
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	f006 f9b1 	bl	800b25c <mbedtls_ccm_setkey>
 8004efa:	b138      	cbz	r0, 8004f0c <pal_crypt_encrypt_aes128_ccm+0x4c>
                                          uint8_t * p_cipher_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    #define MAC_TAG_BUFFER_SIZE     (16U)
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004efc:	2401      	movs	r4, #1
        }

        memcpy((p_cipher_text + plain_text_length), mac_output, mac_size);
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sEncrypt);
 8004efe:	a80a      	add	r0, sp, #40	; 0x28
 8004f00:	f006 f9d2 	bl	800b2a8 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    #undef MAC_TAG_BUFFER_SIZE    
    return return_status;
}
 8004f04:	4620      	mov	r0, r4
 8004f06:	b019      	add	sp, #100	; 0x64
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (0 != mbedtls_ccm_setkey(&sEncrypt, MBEDTLS_CIPHER_ID_AES, p_encrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }
        
        if (0 != mbedtls_ccm_encrypt_and_tag(&sEncrypt,
 8004f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f0e:	9602      	str	r6, [sp, #8]
 8004f10:	f10d 0b18 	add.w	fp, sp, #24
 8004f14:	e88d 0408 	stmia.w	sp, {r3, sl}
 8004f18:	9503      	str	r5, [sp, #12]
 8004f1a:	9705      	str	r7, [sp, #20]
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	f8cd b010 	str.w	fp, [sp, #16]
 8004f22:	a80a      	add	r0, sp, #40	; 0x28
 8004f24:	4641      	mov	r1, r8
 8004f26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f28:	f006 f9ca 	bl	800b2c0 <mbedtls_ccm_encrypt_and_tag>
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d1e4      	bne.n	8004efc <pal_crypt_encrypt_aes128_ccm+0x3c>
        
        {
            break;
        }

        memcpy((p_cipher_text + plain_text_length), mac_output, mac_size);
 8004f32:	eb05 0008 	add.w	r0, r5, r8
 8004f36:	4659      	mov	r1, fp
 8004f38:	463a      	mov	r2, r7
 8004f3a:	f008 fcbf 	bl	800d8bc <memcpy>
 8004f3e:	e7de      	b.n	8004efe <pal_crypt_encrypt_aes128_ccm+0x3e>

08004f40 <pal_crypt_decrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
 8004f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	b094      	sub	sp, #80	; 0x50
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
 8004f46:	a806      	add	r0, sp, #24
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
 8004f48:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004f4a:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 8004f4e:	f8bd a07c 	ldrh.w	sl, [sp, #124]	; 0x7c
 8004f52:	f89d 8080 	ldrb.w	r8, [sp, #128]	; 0x80
 8004f56:	460c      	mov	r4, r1
 8004f58:	4617      	mov	r7, r2
 8004f5a:	461e      	mov	r6, r3
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
 8004f5c:	f006 f97a 	bl	800b254 <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
 8004f60:	b165      	cbz	r5, 8004f7c <pal_crypt_decrypt_aes128_ccm+0x3c>
 8004f62:	b15c      	cbz	r4, 8004f7c <pal_crypt_decrypt_aes128_ccm+0x3c>
 8004f64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004f66:	b14b      	cbz	r3, 8004f7c <pal_crypt_decrypt_aes128_ccm+0x3c>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_decrypt_key))
 8004f68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f6a:	b13b      	cbz	r3, 8004f7c <pal_crypt_decrypt_aes128_ccm+0x3c>
 8004f6c:	b136      	cbz	r6, 8004f7c <pal_crypt_decrypt_aes128_ccm+0x3c>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
 8004f6e:	4632      	mov	r2, r6
 8004f70:	a806      	add	r0, sp, #24
 8004f72:	2102      	movs	r1, #2
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	f006 f971 	bl	800b25c <mbedtls_ccm_setkey>
 8004f7a:	b138      	cbz	r0, 8004f8c <pal_crypt_decrypt_aes128_ccm+0x4c>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004f7c:	2401      	movs	r4, #1
        {
            break;
        }
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sDecrypt);
 8004f7e:	a806      	add	r0, sp, #24
 8004f80:	f006 f992 	bl	800b2a8 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    return return_status;
}
 8004f84:	4620      	mov	r0, r4
 8004f86:	b014      	add	sp, #80	; 0x50
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
 8004f8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004f8e:	9402      	str	r4, [sp, #8]
                                          (cipher_text_length - mac_size),
 8004f90:	ebc8 0107 	rsb	r1, r8, r7
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
 8004f94:	1863      	adds	r3, r4, r1
 8004f96:	e88d 0404 	stmia.w	sp, {r2, sl}
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	9503      	str	r5, [sp, #12]
 8004f9e:	f8cd 8014 	str.w	r8, [sp, #20]
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	a806      	add	r0, sp, #24
 8004fa6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004fa8:	f006 f996 	bl	800b2d8 <mbedtls_ccm_auth_decrypt>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004fac:	1c04      	adds	r4, r0, #0
 8004fae:	bf18      	it	ne
 8004fb0:	2401      	movne	r4, #1
 8004fb2:	e7e4      	b.n	8004f7e <pal_crypt_decrypt_aes128_ccm+0x3e>

08004fb4 <pal_gpio_set_high>:
    return PAL_STATUS_SUCCESS;
}

void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8004fb4:	b130      	cbz	r0, 8004fc4 <pal_gpio_set_high+0x10>
 8004fb6:	6803      	ldr	r3, [r0, #0]
 8004fb8:	b123      	cbz	r3, 8004fc4 <pal_gpio_set_high+0x10>

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8004fba:	7c19      	ldrb	r1, [r3, #16]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	408b      	lsls	r3, r1
 8004fc2:	6053      	str	r3, [r2, #4]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <pal_gpio_set_low>:
    }
}

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8004fc8:	b138      	cbz	r0, 8004fda <pal_gpio_set_low+0x12>
 8004fca:	6803      	ldr	r3, [r0, #0]
 8004fcc:	b12b      	cbz	r3, 8004fda <pal_gpio_set_low+0x12>

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8004fce:	7c19      	ldrb	r1, [r3, #16]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fd6:	408b      	lsls	r3, r1
 8004fd8:	6053      	str	r3, [r2, #4]
 8004fda:	4770      	bx	lr

08004fdc <i2c_master_end_of_transmit_callback>:
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
}

/// @cond hidden
void i2c_master_end_of_transmit_callback(void)
{
 8004fdc:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <i2c_master_end_of_transmit_callback+0x18>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	6898      	ldr	r0, [r3, #8]
 8004fe8:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004fea:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <i2c_master_end_of_transmit_callback+0x1c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	bd08      	pop	{r3, pc}
 8004ff2:	bf00      	nop
 8004ff4:	1ffee7f8 	.word	0x1ffee7f8
 8004ff8:	1ffee7fc 	.word	0x1ffee7fc

08004ffc <i2c_master_end_of_receive_callback>:
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
}

void i2c_master_end_of_receive_callback(void)
{
 8004ffc:	b508      	push	{r3, lr}
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <i2c_master_end_of_receive_callback+0x18>)
 8005000:	681b      	ldr	r3, [r3, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8005002:	2100      	movs	r1, #0
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	6898      	ldr	r0, [r3, #8]
 8005008:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <i2c_master_end_of_receive_callback+0x1c>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	bd08      	pop	{r3, pc}
 8005012:	bf00      	nop
 8005014:	1ffee7f8 	.word	0x1ffee7f8
 8005018:	1ffee7fc 	.word	0x1ffee7fc

0800501c <i2c_master_error_detected_callback>:
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
}

void i2c_master_error_detected_callback(void)
{
 800501c:	b538      	push	{r3, r4, r5, lr}
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 800501e:	4d12      	ldr	r5, [pc, #72]	; (8005068 <i2c_master_error_detected_callback+0x4c>)
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	681c      	ldr	r4, [r3, #0]
 8005024:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8005026:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 800502a:	b9a2      	cbnz	r2, 8005056 <i2c_master_error_detected_callback+0x3a>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 800502c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 8005030:	b943      	cbnz	r3, 8005044 <i2c_master_error_detected_callback+0x28>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8005032:	682b      	ldr	r3, [r5, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8005034:	2101      	movs	r1, #1
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	6898      	ldr	r0, [r3, #8]
 800503a:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <i2c_master_error_detected_callback+0x50>)
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff fb4b 	bl	80046e0 <I2C_MASTER_AbortReceive>
 800504a:	68a2      	ldr	r2, [r4, #8]
 800504c:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1fb      	bne.n	800504c <i2c_master_error_detected_callback+0x30>
 8005054:	e7ed      	b.n	8005032 <i2c_master_error_detected_callback+0x16>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff fb16 	bl	8004688 <I2C_MASTER_AbortTransmit>
 800505c:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 800505e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 8005062:	2a00      	cmp	r2, #0
 8005064:	d1fb      	bne.n	800505e <i2c_master_error_detected_callback+0x42>
 8005066:	e7e1      	b.n	800502c <i2c_master_error_detected_callback+0x10>
 8005068:	1ffee7f8 	.word	0x1ffee7f8
 800506c:	1ffee7fc 	.word	0x1ffee7fc

08005070 <i2c_master_nack_received_callback>:

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
}

void i2c_master_nack_received_callback(void)
{
 8005070:	b538      	push	{r3, r4, r5, lr}

void i2c_master_error_detected_callback(void)
{
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 8005072:	4d12      	ldr	r5, [pc, #72]	; (80050bc <i2c_master_nack_received_callback+0x4c>)
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	681c      	ldr	r4, [r3, #0]
 8005078:	68a3      	ldr	r3, [r4, #8]
 800507a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 800507e:	b9a2      	cbnz	r2, 80050aa <i2c_master_nack_received_callback+0x3a>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 8005080:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 8005084:	b943      	cbnz	r3, 8005098 <i2c_master_nack_received_callback+0x28>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8005086:	682b      	ldr	r3, [r5, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8005088:	2101      	movs	r1, #1
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	6898      	ldr	r0, [r3, #8]
 800508e:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <i2c_master_nack_received_callback+0x50>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff fb21 	bl	80046e0 <I2C_MASTER_AbortReceive>
 800509e:	68a2      	ldr	r2, [r4, #8]
 80050a0:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1fb      	bne.n	80050a0 <i2c_master_nack_received_callback+0x30>
 80050a8:	e7ed      	b.n	8005086 <i2c_master_nack_received_callback+0x16>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7ff faec 	bl	8004688 <I2C_MASTER_AbortTransmit>
 80050b0:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 80050b2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	d1fb      	bne.n	80050b2 <i2c_master_nack_received_callback+0x42>
 80050ba:	e7e1      	b.n	8005080 <i2c_master_nack_received_callback+0x10>
 80050bc:	1ffee7f8 	.word	0x1ffee7f8
 80050c0:	1ffee7fc 	.word	0x1ffee7fc

080050c4 <i2c_master_arbitration_lost_callback>:
{
    i2c_master_error_detected_callback();
}

void i2c_master_arbitration_lost_callback(void)
{
 80050c4:	b538      	push	{r3, r4, r5, lr}

void i2c_master_error_detected_callback(void)
{
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 80050c6:	4d12      	ldr	r5, [pc, #72]	; (8005110 <i2c_master_arbitration_lost_callback+0x4c>)
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	681c      	ldr	r4, [r3, #0]
 80050cc:	68a3      	ldr	r3, [r4, #8]
 80050ce:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 80050d2:	b9a2      	cbnz	r2, 80050fe <i2c_master_arbitration_lost_callback+0x3a>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 80050d4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 80050d8:	b943      	cbnz	r3, 80050ec <i2c_master_arbitration_lost_callback+0x28>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 80050da:	682b      	ldr	r3, [r5, #0]
{
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 80050dc:	2101      	movs	r1, #1
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	6898      	ldr	r0, [r3, #8]
 80050e2:	4790      	blx	r2
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <i2c_master_arbitration_lost_callback+0x50>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7ff faf7 	bl	80046e0 <I2C_MASTER_AbortReceive>
 80050f2:	68a2      	ldr	r2, [r4, #8]
 80050f4:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1fb      	bne.n	80050f4 <i2c_master_arbitration_lost_callback+0x30>
 80050fc:	e7ed      	b.n	80050da <i2c_master_arbitration_lost_callback+0x16>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 80050fe:	4620      	mov	r0, r4
 8005100:	f7ff fac2 	bl	8004688 <I2C_MASTER_AbortTransmit>
 8005104:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8005106:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 800510a:	2a00      	cmp	r2, #0
 800510c:	d1fb      	bne.n	8005106 <i2c_master_arbitration_lost_callback+0x42>
 800510e:	e7e1      	b.n	80050d4 <i2c_master_arbitration_lost_callback+0x10>
 8005110:	1ffee7f8 	.word	0x1ffee7f8
 8005114:	1ffee7fc 	.word	0x1ffee7fc

08005118 <pal_i2c_init>:
/// @endcond

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
 8005118:	2000      	movs	r0, #0
 800511a:	4770      	bx	lr

0800511c <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
 800511c:	2000      	movs	r0, #0
 800511e:	4770      	bx	lr

08005120 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005120:	b5f0      	push	{r4, r5, r6, r7, lr}
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8005122:	4d15      	ldr	r5, [pc, #84]	; (8005178 <pal_i2c_write+0x58>)
 8005124:	682f      	ldr	r7, [r5, #0]
{
    return PAL_STATUS_SUCCESS;
}

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005126:	b083      	sub	sp, #12
 8005128:	4604      	mov	r4, r0
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 800512a:	b137      	cbz	r7, 800513a <pal_i2c_write+0x1a>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 800512c:	68a0      	ldr	r0, [r4, #8]
 800512e:	68e3      	ldr	r3, [r4, #12]
 8005130:	2102      	movs	r1, #2
 8005132:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005134:	2002      	movs	r0, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
 8005136:	b003      	add	sp, #12
 8005138:	bdf0      	pop	{r4, r5, r6, r7, pc}
//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
    {
        g_entry_count++;
 800513a:	6828      	ldr	r0, [r5, #0]
 800513c:	3001      	adds	r0, #1
 800513e:	6028      	str	r0, [r5, #0]
        if (1 == g_entry_count)
 8005140:	682e      	ldr	r6, [r5, #0]
 8005142:	2e01      	cmp	r6, #1
 8005144:	d1f2      	bne.n	800512c <pal_i2c_write+0xc>
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
 8005146:	f894 c004 	ldrb.w	ip, [r4, #4]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 800514a:	f8df e030 	ldr.w	lr, [pc, #48]	; 800517c <pal_i2c_write+0x5c>

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	460b      	mov	r3, r1
 8005152:	e88d 0044 	stmia.w	sp, {r2, r6}
 8005156:	4631      	mov	r1, r6
 8005158:	ea4f 024c 	mov.w	r2, ip, lsl #1
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 800515c:	f8ce 4000 	str.w	r4, [lr]

        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 8005160:	f7fe fe4c 	bl	8003dfc <I2C_MASTER_Transmit>
 8005164:	2800      	cmp	r0, #0
 8005166:	d0e6      	beq.n	8005136 <pal_i2c_write+0x16>
                                                             (bool)TRUE))
        {
            //If I2C Master fails to invoke the write operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005168:	68a0      	ldr	r0, [r4, #8]
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	4631      	mov	r1, r6
 800516e:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8005170:	602f      	str	r7, [r5, #0]
    return PAL_STATUS_SUCCESS;
}

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
 8005172:	4630      	mov	r0, r6
 8005174:	e7df      	b.n	8005136 <pal_i2c_write+0x16>
 8005176:	bf00      	nop
 8005178:	1ffee7fc 	.word	0x1ffee7fc
 800517c:	1ffee7f8 	.word	0x1ffee7f8

08005180 <pal_i2c_read>:
    }
    return status;
}

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005180:	b5f0      	push	{r4, r5, r6, r7, lr}
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8005182:	4e15      	ldr	r6, [pc, #84]	; (80051d8 <pal_i2c_read+0x58>)
 8005184:	6837      	ldr	r7, [r6, #0]
    }
    return status;
}

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005186:	b085      	sub	sp, #20
 8005188:	4604      	mov	r4, r0
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 800518a:	b137      	cbz	r7, 800519a <pal_i2c_read+0x1a>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 800518c:	68a0      	ldr	r0, [r4, #8]
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	2102      	movs	r1, #2
 8005192:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005194:	2002      	movs	r0, #2
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    return status;
}
 8005196:	b005      	add	sp, #20
 8005198:	bdf0      	pop	{r4, r5, r6, r7, pc}
//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
    {
        g_entry_count++;
 800519a:	6830      	ldr	r0, [r6, #0]
 800519c:	3001      	adds	r0, #1
 800519e:	6030      	str	r0, [r6, #0]
        if (1 == g_entry_count)
 80051a0:	6835      	ldr	r5, [r6, #0]
 80051a2:	2d01      	cmp	r5, #1
 80051a4:	d1f2      	bne.n	800518c <pal_i2c_read+0xc>
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
 80051a6:	f894 c004 	ldrb.w	ip, [r4, #4]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 80051aa:	f8df e030 	ldr.w	lr, [pc, #48]	; 80051dc <pal_i2c_read+0x5c>

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	9502      	str	r5, [sp, #8]
 80051b2:	e88d 0024 	stmia.w	sp, {r2, r5}
 80051b6:	460b      	mov	r3, r1
 80051b8:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80051bc:	4629      	mov	r1, r5
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 80051be:	f8ce 4000 	str.w	r4, [lr]

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 80051c2:	f7fe ffa9 	bl	8004118 <I2C_MASTER_Receive>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d0e5      	beq.n	8005196 <pal_i2c_read+0x16>
                                                            (bool)TRUE))
        {
            //If I2C Master fails to invoke the read operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 80051ca:	68a0      	ldr	r0, [r4, #8]
 80051cc:	68e3      	ldr	r3, [r4, #12]
 80051ce:	4629      	mov	r1, r5
 80051d0:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 80051d2:	6037      	str	r7, [r6, #0]
    return status;
}

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
 80051d4:	4628      	mov	r0, r5
 80051d6:	e7de      	b.n	8005196 <pal_i2c_read+0x16>
 80051d8:	1ffee7fc 	.word	0x1ffee7fc
 80051dc:	1ffee7f8 	.word	0x1ffee7f8

080051e0 <pal_i2c_set_bitrate>:
    }
    return status;
}

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80051e0:	b570      	push	{r4, r5, r6, lr}
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 80051e2:	4c15      	ldr	r4, [pc, #84]	; (8005238 <pal_i2c_set_bitrate+0x58>)
 80051e4:	6823      	ldr	r3, [r4, #0]
    }
    return status;
}

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80051e6:	4605      	mov	r5, r0
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 80051e8:	b13b      	cbz	r3, 80051fa <pal_i2c_set_bitrate+0x1a>
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 80051ea:	68eb      	ldr	r3, [r5, #12]
 80051ec:	b113      	cbz	r3, 80051f4 <pal_i2c_set_bitrate+0x14>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
 80051ee:	68a8      	ldr	r0, [r5, #8]
 80051f0:	2102      	movs	r1, #2
 80051f2:	4798      	blx	r3
    }
    return status;
}

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80051f4:	2602      	movs	r6, #2
    if (PAL_STATUS_I2C_BUSY != return_status)
    {
        pal_i2c_release((void * )p_i2c_context);
    }
    return return_status;
}
 80051f6:	4630      	mov	r0, r6
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
    {
        g_entry_count++;
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	6023      	str	r3, [r4, #0]
        if (1 == g_entry_count)
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d1f1      	bne.n	80051ea <pal_i2c_set_bitrate+0xa>
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
                                                            bitrate * 1000))
 8005206:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
 800520a:	6803      	ldr	r3, [r0, #0]
                                                            bitrate * 1000))
 800520c:	bf28      	it	cs
 800520e:	f44f 71c8 	movcs.w	r1, #400	; 0x190
 8005212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	fb02 f101 	mul.w	r1, r2, r1
 800521c:	f7fb fcd8 	bl	8000bd0 <XMC_I2C_CH_SetBaudrate>
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 8005220:	68eb      	ldr	r3, [r5, #12]
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
        }
        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c_hw_config)->channel,
                                                            bitrate * 1000))
        {
            return_status = PAL_STATUS_FAILURE;
 8005222:	1c06      	adds	r6, r0, #0
 8005224:	bf18      	it	ne
 8005226:	2601      	movne	r6, #1
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 8005228:	b113      	cbz	r3, 8005230 <pal_i2c_set_bitrate+0x50>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
 800522a:	68a8      	ldr	r0, [r5, #8]
 800522c:	4631      	mov	r1, r6
 800522e:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	6023      	str	r3, [r4, #0]
    if (PAL_STATUS_I2C_BUSY != return_status)
    {
        pal_i2c_release((void * )p_i2c_context);
    }
    return return_status;
}
 8005234:	4630      	mov	r0, r6
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	1ffee7fc 	.word	0x1ffee7fc

0800523c <cunit_console_uart_end_of_transmit_callback>:
        .logger_tx_flag = 1
};

void cunit_console_uart_end_of_transmit_callback(void)
{
    cunit_console.logger_tx_flag = 0;
 800523c:	4b01      	ldr	r3, [pc, #4]	; (8005244 <cunit_console_uart_end_of_transmit_callback+0x8>)
 800523e:	2200      	movs	r2, #0
 8005240:	715a      	strb	r2, [r3, #5]
 8005242:	4770      	bx	lr
 8005244:	1ffed1bc 	.word	0x1ffed1bc

08005248 <cunit_console_uart_end_of_receive_callback>:
}

void cunit_console_uart_end_of_receive_callback(void)
{
    cunit_console.logger_rx_flag = 0;
 8005248:	4b01      	ldr	r3, [pc, #4]	; (8005250 <cunit_console_uart_end_of_receive_callback+0x8>)
 800524a:	2200      	movs	r2, #0
 800524c:	711a      	strb	r2, [r3, #4]
 800524e:	4770      	bx	lr
 8005250:	1ffed1bc 	.word	0x1ffed1bc

08005254 <pal_logger_init>:

/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
 8005254:	b508      	push	{r3, lr}
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 8005256:	6803      	ldr	r3, [r0, #0]
 8005258:	b10b      	cbz	r3, 800525e <pal_logger_init+0xa>
            while(!USBD_VCOM_IsEnumDone()){};
            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
            return_status = PAL_STATUS_SUCCESS;
 800525a:	2000      	movs	r0, #0
 800525c:	bd08      	pop	{r3, pc}
    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
        {
            if(USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 800525e:	f7fd fb61 	bl	8002924 <USBD_VCOM_Connect>
 8005262:	b920      	cbnz	r0, 800526e <pal_logger_init+0x1a>
            {
                break;
            }

            while(!USBD_VCOM_IsEnumDone()){};
 8005264:	f7fd fb12 	bl	800288c <USBD_VCOM_IsEnumDone>
 8005268:	2800      	cmp	r0, #0
 800526a:	d0fb      	beq.n	8005264 <pal_logger_init+0x10>
 800526c:	e7f5      	b.n	800525a <pal_logger_init+0x6>
/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 800526e:	2001      	movs	r0, #1
        {
            return_status = PAL_STATUS_SUCCESS;
        }
    }while(FALSE);
    return return_status;
}
 8005270:	bd08      	pop	{r3, pc}
 8005272:	bf00      	nop

08005274 <pal_logger_write>:
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4604      	mov	r4, r0
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 8005278:	6800      	ldr	r0, [r0, #0]
 800527a:	b160      	cbz	r0, 8005296 <pal_logger_write+0x22>
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
            p_log_context->logger_tx_flag = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	7163      	strb	r3, [r4, #5]

            return_status = (int32_t)UART_Transmit(p_log_context->logger_config_ptr, (uint8_t *)p_log_data, log_data_length);
 8005280:	f7fe fa28 	bl	80036d4 <UART_Transmit>
            if (return_status != PAL_STATUS_SUCCESS)
 8005284:	b928      	cbnz	r0, 8005292 <pal_logger_write+0x1e>
            {
                break;
            }
            while (p_log_context->logger_tx_flag)
 8005286:	7963      	ldrb	r3, [r4, #5]
 8005288:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1fa      	bne.n	8005286 <pal_logger_write+0x12>
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	b280      	uxth	r0, r0
 8005294:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_SendData((int8_t *)p_log_data,(uint16_t)log_data_length))
 8005296:	4608      	mov	r0, r1
 8005298:	b291      	uxth	r1, r2
 800529a:	f7fd fb05 	bl	80028a8 <USBD_VCOM_SendData>
 800529e:	4604      	mov	r4, r0
 80052a0:	b108      	cbz	r0, 80052a6 <pal_logger_write+0x32>
 80052a2:	2001      	movs	r0, #1
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
}
 80052a4:	bd38      	pop	{r3, r4, r5, pc}
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_SendData((int8_t *)p_log_data,(uint16_t)log_data_length))
            {
                break;
            }
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 80052a6:	4802      	ldr	r0, [pc, #8]	; (80052b0 <pal_logger_write+0x3c>)
 80052a8:	f7fd f972 	bl	8002590 <CDC_Device_USBTask>
 80052ac:	4620      	mov	r0, r4
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	1fff145c 	.word	0x1fff145c

080052b4 <pal_logger_read>:
    } while(0);
    return ((pal_status_t)return_status);
}

pal_status_t pal_logger_read(void * p_logger_context, uint8_t * p_log_data, uint32_t log_data_length)
{
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4604      	mov	r4, r0
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 80052b8:	6800      	ldr	r0, [r0, #0]
 80052ba:	b160      	cbz	r0, 80052d6 <pal_logger_read+0x22>
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
            p_log_context->logger_rx_flag = 1U;
 80052bc:	2301      	movs	r3, #1
 80052be:	7123      	strb	r3, [r4, #4]
            return_status = (int32_t)UART_Receive(p_log_context->logger_config_ptr, p_log_data, log_data_length);
 80052c0:	f7fe fa3c 	bl	800373c <UART_Receive>
            if (return_status != PAL_STATUS_SUCCESS)
 80052c4:	b928      	cbnz	r0, 80052d2 <pal_logger_read+0x1e>
            {
                break;
            }
            while (p_log_context->logger_rx_flag)
 80052c6:	7923      	ldrb	r3, [r4, #4]
 80052c8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1fa      	bne.n	80052c6 <pal_logger_read+0x12>
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
 80052d2:	b280      	uxth	r0, r0
 80052d4:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_ReceiveData((int8_t * )p_log_data,(uint16_t)log_data_length))
 80052d6:	4608      	mov	r0, r1
 80052d8:	b291      	uxth	r1, r2
 80052da:	f7fd faff 	bl	80028dc <USBD_VCOM_ReceiveData>
 80052de:	4604      	mov	r4, r0
 80052e0:	b108      	cbz	r0, 80052e6 <pal_logger_read+0x32>
 80052e2:	2001      	movs	r0, #1
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
}
 80052e4:	bd38      	pop	{r3, r4, r5, pc}
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_ReceiveData((int8_t * )p_log_data,(uint16_t)log_data_length))
            {
                break;
            }
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 80052e6:	4802      	ldr	r0, [pc, #8]	; (80052f0 <pal_logger_read+0x3c>)
 80052e8:	f7fd f952 	bl	8002590 <CDC_Device_USBTask>
 80052ec:	4620      	mov	r0, r4
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	1fff145c 	.word	0x1fff145c

080052f4 <pal_os_datastore_write>:
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t offset = 0;

    switch(datastore_id)
 80052f4:	2822      	cmp	r0, #34	; 0x22


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 80052f6:	b538      	push	{r3, r4, r5, lr}
 80052f8:	4613      	mov	r3, r2
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t offset = 0;

    switch(datastore_id)
 80052fa:	d019      	beq.n	8005330 <pal_os_datastore_write+0x3c>
 80052fc:	2833      	cmp	r0, #51	; 0x33
 80052fe:	d00e      	beq.n	800531e <pal_os_datastore_write+0x2a>
 8005300:	2811      	cmp	r0, #17
 8005302:	d001      	beq.n	8005308 <pal_os_datastore_write+0x14>

pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005304:	2001      	movs	r0, #1
        {
            break;
        }
    }
    return return_status;
}
 8005306:	bd38      	pop	{r3, r4, r5, pc}
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of updating
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8005308:	2a40      	cmp	r2, #64	; 0x40
 800530a:	d8fb      	bhi.n	8005304 <pal_os_datastore_write+0x10>
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 800530c:	4d09      	ldr	r5, [pc, #36]	; (8005334 <pal_os_datastore_write+0x40>)
 800530e:	2400      	movs	r4, #0
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8005310:	1ca8      	adds	r0, r5, #2
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8005312:	706a      	strb	r2, [r5, #1]
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8005314:	702c      	strb	r4, [r5, #0]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8005316:	f008 fad1 	bl	800d8bc <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 800531a:	4620      	mov	r0, r4
 800531c:	bd38      	pop	{r3, r4, r5, pc}
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 800531e:	4c06      	ldr	r4, [pc, #24]	; (8005338 <pal_os_datastore_write+0x44>)
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8005320:	7063      	strb	r3, [r4, #1]
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8005322:	0a1d      	lsrs	r5, r3, #8
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8005324:	1ca0      	adds	r0, r4, #2
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8005326:	7025      	strb	r5, [r4, #0]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8005328:	f008 fac8 	bl	800d8bc <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 800532c:	2000      	movs	r0, #0
            break;
 800532e:	bd38      	pop	{r3, r4, r5, pc}
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the manage context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8005330:	4c02      	ldr	r4, [pc, #8]	; (800533c <pal_os_datastore_write+0x48>)
 8005332:	e7f5      	b.n	8005320 <pal_os_datastore_write+0x2c>
 8005334:	1ffed1cc 	.word	0x1ffed1cc
 8005338:	1fff1810 	.word	0x1fff1810
 800533c:	1fff17cc 	.word	0x1fff17cc

08005340 <pal_os_datastore_read>:
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint16_t data_length;
    uint8_t offset = 0;

    switch(datastore_id)
 8005340:	2822      	cmp	r0, #34	; 0x22


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8005342:	b538      	push	{r3, r4, r5, lr}
 8005344:	4614      	mov	r4, r2
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint16_t data_length;
    uint8_t offset = 0;

    switch(datastore_id)
 8005346:	d01d      	beq.n	8005384 <pal_os_datastore_read+0x44>
 8005348:	2833      	cmp	r0, #51	; 0x33
 800534a:	d00e      	beq.n	800536a <pal_os_datastore_read+0x2a>
 800534c:	2811      	cmp	r0, #17
 800534e:	d003      	beq.n	8005358 <pal_os_datastore_read+0x18>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            *p_buffer_length = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	8013      	strh	r3, [r2, #0]

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005354:	2001      	movs	r0, #1
            break;
        }
        default:
        {
            *p_buffer_length = 0;
            break;
 8005356:	bd38      	pop	{r3, r4, r5, pc}
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8005358:	4a0b      	ldr	r2, [pc, #44]	; (8005388 <pal_os_datastore_read+0x48>)
 800535a:	7815      	ldrb	r5, [r2, #0]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 800535c:	7853      	ldrb	r3, [r2, #1]
 800535e:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8005362:	2d40      	cmp	r5, #64	; 0x40
 8005364:	d906      	bls.n	8005374 <pal_os_datastore_read+0x34>

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005366:	2001      	movs	r0, #1
            break;
        }
    }

    return return_status;
}
 8005368:	bd38      	pop	{r3, r4, r5, pc}
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 800536a:	4a08      	ldr	r2, [pc, #32]	; (800538c <pal_os_datastore_read+0x4c>)
 800536c:	7815      	ldrb	r5, [r2, #0]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 800536e:	7853      	ldrb	r3, [r2, #1]
 8005370:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8005374:	4608      	mov	r0, r1
 8005376:	1c91      	adds	r1, r2, #2
 8005378:	462a      	mov	r2, r5
 800537a:	f008 fa9f 	bl	800d8bc <memcpy>
            *p_buffer_length = data_length;
 800537e:	8025      	strh	r5, [r4, #0]
            return_status = PAL_STATUS_SUCCESS;
 8005380:	2000      	movs	r0, #0
            break;
 8005382:	bd38      	pop	{r3, r4, r5, pc}
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8005384:	4a02      	ldr	r2, [pc, #8]	; (8005390 <pal_os_datastore_read+0x50>)
 8005386:	e7f1      	b.n	800536c <pal_os_datastore_read+0x2c>
 8005388:	1ffed1cc 	.word	0x1ffed1cc
 800538c:	1fff1810 	.word	0x1fff1810
 8005390:	1fff17cc 	.word	0x1fff17cc

08005394 <pal_os_event_start>:
/// @cond hidden

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8005394:	b508      	push	{r3, lr}
    if (FALSE == p_pal_os_event->is_event_triggered)
 8005396:	7803      	ldrb	r3, [r0, #0]
 8005398:	b103      	cbz	r3, 800539c <pal_os_event_start+0x8>
 800539a:	bd08      	pop	{r3, pc}
    {
        p_pal_os_event->is_event_triggered = TRUE;
 800539c:	2301      	movs	r3, #1
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
 800539e:	6041      	str	r1, [r0, #4]

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
 80053a0:	7003      	strb	r3, [r0, #0]
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
    p_pal_os_event->callback_ctx = callback_args;
 80053a2:	6082      	str	r2, [r0, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 80053a4:	4904      	ldr	r1, [pc, #16]	; (80053b8 <pal_os_event_start+0x24>)
 80053a6:	4805      	ldr	r0, [pc, #20]	; (80053bc <pal_os_event_start+0x28>)
 80053a8:	f7fe fbfa 	bl	8003ba0 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 80053ac:	4803      	ldr	r0, [pc, #12]	; (80053bc <pal_os_event_start+0x28>)
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
    }
}
 80053ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
    TIMER_Start(&scheduler_timer);
 80053b2:	f7fe bbbd 	b.w	8003b30 <TIMER_Start>
 80053b6:	bf00      	nop
 80053b8:	000186a0 	.word	0x000186a0
 80053bc:	1ffed094 	.word	0x1ffed094

080053c0 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
    //lint --e{714} suppress "The API pal_os_event_stop is not exposed in header file but used as extern in 
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	7003      	strb	r3, [r0, #0]
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop

080053c8 <pal_os_event_create>:
}

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
    if (( NULL != callback )&&( NULL != callback_args ))
 80053c8:	b1a8      	cbz	r0, 80053f6 <pal_os_event_create+0x2e>
 80053ca:	b1a1      	cbz	r1, 80053f6 <pal_os_event_create+0x2e>
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
}

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 80053cc:	b538      	push	{r3, r4, r5, lr}

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
 80053ce:	4c0b      	ldr	r4, [pc, #44]	; (80053fc <pal_os_event_create+0x34>)
 80053d0:	7823      	ldrb	r3, [r4, #0]
 80053d2:	b10b      	cbz	r3, 80053d8 <pal_os_event_create+0x10>
    if (( NULL != callback )&&( NULL != callback_args ))
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
    }
    return (&pal_os_event_0);
}
 80053d4:	4809      	ldr	r0, [pc, #36]	; (80053fc <pal_os_event_create+0x34>)
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	4603      	mov	r3, r0
 80053da:	460a      	mov	r2, r1

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
 80053dc:	2501      	movs	r5, #1
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 80053de:	4908      	ldr	r1, [pc, #32]	; (8005400 <pal_os_event_create+0x38>)
 80053e0:	4808      	ldr	r0, [pc, #32]	; (8005404 <pal_os_event_create+0x3c>)
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
 80053e2:	6063      	str	r3, [r4, #4]
    p_pal_os_event->callback_ctx = callback_args;
 80053e4:	60a2      	str	r2, [r4, #8]

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
 80053e6:	7025      	strb	r5, [r4, #0]
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 80053e8:	f7fe fbda 	bl	8003ba0 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 80053ec:	4805      	ldr	r0, [pc, #20]	; (8005404 <pal_os_event_create+0x3c>)
 80053ee:	f7fe fb9f 	bl	8003b30 <TIMER_Start>
    if (( NULL != callback )&&( NULL != callback_args ))
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
    }
    return (&pal_os_event_0);
}
 80053f2:	4802      	ldr	r0, [pc, #8]	; (80053fc <pal_os_event_create+0x34>)
 80053f4:	bd38      	pop	{r3, r4, r5, pc}
 80053f6:	4801      	ldr	r0, [pc, #4]	; (80053fc <pal_os_event_create+0x34>)
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	1ffee800 	.word	0x1ffee800
 8005400:	000186a0 	.word	0x000186a0
 8005404:	1ffed094 	.word	0x1ffed094

08005408 <CCU43_1_IRQHandler>:

void pal_os_event_trigger_registered_callback(void)
{
 8005408:	b510      	push	{r4, lr}
    register_callback callback;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    TIMER_ClearEvent(&scheduler_timer);
 800540a:	4808      	ldr	r0, [pc, #32]	; (800542c <CCU43_1_IRQHandler+0x24>)
 800540c:	f7fe fc78 	bl	8003d00 <TIMER_ClearEvent>
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_Stop(&scheduler_timer);
 8005410:	4806      	ldr	r0, [pc, #24]	; (800542c <CCU43_1_IRQHandler+0x24>)
 8005412:	f7fe fba3 	bl	8003b5c <TIMER_Stop>
    TIMER_Clear(&scheduler_timer);
 8005416:	4805      	ldr	r0, [pc, #20]	; (800542c <CCU43_1_IRQHandler+0x24>)
 8005418:	f7fe fc88 	bl	8003d2c <TIMER_Clear>
    /// If callback_ctx is NULL then callback function will have unexpected behavior 
    if (pal_os_event_0.callback_registered)
 800541c:	4a04      	ldr	r2, [pc, #16]	; (8005430 <CCU43_1_IRQHandler+0x28>)
 800541e:	6853      	ldr	r3, [r2, #4]
 8005420:	b11b      	cbz	r3, 800542a <CCU43_1_IRQHandler+0x22>
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
 8005422:	6890      	ldr	r0, [r2, #8]
    }
}
 8005424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TIMER_Clear(&scheduler_timer);
    /// If callback_ctx is NULL then callback function will have unexpected behavior 
    if (pal_os_event_0.callback_registered)
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
 8005428:	4718      	bx	r3
 800542a:	bd10      	pop	{r4, pc}
 800542c:	1ffed094 	.word	0x1ffed094
 8005430:	1ffee800 	.word	0x1ffee800

08005434 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
 8005434:	b510      	push	{r4, lr}
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 8005436:	4c07      	ldr	r4, [pc, #28]	; (8005454 <pal_os_event_register_callback_oneshot+0x20>)
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
 8005438:	6041      	str	r1, [r0, #4]
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 800543a:	2164      	movs	r1, #100	; 0x64
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
    p_pal_os_event->callback_ctx = callback_args;
 800543c:	6082      	str	r2, [r0, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 800543e:	fb01 f103 	mul.w	r1, r1, r3
 8005442:	4620      	mov	r0, r4
 8005444:	f7fe fbac 	bl	8003ba0 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 8005448:	4620      	mov	r0, r4
}
 800544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
    TIMER_Start(&scheduler_timer);
 800544e:	f7fe bb6f 	b.w	8003b30 <TIMER_Start>
 8005452:	bf00      	nop
 8005454:	1ffed094 	.word	0x1ffed094

08005458 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop

0800545c <pal_os_lock_exit_critical_section>:
}

void pal_os_lock_exit_critical_section()
{
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop

08005460 <pal_os_calloc>:
    return (malloc(block_size));
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
    return (calloc(number_of_blocks, block_size));
 8005460:	f008 b9de 	b.w	800d820 <calloc>

08005464 <pal_os_free>:
}

void pal_os_free(void * p_block)
{
    free(p_block);
 8005464:	f008 ba12 	b.w	800d88c <free>

08005468 <pal_os_memcpy>:
}

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
    memcpy(p_destination, p_source, size);
 8005468:	f008 ba28 	b.w	800d8bc <memcpy>

0800546c <pal_os_memset>:
}

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
    memset(p_buffer, (int32_t)value, size);
 800546c:	f008 ba31 	b.w	800d8d2 <memset>

08005470 <CCU41_1_IRQHandler>:

/// @cond hidden
static volatile uint32_t g_tick_count = 0;

void delay_timer_isr(void)
{
 8005470:	b510      	push	{r4, lr}
    TIMER_ClearEvent(&tick_timer);
 8005472:	4c06      	ldr	r4, [pc, #24]	; (800548c <CCU41_1_IRQHandler+0x1c>)
 8005474:	4620      	mov	r0, r4
 8005476:	f7fe fc43 	bl	8003d00 <TIMER_ClearEvent>
    (void)TIMER_Clear(&tick_timer);
 800547a:	4620      	mov	r0, r4
 800547c:	f7fe fc56 	bl	8003d2c <TIMER_Clear>
    g_tick_count += 1U;
 8005480:	4a03      	ldr	r2, [pc, #12]	; (8005490 <CCU41_1_IRQHandler+0x20>)
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	bd10      	pop	{r4, pc}
 800548a:	bf00      	nop
 800548c:	1ffed058 	.word	0x1ffed058
 8005490:	1ffee810 	.word	0x1ffee810

08005494 <pal_os_timer_get_time_in_microseconds>:
{
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // This API is needed to support optiga cmd scheduler. 
    static uint32_t count = 0;
    // The implementation must ensure that every invocation of this API returns a unique value.
    return (count++);
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <pal_os_timer_get_time_in_microseconds+0xc>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	1c42      	adds	r2, r0, #1
 800549a:	601a      	str	r2, [r3, #0]
}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	1ffee814 	.word	0x1ffee814

080054a4 <pal_os_timer_get_time_in_milliseconds>:

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
 80054a4:	4b01      	ldr	r3, [pc, #4]	; (80054ac <pal_os_timer_get_time_in_milliseconds+0x8>)
 80054a6:	6818      	ldr	r0, [r3, #0]
}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	1ffee810 	.word	0x1ffee810

080054b0 <pal_os_timer_delay_in_milliseconds>:
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
 80054b0:	4a03      	ldr	r2, [pc, #12]	; (80054c0 <pal_os_timer_delay_in_milliseconds+0x10>)
 80054b2:	6811      	ldr	r1, [r2, #0]
 80054b4:	6813      	ldr	r3, [r2, #0]
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
    {
        current_time = pal_os_timer_get_time_in_milliseconds();
        time_stamp_diff = current_time - start_time;
 80054b6:	1a5b      	subs	r3, r3, r1
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
 80054b8:	4283      	cmp	r3, r0
 80054ba:	d9fb      	bls.n	80054b4 <pal_os_timer_delay_in_milliseconds+0x4>
        if (start_time > current_time)
        {
            time_stamp_diff = (0xFFFFFFFF + (current_time - start_time)) + 0x01;
        }        
    }
}
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	1ffee810 	.word	0x1ffee810

080054c4 <optiga_util_generic_event_handler>:
_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	8403      	strh	r3, [r0, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 80054c8:	69c3      	ldr	r3, [r0, #28]
 80054ca:	6980      	ldr	r0, [r0, #24]
 80054cc:	4718      	bx	r3
 80054ce:	bf00      	nop

080054d0 <optiga_util_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
    switch (parameter_type)
 80054d0:	2901      	cmp	r1, #1
 80054d2:	d005      	beq.n	80054e0 <optiga_util_set_comms_params+0x10>
 80054d4:	2902      	cmp	r1, #2
 80054d6:	d102      	bne.n	80054de <optiga_util_set_comms_params+0xe>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
 80054d8:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
 80054dc:	4770      	bx	lr
 80054de:	4770      	bx	lr
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80054e0:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
            break;
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop

080054e8 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_util_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80054ea:	b1d9      	cbz	r1, 8005524 <optiga_util_create+0x3c>
 80054ec:	460d      	mov	r5, r1
 80054ee:	4606      	mov	r6, r0
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80054f0:	2124      	movs	r1, #36	; 0x24
 80054f2:	2001      	movs	r0, #1
 80054f4:	4617      	mov	r7, r2
 80054f6:	f7ff ffb3 	bl	8005460 <pal_os_calloc>
        if (NULL == me)
 80054fa:	4604      	mov	r4, r0
 80054fc:	b190      	cbz	r0, 8005524 <optiga_util_create+0x3c>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80054fe:	2300      	movs	r3, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005500:	2201      	movs	r2, #1
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 8005502:	61c5      	str	r5, [r0, #28]
        me->caller_context = caller_context;
 8005504:	6187      	str	r7, [r0, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8005506:	490b      	ldr	r1, [pc, #44]	; (8005534 <optiga_util_create+0x4c>)

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005508:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 800550c:	4630      	mov	r0, r6
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 800550e:	8423      	strh	r3, [r4, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005510:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8005514:	4622      	mov	r2, r4
 8005516:	f003 ff8f 	bl	8009438 <optiga_cmd_create>
 800551a:	4605      	mov	r5, r0
 800551c:	6160      	str	r0, [r4, #20]
        if (NULL == me->my_cmd)
 800551e:	b120      	cbz	r0, 800552a <optiga_util_create+0x42>
            me = NULL;
        }
    } while (FALSE);

    return (me);
}
 8005520:	4620      	mov	r0, r4
 8005522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
    optiga_util_t * me = NULL;
 8005524:	2400      	movs	r4, #0
            me = NULL;
        }
    } while (FALSE);

    return (me);
}
 8005526:	4620      	mov	r0, r4
 8005528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
        if (NULL == me->my_cmd)
        {
            pal_os_free(me);
 800552a:	4620      	mov	r0, r4
 800552c:	f7ff ff9a 	bl	8005464 <pal_os_free>
            me = NULL;
 8005530:	462c      	mov	r4, r5
 8005532:	e7f5      	b.n	8005520 <optiga_util_create+0x38>
 8005534:	080054c5 	.word	0x080054c5

08005538 <optiga_util_destroy>:

    return (me);
}

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 8005538:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 800553a:	b180      	cbz	r0, 800555e <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800553c:	8c03      	ldrh	r3, [r0, #32]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d103      	bne.n	800554a <optiga_util_destroy+0x12>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005542:	f240 3505 	movw	r5, #773	; 0x305
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);
    } while (FALSE);
    return (return_value);
}
 8005546:	4628      	mov	r0, r5
 8005548:	bd38      	pop	{r3, r4, r5, pc}
 800554a:	4604      	mov	r4, r0
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 800554c:	6940      	ldr	r0, [r0, #20]
 800554e:	f004 f811 	bl	8009574 <optiga_cmd_destroy>
 8005552:	4605      	mov	r5, r0
        pal_os_free(me);
 8005554:	4620      	mov	r0, r4
 8005556:	f7ff ff85 	bl	8005464 <pal_os_free>
    } while (FALSE);
    return (return_value);
}
 800555a:	4628      	mov	r0, r5
 800555c:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800555e:	f240 3503 	movw	r5, #771	; 0x303
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);
    } while (FALSE);
    return (return_value);
}
 8005562:	4628      	mov	r0, r5
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	bf00      	nop

08005568 <optiga_util_open_application>:

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8005568:	b168      	cbz	r0, 8005586 <optiga_util_open_application+0x1e>
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 800556a:	b570      	push	{r4, r5, r6, lr}
 800556c:	4604      	mov	r4, r0

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 800556e:	6940      	ldr	r0, [r0, #20]
 8005570:	460d      	mov	r5, r1
 8005572:	b340      	cbz	r0, 80055c6 <optiga_util_open_application+0x5e>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005574:	8c23      	ldrh	r3, [r4, #32]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d108      	bne.n	800558c <optiga_util_open_application+0x24>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800557a:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800557e:	2300      	movs	r3, #0
 8005580:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005584:	bd70      	pop	{r4, r5, r6, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005586:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 800558a:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800558c:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800558e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005592:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005594:	2200      	movs	r2, #0
 8005596:	f003 ff43 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800559a:	6960      	ldr	r0, [r4, #20]
 800559c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80055a0:	4632      	mov	r2, r6
 80055a2:	f003 ff3d 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80055a6:	6960      	ldr	r0, [r4, #20]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 80055a8:	b99d      	cbnz	r5, 80055d2 <optiga_util_open_application+0x6a>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80055aa:	2133      	movs	r1, #51	; 0x33
 80055ac:	2202      	movs	r2, #2
 80055ae:	f003 ff37 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 80055b2:	4629      	mov	r1, r5
 80055b4:	6960      	ldr	r0, [r4, #20]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f004 f802 	bl	80095c0 <optiga_cmd_open_application>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80055bc:	2800      	cmp	r0, #0
 80055be:	d0de      	beq.n	800557e <optiga_util_open_application+0x16>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	8423      	strh	r3, [r4, #32]
 80055c4:	e7db      	b.n	800557e <optiga_util_open_application+0x16>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80055cc:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80055d0:	bd70      	pop	{r4, r5, r6, pc}
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 80055d2:	2111      	movs	r1, #17
 80055d4:	2202      	movs	r2, #2
 80055d6:	f003 ff23 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
 80055da:	e7ea      	b.n	80055b2 <optiga_util_open_application+0x4a>

080055dc <optiga_util_read_data>:
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80055dc:	b1e0      	cbz	r0, 8005618 <optiga_util_read_data+0x3c>
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 80055de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e2:	4615      	mov	r5, r2
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80055e4:	6942      	ldr	r2, [r0, #20]
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 80055e6:	b082      	sub	sp, #8
 80055e8:	4604      	mov	r4, r0
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80055ea:	b16a      	cbz	r2, 8005608 <optiga_util_read_data+0x2c>
 80055ec:	b163      	cbz	r3, 8005608 <optiga_util_read_data+0x2c>
            (NULL == buffer) || (NULL == length))
 80055ee:	9a08      	ldr	r2, [sp, #32]
 80055f0:	b152      	cbz	r2, 8005608 <optiga_util_read_data+0x2c>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80055f2:	8c02      	ldrh	r2, [r0, #32]
 80055f4:	2a01      	cmp	r2, #1
 80055f6:	d112      	bne.n	800561e <optiga_util_read_data+0x42>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80055f8:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005602:	b002      	add	sp, #8
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005608:	f240 3003 	movw	r0, #771	; 0x303
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800560c:	2300      	movs	r3, #0
 800560e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 8005612:	b002      	add	sp, #8
 8005614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005618:	f240 3003 	movw	r0, #771	; 0x303

    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 800561c:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800561e:	f04f 0801 	mov.w	r8, #1
 8005622:	460e      	mov	r6, r1
 8005624:	f8a0 8020 	strh.w	r8, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005628:	2100      	movs	r1, #0
 800562a:	2214      	movs	r2, #20

        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
 800562c:	460f      	mov	r7, r1
 800562e:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005630:	f7ff ff1c 	bl	800546c <pal_os_memset>
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 8005634:	9b08      	ldr	r3, [sp, #32]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
 8005636:	8026      	strh	r6, [r4, #0]
        p_params->offset = offset;
 8005638:	8065      	strh	r5, [r4, #2]
        // set option to read data
        p_params->data_or_metadata = 0;
 800563a:	72a7      	strb	r7, [r4, #10]
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 800563c:	881a      	ldrh	r2, [r3, #0]

        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	6123      	str	r3, [r4, #16]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
 8005642:	9b08      	ldr	r3, [sp, #32]
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 8005644:	80a2      	strh	r2, [r4, #4]
        p_params->ref_bytes_to_read = length;
 8005646:	60e3      	str	r3, [r4, #12]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005648:	463a      	mov	r2, r7
 800564a:	6960      	ldr	r0, [r4, #20]
 800564c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
 8005650:	80e7      	strh	r7, [r4, #6]
        p_params->last_read_size = 0;
 8005652:	8127      	strh	r7, [r4, #8]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005654:	f003 fee4 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005658:	4642      	mov	r2, r8
 800565a:	6960      	ldr	r0, [r4, #20]
 800565c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8005660:	f003 fede 	bl	8009420 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 8005664:	6960      	ldr	r0, [r4, #20]
 8005666:	7aa1      	ldrb	r1, [r4, #10]
 8005668:	4622      	mov	r2, r4
 800566a:	f003 ffbb 	bl	80095e4 <optiga_cmd_get_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 800566e:	2800      	cmp	r0, #0
 8005670:	d0cc      	beq.n	800560c <optiga_util_read_data+0x30>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005672:	8427      	strh	r7, [r4, #32]
 8005674:	e7ca      	b.n	800560c <optiga_util_read_data+0x30>
 8005676:	bf00      	nop

08005678 <optiga_util_read_metadata>:
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005678:	b1d8      	cbz	r0, 80056b2 <optiga_util_read_metadata+0x3a>

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
 800567a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567e:	4615      	mov	r5, r2
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005680:	6942      	ldr	r2, [r0, #20]

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
 8005682:	b082      	sub	sp, #8
 8005684:	4604      	mov	r4, r0
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005686:	b162      	cbz	r2, 80056a2 <optiga_util_read_metadata+0x2a>
 8005688:	b15d      	cbz	r5, 80056a2 <optiga_util_read_metadata+0x2a>
            (NULL == buffer) || (NULL == length))
 800568a:	b153      	cbz	r3, 80056a2 <optiga_util_read_metadata+0x2a>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800568c:	8c02      	ldrh	r2, [r0, #32]
 800568e:	2a01      	cmp	r2, #1
 8005690:	d112      	bne.n	80056b8 <optiga_util_read_metadata+0x40>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005692:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005696:	2300      	movs	r3, #0
 8005698:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 800569c:	b002      	add	sp, #8
 800569e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80056a2:	f240 3003 	movw	r0, #771	; 0x303
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80056ac:	b002      	add	sp, #8
 80056ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80056b2:	f240 3003 	movw	r0, #771	; 0x303
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80056b6:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80056b8:	f04f 0801 	mov.w	r8, #1
 80056bc:	460e      	mov	r6, r1
 80056be:	f8a0 8020 	strh.w	r8, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80056c2:	2100      	movs	r1, #0
 80056c4:	2214      	movs	r2, #20

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 80056c6:	460f      	mov	r7, r1
 80056c8:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80056ca:	f7ff fecf 	bl	800546c <pal_os_memset>
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 80056ce:	9b01      	ldr	r3, [sp, #4]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
 80056d0:	f884 800a 	strb.w	r8, [r4, #10]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
 80056d4:	8026      	strh	r6, [r4, #0]
        p_params->offset = 0;
 80056d6:	8067      	strh	r7, [r4, #2]
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	80a2      	strh	r2, [r4, #4]
        p_params->ref_bytes_to_read = length;
 80056dc:	60e3      	str	r3, [r4, #12]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80056de:	463a      	mov	r2, r7
 80056e0:	6960      	ldr	r0, [r4, #20]
 80056e2:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
 80056e6:	6125      	str	r5, [r4, #16]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
 80056e8:	80e7      	strh	r7, [r4, #6]
        p_params->last_read_size = 0;
 80056ea:	8127      	strh	r7, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80056ec:	f003 fe98 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80056f0:	4642      	mov	r2, r8
 80056f2:	6960      	ldr	r0, [r4, #20]
 80056f4:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80056f8:	f003 fe92 	bl	8009420 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata,
 80056fc:	6960      	ldr	r0, [r4, #20]
 80056fe:	7aa1      	ldrb	r1, [r4, #10]
 8005700:	4622      	mov	r2, r4
 8005702:	f003 ff6f 	bl	80095e4 <optiga_cmd_get_data_object>
                                                  (optiga_get_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005706:	2800      	cmp	r0, #0
 8005708:	d0cd      	beq.n	80056a6 <optiga_util_read_metadata+0x2e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800570a:	8427      	strh	r7, [r4, #32]
 800570c:	e7cb      	b.n	80056a6 <optiga_util_read_metadata+0x2e>
 800570e:	bf00      	nop

08005710 <optiga_util_write_data>:
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 8005710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005714:	b083      	sub	sp, #12
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 8005716:	f012 06bf 	ands.w	r6, r2, #191	; 0xbf
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 800571a:	4614      	mov	r4, r2
 800571c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 8005720:	d004      	beq.n	800572c <optiga_util_write_data+0x1c>
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005722:	f240 3003 	movw	r0, #771	; 0x303
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
 8005726:	b003      	add	sp, #12
 8005728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800572c:	4605      	mov	r5, r0
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 800572e:	2800      	cmp	r0, #0
 8005730:	d0f7      	beq.n	8005722 <optiga_util_write_data+0x12>
 8005732:	6942      	ldr	r2, [r0, #20]
 8005734:	b162      	cbz	r2, 8005750 <optiga_util_write_data+0x40>
 8005736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005738:	b152      	cbz	r2, 8005750 <optiga_util_write_data+0x40>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800573a:	8c02      	ldrh	r2, [r0, #32]
 800573c:	2a01      	cmp	r2, #1
 800573e:	d10a      	bne.n	8005756 <optiga_util_write_data+0x46>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005740:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005744:	2300      	movs	r3, #0
 8005746:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
 800574a:	b003      	add	sp, #12
 800574c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005750:	f240 3003 	movw	r0, #771	; 0x303
 8005754:	e7f6      	b.n	8005744 <optiga_util_write_data+0x34>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005756:	2201      	movs	r2, #1
 8005758:	8402      	strh	r2, [r0, #32]
 800575a:	4688      	mov	r8, r1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 800575c:	2214      	movs	r2, #20
 800575e:	4631      	mov	r1, r6
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	f7ff fe83 	bl	800546c <pal_os_memset>

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
 8005766:	9a0a      	ldr	r2, [sp, #40]	; 0x28

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
 8005768:	9b01      	ldr	r3, [sp, #4]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800576a:	6968      	ldr	r0, [r5, #20]
 800576c:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
 8005770:	2c02      	cmp	r4, #2
        {
            p_params->count = p_buffer[0];
 8005772:	bf08      	it	eq
 8005774:	7816      	ldrbeq	r6, [r2, #0]
 8005776:	73ae      	strb	r6, [r5, #14]
            p_params->buffer = NULL;
 8005778:	bf08      	it	eq
 800577a:	2200      	moveq	r2, #0
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
 800577c:	f04f 0900 	mov.w	r9, #0
 8005780:	60aa      	str	r2, [r5, #8]
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
 8005782:	806b      	strh	r3, [r5, #2]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005784:	464a      	mov	r2, r9
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
 8005786:	f8a5 8000 	strh.w	r8, [r5]
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
 800578a:	80af      	strh	r7, [r5, #4]
        p_params->written_size = 0;
        p_params->write_type = write_type;
 800578c:	736c      	strb	r4, [r5, #13]
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
 800578e:	f885 900c 	strb.w	r9, [r5, #12]
        p_params->size = length;
        p_params->written_size = 0;
 8005792:	f8a5 9006 	strh.w	r9, [r5, #6]
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005796:	f003 fe43 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800579a:	6968      	ldr	r0, [r5, #20]
 800579c:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
 80057a0:	2201      	movs	r2, #1
 80057a2:	f003 fe3d 	bl	8009420 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
 80057a6:	4621      	mov	r1, r4
 80057a8:	6968      	ldr	r0, [r5, #20]
 80057aa:	462a      	mov	r2, r5
 80057ac:	f003 ff2e 	bl	800960c <optiga_cmd_set_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d0c7      	beq.n	8005744 <optiga_util_write_data+0x34>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80057b4:	f8a5 9020 	strh.w	r9, [r5, #32]
 80057b8:	e7c4      	b.n	8005744 <optiga_util_write_data+0x34>
 80057ba:	bf00      	nop

080057bc <optiga_util_write_metadata>:
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 80057bc:	b1d0      	cbz	r0, 80057f4 <optiga_util_write_metadata+0x38>

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
 80057be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c2:	4615      	mov	r5, r2
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 80057c4:	6942      	ldr	r2, [r0, #20]

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
 80057c6:	b082      	sub	sp, #8
 80057c8:	4604      	mov	r4, r0
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 80057ca:	b15a      	cbz	r2, 80057e4 <optiga_util_write_metadata+0x28>
 80057cc:	b155      	cbz	r5, 80057e4 <optiga_util_write_metadata+0x28>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80057ce:	8c02      	ldrh	r2, [r0, #32]
 80057d0:	2a01      	cmp	r2, #1
 80057d2:	d112      	bne.n	80057fa <optiga_util_write_metadata+0x3e>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80057d4:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80057d8:	2300      	movs	r3, #0
 80057da:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80057de:	b002      	add	sp, #8
 80057e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80057e4:	f240 3003 	movw	r0, #771	; 0x303
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80057ee:	b002      	add	sp, #8
 80057f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80057f4:	f240 3003 	movw	r0, #771	; 0x303
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);

    return (return_value);
}
 80057f8:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80057fa:	2701      	movs	r7, #1
 80057fc:	460e      	mov	r6, r1
 80057fe:	8407      	strh	r7, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005800:	2100      	movs	r1, #0
 8005802:	2214      	movs	r2, #20

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 8005804:	4688      	mov	r8, r1
 8005806:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005808:	f7ff fe30 	bl	800546c <pal_os_memset>
        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
 800580c:	9b01      	ldr	r3, [sp, #4]
 800580e:	80a3      	strh	r3, [r4, #4]
        p_params->write_type = 1;
        p_params->written_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005810:	4642      	mov	r2, r8
 8005812:	6960      	ldr	r0, [r4, #20]
 8005814:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
 8005818:	7327      	strb	r7, [r4, #12]
        p_params->buffer = buffer;
        p_params->size = length;
        p_params->write_type = 1;
 800581a:	7367      	strb	r7, [r4, #13]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
 800581c:	8026      	strh	r6, [r4, #0]
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
 800581e:	60a5      	str	r5, [r4, #8]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 8005820:	f8a4 8002 	strh.w	r8, [r4, #2]
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
        p_params->write_type = 1;
        p_params->written_size = 0;
 8005824:	f8a4 8006 	strh.w	r8, [r4, #6]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005828:	f003 fdfa 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800582c:	463a      	mov	r2, r7
 800582e:	6960      	ldr	r0, [r4, #20]
 8005830:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8005834:	f003 fdf4 	bl	8009420 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, p_params->write_type,
 8005838:	6960      	ldr	r0, [r4, #20]
 800583a:	7b61      	ldrb	r1, [r4, #13]
 800583c:	4622      	mov	r2, r4
 800583e:	f003 fee5 	bl	800960c <optiga_cmd_set_data_object>
                                                  (optiga_set_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005842:	2800      	cmp	r0, #0
 8005844:	d0c8      	beq.n	80057d8 <optiga_util_write_metadata+0x1c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005846:	f8a4 8020 	strh.w	r8, [r4, #32]
 800584a:	e7c5      	b.n	80057d8 <optiga_util_write_metadata+0x1c>

0800584c <optiga_util_update_count>:
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 800584c:	b178      	cbz	r0, 800586e <optiga_util_update_count+0x22>
}

optiga_lib_status_t optiga_util_update_count(optiga_util_t * me,
                                             uint16_t optiga_counter_oid,
                                             uint8_t count)
{
 800584e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 8005852:	6943      	ldr	r3, [r0, #20]
 8005854:	4604      	mov	r4, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d038      	beq.n	80058cc <optiga_util_update_count+0x80>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800585a:	8c03      	ldrh	r3, [r0, #32]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d109      	bne.n	8005874 <optiga_util_update_count+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005860:	f240 3005 	movw	r0, #773	; 0x305
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005864:	2300      	movs	r3, #0
 8005866:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                                           optiga_counter_oid,
                                           OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                           0x0000,
                                           count_value,
                                           sizeof(count_value)));
}
 800586a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800586e:	f240 3003 	movw	r0, #771	; 0x303
                                           optiga_counter_oid,
                                           OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                           0x0000,
                                           count_value,
                                           sizeof(count_value)));
}
 8005872:	4770      	bx	lr
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005874:	f04f 0801 	mov.w	r8, #1
 8005878:	460e      	mov	r6, r1
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 800587a:	2100      	movs	r1, #0

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
            p_params->buffer = NULL;
 800587c:	460d      	mov	r5, r1
 800587e:	4617      	mov	r7, r2
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005880:	f8a0 8020 	strh.w	r8, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005884:	2214      	movs	r2, #20
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;
 8005886:	f04f 0902 	mov.w	r9, #2
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 800588a:	f7ff fdef 	bl	800546c <pal_os_memset>
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800588e:	462a      	mov	r2, r5
 8005890:	6960      	ldr	r0, [r4, #20]
 8005892:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
 8005896:	f8a4 8004 	strh.w	r8, [r4, #4]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
 800589a:	73a7      	strb	r7, [r4, #14]
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
 800589c:	8026      	strh	r6, [r4, #0]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
            p_params->buffer = NULL;
 800589e:	60a5      	str	r5, [r4, #8]
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
 80058a0:	8065      	strh	r5, [r4, #2]
        p_params->data_or_metadata = 0;//for Data
 80058a2:	7325      	strb	r5, [r4, #12]
        p_params->size = length;
        p_params->written_size = 0;
 80058a4:	80e5      	strh	r5, [r4, #6]
        p_params->write_type = write_type;
 80058a6:	f884 900d 	strb.w	r9, [r4, #13]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80058aa:	f003 fdb9 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80058ae:	4642      	mov	r2, r8
 80058b0:	6960      	ldr	r0, [r4, #20]
 80058b2:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80058b6:	f003 fdb3 	bl	8009420 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
 80058ba:	4649      	mov	r1, r9
 80058bc:	6960      	ldr	r0, [r4, #20]
 80058be:	4622      	mov	r2, r4
 80058c0:	f003 fea4 	bl	800960c <optiga_cmd_set_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0cd      	beq.n	8005864 <optiga_util_update_count+0x18>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80058c8:	8425      	strh	r5, [r4, #32]
 80058ca:	e7cb      	b.n	8005864 <optiga_util_update_count+0x18>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80058d2:	f240 3003 	movw	r0, #771	; 0x303
                                           optiga_counter_oid,
                                           OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                           0x0000,
                                           count_value,
                                           sizeof(count_value)));
}
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	bf00      	nop

080058dc <optiga_crypt_generic_event_handler>:
_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80058dc:	2300      	movs	r3, #0
 80058de:	8583      	strh	r3, [r0, #44]	; 0x2c
    me->handler(me->caller_context, event);
 80058e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80058e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80058e4:	4718      	bx	r3
 80058e6:	bf00      	nop

080058e8 <optiga_crypt_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
    switch (parameter_type)
 80058e8:	2901      	cmp	r1, #1
 80058ea:	d005      	beq.n	80058f8 <optiga_crypt_set_comms_params+0x10>
 80058ec:	2902      	cmp	r1, #2
 80058ee:	d102      	bne.n	80058f6 <optiga_crypt_set_comms_params+0xe>
            me->protection_level = value;
            break;
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
 80058f0:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
 80058f4:	4770      	bx	lr
 80058f6:	4770      	bx	lr
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80058f8:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
            break;
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_crypt_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005902:	b1d9      	cbz	r1, 800593c <optiga_crypt_create+0x3c>
 8005904:	460d      	mov	r5, r1
 8005906:	4606      	mov	r6, r0
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 8005908:	2130      	movs	r1, #48	; 0x30
 800590a:	2001      	movs	r0, #1
 800590c:	4617      	mov	r7, r2
 800590e:	f7ff fda7 	bl	8005460 <pal_os_calloc>
        if (NULL == me)
 8005912:	4604      	mov	r4, r0
 8005914:	b190      	cbz	r0, 800593c <optiga_crypt_create+0x3c>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005916:	2300      	movs	r3, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005918:	2201      	movs	r2, #1
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 800591a:	6285      	str	r5, [r0, #40]	; 0x28
        me->caller_context = caller_context;
 800591c:	6247      	str	r7, [r0, #36]	; 0x24
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 800591e:	490b      	ldr	r1, [pc, #44]	; (800594c <optiga_crypt_create+0x4c>)

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005920:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8005924:	4630      	mov	r0, r6
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005926:	85a3      	strh	r3, [r4, #44]	; 0x2c
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005928:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 800592c:	4622      	mov	r2, r4
 800592e:	f003 fd83 	bl	8009438 <optiga_cmd_create>
 8005932:	4605      	mov	r5, r0
 8005934:	6220      	str	r0, [r4, #32]
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8005936:	b120      	cbz	r0, 8005942 <optiga_crypt_create+0x42>
        }

    } while (FALSE);

    return (me);
}
 8005938:	4620      	mov	r0, r4
 800593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
    optiga_crypt_t * me = NULL;
 800593c:	2400      	movs	r4, #0
        }

    } while (FALSE);

    return (me);
}
 800593e:	4620      	mov	r0, r4
 8005940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
        {
            pal_os_free(me);
 8005942:	4620      	mov	r0, r4
 8005944:	f7ff fd8e 	bl	8005464 <pal_os_free>
            me = NULL;
 8005948:	462c      	mov	r4, r5
 800594a:	e7f5      	b.n	8005938 <optiga_crypt_create+0x38>
 800594c:	080058dd 	.word	0x080058dd

08005950 <optiga_crypt_destroy>:

    return (me);
}

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 8005950:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8005952:	b180      	cbz	r0, 8005976 <optiga_crypt_destroy+0x26>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005954:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d103      	bne.n	8005962 <optiga_crypt_destroy+0x12>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 800595a:	f240 4505 	movw	r5, #1029	; 0x405
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);

    } while (FALSE);
    return (return_value);
}
 800595e:	4628      	mov	r0, r5
 8005960:	bd38      	pop	{r3, r4, r5, pc}
 8005962:	4604      	mov	r4, r0
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8005964:	6a00      	ldr	r0, [r0, #32]
 8005966:	f003 fe05 	bl	8009574 <optiga_cmd_destroy>
 800596a:	4605      	mov	r5, r0
        pal_os_free(me);
 800596c:	4620      	mov	r0, r4
 800596e:	f7ff fd79 	bl	8005464 <pal_os_free>

    } while (FALSE);
    return (return_value);
}
 8005972:	4628      	mov	r0, r5
 8005974:	bd38      	pop	{r3, r4, r5, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005976:	f240 4503 	movw	r5, #1027	; 0x403
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);

    } while (FALSE);
    return (return_value);
}
 800597a:	4628      	mov	r0, r5
 800597c:	bd38      	pop	{r3, r4, r5, pc}
 800597e:	bf00      	nop

08005980 <optiga_crypt_random>:
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 8005980:	b1b8      	cbz	r0, 80059b2 <optiga_crypt_random+0x32>
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
 8005982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	4615      	mov	r5, r2
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 8005988:	6a02      	ldr	r2, [r0, #32]
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
 800598a:	b082      	sub	sp, #8
 800598c:	4604      	mov	r4, r0
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 800598e:	b15a      	cbz	r2, 80059a8 <optiga_crypt_random+0x28>
 8005990:	b155      	cbz	r5, 80059a8 <optiga_crypt_random+0x28>
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005992:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8005994:	2a01      	cmp	r2, #1
 8005996:	d10f      	bne.n	80059b8 <optiga_crypt_random+0x38>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005998:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800599c:	2300      	movs	r3, #0
 800599e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                                               0x00,
                                               FALSE);
    } while (FALSE);

    return (return_value);
}
 80059a2:	b002      	add	sp, #8
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80059a8:	f240 4003 	movw	r0, #1027	; 0x403
                                               0x00,
                                               FALSE);
    } while (FALSE);

    return (return_value);
}
 80059ac:	b002      	add	sp, #8
 80059ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80059b2:	f240 4003 	movw	r0, #1027	; 0x403
                                               0x00,
                                               FALSE);
    } while (FALSE);

    return (return_value);
}
 80059b6:	4770      	bx	lr
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80059b8:	f04f 0801 	mov.w	r8, #1
 80059bc:	460e      	mov	r6, r1
 80059be:	f8a0 802c 	strh.w	r8, [r0, #44]	; 0x2c
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80059c2:	2100      	movs	r1, #0
 80059c4:	2220      	movs	r2, #32

        p_params->optional_data = p_optional_data;
 80059c6:	460f      	mov	r7, r1
 80059c8:	9301      	str	r3, [sp, #4]
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80059ca:	f7ff fd4f 	bl	800546c <pal_os_memset>

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	8023      	strh	r3, [r4, #0]
        p_params->store_in_session = store_in_session;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80059d2:	463a      	mov	r2, r7
 80059d4:	6a20      	ldr	r0, [r4, #32]
 80059d6:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
 80059da:	6065      	str	r5, [r4, #4]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
 80059dc:	60a7      	str	r7, [r4, #8]
        p_params->optional_data_length = optional_data_length;
 80059de:	8067      	strh	r7, [r4, #2]
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
        p_params->store_in_session = store_in_session;
 80059e0:	7327      	strb	r7, [r4, #12]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80059e2:	f003 fd1d 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80059e6:	4642      	mov	r2, r8
 80059e8:	6a20      	ldr	r0, [r4, #32]
 80059ea:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80059ee:	f003 fd17 	bl	8009420 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_random(me->my_cmd,
 80059f2:	4631      	mov	r1, r6
 80059f4:	6a20      	ldr	r0, [r4, #32]
 80059f6:	4622      	mov	r2, r4
 80059f8:	f003 fe1c 	bl	8009634 <optiga_cmd_get_random>
                                             cmd_param,
                                             (optiga_get_random_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d0cd      	beq.n	800599c <optiga_crypt_random+0x1c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005a00:	85a7      	strh	r7, [r4, #44]	; 0x2c
 8005a02:	e7cb      	b.n	800599c <optiga_crypt_random+0x1c>

08005a04 <optiga_crypt_hash>:
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
 8005a04:	b1c0      	cbz	r0, 8005a38 <optiga_crypt_hash+0x34>
optiga_lib_status_t optiga_crypt_hash(optiga_crypt_t * me,
                                      optiga_hash_type_t hash_algorithm,
                                      uint8_t source_of_data_to_hash,
                                      const void * data_to_hash, 
                                      uint8_t * hash_output)
{
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
 8005a0a:	6a05      	ldr	r5, [r0, #32]
 8005a0c:	b185      	cbz	r5, 8005a30 <optiga_crypt_hash+0x2c>
 8005a0e:	b17b      	cbz	r3, 8005a30 <optiga_crypt_hash+0x2c>
 8005a10:	9d06      	ldr	r5, [sp, #24]
 8005a12:	b16d      	cbz	r5, 8005a30 <optiga_crypt_hash+0x2c>
 8005a14:	461c      	mov	r4, r3
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005a16:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	4617      	mov	r7, r2
 8005a1e:	460e      	mov	r6, r1
 8005a20:	d10d      	bne.n	8005a3e <optiga_crypt_hash+0x3a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005a22:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 8005a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005a30:	f240 4003 	movw	r0, #1027	; 0x403
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
}
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005a38:	f240 4003 	movw	r0, #1027	; 0x403
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
}
 8005a3c:	4770      	bx	lr
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005a3e:	f04f 0801 	mov.w	r8, #1
 8005a42:	f8a0 802c 	strh.w	r8, [r0, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005a46:	2100      	movs	r1, #0
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f7ff fd0f 	bl	800546c <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005a4e:	6a28      	ldr	r0, [r5, #32]
 8005a50:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
 8005a54:	2200      	movs	r2, #0
 8005a56:	f003 fce3 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	6a28      	ldr	r0, [r5, #32]
 8005a5e:	f895 102f 	ldrb.w	r1, [r5, #47]	; 0x2f
 8005a62:	f003 fcdd 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        p_params->hash_sequence = hash_sequence;
        p_params->p_hash_context = hash_ctx;
 8005a66:	2300      	movs	r3, #0
        p_params->apparent_context_size = context_length;
        p_params->p_hash_data = NULL;
        p_params->p_hash_oid = NULL;
        p_params->p_out_digest = hash_output;
 8005a68:	9a06      	ldr	r2, [sp, #24]
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
 8005a6a:	f885 800c 	strb.w	r8, [r5, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = context_length;
        p_params->p_hash_data = NULL;
        p_params->p_hash_oid = NULL;
        p_params->p_out_digest = hash_output;
 8005a6e:	616a      	str	r2, [r5, #20]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
        p_params->p_hash_context = hash_ctx;
 8005a70:	60ab      	str	r3, [r5, #8]
        p_params->apparent_context_size = context_length;
 8005a72:	61eb      	str	r3, [r5, #28]
        p_params->p_hash_data = NULL;
 8005a74:	606b      	str	r3, [r5, #4]
        p_params->p_hash_oid = NULL;
 8005a76:	602b      	str	r3, [r5, #0]
        p_params->p_out_digest = hash_output;
        p_params->export_hash_ctx = export_intermediate_ctx;
 8005a78:	762b      	strb	r3, [r5, #24]
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
        {
            if (source_of_data_to_hash)
 8005a7a:	b967      	cbnz	r7, 8005a96 <optiga_crypt_hash+0x92>
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
            }
            else
            {
                p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
 8005a7c:	2311      	movs	r3, #17
                p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
 8005a7e:	602c      	str	r4, [r5, #0]
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
            }
            else
            {
                p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
 8005a80:	732b      	strb	r3, [r5, #12]
                p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
            }
        }

        return_value = optiga_cmd_calc_hash(me->my_cmd,
 8005a82:	4631      	mov	r1, r6
 8005a84:	6a28      	ldr	r0, [r5, #32]
 8005a86:	462a      	mov	r2, r5
 8005a88:	f003 fe1e 	bl	80096c8 <optiga_cmd_calc_hash>
                                            hash_algorithm,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d0ca      	beq.n	8005a26 <optiga_crypt_hash+0x22>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	85ab      	strh	r3, [r5, #44]	; 0x2c
 8005a94:	e7c7      	b.n	8005a26 <optiga_crypt_hash+0x22>
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
        {
            if (source_of_data_to_hash)
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
 8005a96:	606c      	str	r4, [r5, #4]
 8005a98:	e7f3      	b.n	8005a82 <optiga_crypt_hash+0x7e>
 8005a9a:	bf00      	nop

08005a9c <optiga_crypt_rsa_verify>:
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
 8005a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
 8005aa6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005aaa:	b1b0      	cbz	r0, 8005ada <optiga_crypt_rsa_verify+0x3e>
 8005aac:	4615      	mov	r5, r2
 8005aae:	6a02      	ldr	r2, [r0, #32]
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	b152      	cbz	r2, 8005aca <optiga_crypt_rsa_verify+0x2e>
 8005ab4:	b14d      	cbz	r5, 8005aca <optiga_crypt_rsa_verify+0x2e>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8005ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab8:	b13a      	cbz	r2, 8005aca <optiga_crypt_rsa_verify+0x2e>
 8005aba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005abc:	b12a      	cbz	r2, 8005aca <optiga_crypt_rsa_verify+0x2e>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005abe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8005ac0:	2a01      	cmp	r2, #1
 8005ac2:	d10f      	bne.n	8005ae4 <optiga_crypt_rsa_verify+0x48>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005ac4:	f240 4005 	movw	r0, #1029	; 0x405
 8005ac8:	e001      	b.n	8005ace <optiga_crypt_rsa_verify+0x32>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005aca:	f240 4003 	movw	r0, #1027	; 0x403
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                salt_length));
}
 8005ad4:	b003      	add	sp, #12
 8005ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005ada:	f240 4003 	movw	r0, #1027	; 0x403
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                salt_length));
}
 8005ade:	b003      	add	sp, #12
 8005ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005ae4:	f04f 0901 	mov.w	r9, #1
 8005ae8:	f8a0 902c 	strh.w	r9, [r0, #44]	; 0x2c
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005aec:	2220      	movs	r2, #32
 8005aee:	460f      	mov	r7, r1
 8005af0:	2100      	movs	r1, #0
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	f7ff fcba 	bl	800546c <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005af8:	6a20      	ldr	r0, [r4, #32]
 8005afa:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8005afe:	2200      	movs	r2, #0
 8005b00:	f003 fc8e 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005b04:	464a      	mov	r2, r9
 8005b06:	6a20      	ldr	r0, [r4, #32]
 8005b08:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8005b0c:	f003 fc88 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
 8005b10:	9b01      	ldr	r3, [sp, #4]
 8005b12:	7123      	strb	r3, [r4, #4]
        p_params->p_signature = p_signature;
 8005b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b16:	60a3      	str	r3, [r4, #8]
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_digest = p_digest;
 8005b18:	6025      	str	r5, [r4, #0]
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
 8005b1a:	f8a4 800c 	strh.w	r8, [r4, #12]
        p_params->public_key_source_type = public_key_source_type;
 8005b1e:	73a6      	strb	r6, [r4, #14]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8005b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8005b22:	b156      	cbz	r6, 8005b3a <optiga_crypt_rsa_verify+0x9e>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8005b24:	6123      	str	r3, [r4, #16]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 8005b26:	4639      	mov	r1, r7
 8005b28:	6a20      	ldr	r0, [r4, #32]
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	f003 fd9a 	bl	8009664 <optiga_cmd_verify_sign>
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d0cc      	beq.n	8005ace <optiga_crypt_rsa_verify+0x32>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8005b38:	e7c9      	b.n	8005ace <optiga_crypt_rsa_verify+0x32>
        p_params->signature_length = signature_length;
        p_params->public_key_source_type = public_key_source_type;

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	82a3      	strh	r3, [r4, #20]
 8005b3e:	e7f2      	b.n	8005b26 <optiga_crypt_rsa_verify+0x8a>

08005b40 <optiga_crypt_rsa_encrypt_message>:
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message)||
 8005b4a:	b1a8      	cbz	r0, 8005b78 <optiga_crypt_rsa_encrypt_message+0x38>
 8005b4c:	4615      	mov	r5, r2
 8005b4e:	6a02      	ldr	r2, [r0, #32]
 8005b50:	4604      	mov	r4, r0
 8005b52:	b18a      	cbz	r2, 8005b78 <optiga_crypt_rsa_encrypt_message+0x38>
 8005b54:	b185      	cbz	r5, 8005b78 <optiga_crypt_rsa_encrypt_message+0x38>
 8005b56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b58:	b172      	cbz	r2, 8005b78 <optiga_crypt_rsa_encrypt_message+0x38>
            (NULL == public_key) || (NULL == encrypted_message) || (NULL == encrypted_message_length))
 8005b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b5c:	b162      	cbz	r2, 8005b78 <optiga_crypt_rsa_encrypt_message+0x38>
 8005b5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b60:	b152      	cbz	r2, 8005b78 <optiga_crypt_rsa_encrypt_message+0x38>
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_encrypt_asym_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005b62:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8005b64:	2a01      	cmp	r2, #1
 8005b66:	d10c      	bne.n	8005b82 <optiga_crypt_rsa_encrypt_message+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005b68:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
 8005b72:	b002      	add	sp, #8
 8005b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005b78:	f240 4003 	movw	r0, #1027	; 0x403
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
}
 8005b7c:	b002      	add	sp, #8
 8005b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;
 8005b82:	f04f 0801 	mov.w	r8, #1
 8005b86:	460e      	mov	r6, r1
 8005b88:	f8a0 802c 	strh.w	r8, [r0, #44]	; 0x2c

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	2220      	movs	r2, #32
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	f7ff fc6b 	bl	800546c <pal_os_memset>

        p_params->message = p_message;
        p_params->message_length = message_length;
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	8023      	strh	r3, [r4, #0]
        p_params->processed_message = p_processed_message;
 8005b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b9c:	6163      	str	r3, [r4, #20]
        p_params->processed_message_length = p_processed_message_length;
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba0:	6063      	str	r3, [r4, #4]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005ba2:	6a20      	ldr	r0, [r4, #32]
 8005ba4:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->message = p_message;
 8005ba8:	60a5      	str	r5, [r4, #8]
        p_params->message_length = message_length;
        p_params->processed_message = p_processed_message;
        p_params->processed_message_length = p_processed_message_length;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005baa:	2200      	movs	r2, #0
 8005bac:	f003 fc38 	bl	8009420 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	6a20      	ldr	r0, [r4, #32]
 8005bb4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8005bb8:	f003 fc32 	bl	8009420 <optiga_cmd_set_shielded_connection_option>


        if (is_enc)
        {
            p_params->key = p_key;
 8005bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bbe:	6123      	str	r3, [r4, #16]
            p_params->public_key_source_type = public_key_source_type;
 8005bc0:	7327      	strb	r7, [r4, #12]
#ifdef OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED
            return_value = optiga_cmd_encrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	6a20      	ldr	r0, [r4, #32]
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	f003 fd60 	bl	800968c <optiga_cmd_encrypt_asym>
#ifdef OPTIGA_CRYPT_RSA_DECRYPT_ENABLED
            return_value = optiga_cmd_decrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d0cd      	beq.n	8005b6c <optiga_crypt_rsa_encrypt_message+0x2c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8005bd4:	e7ca      	b.n	8005b6c <optiga_crypt_rsa_encrypt_message+0x2c>
 8005bd6:	bf00      	nop

08005bd8 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8005bd8:	b538      	push	{r3, r4, r5, lr}
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8005bda:	6983      	ldr	r3, [r0, #24]
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8005bdc:	4604      	mov	r4, r0
 8005bde:	460d      	mov	r5, r1
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8005be0:	b10b      	cbz	r3, 8005be6 <ifx_i2c_tl_event_handler+0xe>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8005be2:	69c0      	ldr	r0, [r0, #28]
 8005be4:	4798      	blx	r3
    }
    p_ctx->close_state = event;
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
 8005be6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
    p_ctx->close_state = event;
 8005bea:	85a5      	strh	r5, [r4, #44]	; 0x2c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8005bec:	2204      	movs	r2, #4
    switch (p_ctx->state)
 8005bee:	2b01      	cmp	r3, #1
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
    p_ctx->close_state = event;
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8005bf0:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    switch (p_ctx->state)
 8005bf4:	d103      	bne.n	8005bfe <ifx_i2c_tl_event_handler+0x26>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8005bf6:	b915      	cbnz	r5, 8005bfe <ifx_i2c_tl_event_handler+0x26>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}

08005c00 <ifx_i2c_init>:
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8005c00:	b510      	push	{r4, lr}
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8005c02:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8005c06:	2b02      	cmp	r3, #2
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8005c08:	4604      	mov	r4, r0
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8005c0a:	d00b      	beq.n	8005c24 <ifx_i2c_init+0x24>
 8005c0c:	b99b      	cbnz	r3, 8005c36 <ifx_i2c_init+0x36>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
 8005c0e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005c12:	2bb2      	cmp	r3, #178	; 0xb2
 8005c14:	d017      	beq.n	8005c46 <ifx_i2c_init+0x46>
 8005c16:	2bb3      	cmp	r3, #179	; 0xb3
 8005c18:	d03b      	beq.n	8005c92 <ifx_i2c_init+0x92>
 8005c1a:	2bb1      	cmp	r3, #177	; 0xb1
 8005c1c:	d026      	beq.n	8005c6c <ifx_i2c_init+0x6c>
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8005c1e:	f44f 7081 	mov.w	r0, #258	; 0x102
 8005c22:	bd10      	pop	{r4, pc}

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
 8005c24:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005c28:	2bb2      	cmp	r3, #178	; 0xb2
 8005c2a:	d00f      	beq.n	8005c4c <ifx_i2c_init+0x4c>
 8005c2c:	2bb3      	cmp	r3, #179	; 0xb3
 8005c2e:	d030      	beq.n	8005c92 <ifx_i2c_init+0x92>
 8005c30:	2bb1      	cmp	r3, #177	; 0xb1
 8005c32:	d1f4      	bne.n	8005c1e <ifx_i2c_init+0x1e>
 8005c34:	e01d      	b.n	8005c72 <ifx_i2c_init+0x72>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8005c36:	2301      	movs	r3, #1
 8005c38:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8005c3c:	4918      	ldr	r1, [pc, #96]	; (8005ca0 <ifx_i2c_init+0xa0>)
#endif
    }

    return (api_status);
}
 8005c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8005c42:	f001 bdb9 	b.w	80077b8 <ifx_i2c_prl_init>
            case IFX_I2C_STATE_RESET_PIN_HIGH:
            {
                // Setting the Vdd & Reset pin to high
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8005c46:	68a0      	ldr	r0, [r4, #8]
 8005c48:	f7ff f9b4 	bl	8004fb4 <pal_gpio_set_high>
                }
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8005c4c:	68e0      	ldr	r0, [r4, #12]
 8005c4e:	f7ff f9b1 	bl	8004fb4 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8005c52:	23b3      	movs	r3, #179	; 0xb3
 8005c54:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8005c58:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8005c5c:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <ifx_i2c_init+0xa4>)
 8005c5e:	4622      	mov	r2, r4
 8005c60:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005c64:	f7ff fbe6 	bl	8005434 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       STARTUP_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
 8005c68:	2000      	movs	r0, #0
                break;
 8005c6a:	bd10      	pop	{r4, pc}
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8005c6c:	68a0      	ldr	r0, [r4, #8]
 8005c6e:	f7ff f9ab 	bl	8004fc8 <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8005c72:	68e0      	ldr	r0, [r4, #12]
 8005c74:	f7ff f9a8 	bl	8004fc8 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8005c78:	23b2      	movs	r3, #178	; 0xb2
 8005c7a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8005c7e:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8005c82:	4908      	ldr	r1, [pc, #32]	; (8005ca4 <ifx_i2c_init+0xa4>)
 8005c84:	4622      	mov	r2, r4
 8005c86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005c8a:	f7ff fbd3 	bl	8005434 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       RESET_LOW_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
 8005c8e:	2000      	movs	r0, #0
                break;
 8005c90:	bd10      	pop	{r4, pc}
            {
                //Frequency and frame size negotiation
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
                api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8005c92:	4620      	mov	r0, r4
 8005c94:	4902      	ldr	r1, [pc, #8]	; (8005ca0 <ifx_i2c_init+0xa0>)
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
    }

    return (api_status);
}
 8005c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            {
                //Frequency and frame size negotiation
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
                api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8005c9a:	f001 bd8d 	b.w	80077b8 <ifx_i2c_prl_init>
 8005c9e:	bf00      	nop
 8005ca0:	08005bd9 	.word	0x08005bd9
 8005ca4:	08005c01 	.word	0x08005c01

08005ca8 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8005ca8:	b510      	push	{r4, lr}
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
 8005caa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8005cae:	2204      	movs	r2, #4
    switch (p_ctx->state)
 8005cb0:	2b01      	cmp	r3, #1
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	4604      	mov	r4, r0
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8005cb6:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    switch (p_ctx->state)
 8005cba:	d006      	beq.n	8005cca <ifx_i2c_prl_close_event_handler+0x22>
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8005cbc:	69a3      	ldr	r3, [r4, #24]
 8005cbe:	b193      	cbz	r3, 8005ce6 <ifx_i2c_prl_close_event_handler+0x3e>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8005cc0:	69e0      	ldr	r0, [r4, #28]
    }
}
 8005cc2:	b002      	add	sp, #8
 8005cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8005cc8:	4718      	bx	r3
    switch (p_ctx->state)
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8005cca:	6900      	ldr	r0, [r0, #16]
 8005ccc:	9101      	str	r1, [sp, #4]
 8005cce:	f7ff fa25 	bl	800511c <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8005cd2:	68a0      	ldr	r0, [r4, #8]
 8005cd4:	f7ff f978 	bl	8004fc8 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8005cd8:	68e0      	ldr	r0, [r4, #12]
 8005cda:	f7ff f975 	bl	8004fc8 <pal_gpio_set_low>
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8005cde:	69a3      	ldr	r3, [r4, #24]
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8005ce0:	9901      	ldr	r1, [sp, #4]
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1ec      	bne.n	8005cc0 <ifx_i2c_prl_close_event_handler+0x18>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
 8005ce6:	b002      	add	sp, #8
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop

08005cec <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8005cec:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8005cee:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d102      	bne.n	8005cfc <ifx_i2c_open+0x10>
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8005cf6:	f44f 7081 	mov.w	r0, #258	; 0x102
                p_ctx->status = IFX_I2C_STATUS_BUSY;
            }
        }while(FALSE);
    }
    return (api_status);
}
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8005cfc:	6903      	ldr	r3, [r0, #16]
 8005cfe:	4604      	mov	r4, r0
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8005d00:	22b1      	movs	r2, #177	; 0xb1
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8005d02:	6880      	ldr	r0, [r0, #8]
    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8005d04:	609c      	str	r4, [r3, #8]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8005d06:	2500      	movs	r5, #0
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
            p_ctx->do_pal_init = TRUE;
 8005d08:	2301      	movs	r3, #1
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8005d0a:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            p_ctx->do_pal_init = TRUE;
 8005d0e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8005d12:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8005d16:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8005d1a:	f7ff f955 	bl	8004fc8 <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8005d1e:	68e0      	ldr	r0, [r4, #12]
 8005d20:	f7ff f952 	bl	8004fc8 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8005d24:	23b2      	movs	r3, #178	; 0xb2
 8005d26:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8005d2a:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8005d2e:	4905      	ldr	r1, [pc, #20]	; (8005d44 <ifx_i2c_open+0x58>)
 8005d30:	4622      	mov	r2, r4
 8005d32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005d36:	f7ff fb7d 	bl	8005434 <pal_os_event_register_callback_oneshot>
            p_ctx->state = IFX_I2C_STATE_UNINIT;

            api_status = ifx_i2c_init(p_ctx);
            if (IFX_I2C_STACK_SUCCESS == api_status)
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
            p_ctx->do_pal_init = TRUE;
            p_ctx->state = IFX_I2C_STATE_UNINIT;

            api_status = ifx_i2c_init(p_ctx);
 8005d40:	4628      	mov	r0, r5
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	08005c01 	.word	0x08005c01

08005d48 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8005d48:	b570      	push	{r4, r5, r6, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8005d4a:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
 8005d4e:	2d02      	cmp	r5, #2
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8005d50:	b082      	sub	sp, #8
 8005d52:	4604      	mov	r4, r0
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8005d54:	d003      	beq.n	8005d5e <ifx_i2c_transceive+0x16>
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8005d56:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
    }
    return (api_status);
}
 8005d5a:	b002      	add	sp, #8
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8005d5e:	f890 5029 	ldrb.w	r5, [r0, #41]	; 0x29
 8005d62:	2d03      	cmp	r5, #3
 8005d64:	d0f7      	beq.n	8005d56 <ifx_i2c_transceive+0xe>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8005d66:	9d06      	ldr	r5, [sp, #24]
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8005d68:	6223      	str	r3, [r4, #32]
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8005d6a:	6245      	str	r5, [r0, #36]	; 0x24
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8005d6c:	9500      	str	r5, [sp, #0]
 8005d6e:	f001 fd77 	bl	8007860 <ifx_i2c_prl_transceive>
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d1f1      	bne.n	8005d5a <ifx_i2c_transceive+0x12>
 8005d76:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1ee      	bne.n	8005d5a <ifx_i2c_transceive+0x12>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005d82:	e7ea      	b.n	8005d5a <ifx_i2c_transceive+0x12>

08005d84 <ifx_i2c_close>:
    return (api_status);
}


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8005d84:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8005d86:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
 8005d8a:	2a03      	cmp	r2, #3
 8005d8c:	d103      	bne.n	8005d96 <ifx_i2c_close+0x12>
}


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8005d8e:	f44f 7581 	mov.w	r5, #258	; 0x102
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
}
 8005d92:	4628      	mov	r0, r5
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8005d96:	f44f 7281 	mov.w	r2, #258	; 0x102
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8005d9a:	2301      	movs	r3, #1
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8005d9c:	8582      	strh	r2, [r0, #44]	; 0x2c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8005d9e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8005da2:	490a      	ldr	r1, [pc, #40]	; (8005dcc <ifx_i2c_close+0x48>)
 8005da4:	4604      	mov	r4, r0
 8005da6:	f001 fd31 	bl	800780c <ifx_i2c_prl_close>
        if (IFX_I2C_STACK_ERROR == api_status)
 8005daa:	f5b0 7f81 	cmp.w	r0, #258	; 0x102

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8005dae:	4605      	mov	r5, r0
        if (IFX_I2C_STACK_ERROR == api_status)
 8005db0:	d1ef      	bne.n	8005d92 <ifx_i2c_close+0xe>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8005db2:	6920      	ldr	r0, [r4, #16]
 8005db4:	f7ff f9b2 	bl	800511c <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8005db8:	68a0      	ldr	r0, [r4, #8]
 8005dba:	f7ff f905 	bl	8004fc8 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8005dbe:	68e0      	ldr	r0, [r4, #12]
 8005dc0:	f7ff f902 	bl	8004fc8 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005dca:	e7e2      	b.n	8005d92 <ifx_i2c_close+0xe>
 8005dcc:	08005ca9 	.word	0x08005ca9

08005dd0 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	b087      	sub	sp, #28
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
 8005dd6:	2400      	movs	r4, #0
 8005dd8:	f1a3 0a03 	sub.w	sl, r3, #3

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8005ddc:	469b      	mov	fp, r3
 8005dde:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
 8005de2:	9400      	str	r4, [sp, #0]

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8005de4:	4605      	mov	r5, r0
 8005de6:	4690      	mov	r8, r2
 8005de8:	4689      	mov	r9, r1
 8005dea:	fa12 fa8a 	uxtah	sl, r2, sl
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
 8005dee:	9402      	str	r4, [sp, #8]
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
 8005df0:	9401      	str	r4, [sp, #4]
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
 8005df2:	9404      	str	r4, [sp, #16]
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
 8005df4:	9403      	str	r4, [sp, #12]
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8005df6:	f5b9 7f83 	cmp.w	r9, #262	; 0x106
 8005dfa:	d021      	beq.n	8005e40 <ifx_i2c_pl_event_handler+0x70>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
        }
        switch (p_ctx->dl.state)
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	2b0a      	cmp	r3, #10
 8005e00:	f200 814a 	bhi.w	8006098 <ifx_i2c_pl_event_handler+0x2c8>
 8005e04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005e08:	01360154 	.word	0x01360154
 8005e0c:	00db00f4 	.word	0x00db00f4
 8005e10:	005c009b 	.word	0x005c009b
 8005e14:	00220148 	.word	0x00220148
 8005e18:	004b0053 	.word	0x004b0053
 8005e1c:	000b      	.short	0x000b
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8005e1e:	9a01      	ldr	r2, [sp, #4]
 8005e20:	f895 3063 	ldrb.w	r3, [r5, #99]	; 0x63
 8005e24:	f1a2 0202 	sub.w	r2, r2, #2
 8005e28:	fab2 f282 	clz	r2, r2
 8005e2c:	0952      	lsrs	r2, r2, #5
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	f000 81d2 	beq.w	80061d8 <ifx_i2c_pl_event_handler+0x408>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8005e34:	2309      	movs	r3, #9
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8005e36:	f5b9 7f83 	cmp.w	r9, #262	; 0x106
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8005e3a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8005e3e:	d1dd      	bne.n	8005dfc <ifx_i2c_pl_event_handler+0x2c>
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	f000 8140 	beq.w	80060c6 <ifx_i2c_pl_event_handler+0x2f6>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8005e46:	2308      	movs	r3, #8
 8005e48:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                }
            }
            break;
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8005e4c:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 813a 	bne.w	80060ca <ifx_i2c_pl_event_handler+0x2fa>
                {
                    p_ctx->dl.error = 1;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
    {
        ack_nr = 0;
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8005e5c:	6f69      	ldr	r1, [r5, #116]	; 0x74

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8005e5e:	2303      	movs	r3, #3
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005e60:	2400      	movs	r4, #0
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
 8005e62:	f04f 0e01 	mov.w	lr, #1
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8005e66:	2205      	movs	r2, #5
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005e68:	209a      	movs	r0, #154	; 0x9a
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005e6a:	27c0      	movs	r7, #192	; 0xc0
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005e6c:	260a      	movs	r6, #10

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8005e6e:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8005e72:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
    p_ctx->dl.resynced = 1;
 8005e76:	f885 e066 	strb.w	lr, [r5, #102]	; 0x66
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8005e7a:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005e7e:	7108      	strb	r0, [r1, #4]
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005e80:	700f      	strb	r7, [r1, #0]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005e82:	70ce      	strb	r6, [r1, #3]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005e84:	704c      	strb	r4, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8005e86:	708c      	strb	r4, [r1, #2]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f000 fe17 	bl	8006abc <ifx_i2c_pl_send_frame>
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
                    p_ctx->dl.state = DL_STATE_ERROR;
 8005e8e:	2308      	movs	r3, #8
                    p_ctx->dl.error = 0;
 8005e90:	f885 4065 	strb.w	r4, [r5, #101]	; 0x65
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
                    p_ctx->dl.state = DL_STATE_ERROR;
 8005e94:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005e98:	b007      	add	sp, #28
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8005e9e:	9b00      	ldr	r3, [sp, #0]
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	f000 8134 	beq.w	800610e <ifx_i2c_pl_event_handler+0x33e>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8005ea6:	2306      	movs	r3, #6
 8005ea8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 8005eac:	e7a3      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8005eae:	2303      	movs	r3, #3
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8005eb0:	4628      	mov	r0, r5
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8005eb2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005eb6:	b007      	add	sp, #28
 8005eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8005ebc:	f000 be38 	b.w	8006b30 <ifx_i2c_pl_receive_frame>
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8005ec0:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8005ec4:	6f29      	ldr	r1, [r5, #112]	; 0x70

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8005ec6:	3301      	adds	r3, #1
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8005ec8:	f003 0303 	and.w	r3, r3, #3
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005ecc:	f043 04a0 	orr.w	r4, r3, #160	; 0xa0
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005ed0:	b29b      	uxth	r3, r3
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005ed2:	ea84 1003 	eor.w	r0, r4, r3, lsl #4
    h4 = h3 >> 4;
 8005ed6:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005ed8:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005edc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005ee0:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005ee4:	f003 060b 	and.w	r6, r3, #11
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005ee8:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005eea:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 8005eee:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005ef0:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005ef4:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8005ef8:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8005efc:	ea82 03c0 	eor.w	r3, r2, r0, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8005f00:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8005f04:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8005f06:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 8005f0a:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8005f0c:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8005f10:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8005f14:	ea82 2313 	eor.w	r3, r2, r3, lsr #8
 8005f18:	ea83 03c0 	eor.w	r3, r3, r0, lsl #3
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8005f1c:	2002      	movs	r0, #2
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005f1e:	2200      	movs	r2, #0
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005f20:	0a1e      	lsrs	r6, r3, #8
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8005f22:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005f26:	4628      	mov	r0, r5
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8005f28:	700c      	strb	r4, [r1, #0]
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8005f2a:	710b      	strb	r3, [r1, #4]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8005f2c:	70ce      	strb	r6, [r1, #3]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005f2e:	704a      	strb	r2, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8005f30:	708a      	strb	r2, [r1, #2]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005f32:	2205      	movs	r2, #5
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005f34:	b007      	add	sp, #28
 8005f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8005f3a:	f000 bdbf 	b.w	8006abc <ifx_i2c_pl_send_frame>

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8005f3e:	f7ff fab1 	bl	80054a4 <pal_os_timer_get_time_in_milliseconds>
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8005f42:	6ceb      	ldr	r3, [r5, #76]	; 0x4c

    if (p_ctx->tl.api_start_time > current_time_stamp)
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8005f44:	4ad0      	ldr	r2, [pc, #832]	; (8006288 <ifx_i2c_pl_event_handler+0x4b8>)
_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8005f46:	1ac0      	subs	r0, r0, r3

    if (p_ctx->tl.api_start_time > current_time_stamp)
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8005f48:	4290      	cmp	r0, r2
 8005f4a:	f200 80ce 	bhi.w	80060ea <ifx_i2c_pl_event_handler+0x31a>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8005f4e:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	f000 8177 	beq.w	8006246 <ifx_i2c_pl_event_handler+0x476>
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005f58:	f8b5 206c 	ldrh.w	r2, [r5, #108]	; 0x6c
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8005f5c:	6f29      	ldr	r1, [r5, #112]	; 0x70
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005f5e:	9205      	str	r2, [sp, #20]
            status = ifx_i2c_dl_resync(p_ctx);
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8005f60:	3301      	adds	r3, #1
 8005f62:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005f66:	4610      	mov	r0, r2
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
 8005f68:	2302      	movs	r3, #2
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8005f6a:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
 8005f6e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8005f72:	700a      	strb	r2, [r1, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);

    if (0 != frame_len) // Data frame
 8005f74:	2800      	cmp	r0, #0
 8005f76:	f000 8136 	beq.w	80061e6 <ifx_i2c_pl_event_handler+0x416>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8005f7a:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 81a1 	beq.w	80062c6 <ifx_i2c_pl_event_handler+0x4f6>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8005f84:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8005f92:	780a      	ldrb	r2, [r1, #0]
    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8005f94:	9e05      	ldr	r6, [sp, #20]
 8005f96:	f106 0c03 	add.w	ip, r6, #3
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8005f9a:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8005f9e:	2000      	movs	r0, #0
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005fa0:	0a33      	lsrs	r3, r6, #8
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8005fa2:	fa1f fc8c 	uxth.w	ip, ip
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8005fa6:	700a      	strb	r2, [r1, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8005fa8:	f885 0066 	strb.w	r0, [r5, #102]	; 0x66
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;
 8005fac:	708e      	strb	r6, [r1, #2]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8005fae:	704b      	strb	r3, [r1, #1]
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8005fb0:	f1bc 0f00 	cmp.w	ip, #0
 8005fb4:	f040 811f 	bne.w	80061f6 <ifx_i2c_pl_event_handler+0x426>
 8005fb8:	4660      	mov	r0, ip
 8005fba:	4666      	mov	r6, ip
 8005fbc:	e135      	b.n	800622a <ifx_i2c_pl_event_handler+0x45a>
            }
            break;
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 8005fbe:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
 8005fc2:	d07c      	beq.n	80060be <ifx_i2c_pl_event_handler+0x2ee>
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
 8005fc4:	f895 3063 	ldrb.w	r3, [r5, #99]	; 0x63
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 808f 	beq.w	80060f2 <ifx_i2c_pl_event_handler+0x322>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8005fd4:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
 8005fd8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 8005fda:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 8005fdc:	3b05      	subs	r3, #5
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3203      	adds	r2, #3
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	2104      	movs	r1, #4
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005fe6:	46a4      	mov	ip, r4
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8005fe8:	b007      	add	sp, #28
 8005fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8005fee:	4760      	bx	ip
                }
            }
            break;
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8005ff0:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
 8005ff4:	d063      	beq.n	80060be <ifx_i2c_pl_event_handler+0x2ee>
                    break;
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8005ff6:	f1bb 0f04 	cmp.w	fp, #4
 8005ffa:	f67f af54 	bls.w	8005ea6 <ifx_i2c_pl_event_handler+0xd6>
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8005ffe:	eb08 020b 	add.w	r2, r8, fp
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8006002:	f898 3000 	ldrb.w	r3, [r8]
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8006006:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800600a:	f812 0c01 	ldrb.w	r0, [r2, #-1]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
 800600e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8006012:	f898 2002 	ldrb.w	r2, [r8, #2]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8006016:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 800601a:	f3c3 1441 	ubfx	r4, r3, #5, #2
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 800601e:	9000      	str	r0, [sp, #0]
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8006020:	9401      	str	r4, [sp, #4]
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8006022:	09d8      	lsrs	r0, r3, #7
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8006024:	f003 0403 	and.w	r4, r3, #3
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8006028:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800602c:	9303      	str	r3, [sp, #12]
                packet_len = (p_data[1] << 8) | p_data[2];
 800602e:	ea42 2301 	orr.w	r3, r2, r1, lsl #8
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8006032:	9404      	str	r4, [sp, #16]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
 8006034:	9302      	str	r3, [sp, #8]
 8006036:	f108 31ff 	add.w	r1, r8, #4294967295
}

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;
 800603a:	2400      	movs	r4, #0
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 800603c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006040:	4063      	eors	r3, r4
 8006042:	b29b      	uxth	r3, r3
    h2 = h1 & 0x0F;
 8006044:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006048:	b2db      	uxtb	r3, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800604a:	ea83 1306 	eor.w	r3, r3, r6, lsl #4
    h4 = h3 >> 4;
 800604e:	091a      	lsrs	r2, r3, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006050:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 8006054:	ea82 2414 	eor.w	r4, r2, r4, lsr #8
 8006058:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 800605c:	b2a4      	uxth	r4, r4
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 800605e:	4551      	cmp	r1, sl
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006060:	ea84 04c3 	eor.w	r4, r4, r3, lsl #3
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006064:	d1ea      	bne.n	800603c <ifx_i2c_pl_event_handler+0x26c>
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8006066:	2801      	cmp	r0, #1
 8006068:	bf0c      	ite	eq
 800606a:	230b      	moveq	r3, #11
 800606c:	230a      	movne	r3, #10
 800606e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
            }
            break;
 8006072:	e6c0      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
            }
            break;
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8006074:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8006078:	f04f 0305 	mov.w	r3, #5
            }
            break;
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 800607c:	d020      	beq.n	80060c0 <ifx_i2c_pl_event_handler+0x2f0>
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800607e:	f7ff fa11 	bl	80054a4 <pal_os_timer_get_time_in_milliseconds>
                p_ctx->dl.state = DL_STATE_RX;
 8006082:	2303      	movs	r3, #3
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8006084:	67a8      	str	r0, [r5, #120]	; 0x78
                p_ctx->dl.state = DL_STATE_RX;
 8006086:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 800608a:	4628      	mov	r0, r5
 800608c:	f000 fd50 	bl	8006b30 <ifx_i2c_pl_receive_frame>
 8006090:	2800      	cmp	r0, #0
 8006092:	f47f af08 	bne.w	8005ea6 <ifx_i2c_pl_event_handler+0xd6>
 8006096:	e6ff      	b.n	8005e98 <ifx_i2c_pl_event_handler+0xc8>
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 8006098:	2101      	movs	r1, #1
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 800609a:	2200      	movs	r2, #0
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 800609c:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80060a0:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 80060a2:	4613      	mov	r3, r2
 80060a4:	4628      	mov	r0, r5
 80060a6:	46a4      	mov	ip, r4
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 80060a8:	b007      	add	sp, #28
 80060aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80060ae:	4760      	bx	ip
        }
        switch (p_ctx->dl.state)
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 80060b0:	f1b9 0f00 	cmp.w	r9, #0
 80060b4:	bf14      	ite	ne
 80060b6:	2101      	movne	r1, #1
 80060b8:	2102      	moveq	r1, #2
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 80060ba:	2200      	movs	r2, #0
 80060bc:	e7f0      	b.n	80060a0 <ifx_i2c_pl_event_handler+0x2d0>
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80060be:	2305      	movs	r3, #5
 80060c0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 80060c4:	e69a      	b.n	8005dfc <ifx_i2c_pl_event_handler+0x2c>
 80060c6:	4619      	mov	r1, r3
 80060c8:	e7f7      	b.n	80060ba <ifx_i2c_pl_event_handler+0x2ea>
            {
                if (0 == p_ctx->dl.resynced)
                {
                    p_ctx->dl.error = 1;
                }
                if (0 == p_ctx->dl.error)
 80060ca:	f895 2065 	ldrb.w	r2, [r5, #101]	; 0x65
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	f47f aec4 	bne.w	8005e5c <ifx_i2c_pl_event_handler+0x8c>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80060d4:	6fec      	ldr	r4, [r5, #124]	; 0x7c
                }
                if (0 == p_ctx->dl.error)
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80060d6:	2101      	movs	r1, #1
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80060d8:	4628      	mov	r0, r5
 80060da:	4613      	mov	r3, r2
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80060dc:	46a4      	mov	ip, r4
                }
                if (0 == p_ctx->dl.error)
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80060de:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 80060e2:	b007      	add	sp, #28
 80060e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80060e8:	4760      	bx	ip
            p_ctx->dl.state  = DL_STATE_NACK;
        }
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
 80060ea:	2308      	movs	r3, #8
 80060ec:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 80060f0:	e681      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80060f2:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
 80060f6:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80060f8:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 80060fa:	3b05      	subs	r3, #5
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3203      	adds	r2, #3
 8006100:	4628      	mov	r0, r5
 8006102:	2106      	movs	r1, #6
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8006104:	46a4      	mov	ip, r4
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8006106:	b007      	add	sp, #28
 8006108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 800610c:	4760      	bx	ip
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 800610e:	9b02      	ldr	r3, [sp, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f43f aec8 	beq.w	8005ea6 <ifx_i2c_pl_event_handler+0xd6>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8006116:	3305      	adds	r3, #5
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8006118:	459b      	cmp	fp, r3
 800611a:	f47f aec4 	bne.w	8005ea6 <ifx_i2c_pl_event_handler+0xd6>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	3b02      	subs	r3, #2
 8006122:	2b01      	cmp	r3, #1
 8006124:	f67f aebf 	bls.w	8005ea6 <ifx_i2c_pl_event_handler+0xd6>
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8006128:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
 800612c:	9903      	ldr	r1, [sp, #12]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	f002 0203 	and.w	r2, r2, #3
 8006134:	4291      	cmp	r1, r2
 8006136:	f040 80d8 	bne.w	80062ea <ifx_i2c_pl_event_handler+0x51a>
                    continue_state_machine = FALSE;
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
                    break;
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 800613a:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 800613e:	9a04      	ldr	r2, [sp, #16]
 8006140:	4293      	cmp	r3, r2
 8006142:	f040 80bb 	bne.w	80062bc <ifx_i2c_pl_event_handler+0x4ec>
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8006146:	9b01      	ldr	r3, [sp, #4]
 8006148:	2b01      	cmp	r3, #1
 800614a:	f000 80b2 	beq.w	80062b2 <ifx_i2c_pl_event_handler+0x4e2>
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 800614e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006152:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8006156:	4641      	mov	r1, r8
 8006158:	465a      	mov	r2, fp
 800615a:	6f68      	ldr	r0, [r5, #116]	; 0x74
 800615c:	f007 fbae 	bl	800d8bc <memcpy>
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8006160:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8006164:	6f29      	ldr	r1, [r5, #112]	; 0x70
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
                p_ctx->dl.rx_buffer_size = data_len;
 8006166:	f8a5 b06e 	strh.w	fp, [r5, #110]	; 0x6e
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 800616a:	f043 0480 	orr.w	r4, r3, #128	; 0x80
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 800616e:	f003 030f 	and.w	r3, r3, #15
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8006172:	ea84 1003 	eor.w	r0, r4, r3, lsl #4
    h4 = h3 >> 4;
 8006176:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006178:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 800617c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006180:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8006184:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006188:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800618a:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 800618e:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006190:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 8006194:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8006198:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800619c:	ea82 03c0 	eor.w	r3, r2, r0, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 80061a0:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 80061a4:	b2d8      	uxtb	r0, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 80061a6:	ea80 1006 	eor.w	r0, r0, r6, lsl #4
    h4 = h3 >> 4;
 80061aa:	0902      	lsrs	r2, r0, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 80061ac:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 80061b0:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 80061b4:	ea82 2313 	eor.w	r3, r2, r3, lsr #8
 80061b8:	ea83 03c0 	eor.w	r3, r3, r0, lsl #3
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 80061bc:	2200      	movs	r2, #0
                p_ctx->dl.state = DL_STATE_ACK;
 80061be:	2004      	movs	r0, #4
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 80061c0:	0a1e      	lsrs	r6, r3, #8
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
                p_ctx->dl.state = DL_STATE_ACK;
 80061c2:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 80061c6:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 80061ca:	4628      	mov	r0, r5
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 80061cc:	700c      	strb	r4, [r1, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80061ce:	704a      	strb	r2, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 80061d0:	708a      	strb	r2, [r1, #2]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 80061d2:	710b      	strb	r3, [r1, #4]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 80061d4:	70ce      	strb	r6, [r1, #3]
 80061d6:	e6ac      	b.n	8005f32 <ifx_i2c_pl_event_handler+0x162>
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (crc_received != crc_calculated)
 80061d8:	9a00      	ldr	r2, [sp, #0]
 80061da:	42a2      	cmp	r2, r4
 80061dc:	d056      	beq.n	800628c <ifx_i2c_pl_event_handler+0x4bc>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80061de:	2305      	movs	r3, #5
 80061e0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 80061e4:	e607      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 80061e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ea:	700a      	strb	r2, [r1, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80061ec:	9a05      	ldr	r2, [sp, #20]
 80061ee:	704a      	strb	r2, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 80061f0:	708a      	strb	r2, [r1, #2]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 80061f2:	f04f 0c03 	mov.w	ip, #3
 80061f6:	468e      	mov	lr, r1
 80061f8:	2000      	movs	r0, #0
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 80061fa:	f81e 3b01 	ldrb.w	r3, [lr], #1
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 80061fe:	4043      	eors	r3, r0
    h2 = h1 & 0x0F;
 8006200:	f003 060f 	and.w	r6, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006204:	b2db      	uxtb	r3, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8006206:	ea83 1306 	eor.w	r3, r3, r6, lsl #4
    h4 = h3 >> 4;
 800620a:	091a      	lsrs	r2, r3, #4
 800620c:	ebc1 070e 	rsb	r7, r1, lr

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006210:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006214:	b2bf      	uxth	r7, r7
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006216:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 800621a:	ea82 2010 	eor.w	r0, r2, r0, lsr #8
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 800621e:	45bc      	cmp	ip, r7
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006220:	ea80 00c3 	eor.w	r0, r0, r3, lsl #3
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006224:	d8e9      	bhi.n	80061fa <ifx_i2c_pl_event_handler+0x42a>
 8006226:	0a06      	lsrs	r6, r0, #8
 8006228:	b2c0      	uxtb	r0, r0
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 800622a:	9a05      	ldr	r2, [sp, #20]
 800622c:	188b      	adds	r3, r1, r2
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 800622e:	3205      	adds	r2, #5
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8006230:	7118      	strb	r0, [r3, #4]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8006232:	70de      	strb	r6, [r3, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8006234:	b292      	uxth	r2, r2
 8006236:	4628      	mov	r0, r5
 8006238:	f000 fc40 	bl	8006abc <ifx_i2c_pl_send_frame>
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 800623c:	b1f0      	cbz	r0, 800627c <ifx_i2c_pl_event_handler+0x4ac>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 800623e:	2306      	movs	r3, #6
 8006240:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 8006244:	e628      	b.n	8005e98 <ifx_i2c_pl_event_handler+0xc8>
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
    {
        ack_nr = 0;
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8006246:	6f69      	ldr	r1, [r5, #116]	; 0x74

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8006248:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 800624c:	f885 3062 	strb.w	r3, [r5, #98]	; 0x62
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8006250:	2000      	movs	r0, #0
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8006252:	23c0      	movs	r3, #192	; 0xc0
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
 8006254:	2601      	movs	r6, #1
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8006256:	2205      	movs	r2, #5
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8006258:	f885 0064 	strb.w	r0, [r5, #100]	; 0x64
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
 800625c:	f885 6066 	strb.w	r6, [r5, #102]	; 0x66
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8006260:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8006264:	7048      	strb	r0, [r1, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8006266:	7088      	strb	r0, [r1, #2]
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8006268:	700b      	strb	r3, [r1, #0]
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 800626a:	200a      	movs	r0, #10
    p_buffer[4 + frame_len] = (uint8_t)crc;
 800626c:	239a      	movs	r3, #154	; 0x9a
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 800626e:	70c8      	strb	r0, [r1, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8006270:	710b      	strb	r3, [r1, #4]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8006272:	4628      	mov	r0, r5
 8006274:	f000 fc22 	bl	8006abc <ifx_i2c_pl_send_frame>
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8006278:	2800      	cmp	r0, #0
 800627a:	d1e0      	bne.n	800623e <ifx_i2c_pl_event_handler+0x46e>
            break;
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
                if (DL_STATE_ERROR != p_ctx->dl.state)
 800627c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8006280:	2b08      	cmp	r3, #8
 8006282:	f47f ae09 	bne.w	8005e98 <ifx_i2c_pl_event_handler+0xc8>
 8006286:	e5b6      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
 8006288:	0002bf1f 	.word	0x0002bf1f
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 800628c:	f1bb 0f05 	cmpne.w	fp, #5
 8006290:	d814      	bhi.n	80062bc <ifx_i2c_pl_event_handler+0x4ec>	; unpredictable <IT:ne>
 8006292:	9a02      	ldrne	r2, [sp, #8]
 8006294:	b992      	cbnz	r2, 80062bc <ifx_i2c_pl_event_handler+0x4ec>
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8006296:	b9cb      	cbnz	r3, 80062cc <ifx_i2c_pl_event_handler+0x4fc>
                    p_ctx->dl.resynced = 1;
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
                    break;
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	b97b      	cbnz	r3, 80062bc <ifx_i2c_pl_event_handler+0x4ec>
 800629c:	9b01      	ldr	r3, [sp, #4]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d00c      	beq.n	80062bc <ifx_i2c_pl_event_handler+0x4ec>
 80062a2:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 80062a6:	9a04      	ldr	r2, [sp, #16]
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d107      	bne.n	80062bc <ifx_i2c_pl_event_handler+0x4ec>
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80062ac:	9b01      	ldr	r3, [sp, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d147      	bne.n	8006342 <ifx_i2c_pl_event_handler+0x572>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80062b2:	2305      	movs	r3, #5
 80062b4:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 80062b8:	9c00      	ldr	r4, [sp, #0]
 80062ba:	e59c      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80062bc:	2309      	movs	r3, #9
 80062be:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    break;
 80062c2:	9c00      	ldr	r4, [sp, #0]
 80062c4:	e597      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
 80062c6:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 80062ca:	e663      	b.n	8005f94 <ifx_i2c_pl_event_handler+0x1c4>
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    p_ctx->dl.resynced = 1;
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80062cc:	2203      	movs	r2, #3
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80062ce:	2309      	movs	r3, #9
                    p_ctx->dl.resynced = 1;
 80062d0:	2101      	movs	r1, #1
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80062d2:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80062d6:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
                    break;
 80062da:	2202      	movs	r2, #2
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80062dc:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                    p_ctx->dl.resynced = 1;
 80062e0:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
                    break;
 80062e4:	9c00      	ldr	r4, [sp, #0]
 80062e6:	9201      	str	r2, [sp, #4]
 80062e8:	e585      	b.n	8005df6 <ifx_i2c_pl_event_handler+0x26>
        p_ctx->dl.resynced = 0;
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 80062ea:	f043 0480 	orr.w	r4, r3, #128	; 0x80
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 80062ee:	f003 030f 	and.w	r3, r3, #15
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 80062f2:	ea84 1103 	eor.w	r1, r4, r3, lsl #4
    h4 = h3 >> 4;
 80062f6:	090a      	lsrs	r2, r1, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 80062f8:	ea82 0141 	eor.w	r1, r2, r1, lsl #1
 80062fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006300:	ea82 03c3 	eor.w	r3, r2, r3, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8006304:	f003 000f 	and.w	r0, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006308:	b2d9      	uxtb	r1, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800630a:	ea81 1100 	eor.w	r1, r1, r0, lsl #4
    h4 = h3 >> 4;
 800630e:	090a      	lsrs	r2, r1, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006310:	ea82 0141 	eor.w	r1, r2, r1, lsl #1
 8006314:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
 8006318:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800631c:	ea82 03c1 	eor.w	r3, r2, r1, lsl #3
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
 8006320:	f003 000f 	and.w	r0, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006324:	b2d9      	uxtb	r1, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8006326:	ea81 1100 	eor.w	r1, r1, r0, lsl #4
    h4 = h3 >> 4;
 800632a:	090a      	lsrs	r2, r1, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 800632c:	ea82 0141 	eor.w	r1, r2, r1, lsl #1
 8006330:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8006334:	ea82 2313 	eor.w	r3, r2, r3, lsr #8
 8006338:	ea83 03c0 	eor.w	r3, r3, r0, lsl #3
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 800633c:	6f69      	ldr	r1, [r5, #116]	; 0x74
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 800633e:	2009      	movs	r0, #9
 8006340:	e5ed      	b.n	8005f1e <ifx_i2c_pl_event_handler+0x14e>

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8006342:	9a03      	ldr	r2, [sp, #12]
 8006344:	6fec      	ldr	r4, [r5, #124]	; 0x7c
                    break;
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8006346:	2301      	movs	r3, #1
 8006348:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 800634c:	4628      	mov	r0, r5
 800634e:	2102      	movs	r1, #2
 8006350:	4613      	mov	r3, r2
 8006352:	e6a8      	b.n	80060a6 <ifx_i2c_pl_event_handler+0x2d6>

08006354 <ifx_i2c_dl_init>:

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8006354:	2300      	movs	r3, #0
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	460d      	mov	r5, r1
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 800635a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 800635e:	490e      	ldr	r1, [pc, #56]	; (8006398 <ifx_i2c_dl_init+0x44>)
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006360:	4604      	mov	r4, r0
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8006362:	f000 fb73 	bl	8006a4c <ifx_i2c_pl_init>
 8006366:	b110      	cbz	r0, 800636e <ifx_i2c_dl_init+0x1a>
    {
        return (IFX_I2C_STACK_ERROR);
 8006368:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;

    return IFX_I2C_STACK_SUCCESS;
}
 800636c:	bd70      	pop	{r4, r5, r6, pc}
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800636e:	2303      	movs	r3, #3
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
 8006370:	2601      	movs	r6, #1
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8006372:	f504 7129 	add.w	r1, r4, #676	; 0x2a4
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8006376:	f204 32ba 	addw	r2, r4, #954	; 0x3ba
    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
 800637a:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    p_ctx->dl.error = 0;
 800637e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
 8006382:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8006386:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 800638a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 800638e:	67e5      	str	r5, [r4, #124]	; 0x7c
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8006390:	6721      	str	r1, [r4, #112]	; 0x70
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8006392:	6762      	str	r2, [r4, #116]	; 0x74

    return IFX_I2C_STACK_SUCCESS;
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	bf00      	nop
 8006398:	08005dd1 	.word	0x08005dd1

0800639c <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 800639c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d002      	beq.n	80063aa <ifx_i2c_dl_send_frame+0xe>
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}
 80063a4:	f44f 7081 	mov.w	r0, #258	; 0x102
 80063a8:	4770      	bx	lr

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 80063aa:	2900      	cmp	r1, #0
 80063ac:	d0fa      	beq.n	80063a4 <ifx_i2c_dl_send_frame+0x8>

    return IFX_I2C_STACK_SUCCESS;
}

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 80063ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 80063b0:	6f05      	ldr	r5, [r0, #112]	; 0x70
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 80063b2:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    }

    p_ctx->dl.state = DL_STATE_TX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
 80063b6:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
    p_ctx->dl.retransmit_counter = 0;
 80063ba:	2200      	movs	r2, #0
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
 80063bc:	2602      	movs	r6, #2
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 80063be:	240a      	movs	r4, #10
 80063c0:	6684      	str	r4, [r0, #104]	; 0x68
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
 80063c2:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
    p_ctx->dl.retransmit_counter = 0;
 80063c6:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
    p_ctx->dl.action_rx_only = 0;
 80063ca:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 80063ce:	702b      	strb	r3, [r5, #0]
    if (0 != frame_len) // Data frame
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80063d0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80063d4:	3301      	adds	r3, #1
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 80063de:	782e      	ldrb	r6, [r5, #0]
 80063e0:	ea46 0383 	orr.w	r3, r6, r3, lsl #2
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 80063e4:	f64f 76fd 	movw	r6, #65533	; 0xfffd
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80063e8:	0a0c      	lsrs	r4, r1, #8
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 80063ea:	42b1      	cmp	r1, r6
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 80063ec:	702b      	strb	r3, [r5, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 80063ee:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;
 80063f2:	70a9      	strb	r1, [r5, #2]
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80063f4:	706c      	strb	r4, [r5, #1]
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 80063f6:	d027      	beq.n	8006448 <ifx_i2c_dl_send_frame+0xac>
 80063f8:	1c8f      	adds	r7, r1, #2
 80063fa:	4696      	mov	lr, r2
 80063fc:	fa15 f787 	uxtah	r7, r5, r7
 8006400:	1e6e      	subs	r6, r5, #1
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8006402:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8006406:	ea8e 0303 	eor.w	r3, lr, r3
    h2 = h1 & 0x0F;
 800640a:	f003 040f 	and.w	r4, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 800640e:	b2db      	uxtb	r3, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8006410:	ea83 1304 	eor.w	r3, r3, r4, lsl #4
    h4 = h3 >> 4;
 8006414:	091a      	lsrs	r2, r3, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006416:	ea82 0343 	eor.w	r3, r2, r3, lsl #1
 800641a:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 800641e:	ea82 221e 	eor.w	r2, r2, lr, lsr #8
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006422:	42be      	cmp	r6, r7
    h1 = (seed ^ byte) & 0xFF;
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
    h4 = h3 >> 4;

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8006424:	ea82 0ec3 	eor.w	lr, r2, r3, lsl #3
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006428:	d1eb      	bne.n	8006402 <ifx_i2c_dl_send_frame+0x66>
 800642a:	ea4f 241e 	mov.w	r4, lr, lsr #8
 800642e:	fa5f fe8e 	uxtb.w	lr, lr
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8006432:	186b      	adds	r3, r5, r1
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8006434:	1d4a      	adds	r2, r1, #5
    p_buffer[1] = (uint8_t)(frame_len >> 8);
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8006436:	70dc      	strb	r4, [r3, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8006438:	f883 e004 	strb.w	lr, [r3, #4]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 800643c:	4629      	mov	r1, r5
 800643e:	b292      	uxth	r2, r2
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}
 8006440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8006444:	f000 bb3a 	b.w	8006abc <ifx_i2c_pl_send_frame>
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 8006448:	4696      	mov	lr, r2
 800644a:	4614      	mov	r4, r2
 800644c:	e7f1      	b.n	8006432 <ifx_i2c_dl_send_frame+0x96>
 800644e:	bf00      	nop

08006450 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8006450:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8006454:	2b01      	cmp	r3, #1
 8006456:	d002      	beq.n	800645e <ifx_i2c_dl_receive_frame+0xe>
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;

    return (ifx_i2c_pl_receive_frame(p_ctx));
}
 8006458:	f44f 7081 	mov.w	r0, #258	; 0x102
 800645c:	4770      	bx	lr

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800645e:	b510      	push	{r4, lr}
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8006460:	2103      	movs	r1, #3
    p_ctx->dl.retransmit_counter = 0;
 8006462:	2200      	movs	r2, #0
    p_ctx->dl.action_rx_only = 1;
 8006464:	f880 3063 	strb.w	r3, [r0, #99]	; 0x63
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8006468:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    p_ctx->dl.retransmit_counter = 0;
 800646c:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8006470:	4604      	mov	r4, r0
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8006472:	f7ff f817 	bl	80054a4 <pal_os_timer_get_time_in_milliseconds>
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <ifx_i2c_dl_receive_frame+0x38>)

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8006478:	67a0      	str	r0, [r4, #120]	; 0x78
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 800647a:	66a3      	str	r3, [r4, #104]	; 0x68

    return (ifx_i2c_pl_receive_frame(p_ctx));
 800647c:	4620      	mov	r0, r4
}
 800647e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8006482:	f000 bb55 	b.w	8006b30 <ifx_i2c_pl_receive_frame>
 8006486:	bf00      	nop
 8006488:	0002bf20 	.word	0x0002bf20

0800648c <ifx_i2c_pl_status_poll_callback>:
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
}


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 800648c:	4601      	mov	r1, r0
 800648e:	b410      	push	{r4}
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006490:	2201      	movs	r2, #1
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006492:	2482      	movs	r4, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006494:	2004      	movs	r0, #4
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006496:	f881 4080 	strb.w	r4, [r1, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 800649a:	f881 219a 	strb.w	r2, [r1, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800649e:	f881 219b 	strb.w	r2, [r1, #411]	; 0x19b
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80064a2:	23c8      	movs	r3, #200	; 0xc8
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 80064a4:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80064a8:	f8a1 319c 	strh.w	r3, [r1, #412]	; 0x19c
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 80064ac:	f8a1 2196 	strh.w	r2, [r1, #406]	; 0x196
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80064b0:	6908      	ldr	r0, [r1, #16]

_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
}
 80064b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80064b6:	3180      	adds	r1, #128	; 0x80
 80064b8:	f7fe be32 	b.w	8005120 <pal_i2c_write>

080064bc <ifx_i2c_pal_poll_callback>:
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80064bc:	f890 319b 	ldrb.w	r3, [r0, #411]	; 0x19b
 80064c0:	2b01      	cmp	r3, #1
        }
    }
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 80064c2:	4601      	mov	r1, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80064c4:	d008      	beq.n	80064d8 <ifx_i2c_pal_poll_callback+0x1c>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
    }
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d000      	beq.n	80064cc <ifx_i2c_pal_poll_callback+0x10>
 80064ca:	4770      	bx	lr
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80064cc:	f8b1 2198 	ldrh.w	r2, [r1, #408]	; 0x198
 80064d0:	6900      	ldr	r0, [r0, #16]
 80064d2:	3180      	adds	r1, #128	; 0x80
 80064d4:	f7fe be54 	b.w	8005180 <pal_i2c_read>
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 80064d8:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
 80064dc:	6900      	ldr	r0, [r0, #16]
 80064de:	3180      	adds	r1, #128	; 0x80
 80064e0:	f7fe be1e 	b.w	8005120 <pal_i2c_write>

080064e4 <ifx_i2c_pl_negotiation_event_handler>:

    return (status);

}
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80064e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e8:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80064ec:	8885      	ldrh	r5, [r0, #4]

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80064ee:	2b55      	cmp	r3, #85	; 0x55
{
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80064f0:	ea4f 2715 	mov.w	r7, r5, lsr #8

    return (status);

}
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80064f4:	4604      	mov	r4, r0
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80064f6:	f44f 7181 	mov.w	r1, #258	; 0x102
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80064fa:	b2ed      	uxtb	r5, r5
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80064fc:	f04f 06aa 	mov.w	r6, #170	; 0xaa
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8006500:	f04f 0833 	mov.w	r8, #51	; 0x33

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8006504:	d025      	beq.n	8006552 <ifx_i2c_pl_negotiation_event_handler+0x6e>
 8006506:	d93e      	bls.n	8006586 <ifx_i2c_pl_negotiation_event_handler+0xa2>
 8006508:	2b88      	cmp	r3, #136	; 0x88
 800650a:	f000 80c6 	beq.w	800669a <ifx_i2c_pl_negotiation_event_handler+0x1b6>
 800650e:	d858      	bhi.n	80065c2 <ifx_i2c_pl_negotiation_event_handler+0xde>
 8006510:	2b66      	cmp	r3, #102	; 0x66
 8006512:	f000 80af 	beq.w	8006674 <ifx_i2c_pl_negotiation_event_handler+0x190>
 8006516:	2b77      	cmp	r3, #119	; 0x77
 8006518:	f040 810a 	bne.w	8006730 <ifx_i2c_pl_negotiation_event_handler+0x24c>
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 800651c:	6920      	ldr	r0, [r4, #16]
            break;
            // Frequency negotiated, Set frequency at master
            case PL_INIT_AGREE_FREQ:
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 800651e:	8861      	ldrh	r1, [r4, #2]
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8006520:	f8d0 900c 	ldr.w	r9, [r0, #12]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	60c3      	str	r3, [r0, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8006528:	f7fe fe5a 	bl	80051e0 <pal_i2c_set_bitrate>
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	f8c3 900c 	str.w	r9, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8006532:	2800      	cmp	r0, #0
 8006534:	f000 80eb 	beq.w	800670e <ifx_i2c_pl_negotiation_event_handler+0x22a>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8006538:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	f8a4 219c 	strh.w	r2, [r4, #412]	; 0x19c
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 80f6 	bne.w	8006734 <ifx_i2c_pl_negotiation_event_handler+0x250>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8006548:	23aa      	movs	r3, #170	; 0xaa
 800654a:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
 800654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8006552:	2566      	movs	r5, #102	; 0x66
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006554:	2084      	movs	r0, #132	; 0x84
    p_ctx->pl.buffer_tx_len = 1;
 8006556:	2201      	movs	r2, #1

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006558:	2104      	movs	r1, #4
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800655a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800655e:	23c8      	movs	r3, #200	; 0xc8
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8006560:	f884 51ac 	strb.w	r5, [r4, #428]	; 0x1ac
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006564:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006568:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800656c:	f8a4 1198 	strh.w	r1, [r4, #408]	; 0x198
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006570:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006574:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006578:	6920      	ldr	r0, [r4, #16]
 800657a:	f104 0180 	add.w	r1, r4, #128	; 0x80
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800657e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006582:	f7fe bdcd 	b.w	8005120 <pal_i2c_write>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8006586:	2b22      	cmp	r3, #34	; 0x22
 8006588:	f000 8082 	beq.w	8006690 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 800658c:	d940      	bls.n	8006610 <ifx_i2c_pl_negotiation_event_handler+0x12c>
 800658e:	2b33      	cmp	r3, #51	; 0x33
 8006590:	d05f      	beq.n	8006652 <ifx_i2c_pl_negotiation_event_handler+0x16e>
 8006592:	2b44      	cmp	r3, #68	; 0x44
 8006594:	f040 80ca 	bne.w	800672c <ifx_i2c_pl_negotiation_event_handler+0x248>
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8006598:	8862      	ldrh	r2, [r4, #2]
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800659a:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 800659e:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80065a2:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80065a6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80065aa:	f240 808f 	bls.w	80066cc <ifx_i2c_pl_negotiation_event_handler+0x1e8>
 80065ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80065b2:	f240 80c9 	bls.w	8006748 <ifx_i2c_pl_negotiation_event_handler+0x264>
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 80065b6:	2266      	movs	r2, #102	; 0x66
 80065b8:	4613      	mov	r3, r2
 80065ba:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
 80065be:	2a55      	cmp	r2, #85	; 0x55
 80065c0:	e7a1      	b.n	8006506 <ifx_i2c_pl_negotiation_event_handler+0x22>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80065c2:	2baa      	cmp	r3, #170	; 0xaa
 80065c4:	d047      	beq.n	8006656 <ifx_i2c_pl_negotiation_event_handler+0x172>
 80065c6:	2bbb      	cmp	r3, #187	; 0xbb
 80065c8:	d1c1      	bne.n	800654e <ifx_i2c_pl_negotiation_event_handler+0x6a>
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 80065ca:	6920      	ldr	r0, [r4, #16]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 80065cc:	2300      	movs	r3, #0
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 80065ce:	f8d0 900c 	ldr.w	r9, [r0, #12]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 80065d2:	60c3      	str	r3, [r0, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 80065d4:	2164      	movs	r1, #100	; 0x64
 80065d6:	f7fe fe03 	bl	80051e0 <pal_i2c_set_bitrate>
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	f8c3 900c 	str.w	r9, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
 80065e0:	2800      	cmp	r0, #0
 80065e2:	f000 809b 	beq.w	800671c <ifx_i2c_pl_negotiation_event_handler+0x238>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 80065e6:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	f8a4 219c 	strh.w	r2, [r4, #412]	; 0x19c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 809f 	bne.w	8006734 <ifx_i2c_pl_negotiation_event_handler+0x250>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80065f6:	23aa      	movs	r3, #170	; 0xaa
 80065f8:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                    p_buffer = NULL;
                    buffer_len = 0;
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 80065fc:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8006600:	4961      	ldr	r1, [pc, #388]	; (8006788 <ifx_i2c_pl_negotiation_event_handler+0x2a4>)
 8006602:	4622      	mov	r2, r4
 8006604:	f642 63e0 	movw	r3, #12000	; 0x2ee0
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 8006608:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                else if (IFX_I2C_STACK_ERROR == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
                    p_buffer = NULL;
                    buffer_len = 0;
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 800660c:	f7fe bf12 	b.w	8005434 <pal_os_event_register_callback_oneshot>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8006610:	2b11      	cmp	r3, #17
 8006612:	f040 8089 	bne.w	8006728 <ifx_i2c_pl_negotiation_event_handler+0x244>
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8006616:	f04f 0e22 	mov.w	lr, #34	; 0x22
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800661a:	2681      	movs	r6, #129	; 0x81
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800661c:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800661e:	2301      	movs	r3, #1
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006620:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8006622:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006626:	2203      	movs	r2, #3
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006628:	f884 7081 	strb.w	r7, [r4, #129]	; 0x81
 800662c:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8006630:	f884 e1ac 	strb.w	lr, [r4, #428]	; 0x1ac
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006634:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006638:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800663c:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006640:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006644:	6920      	ldr	r0, [r4, #16]
 8006646:	f104 0180 	add.w	r1, r4, #128	; 0x80
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800664a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800664e:	f7fe bd67 	b.w	8005120 <pal_i2c_write>
            }
            break;
            // Read the current Max frequency supported by slave
            case PL_INIT_GET_FREQ_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 8006652:	2544      	movs	r5, #68	; 0x44
 8006654:	e77e      	b.n	8006554 <ifx_i2c_pl_negotiation_event_handler+0x70>
            break;
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8006656:	2900      	cmp	r1, #0
 8006658:	bf14      	ite	ne
 800665a:	2300      	movne	r3, #0
 800665c:	2302      	moveq	r3, #2
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 800665e:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
 8006662:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
 8006666:	2200      	movs	r2, #0
 8006668:	4620      	mov	r0, r4
 800666a:	46ac      	mov	ip, r5
 800666c:	4613      	mov	r3, r2
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800666e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8006672:	4760      	bx	ip
            }
            break;
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8006674:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8006678:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
                if (p_ctx->frequency > slave_frequency)
 800667c:	8862      	ldrh	r2, [r4, #2]
 800667e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006682:	429a      	cmp	r2, r3
 8006684:	d91c      	bls.n	80066c0 <ifx_i2c_pl_negotiation_event_handler+0x1dc>
 8006686:	23aa      	movs	r3, #170	; 0xaa
                {
                    LOG_PL("[IFX-PL]: Unexpected frequency in MAX_SCL_FREQU\n");
                    p_buffer = NULL;
                    buffer_len = 0;
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8006688:	f884 61ac 	strb.w	r6, [r4, #428]	; 0x1ac
 800668c:	2b55      	cmp	r3, #85	; 0x55
 800668e:	e73a      	b.n	8006506 <ifx_i2c_pl_negotiation_event_handler+0x22>
            }
            break;
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 8006690:	2588      	movs	r5, #136	; 0x88
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006692:	2081      	movs	r0, #129	; 0x81
    p_ctx->pl.buffer_tx_len = 1;
 8006694:	2201      	movs	r2, #1

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006696:	2102      	movs	r1, #2
 8006698:	e75f      	b.n	800655a <ifx_i2c_pl_negotiation_event_handler+0x76>
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 800669a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800669e:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 80066a2:	88a0      	ldrh	r0, [r4, #4]
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80066a4:	f884 61ac 	strb.w	r6, [r4, #428]	; 0x1ac
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 80066a8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 80066ac:	4290      	cmp	r0, r2
                {
                    p_ctx->frame_size = slave_frame_len;
 80066ae:	f04f 03aa 	mov.w	r3, #170	; 0xaa
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 80066b2:	d303      	bcc.n	80066bc <ifx_i2c_pl_negotiation_event_handler+0x1d8>
                {
                    p_ctx->frame_size = slave_frame_len;
 80066b4:	80a2      	strh	r2, [r4, #4]
                    event = IFX_I2C_STACK_SUCCESS;
 80066b6:	2100      	movs	r1, #0
 80066b8:	2b55      	cmp	r3, #85	; 0x55
 80066ba:	e724      	b.n	8006506 <ifx_i2c_pl_negotiation_event_handler+0x22>
 80066bc:	2b55      	cmp	r3, #85	; 0x55
 80066be:	e722      	b.n	8006506 <ifx_i2c_pl_negotiation_event_handler+0x22>
                    buffer_len = 0;
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 80066c0:	2277      	movs	r2, #119	; 0x77
 80066c2:	4613      	mov	r3, r2
 80066c4:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
 80066c8:	2a55      	cmp	r2, #85	; 0x55
 80066ca:	e71c      	b.n	8006506 <ifx_i2c_pl_negotiation_event_handler+0x22>
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 80066cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80066d0:	f67f af71 	bls.w	80065b6 <ifx_i2c_pl_negotiation_event_handler+0xd2>
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80066d4:	2580      	movs	r5, #128	; 0x80
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 80066d6:	2755      	movs	r7, #85	; 0x55
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80066d8:	2689      	movs	r6, #137	; 0x89
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80066da:	2203      	movs	r2, #3
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80066dc:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80066de:	2301      	movs	r3, #1
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80066e0:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80066e2:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 80066e6:	f884 71ac 	strb.w	r7, [r4, #428]	; 0x1ac
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80066ea:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80066ee:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
 80066f2:	f884 2082 	strb.w	r2, [r4, #130]	; 0x82
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80066f6:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80066fa:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80066fe:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006702:	6920      	ldr	r0, [r4, #16]
 8006704:	1961      	adds	r1, r4, r5
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 8006706:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800670a:	f7fe bd09 	b.w	8005120 <pal_i2c_write>
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 800670e:	2211      	movs	r2, #17
 8006710:	4613      	mov	r3, r2
 8006712:	4601      	mov	r1, r0
 8006714:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
 8006718:	2a55      	cmp	r2, #85	; 0x55
 800671a:	e6f4      	b.n	8006506 <ifx_i2c_pl_negotiation_event_handler+0x22>
 800671c:	2333      	movs	r3, #51	; 0x33
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
                if (IFX_I2C_STACK_SUCCESS == event)
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 800671e:	f884 81ac 	strb.w	r8, [r4, #428]	; 0x1ac
 8006722:	4601      	mov	r1, r0
 8006724:	2b55      	cmp	r3, #85	; 0x55
 8006726:	e6ee      	b.n	8006506 <ifx_i2c_pl_negotiation_event_handler+0x22>
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (PAL_I2C_EVENT_SUCCESS != status)
    {
        if (0 != (p_ctx->pl.retry_counter--))
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8006734:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8006738:	4913      	ldr	r1, [pc, #76]	; (8006788 <ifx_i2c_pl_negotiation_event_handler+0x2a4>)
 800673a:	4622      	mov	r2, r4
 800673c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 8006740:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (PAL_I2C_EVENT_SUCCESS != status)
    {
        if (0 != (p_ctx->pl.retry_counter--))
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8006744:	f7fe be76 	b.w	8005434 <pal_os_event_register_callback_oneshot>
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006748:	2680      	movs	r6, #128	; 0x80
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800674a:	f04f 0e55 	mov.w	lr, #85	; 0x55
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800674e:	2789      	movs	r7, #137	; 0x89
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006750:	2504      	movs	r5, #4
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8006752:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006754:	2301      	movs	r3, #1
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006756:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8006758:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 800675c:	2203      	movs	r2, #3
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800675e:	f884 e1ac 	strb.w	lr, [r4, #428]	; 0x1ac
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006762:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006766:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
 800676a:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800676e:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006772:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006776:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800677a:	6920      	ldr	r0, [r4, #16]
 800677c:	19a1      	adds	r1, r4, r6
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800677e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006782:	f7fe bccd 	b.w	8005120 <pal_i2c_write>
 8006786:	bf00      	nop
 8006788:	080064e5 	.word	0x080064e5

0800678c <ifx_i2c_pl_pal_event_handler>:
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 800678c:	4602      	mov	r2, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    switch (event)
 800678e:	b179      	cbz	r1, 80067b0 <ifx_i2c_pl_pal_event_handler+0x24>
 8006790:	2902      	cmp	r1, #2
 8006792:	d900      	bls.n	8006796 <ifx_i2c_pl_pal_event_handler+0xa>
 8006794:	4770      	bx	lr
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8006796:	f8b0 319c 	ldrh.w	r3, [r0, #412]	; 0x19c
 800679a:	1e59      	subs	r1, r3, #1
 800679c:	f8a0 119c 	strh.w	r1, [r0, #412]	; 0x19c
 80067a0:	b163      	cbz	r3, 80067bc <ifx_i2c_pl_pal_event_handler+0x30>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 80067a2:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80067a6:	490c      	ldr	r1, [pc, #48]	; (80067d8 <ifx_i2c_pl_pal_event_handler+0x4c>)
 80067a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ac:	f7fe be42 	b.w	8005434 <pal_os_event_register_callback_oneshot>
            }
            break;

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 80067b0:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80067b4:	4909      	ldr	r1, [pc, #36]	; (80067dc <ifx_i2c_pl_pal_event_handler+0x50>)
 80067b6:	2332      	movs	r3, #50	; 0x32
 80067b8:	f7fe be3c 	b.w	8005434 <pal_os_event_register_callback_oneshot>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 80067bc:	b410      	push	{r4}
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80067be:	2102      	movs	r1, #2
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80067c0:	f8d0 41a8 	ldr.w	r4, [r0, #424]	; 0x1a8
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80067c4:	f880 119f 	strb.w	r1, [r0, #415]	; 0x19f
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80067c8:	46a4      	mov	ip, r4
 80067ca:	f44f 7183 	mov.w	r1, #262	; 0x106
 80067ce:	461a      	mov	r2, r3
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
        default:
            break;
    }
}
 80067d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80067d4:	4760      	bx	ip
 80067d6:	bf00      	nop
 80067d8:	080064bd 	.word	0x080064bd
 80067dc:	080068c5 	.word	0x080068c5

080067e0 <ifx_i2c_pl_soft_reset>:
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80067e0:	b470      	push	{r4, r5, r6}
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
 80067e2:	f890 31ad 	ldrb.w	r3, [r0, #429]	; 0x1ad
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80067e6:	b083      	sub	sp, #12
    uint8_t i2c_mode_value[2] = {0};
 80067e8:	2200      	movs	r2, #0
    switch (p_ctx->pl.request_soft_reset)
 80067ea:	3b99      	subs	r3, #153	; 0x99
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80067ec:	4604      	mov	r4, r0
    uint8_t i2c_mode_value[2] = {0};
 80067ee:	f8ad 2004 	strh.w	r2, [sp, #4]
    switch (p_ctx->pl.request_soft_reset)
 80067f2:	2b0a      	cmp	r3, #10
 80067f4:	d84a      	bhi.n	800688c <ifx_i2c_pl_soft_reset+0xac>
 80067f6:	e8df f003 	tbb	[pc, r3]
 80067fa:	492f      	.short	0x492f
 80067fc:	49494949 	.word	0x49494949
 8006800:	13284949 	.word	0x13284949
 8006804:	06          	.byte	0x06
 8006805:	00          	.byte	0x00
            }
            break;
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8006806:	23a1      	movs	r3, #161	; 0xa1
 8006808:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 800680c:	492c      	ldr	r1, [pc, #176]	; (80068c0 <ifx_i2c_pl_soft_reset+0xe0>)
 800680e:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 8006812:	4622      	mov	r2, r4
 8006814:	f642 63e0 	movw	r3, #12000	; 0x2ee0
            break;
        }
        default:
            break;
    }
}
 8006818:	b003      	add	sp, #12
 800681a:	bc70      	pop	{r4, r5, r6}
            break;
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 800681c:	f7fe be0a 	b.w	8005434 <pal_os_event_register_callback_oneshot>
            break;
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8006820:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 800682e:	bb83      	cbnz	r3, 8006892 <ifx_i2c_pl_soft_reset+0xb2>
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8006830:	f8d0 51a8 	ldr.w	r5, [r0, #424]	; 0x1a8
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8006834:	2302      	movs	r3, #2
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8006836:	2200      	movs	r2, #0
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8006838:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 800683c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006840:	4613      	mov	r3, r2
 8006842:	46ac      	mov	ip, r5
            break;
        }
        default:
            break;
    }
}
 8006844:	b003      	add	sp, #12
 8006846:	bc70      	pop	{r4, r5, r6}
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8006848:	4760      	bx	ip
                                                   STARTUP_TIME_MSEC);
            break;
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 800684a:	2301      	movs	r3, #1
 800684c:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
            break;
        }
        default:
            break;
    }
}
 8006850:	b003      	add	sp, #12
 8006852:	bc70      	pop	{r4, r5, r6}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8006854:	f7ff be46 	b.w	80064e4 <ifx_i2c_pl_negotiation_event_handler>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006858:	2201      	movs	r2, #1
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 800685a:	25a2      	movs	r5, #162	; 0xa2
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800685c:	2082      	movs	r0, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800685e:	2104      	movs	r1, #4
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006860:	23c8      	movs	r3, #200	; 0xc8
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8006862:	f884 51ad 	strb.w	r5, [r4, #429]	; 0x1ad
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006866:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
 800686a:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 800686e:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006872:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006876:	f8a4 1198 	strh.w	r1, [r4, #408]	; 0x198
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800687a:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800687e:	6920      	ldr	r0, [r4, #16]
 8006880:	f104 0180 	add.w	r1, r4, #128	; 0x80
            break;
        }
        default:
            break;
    }
}
 8006884:	b003      	add	sp, #12
 8006886:	bc70      	pop	{r4, r5, r6}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006888:	f7fe bc4a 	b.w	8005120 <pal_i2c_write>
            break;
        }
        default:
            break;
    }
}
 800688c:	b003      	add	sp, #12
 800688e:	bc70      	pop	{r4, r5, r6}
 8006890:	4770      	bx	lr
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8006892:	23a3      	movs	r3, #163	; 0xa3
 8006894:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006898:	2688      	movs	r6, #136	; 0x88
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 800689a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800689e:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80068a2:	2203      	movs	r2, #3

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80068a4:	2002      	movs	r0, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80068a6:	21c8      	movs	r1, #200	; 0xc8
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80068a8:	2301      	movs	r3, #1
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80068aa:	f8a4 5081 	strh.w	r5, [r4, #129]	; 0x81
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80068ae:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80068b2:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80068b6:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80068ba:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
 80068be:	e7de      	b.n	800687e <ifx_i2c_pl_soft_reset+0x9e>
 80068c0:	080067e1 	.word	0x080067e1

080068c4 <ifx_i2c_pl_guard_time_callback>:
    }
}


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 80068c4:	b570      	push	{r4, r5, r6, lr}
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 80068c6:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
 80068ca:	2b01      	cmp	r3, #1
    }
}


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 80068cc:	4604      	mov	r4, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 80068ce:	d002      	beq.n	80068d6 <ifx_i2c_pl_guard_time_callback+0x12>
        {
            LOG_PL("[IFX-PL]: GT done -> REG is read\n");
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
        }
    }
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d010      	beq.n	80068f6 <ifx_i2c_pl_guard_time_callback+0x32>
 80068d4:	bd70      	pop	{r4, r5, r6, pc}
_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80068d6:	f890 319b 	ldrb.w	r3, [r0, #411]	; 0x19b
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d1f8      	bne.n	80068d0 <ifx_i2c_pl_guard_time_callback+0xc>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 80068de:	2302      	movs	r3, #2
 80068e0:	f880 319b 	strb.w	r3, [r0, #411]	; 0x19b
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80068e4:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
 80068e8:	6900      	ldr	r0, [r0, #16]
 80068ea:	f104 0180 	add.w	r1, r4, #128	; 0x80
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80068ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80068f2:	f7fe bc45 	b.w	8005180 <pal_i2c_read>
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 80068f6:	f894 319f 	ldrb.w	r3, [r4, #415]	; 0x19f
 80068fa:	3b01      	subs	r3, #1
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d86b      	bhi.n	80069d8 <ifx_i2c_pl_guard_time_callback+0x114>
 8006900:	e8df f003 	tbb	[pc, r3]
 8006904:	08173a65 	.word	0x08173a65
 8006908:	03          	.byte	0x03
 8006909:	00          	.byte	0x00
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 800690a:	4620      	mov	r0, r4
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800690c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        switch (p_ctx->pl.frame_state)
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 8006910:	f7ff bf66 	b.w	80067e0 <ifx_i2c_pl_soft_reset>
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
 8006914:	2302      	movs	r3, #2
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8006916:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
 800691a:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800691e:	4620      	mov	r0, r4
 8006920:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
 8006924:	f104 0280 	add.w	r2, r4, #128	; 0x80
 8006928:	46ac      	mov	ip, r5
 800692a:	2100      	movs	r1, #0
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800692c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8006930:	4760      	bx	ip
            //lint -fallthrough "For write frame, polling of i2c status register is skipped"
            // Do read/write frame
            case PL_STATE_DATA_AVAILABLE:
            {
                // Read frame, if response is ready. Ignore busy flag
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8006932:	f894 519e 	ldrb.w	r5, [r4, #414]	; 0x19e
 8006936:	2d02      	cmp	r5, #2
 8006938:	d125      	bne.n	8006986 <ifx_i2c_pl_guard_time_callback+0xc2>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 800693a:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800693e:	065b      	lsls	r3, r3, #25
 8006940:	d509      	bpl.n	8006956 <ifx_i2c_pl_guard_time_callback+0x92>
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8006942:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
 8006946:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800694a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800694e:	d002      	beq.n	8006956 <ifx_i2c_pl_guard_time_callback+0x92>
 8006950:	88a2      	ldrh	r2, [r4, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d25f      	bcs.n	8006a16 <ifx_i2c_pl_guard_time_callback+0x152>
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8006956:	f7fe fda5 	bl	80054a4 <pal_os_timer_get_time_in_milliseconds>
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800695a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 800695c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800695e:	1ac0      	subs	r0, r0, r3
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8006960:	4290      	cmp	r0, r2
 8006962:	d247      	bcs.n	80069f4 <ifx_i2c_pl_guard_time_callback+0x130>
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8006964:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8006968:	4937      	ldr	r1, [pc, #220]	; (8006a48 <ifx_i2c_pl_guard_time_callback+0x184>)
 800696a:	4622      	mov	r2, r4
 800696c:	f241 3388 	movw	r3, #5000	; 0x1388
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8006970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8006974:	f7fe bd5e 	b.w	8005434 <pal_os_event_register_callback_oneshot>
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8006978:	f894 519e 	ldrb.w	r5, [r4, #414]	; 0x19e
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 800697c:	2303      	movs	r3, #3
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 800697e:	2d02      	cmp	r5, #2
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8006980:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8006984:	d038      	beq.n	80069f8 <ifx_i2c_pl_guard_time_callback+0x134>
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
                        }
                    }
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8006986:	2d01      	cmp	r5, #1
 8006988:	d1e5      	bne.n	8006956 <ifx_i2c_pl_guard_time_callback+0x92>
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
                    ifx_i2c_pl_write_register(p_ctx,
 800698a:	f8b4 61a4 	ldrh.w	r6, [r4, #420]	; 0x1a4
                                              PL_REG_DATA,
                                              p_ctx->pl.tx_frame_len,
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 800698e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006992:	2380      	movs	r3, #128	; 0x80
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8006994:	2004      	movs	r0, #4
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006996:	4632      	mov	r2, r6
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8006998:	f884 019f 	strb.w	r0, [r4, #415]	; 0x19f
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800699c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80069a0:	f104 0081 	add.w	r0, r4, #129	; 0x81
 80069a4:	f006 ff8a 	bl	800d8bc <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80069a8:	1c72      	adds	r2, r6, #1
 80069aa:	b292      	uxth	r2, r2

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80069ac:	2102      	movs	r1, #2
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80069ae:	23c8      	movs	r3, #200	; 0xc8
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80069b0:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80069b4:	f884 519b 	strb.w	r5, [r4, #411]	; 0x19b
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80069b8:	f884 119a 	strb.w	r1, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80069bc:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80069c0:	6920      	ldr	r0, [r4, #16]
 80069c2:	f104 0180 	add.w	r1, r4, #128	; 0x80
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80069c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80069ca:	f7fe bba9 	b.w	8005120 <pal_i2c_write>
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 80069ce:	4620      	mov	r0, r4
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80069d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 80069d4:	f7ff bd86 	b.w	80064e4 <ifx_i2c_pl_negotiation_event_handler>
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80069d8:	2301      	movs	r3, #1
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80069da:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80069de:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80069e2:	2200      	movs	r2, #0
 80069e4:	4620      	mov	r0, r4
 80069e6:	46ac      	mov	ip, r5
 80069e8:	4613      	mov	r3, r2
 80069ea:	f44f 7181 	mov.w	r1, #258	; 0x102
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 80069ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80069f2:	4760      	bx	ip
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e7f0      	b.n	80069da <ifx_i2c_pl_guard_time_callback+0x116>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 80069f8:	2201      	movs	r2, #1
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 80069fa:	2082      	movs	r0, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 80069fc:	2104      	movs	r1, #4
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80069fe:	23c8      	movs	r3, #200	; 0xc8
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006a00:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
 8006a04:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006a08:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006a0c:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006a10:	f8a4 1198 	strh.w	r1, [r4, #408]	; 0x198
 8006a14:	e7d2      	b.n	80069bc <ifx_i2c_pl_guard_time_callback+0xf8>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006a16:	2201      	movs	r2, #1
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8006a18:	2504      	movs	r5, #4
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006a1a:	2080      	movs	r0, #128	; 0x80
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006a1c:	21c8      	movs	r1, #200	; 0xc8
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006a1e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8006a22:	f884 519f 	strb.w	r5, [r4, #415]	; 0x19f
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006a26:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006a2a:	f884 219b 	strb.w	r2, [r4, #411]	; 0x19b
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006a2e:	f8a4 119c 	strh.w	r1, [r4, #412]	; 0x19c
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006a32:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006a36:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006a3a:	6920      	ldr	r0, [r4, #16]
 8006a3c:	f104 0180 	add.w	r1, r4, #128	; 0x80
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8006a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006a44:	f7fe bb6c 	b.w	8005120 <pal_i2c_write>
 8006a48:	0800648d 	.word	0x0800648d

08006a4c <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	4604      	mov	r4, r0
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8006a50:	2000      	movs	r0, #0
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	7822      	ldrb	r2, [r4, #0]

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8006a56:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8006a5a:	21bb      	movs	r1, #187	; 0xbb
optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8006a5c:	f884 019f 	strb.w	r0, [r4, #415]	; 0x19f
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8006a60:	f884 11ac 	strb.w	r1, [r4, #428]	; 0x1ac
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8006a64:	711a      	strb	r2, [r3, #4]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
 8006a66:	6920      	ldr	r0, [r4, #16]
 8006a68:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <ifx_i2c_pl_init+0x6c>)
 8006a6a:	60c3      	str	r3, [r0, #12]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
    if (TRUE == p_ctx->do_pal_init)
 8006a6c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8006a70:	22c8      	movs	r2, #200	; 0xc8
    if (TRUE == p_ctx->do_pal_init)
 8006a72:	2b01      	cmp	r3, #1
    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8006a74:	f8a4 219c 	strh.w	r2, [r4, #412]	; 0x19c
    if (TRUE == p_ctx->do_pal_init)
 8006a78:	d016      	beq.n	8006aa8 <ifx_i2c_pl_init+0x5c>
        {
            return (IFX_I2C_STACK_ERROR);
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8006a7a:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d007      	beq.n	8006a92 <ifx_i2c_pl_init+0x46>
 8006a82:	2301      	movs	r3, #1
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8006a84:	4620      	mov	r0, r4
 8006a86:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
 8006a8a:	f7ff fd2b 	bl	80064e4 <ifx_i2c_pl_negotiation_event_handler>
        p_ctx->pl.frame_state = PL_STATE_INIT;
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);

    return (IFX_I2C_STACK_SUCCESS);
 8006a8e:	2000      	movs	r0, #0
}
 8006a90:	bd10      	pop	{r4, pc}
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 8006a92:	2299      	movs	r2, #153	; 0x99
 8006a94:	2305      	movs	r3, #5
        switch (p_ctx->pl.frame_state)
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 8006a96:	4620      	mov	r0, r4
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 8006a98:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
 8006a9c:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
        switch (p_ctx->pl.frame_state)
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 8006aa0:	f7ff fe9e 	bl	80067e0 <ifx_i2c_pl_soft_reset>
        p_ctx->pl.frame_state = PL_STATE_INIT;
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);

    return (IFX_I2C_STACK_SUCCESS);
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	bd10      	pop	{r4, pc}
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
    if (TRUE == p_ctx->do_pal_init)
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8006aa8:	f7fe fb36 	bl	8005118 <pal_i2c_init>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d0e4      	beq.n	8006a7a <ifx_i2c_pl_init+0x2e>
        {
            return (IFX_I2C_STACK_ERROR);
 8006ab0:	f44f 7081 	mov.w	r0, #258	; 0x102
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	bf00      	nop
 8006ab8:	0800678d 	.word	0x0800678d

08006abc <ifx_i2c_pl_send_frame>:

    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 8006abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8006ac0:	f890 519f 	ldrb.w	r5, [r0, #415]	; 0x19f
 8006ac4:	1e6b      	subs	r3, r5, #1
 8006ac6:	2b01      	cmp	r3, #1

    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 8006ac8:	4604      	mov	r4, r0
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8006aca:	d903      	bls.n	8006ad4 <ifx_i2c_pl_send_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8006acc:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->pl.p_tx_frame   = p_frame;
    p_ctx->pl.tx_frame_len = frame_len;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}
 8006ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8006ad4:	f04f 0801 	mov.w	r8, #1
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 8006ad8:	2d02      	cmp	r5, #2
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 8006ada:	f8c4 11a0 	str.w	r1, [r4, #416]	; 0x1a0
    p_ctx->pl.tx_frame_len = frame_len;
 8006ade:	f8a4 21a4 	strh.w	r2, [r4, #420]	; 0x1a4
 8006ae2:	4616      	mov	r6, r2
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8006ae4:	f880 819e 	strb.w	r8, [r0, #414]	; 0x19e
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 8006ae8:	d11c      	bne.n	8006b24 <ifx_i2c_pl_send_frame+0x68>
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006aea:	2380      	movs	r3, #128	; 0x80
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8006aec:	2004      	movs	r0, #4
 8006aee:	f884 019f 	strb.w	r0, [r4, #415]	; 0x19f
                                         const uint8_t * p_content)
{
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8006af2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8006af6:	f104 0081 	add.w	r0, r4, #129	; 0x81
 8006afa:	f006 fedf 	bl	800d8bc <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006afe:	1c72      	adds	r2, r6, #1
 8006b00:	b292      	uxth	r2, r2

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006b02:	23c8      	movs	r3, #200	; 0xc8
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8006b04:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8006b08:	f884 519a 	strb.w	r5, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006b0c:	f884 819b 	strb.w	r8, [r4, #411]	; 0x19b
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006b10:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006b14:	6920      	ldr	r0, [r4, #16]
 8006b16:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8006b1a:	f7fe fb01 	bl	8005120 <pal_i2c_write>
    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
    p_ctx->pl.tx_frame_len = frame_len;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8006b24:	f7ff fcde 	bl	80064e4 <ifx_i2c_pl_negotiation_event_handler>
    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
    p_ctx->pl.tx_frame_len = frame_len;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 8006b28:	2000      	movs	r0, #0
 8006b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2e:	bf00      	nop

08006b30 <ifx_i2c_pl_receive_frame>:
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8006b30:	b538      	push	{r3, r4, r5, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8006b32:	f890 319f 	ldrb.w	r3, [r0, #415]	; 0x19f
 8006b36:	1e5a      	subs	r2, r3, #1
 8006b38:	2a01      	cmp	r2, #1
    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8006b3a:	4601      	mov	r1, r0
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8006b3c:	d902      	bls.n	8006b44 <ifx_i2c_pl_receive_frame+0x14>
    {
        return (IFX_I2C_STACK_ERROR);
 8006b3e:	f44f 7081 	mov.w	r0, #258	; 0x102
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8006b44:	2202      	movs	r2, #2
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 8006b46:	4293      	cmp	r3, r2
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8006b48:	f880 219e 	strb.w	r2, [r0, #414]	; 0x19e
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 8006b4c:	d118      	bne.n	8006b80 <ifx_i2c_pl_receive_frame+0x50>
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 8006b4e:	2201      	movs	r2, #1

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006b50:	23c8      	movs	r3, #200	; 0xc8
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8006b52:	2503      	movs	r5, #3
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006b54:	2482      	movs	r4, #130	; 0x82
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8006b56:	2004      	movs	r0, #4
 8006b58:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8006b5c:	f881 519f 	strb.w	r5, [r1, #415]	; 0x19f
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8006b60:	f881 4080 	strb.w	r4, [r1, #128]	; 0x80
    p_ctx->pl.buffer_tx_len = 1;
 8006b64:	f8a1 2196 	strh.w	r2, [r1, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8006b68:	f881 219a 	strb.w	r2, [r1, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8006b6c:	f881 219b 	strb.w	r2, [r1, #411]	; 0x19b
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8006b70:	f8a1 319c 	strh.w	r3, [r1, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8006b74:	6908      	ldr	r0, [r1, #16]
 8006b76:	3180      	adds	r1, #128	; 0x80
 8006b78:	f7fe fad2 	bl	8005120 <pal_i2c_write>
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8006b80:	f7ff fcb0 	bl	80064e4 <ifx_i2c_pl_negotiation_event_handler>
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
 8006b84:	2000      	movs	r0, #0
 8006b86:	bd38      	pop	{r3, r4, r5, pc}

08006b88 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8006b8c:	f411 7f83 	tst.w	r1, #262	; 0x106

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8006b90:	469a      	mov	sl, r3
 8006b92:	b0b1      	sub	sp, #196	; 0xc4
 8006b94:	4604      	mov	r4, r0
 8006b96:	4691      	mov	r9, r2

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8006b98:	f890 31b0 	ldrb.w	r3, [r0, #432]	; 0x1b0
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8006b9c:	d00f      	beq.n	8006bbe <ifx_i2c_prl_event_handler+0x36>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8006b9e:	22ff      	movs	r2, #255	; 0xff
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8006ba0:	2b05      	cmp	r3, #5
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8006ba2:	f880 21d2 	strb.w	r2, [r0, #466]	; 0x1d2
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8006ba6:	f000 8439 	beq.w	800741c <ifx_i2c_prl_event_handler+0x894>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8006baa:	f890 31b2 	ldrb.w	r3, [r0, #434]	; 0x1b2
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	f000 84f1 	beq.w	8007596 <ifx_i2c_prl_event_handler+0xa0e>
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        }
        else
        {
            p_ctx->prl.return_status = event;
 8006bb4:	f8a4 1264 	strh.w	r1, [r4, #612]	; 0x264
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8006bb8:	2307      	movs	r3, #7
 8006bba:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_SUCCESS != return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8006bbe:	f04f 0b55 	mov.w	fp, #85	; 0x55
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2b07      	cmp	r3, #7
 8006bc6:	f200 8223 	bhi.w	8007010 <ifx_i2c_prl_event_handler+0x488>
 8006bca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006bce:	011f      	.short	0x011f
 8006bd0:	0051012a 	.word	0x0051012a
 8006bd4:	007800da 	.word	0x007800da
 8006bd8:	00390111 	.word	0x00390111
 8006bdc:	0008      	.short	0x0008
{
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 8006bde:	f894 21b3 	ldrb.w	r2, [r4, #435]	; 0x1b3
 8006be2:	2a01      	cmp	r2, #1
 8006be4:	f000 8345 	beq.w	8007272 <ifx_i2c_prl_event_handler+0x6ea>
 8006be8:	2a02      	cmp	r2, #2
 8006bea:	d119      	bne.n	8006c20 <ifx_i2c_prl_event_handler+0x98>
        }
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 8006bec:	f899 3000 	ldrb.w	r3, [r9]
 8006bf0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8006bf4:	2b6c      	cmp	r3, #108	; 0x6c
 8006bf6:	f000 8493 	beq.w	8007520 <ifx_i2c_prl_event_handler+0x998>
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8006bfa:	2b64      	cmp	r3, #100	; 0x64
 8006bfc:	d104      	bne.n	8006c08 <ifx_i2c_prl_event_handler+0x80>
 8006bfe:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006c02:	2b22      	cmp	r3, #34	; 0x22
 8006c04:	f000 8416 	beq.w	8007434 <ifx_i2c_prl_event_handler+0x8ac>
                CLEAR_SESSION_CONTEXT(p_ctx);
                p_ctx->prl.state = PRL_STATE_IDLE;
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8006c08:	f504 751a 	add.w	r5, r4, #616	; 0x268
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	2100      	movs	r1, #0
 8006c10:	2234      	movs	r2, #52	; 0x34
 8006c12:	f006 fe5e 	bl	800d8d2 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006c16:	6963      	ldr	r3, [r4, #20]
 8006c18:	8898      	ldrh	r0, [r3, #4]
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f040 8404 	bne.w	8007428 <ifx_i2c_prl_event_handler+0x8a0>
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8006c20:	2200      	movs	r2, #0
 8006c22:	20ff      	movs	r0, #255	; 0xff
 8006c24:	2307      	movs	r3, #7
 8006c26:	f44f 7184 	mov.w	r1, #264	; 0x108
 8006c2a:	f884 01d2 	strb.w	r0, [r4, #466]	; 0x1d2
 8006c2e:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006c32:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
 8006c36:	f884 22a0 	strb.w	r2, [r4, #672]	; 0x2a0
 8006c3a:	f8a4 1264 	strh.w	r1, [r4, #612]	; 0x264
                        break;
 8006c3e:	e7c0      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                }
            }
            break;
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 8006c40:	f894 31d2 	ldrb.w	r3, [r4, #466]	; 0x1d2
 8006c44:	2bff      	cmp	r3, #255	; 0xff
 8006c46:	f000 827a 	beq.w	800713e <ifx_i2c_prl_event_handler+0x5b6>
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8006c4a:	2201      	movs	r2, #1
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8006c4c:	2b04      	cmp	r3, #4
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8006c4e:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8006c52:	f000 84ca 	beq.w	80075ea <ifx_i2c_prl_event_handler+0xa62>
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8006c56:	f44f 7284 	mov.w	r2, #264	; 0x108
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006c5a:	2300      	movs	r3, #0
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8006c5c:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006c60:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8006c64:	23ff      	movs	r3, #255	; 0xff
 8006c66:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006c6a:	b031      	add	sp, #196	; 0xc4
 8006c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                exit_machine = FALSE;
            }
            break;
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8006c70:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8006c74:	3001      	adds	r0, #1
 8006c76:	f001 f8dd 	bl	8007e34 <optiga_common_get_uint32>
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
                if (0 == data_len)
 8006c80:	f1ba 0f00 	cmp.w	sl, #0
 8006c84:	d0cc      	beq.n	8006c20 <ifx_i2c_prl_event_handler+0x98>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                    break;
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8006c86:	f899 3000 	ldrb.w	r3, [r9]
 8006c8a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8006c8e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 8006c92:	2a00      	cmp	r2, #0
 8006c94:	f000 8284 	beq.w	80071a0 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8006c98:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	f000 8425 	beq.w	80074ec <ifx_i2c_prl_event_handler+0x964>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8006ca2:	f44f 7284 	mov.w	r2, #264	; 0x108
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006ca6:	2300      	movs	r3, #0
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8006ca8:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006cac:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8006cb0:	2306      	movs	r3, #6
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8006cb2:	22ff      	movs	r2, #255	; 0xff
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8006cb4:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8006cb8:	f884 21d2 	strb.w	r2, [r4, #466]	; 0x1d2
 8006cbc:	e781      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8006cbe:	f504 701a 	add.w	r0, r4, #616	; 0x268
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2228      	movs	r2, #40	; 0x28
 8006cc6:	f006 fe04 	bl	800d8d2 <memset>
 8006cca:	2500      	movs	r5, #0
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006ccc:	6963      	ldr	r3, [r4, #20]
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8006cce:	f884 5292 	strb.w	r5, [r4, #658]	; 0x292
 8006cd2:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
 8006cd6:	f884 5291 	strb.w	r5, [r4, #657]	; 0x291
 8006cda:	f884 5293 	strb.w	r5, [r4, #659]	; 0x293
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8006cde:	9513      	str	r5, [sp, #76]	; 0x4c
 8006ce0:	9514      	str	r5, [sp, #80]	; 0x50
 8006ce2:	9515      	str	r5, [sp, #84]	; 0x54
 8006ce4:	9516      	str	r5, [sp, #88]	; 0x58
 8006ce6:	9517      	str	r5, [sp, #92]	; 0x5c
 8006ce8:	9518      	str	r5, [sp, #96]	; 0x60
 8006cea:	9519      	str	r5, [sp, #100]	; 0x64
 8006cec:	951a      	str	r5, [sp, #104]	; 0x68
 8006cee:	951b      	str	r5, [sp, #108]	; 0x6c
 8006cf0:	951c      	str	r5, [sp, #112]	; 0x70
 8006cf2:	951d      	str	r5, [sp, #116]	; 0x74
 8006cf4:	951e      	str	r5, [sp, #120]	; 0x78
 8006cf6:	951f      	str	r5, [sp, #124]	; 0x7c
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006cf8:	8898      	ldrh	r0, [r3, #4]
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8006cfa:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
 8006cfe:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8006d02:	b130      	cbz	r0, 8006d12 <ifx_i2c_prl_event_handler+0x18a>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8006d04:	a913      	add	r1, sp, #76	; 0x4c
 8006d06:	2234      	movs	r2, #52	; 0x34
 8006d08:	f7fe faf4 	bl	80052f4 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	f040 8238 	bne.w	8007182 <ifx_i2c_prl_event_handler+0x5fa>
 8006d12:	f894 31b1 	ldrb.w	r3, [r4, #433]	; 0x1b1
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
                        break;
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8006d16:	2500      	movs	r5, #0
 8006d18:	f44f 7781 	mov.w	r7, #258	; 0x102
 8006d1c:	e015      	b.n	8006d4a <ifx_i2c_prl_event_handler+0x1c2>
    uint32_t exit_machine = FALSE;
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8006d1e:	2b11      	cmp	r3, #17
 8006d20:	f000 80f6 	beq.w	8006f10 <ifx_i2c_prl_event_handler+0x388>
 8006d24:	2b22      	cmp	r3, #34	; 0x22
 8006d26:	f040 80ed 	bne.w	8006f04 <ifx_i2c_prl_event_handler+0x37c>
            break;
            case PRL_HS_VERIFY_HELLO:
            {
                exit_machine = TRUE;
                 //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8006d2a:	f899 2000 	ldrb.w	r2, [r9]
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
                    (1 == p_ctx->prl.prl_receive_length)))
 8006d2e:	f8b4 3260 	ldrh.w	r3, [r4, #608]	; 0x260
            break;
            case PRL_HS_VERIFY_HELLO:
            {
                exit_machine = TRUE;
                 //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8006d32:	f012 0f44 	tst.w	r2, #68	; 0x44
 8006d36:	d001      	beq.n	8006d3c <ifx_i2c_prl_event_handler+0x1b4>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d00f      	beq.n	8006d5c <ifx_i2c_prl_event_handler+0x1d4>
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                    break;
                }
                //Check valid message type and protocol version
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8006d3c:	2b26      	cmp	r3, #38	; 0x26
 8006d3e:	f000 824a 	beq.w	80071d6 <ifx_i2c_prl_event_handler+0x64e>
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8006d42:	f884 b1b1 	strb.w	fp, [r4, #433]	; 0x1b1
 8006d46:	2355      	movs	r3, #85	; 0x55
 8006d48:	2501      	movs	r5, #1
    uint32_t exit_machine = FALSE;
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8006d4a:	2b33      	cmp	r3, #51	; 0x33
 8006d4c:	f000 80ff 	beq.w	8006f4e <ifx_i2c_prl_event_handler+0x3c6>
 8006d50:	d9e5      	bls.n	8006d1e <ifx_i2c_prl_event_handler+0x196>
 8006d52:	2b44      	cmp	r3, #68	; 0x44
 8006d54:	d079      	beq.n	8006e4a <ifx_i2c_prl_event_handler+0x2c2>
 8006d56:	2b55      	cmp	r3, #85	; 0x55
 8006d58:	f040 80d4 	bne.w	8006f04 <ifx_i2c_prl_event_handler+0x37c>
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8006d5c:	23ff      	movs	r3, #255	; 0xff
 8006d5e:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 8006d62:	f240 1707 	movw	r7, #263	; 0x107
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
                        break;
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8006d66:	f240 1307 	movw	r3, #263	; 0x107
 8006d6a:	429f      	cmp	r7, r3
 8006d6c:	f000 82fb 	beq.w	8007366 <ifx_i2c_prl_event_handler+0x7de>
                    p_ctx->prl.return_status = return_status;
                    p_ctx->prl.state = PRL_STATE_ERROR;
                    break;
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8006d70:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	f47f af78 	bne.w	8006c6a <ifx_i2c_prl_event_handler+0xe2>
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                }
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8006d7a:	2304      	movs	r3, #4
 8006d7c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006d80:	e71f      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
            }
            break;
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8006d82:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006d86:	f002 0303 	and.w	r3, r2, #3
 8006d8a:	f043 0020 	orr.w	r0, r3, #32
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006d8e:	3b02      	subs	r3, #2
 8006d90:	2b01      	cmp	r3, #1
            }
            break;
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8006d92:	f884 01d0 	strb.w	r0, [r4, #464]	; 0x1d0
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006d96:	f240 82d2 	bls.w	800733e <ifx_i2c_prl_event_handler+0x7b6>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006d9a:	07d3      	lsls	r3, r2, #31
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8006d9c:	f884 01d1 	strb.w	r0, [r4, #465]	; 0x1d1

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8006da0:	f100 8142 	bmi.w	8007028 <ifx_i2c_prl_event_handler+0x4a0>
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8006da4:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8006da8:	2201      	movs	r2, #1
 8006daa:	f884 21d3 	strb.w	r2, [r4, #467]	; 0x1d3
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8006dae:	7118      	strb	r0, [r3, #4]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8006db0:	f894 01d3 	ldrb.w	r0, [r4, #467]	; 0x1d3
 8006db4:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
 8006db8:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8006dbc:	f8d4 51cc 	ldr.w	r5, [r4, #460]	; 0x1cc
 8006dc0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8006dc4:	9500      	str	r5, [sp, #0]
 8006dc6:	4402      	add	r2, r0
 8006dc8:	b292      	uxth	r2, r2
 8006dca:	3104      	adds	r1, #4
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 ff4d 	bl	8007c6c <ifx_i2c_tl_transceive>
                                                          p_ctx->prl.actual_payload_length + 
                                                          p_ctx->prl.prl_header_offset,
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8006dd2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8006dd6:	f000 81a4 	beq.w	8007122 <ifx_i2c_prl_event_handler+0x59a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    break;
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8006dda:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 8006dde:	8812      	ldrh	r2, [r2, #0]
 8006de0:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8006de4:	2303      	movs	r3, #3
 8006de6:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006dea:	b031      	add	sp, #196	; 0xc4
 8006dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }
            }
            break;
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8006df0:	f899 3000 	ldrb.w	r3, [r9]
 8006df4:	2b44      	cmp	r3, #68	; 0x44
 8006df6:	f000 8287 	beq.w	8007308 <ifx_i2c_prl_event_handler+0x780>
                      p_ctx->prl.state = PRL_STATE_ERROR;
                    }
                }
                else
                {
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8006dfa:	f894 3262 	ldrb.w	r3, [r4, #610]	; 0x262
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	f000 82b7 	beq.w	8007372 <ifx_i2c_prl_event_handler+0x7ea>
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
                        p_ctx->prl.state = PRL_STATE_TXRX;
                    }
                    else
                    {
                      p_ctx->prl.state = PRL_STATE_ERROR;
 8006e04:	2307      	movs	r3, #7
 8006e06:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8006e0a:	e6da      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
        switch (p_ctx->prl.state)
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4613      	mov	r3, r2
 8006e10:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 8006e14:	f8b4 1264 	ldrh.w	r1, [r4, #612]	; 0x264
 8006e18:	4620      	mov	r0, r4
 8006e1a:	47a8      	blx	r5
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006e1c:	b031      	add	sp, #196	; 0xc4
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                }
            }
            break;
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8006e22:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006e26:	061a      	lsls	r2, r3, #24
 8006e28:	d405      	bmi.n	8006e36 <ifx_i2c_prl_event_handler+0x2ae>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0a5      	beq.n	8006d7a <ifx_i2c_prl_event_handler+0x1f2>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8006e2e:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1a1      	bne.n	8006d7a <ifx_i2c_prl_event_handler+0x1f2>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8006e36:	2305      	movs	r3, #5
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8006e38:	2111      	movs	r1, #17
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006e3a:	2200      	movs	r2, #0
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8006e3c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8006e40:	f884 11b1 	strb.w	r1, [r4, #433]	; 0x1b1
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006e44:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
 8006e48:	e6bb      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
            }
            break;
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 8006e4a:	f899 6000 	ldrb.w	r6, [r9]
 8006e4e:	2e08      	cmp	r6, #8
 8006e50:	f47f af77 	bne.w	8006d42 <ifx_i2c_prl_event_handler+0x1ba>
 8006e54:	f8b4 3260 	ldrh.w	r3, [r4, #608]	; 0x260
 8006e58:	2b31      	cmp	r3, #49	; 0x31
 8006e5a:	f47f af72 	bne.w	8006d42 <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8006e5e:	f109 0001 	add.w	r0, r9, #1
 8006e62:	f000 ffe7 	bl	8007e34 <optiga_common_get_uint32>
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8006e66:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8006e6a:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
 8006e6e:	4607      	mov	r7, r0
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006e70:	4601      	mov	r1, r0
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8006e72:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006e76:	f204 2059 	addw	r0, r4, #601	; 0x259
 8006e7a:	f000 ffcf 	bl	8007e1c <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8006e7e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006e82:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8006e86:	f204 205e 	addw	r0, r4, #606	; 0x25e
 8006e8a:	2124      	movs	r1, #36	; 0x24
 8006e8c:	f000 ffc2 	bl	8007e14 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8006e90:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
 8006e94:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8006e96:	4639      	mov	r1, r7
 8006e98:	a821      	add	r0, sp, #132	; 0x84
 8006e9a:	f000 ffbf 	bl	8007e1c <optiga_common_set_uint32>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
 8006e9e:	f504 7707 	add.w	r7, r4, #540	; 0x21c
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8006ea2:	f504 7316 	add.w	r3, r4, #600	; 0x258
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8006ea6:	f10d 0880 	add.w	r8, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	9601      	str	r6, [sp, #4]
 8006eae:	9603      	str	r6, [sp, #12]
 8006eb0:	9604      	str	r6, [sp, #16]
 8006eb2:	9705      	str	r7, [sp, #20]
 8006eb4:	f8cd 8000 	str.w	r8, [sp]
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f109 0105 	add.w	r1, r9, #5
 8006ebe:	222c      	movs	r2, #44	; 0x2c
 8006ec0:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8006ec4:	f7fe f83c 	bl	8004f40 <pal_crypt_decrypt_aes128_ccm>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f040 809b 	bne.w	8007004 <ifx_i2c_prl_event_handler+0x47c>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8006ece:	a80d      	add	r0, sp, #52	; 0x34
 8006ed0:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
 8006ed4:	f000 ffa2 	bl	8007e1c <optiga_common_set_uint32>
                ///Validating decrpt data
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8006ed8:	4639      	mov	r1, r7
 8006eda:	f504 70fe 	add.w	r0, r4, #508	; 0x1fc
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f006 fcdc 	bl	800d89c <memcmp>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f040 81be 	bne.w	8007266 <ifx_i2c_prl_event_handler+0x6de>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                ///Validating sequence number
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8006eea:	a80d      	add	r0, sp, #52	; 0x34
 8006eec:	f504 710f 	add.w	r1, r4, #572	; 0x23c
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	f006 fcd3 	bl	800d89c <memcmp>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f040 81b5 	bne.w	8007266 <ifx_i2c_prl_event_handler+0x6de>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8006efc:	2301      	movs	r3, #1
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8006efe:	4607      	mov	r7, r0
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8006f00:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
            break;
            default:
            break;
        }

    } while (TRUE == exit_machine);
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	f43f af2e 	beq.w	8006d66 <ifx_i2c_prl_event_handler+0x1de>
 8006f0a:	f894 31b1 	ldrb.w	r3, [r4, #433]	; 0x1b1
 8006f0e:	e71b      	b.n	8006d48 <ifx_i2c_prl_event_handler+0x1c0>
        {
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8006f10:	2300      	movs	r3, #0
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8006f12:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
        {
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8006f16:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8006f1a:	2026      	movs	r0, #38	; 0x26
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
 8006f1c:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006f20:	f504 7218 	add.w	r2, r4, #608	; 0x260
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8006f24:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8006f28:	f8a4 0260 	strh.w	r0, [r4, #608]	; 0x260
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8006f2c:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006f30:	460b      	mov	r3, r1
 8006f32:	9200      	str	r2, [sp, #0]
 8006f34:	4620      	mov	r0, r4
 8006f36:	2202      	movs	r2, #2
 8006f38:	f000 fe98 	bl	8007c6c <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
 8006f3c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8006f40:	4607      	mov	r7, r0
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
 8006f42:	f43f aefe 	beq.w	8006d42 <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8006f46:	2322      	movs	r3, #34	; 0x22
 8006f48:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8006f4c:	e7da      	b.n	8006f04 <ifx_i2c_prl_event_handler+0x37c>
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8006f4e:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
 8006f52:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8006f56:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8006f5a:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 8006f5e:	f8c4 0221 	str.w	r0, [r4, #545]	; 0x221
            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8006f62:	2608      	movs	r6, #8
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8006f64:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8006f68:	f8c4 1225 	str.w	r1, [r4, #549]	; 0x225
 8006f6c:	f8c4 2229 	str.w	r2, [r4, #553]	; 0x229
 8006f70:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8006f74:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8006f78:	f8c4 722d 	str.w	r7, [r4, #557]	; 0x22d
 8006f7c:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
 8006f80:	f8c4 2239 	str.w	r2, [r4, #569]	; 0x239
 8006f84:	f8c4 723d 	str.w	r7, [r4, #573]	; 0x23d
 8006f88:	f8c4 0231 	str.w	r0, [r4, #561]	; 0x231
 8006f8c:	f8c4 1235 	str.w	r1, [r4, #565]	; 0x235
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 8006f90:	f204 2041 	addw	r0, r4, #577	; 0x241
 8006f94:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8006f98:	f884 61d0 	strb.w	r6, [r4, #464]	; 0x1d0
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 8006f9c:	f000 ff3e 	bl	8007e1c <optiga_common_set_uint32>
                                         p_ctx->prl.slave_sequence_number);

                //Preparing encryption data
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8006fa0:	f8d4 71b8 	ldr.w	r7, [r4, #440]	; 0x1b8
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8006fa4:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
 8006fa8:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8006fac:	4639      	mov	r1, r7
 8006fae:	f204 2059 	addw	r0, r4, #601	; 0x259
 8006fb2:	f000 ff33 	bl	8007e1c <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8006fb6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006fba:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8006fbe:	f204 205e 	addw	r0, r4, #606	; 0x25e
 8006fc2:	2124      	movs	r1, #36	; 0x24
 8006fc4:	f000 ff26 	bl	8007e14 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8006fc8:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
 8006fcc:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8006fce:	4639      	mov	r1, r7
 8006fd0:	a821      	add	r0, sp, #132	; 0x84
 8006fd2:	f000 ff23 	bl	8007e1c <optiga_common_set_uint32>
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8006fd6:	f204 2521 	addw	r5, r4, #545	; 0x221
                                                                data_len,
                                                                &p_ctx->prl.
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8006fda:	f504 7316 	add.w	r3, r4, #600	; 0x258
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8006fde:	f10d 0880 	add.w	r8, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8006fe2:	9302      	str	r3, [sp, #8]
 8006fe4:	9601      	str	r6, [sp, #4]
 8006fe6:	9603      	str	r6, [sp, #12]
 8006fe8:	9604      	str	r6, [sp, #16]
 8006fea:	9505      	str	r5, [sp, #20]
 8006fec:	4629      	mov	r1, r5
 8006fee:	f8cd 8000 	str.w	r8, [sp]
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	2224      	movs	r2, #36	; 0x24
 8006ff6:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 8006ffa:	f7fd ff61 	bl	8004ec0 <pal_crypt_encrypt_aes128_ccm>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f000 80a1 	beq.w	8007146 <ifx_i2c_prl_event_handler+0x5be>
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8007004:	f884 b1b1 	strb.w	fp, [r4, #433]	; 0x1b1
 8007008:	2355      	movs	r3, #85	; 0x55
 800700a:	f44f 7781 	mov.w	r7, #258	; 0x102
 800700e:	e69b      	b.n	8006d48 <ifx_i2c_prl_event_handler+0x1c0>
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8007010:	2301      	movs	r3, #1
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8007012:	2200      	movs	r2, #0
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8007014:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8007018:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 800701c:	4613      	mov	r3, r2
 800701e:	4620      	mov	r0, r4
 8007020:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007024:	47a8      	blx	r5
                exit_machine = FALSE;
            }
            break;
 8007026:	e620      	b.n	8006c6a <ifx_i2c_prl_event_handler+0xe2>
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8007028:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 800702c:	1c69      	adds	r1, r5, #1
 800702e:	f111 0f10 	cmn.w	r1, #16
 8007032:	d90c      	bls.n	800704e <ifx_i2c_prl_event_handler+0x4c6>
 8007034:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007038:	b94b      	cbnz	r3, 800704e <ifx_i2c_prl_event_handler+0x4c6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
                        (FALSE == p_ctx->prl.trans_repeat_status))
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 800703a:	2100      	movs	r1, #0
 800703c:	2305      	movs	r3, #5
 800703e:	2211      	movs	r2, #17
 8007040:	f884 11b2 	strb.w	r1, [r4, #434]	; 0x1b2
 8007044:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8007048:	f884 21b1 	strb.w	r2, [r4, #433]	; 0x1b1
                        break;
 800704c:	e5b9      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 800704e:	f894 31d2 	ldrb.w	r3, [r4, #466]	; 0x1d2
 8007052:	2b04      	cmp	r3, #4
 8007054:	f000 819a 	beq.w	800738c <ifx_i2c_prl_event_handler+0x804>
 8007058:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 800705c:	9307      	str	r3, [sp, #28]
 800705e:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8007062:	9308      	str	r3, [sp, #32]
 8007064:	f504 7316 	add.w	r3, r4, #600	; 0x258
 8007068:	9309      	str	r3, [sp, #36]	; 0x24
 800706a:	ab21      	add	r3, sp, #132	; 0x84
 800706c:	f204 2659 	addw	r6, r4, #601	; 0x259
 8007070:	f204 285e 	addw	r8, r4, #606	; 0x25e
 8007074:	ad20      	add	r5, sp, #128	; 0x80
 8007076:	930a      	str	r3, [sp, #40]	; 0x28
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8007078:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
 800707c:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8007080:	2305      	movs	r3, #5
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8007082:	3001      	adds	r0, #1
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8007084:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8007088:	f000 fec8 	bl	8007e1c <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800708c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 8007090:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8007094:	f894 11d1 	ldrb.w	r1, [r4, #465]	; 0x1d1
 8007098:	f884 1258 	strb.w	r1, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 800709c:	4630      	mov	r0, r6
 800709e:	4611      	mov	r1, r2

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 80070a0:	f8b4 61c4 	ldrh.w	r6, [r4, #452]	; 0x1c4
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80070a4:	920b      	str	r2, [sp, #44]	; 0x2c

                    p_ctx->prl.master_sequence_number += 1;
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 80070a6:	1d5f      	adds	r7, r3, #5
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80070a8:	f000 feb8 	bl	8007e1c <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80070ac:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80070b0:	f884 125d 	strb.w	r1, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80070b4:	4640      	mov	r0, r8
 80070b6:	4631      	mov	r1, r6
 80070b8:	f000 feac 	bl	8007e14 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 80070bc:	9b08      	ldr	r3, [sp, #32]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80070be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	6028      	str	r0, [r5, #0]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80070c4:	4611      	mov	r1, r2
 80070c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070c8:	f000 fea8 	bl	8007e1c <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 80070cc:	2008      	movs	r0, #8
 80070ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d0:	9302      	str	r3, [sp, #8]
 80070d2:	9001      	str	r0, [sp, #4]
 80070d4:	9003      	str	r0, [sp, #12]
 80070d6:	9004      	str	r0, [sp, #16]
 80070d8:	9705      	str	r7, [sp, #20]
 80070da:	4639      	mov	r1, r7
 80070dc:	4632      	mov	r2, r6
 80070de:	9500      	str	r5, [sp, #0]
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	2000      	movs	r0, #0
 80070e4:	f7fd feec 	bl	8004ec0 <pal_crypt_encrypt_aes128_ccm>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	f47f ad99 	bne.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80070ee:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 80070f2:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80070fc:	f894 01d3 	ldrb.w	r0, [r4, #467]	; 0x1d3
 8007100:	f8d4 51cc 	ldr.w	r5, [r4, #460]	; 0x1cc
 8007104:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8007108:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800710c:	9500      	str	r5, [sp, #0]
 800710e:	3208      	adds	r2, #8
 8007110:	4402      	add	r2, r0
 8007112:	b292      	uxth	r2, r2
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fda9 	bl	8007c6c <ifx_i2c_tl_transceive>
                                                          p_ctx->prl.actual_payload_length + 
                                                          p_ctx->prl.prl_header_offset,
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 800711a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 800711e:	f47f ae5c 	bne.w	8006dda <ifx_i2c_prl_event_handler+0x252>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8007122:	2200      	movs	r2, #0
 8007124:	21ff      	movs	r1, #255	; 0xff
 8007126:	2307      	movs	r3, #7
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8007128:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 800712c:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
 8007130:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8007134:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
 8007138:	f884 22a0 	strb.w	r2, [r4, #672]	; 0x2a0
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    break;
 800713c:	e541      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                }
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
 800713e:	2301      	movs	r3, #1
 8007140:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8007144:	e53d      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                    exit_machine = TRUE;
                    break;
                }

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8007146:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
 800714a:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 800714e:	f204 201d 	addw	r0, r4, #541	; 0x21d
 8007152:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
 8007156:	f000 fe61 	bl	8007e1c <optiga_common_set_uint32>

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 800715a:	2231      	movs	r2, #49	; 0x31
                return_status = ifx_i2c_tl_transceive(p_ctx,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
 800715c:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8007160:	f504 7018 	add.w	r0, r4, #608	; 0x260

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8007164:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8007168:	460b      	mov	r3, r1
 800716a:	9000      	str	r0, [sp, #0]
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fd7d 	bl	8007c6c <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8007172:	4607      	mov	r7, r0
 8007174:	2800      	cmp	r0, #0
 8007176:	f47f ade4 	bne.w	8006d42 <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 800717a:	2344      	movs	r3, #68	; 0x44
 800717c:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8007180:	e5f1      	b.n	8006d66 <ifx_i2c_prl_event_handler+0x1de>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8007182:	21ff      	movs	r1, #255	; 0xff
 8007184:	2307      	movs	r3, #7
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8007186:	f240 1207 	movw	r2, #263	; 0x107
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800718a:	f884 51b2 	strb.w	r5, [r4, #434]	; 0x1b2
 800718e:	f884 52a0 	strb.w	r5, [r4, #672]	; 0x2a0
 8007192:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
 8007196:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 800719a:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
                        break;
 800719e:	e510      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                }
                ///Sctr value mismatch
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 80071a0:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 80071a4:	429a      	cmp	r2, r3
 80071a6:	f47f ad3b 	bne.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                {
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    break;
                }
                ///For slave encrypted message
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 80071aa:	f002 0303 	and.w	r3, r2, #3
 80071ae:	3b02      	subs	r3, #2
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f240 825a 	bls.w	800766a <ifx_i2c_prl_event_handler+0xae2>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                        p_ctx->prl.state = PRL_STATE_IDLE;
                    }
                }
                else if (data_len <= 1)
 80071b6:	f1ba 0f01 	cmp.w	sl, #1
 80071ba:	f240 8237 	bls.w	800762c <ifx_i2c_prl_event_handler+0xaa4>
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 80071be:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
 80071c2:	880b      	ldrh	r3, [r1, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80071c4:	2201      	movs	r2, #1
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 80071c6:	3b01      	subs	r3, #1
 80071c8:	800b      	strh	r3, [r1, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80071ca:	4613      	mov	r3, r2
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80071cc:	f8a4 6264 	strh.w	r6, [r4, #612]	; 0x264
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80071d0:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
 80071d4:	e4f5      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                    break;
                }
                //Check valid message type and protocol version
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80071d6:	2a00      	cmp	r2, #0
 80071d8:	f47f adb3 	bne.w	8006d42 <ifx_i2c_prl_event_handler+0x1ba>
 80071dc:	f899 3001 	ldrb.w	r3, [r9, #1]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f47f adae 	bne.w	8006d42 <ifx_i2c_prl_event_handler+0x1ba>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80071e6:	f109 0022 	add.w	r0, r9, #34	; 0x22
 80071ea:	f000 fe23 	bl	8007e34 <optiga_common_get_uint32>
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 80071ee:	4ecb      	ldr	r6, [pc, #812]	; (800751c <ifx_i2c_prl_event_handler+0x994>)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80071f0:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80071f4:	464d      	mov	r5, r9
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80071f6:	4607      	mov	r7, r0
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80071f8:	f8c4 71bc 	str.w	r7, [r4, #444]	; 0x1bc
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 80071fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80071fe:	f855 cf02 	ldr.w	ip, [r5, #2]!
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8007202:	6836      	ldr	r6, [r6, #0]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8007204:	68af      	ldr	r7, [r5, #8]
 8007206:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800720a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800720e:	f8c4 7204 	str.w	r7, [r4, #516]	; 0x204
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8007212:	af0e      	add	r7, sp, #56	; 0x38
 8007214:	c70f      	stmia	r7!, {r0, r1, r2, r3}
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8007216:	f8c4 c1fc 	str.w	ip, [r4, #508]	; 0x1fc
 800721a:	f8c4 e200 	str.w	lr, [r4, #512]	; 0x200
 800721e:	f8c4 8208 	str.w	r8, [r4, #520]	; 0x208
 8007222:	69ab      	ldr	r3, [r5, #24]
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8007224:	9607      	str	r6, [sp, #28]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8007226:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800722a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800722e:	f8d5 e014 	ldr.w	lr, [r5, #20]
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8007232:	f89d 201c 	ldrb.w	r2, [sp, #28]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8007236:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 800723a:	6963      	ldr	r3, [r4, #20]
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 800723c:	703a      	strb	r2, [r7, #0]
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 800723e:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
 8007242:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
 8007246:	f8c4 e210 	str.w	lr, [r4, #528]	; 0x210
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 800724a:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 800724e:	8858      	ldrh	r0, [r3, #2]
 8007250:	4641      	mov	r1, r8
 8007252:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8007256:	f7fe f873 	bl	8005340 <pal_os_datastore_read>
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 800725a:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 800725e:	4607      	mov	r7, r0
 8007260:	2800      	cmp	r0, #0
 8007262:	f000 827d 	beq.w	8007760 <ifx_i2c_prl_event_handler+0xbd8>

                //Generating session key
                return_status = ifx_i2c_prl_prf(p_ctx);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8007266:	f884 b1b1 	strb.w	fp, [r4, #433]	; 0x1b1
 800726a:	2355      	movs	r3, #85	; 0x55
 800726c:	f240 1707 	movw	r7, #263	; 0x107
 8007270:	e56a      	b.n	8006d48 <ifx_i2c_prl_event_handler+0x1c0>
    switch (p_ctx->prl.mc_state)
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8007272:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8007276:	2b00      	cmp	r3, #0
 8007278:	f2c0 81b2 	blt.w	80075e0 <ifx_i2c_prl_event_handler+0xa58>
                p_ctx->prl.state = PRL_STATE_START;
                return_status = IFX_I2C_STACK_SUCCESS;
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 800727c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007280:	2b22      	cmp	r3, #34	; 0x22
 8007282:	f000 8195 	beq.w	80075b0 <ifx_i2c_prl_event_handler+0xa28>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
                p_ctx->prl.prl_receive_length = 1;
                p_ctx->prl.prl_txrx_receive_length = 1;
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8007286:	2b11      	cmp	r3, #17
 8007288:	f47f acca 	bne.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 800728c:	6963      	ldr	r3, [r4, #20]
 800728e:	8898      	ldrh	r0, [r3, #4]
 8007290:	2800      	cmp	r0, #0
 8007292:	f040 823d 	bne.w	8007710 <ifx_i2c_prl_event_handler+0xb88>
                        break;
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8007296:	f894 3293 	ldrb.w	r3, [r4, #659]	; 0x293
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 824d 	beq.w	800773a <ifx_i2c_prl_event_handler+0xbb2>
                        return_status = IFX_I2C_STACK_SUCCESS;
                        break;
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80072a0:	f894 3292 	ldrb.w	r3, [r4, #658]	; 0x292
 80072a4:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 80072a8:	2368      	movs	r3, #104	; 0x68
 80072aa:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 80072ae:	f204 201d 	addw	r0, r4, #541	; 0x21d
 80072b2:	f8d4 1298 	ldr.w	r1, [r4, #664]	; 0x298
 80072b6:	f000 fdb1 	bl	8007e1c <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
 80072ba:	2300      	movs	r3, #0
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80072bc:	6961      	ldr	r1, [r4, #20]
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
 80072be:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 80072c2:	f884 3293 	strb.w	r3, [r4, #659]	; 0x293
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80072c6:	8888      	ldrh	r0, [r1, #4]
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 80072c8:	2205      	movs	r2, #5
 80072ca:	f8a4 2256 	strh.w	r2, [r4, #598]	; 0x256
                prl_saved_ctx.stored_context_flag = FALSE;
                p_ctx->prl.prl_receive_length = 5;
 80072ce:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80072d2:	2800      	cmp	r0, #0
 80072d4:	f000 8173 	beq.w	80075be <ifx_i2c_prl_event_handler+0xa36>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 80072d8:	9320      	str	r3, [sp, #128]	; 0x80
 80072da:	9321      	str	r3, [sp, #132]	; 0x84
 80072dc:	9322      	str	r3, [sp, #136]	; 0x88
 80072de:	9323      	str	r3, [sp, #140]	; 0x8c
 80072e0:	9324      	str	r3, [sp, #144]	; 0x90
 80072e2:	9325      	str	r3, [sp, #148]	; 0x94
 80072e4:	9326      	str	r3, [sp, #152]	; 0x98
 80072e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80072e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80072ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80072ec:	932a      	str	r3, [sp, #168]	; 0xa8
 80072ee:	932b      	str	r3, [sp, #172]	; 0xac
 80072f0:	932c      	str	r3, [sp, #176]	; 0xb0
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80072f2:	8888      	ldrh	r0, [r1, #4]
 80072f4:	2234      	movs	r2, #52	; 0x34
 80072f6:	a920      	add	r1, sp, #128	; 0x80
 80072f8:	f7fd fffc 	bl	80052f4 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 80072fc:	2801      	cmp	r0, #1
 80072fe:	f43f ac8f 	beq.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
 8007302:	f8b4 2256 	ldrh.w	r2, [r4, #598]	; 0x256
 8007306:	e15a      	b.n	80075be <ifx_i2c_prl_event_handler+0xa36>
            break;
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8007308:	f1ba 0f01 	cmp.w	sl, #1
 800730c:	f47f ac88 	bne.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
 8007310:	f894 3263 	ldrb.w	r3, [r4, #611]	; 0x263
 8007314:	2b02      	cmp	r3, #2
 8007316:	f63f ac83 	bhi.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 800731a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800731e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8007322:	2a01      	cmp	r2, #1
 8007324:	f47f ad6e 	bne.w	8006e04 <ifx_i2c_prl_event_handler+0x27c>
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8007328:	1c5a      	adds	r2, r3, #1
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800732a:	2304      	movs	r3, #4
                        break;
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
 800732c:	f884 2263 	strb.w	r2, [r4, #611]	; 0x263
                        p_ctx->prl.trans_repeat_status = TRUE;
 8007330:	f884 a2a0 	strb.w	sl, [r4, #672]	; 0x2a0
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8007334:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                        p_ctx->prl.state = PRL_STATE_TXRX;
 8007338:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 800733c:	e441      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 800733e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8007342:	3301      	adds	r3, #1
 8007344:	3310      	adds	r3, #16
 8007346:	d904      	bls.n	8007352 <ifx_i2c_prl_event_handler+0x7ca>
 8007348:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800734c:	2b00      	cmp	r3, #0
 800734e:	f43f ae74 	beq.w	800703a <ifx_i2c_prl_event_handler+0x4b2>
                        (FALSE == p_ctx->prl.trans_repeat_status))
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8007352:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 8007356:	8813      	ldrh	r3, [r2, #0]
 8007358:	330d      	adds	r3, #13
 800735a:	8013      	strh	r3, [r2, #0]
 800735c:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
 8007360:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8007364:	e519      	b.n	8006d9a <ifx_i2c_prl_event_handler+0x212>
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.return_status = return_status;
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8007366:	2307      	movs	r3, #7
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.return_status = return_status;
 8007368:	f8a4 7264 	strh.w	r7, [r4, #612]	; 0x264
                    p_ctx->prl.state = PRL_STATE_ERROR;
 800736c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    break;
 8007370:	e427      	b.n	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                }
                else
                {
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
                    {
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8007372:	2300      	movs	r3, #0
 8007374:	21ff      	movs	r1, #255	; 0xff
 8007376:	f44f 7284 	mov.w	r2, #264	; 0x108
 800737a:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
 800737e:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8007382:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 8007386:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 800738a:	e53b      	b.n	8006e04 <ifx_i2c_prl_event_handler+0x27c>
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800738c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8007390:	f8b4 71c4 	ldrh.w	r7, [r4, #452]	; 0x1c4
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8007394:	f884 0258 	strb.w	r0, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8007398:	f204 2659 	addw	r6, r4, #601	; 0x259
 800739c:	4629      	mov	r1, r5
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800739e:	3305      	adds	r3, #5
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80073a0:	4630      	mov	r0, r6
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80073a2:	930b      	str	r3, [sp, #44]	; 0x2c
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80073a4:	f204 285e 	addw	r8, r4, #606	; 0x25e
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80073a8:	f000 fd38 	bl	8007e1c <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80073ac:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80073b0:	f884 225d 	strb.w	r2, [r4, #605]	; 0x25d
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80073b4:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80073b8:	4639      	mov	r1, r7
 80073ba:	4640      	mov	r0, r8
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80073bc:	9308      	str	r3, [sp, #32]
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80073be:	f000 fd29 	bl	8007e14 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80073c2:	9b08      	ldr	r3, [sp, #32]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80073c4:	aa21      	add	r2, sp, #132	; 0x84
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80073ca:	4629      	mov	r1, r5
 80073cc:	4610      	mov	r0, r2
 80073ce:	920a      	str	r2, [sp, #40]	; 0x28
 80073d0:	f000 fd24 	bl	8007e1c <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 80073d4:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 80073d8:	9307      	str	r3, [sp, #28]
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80073da:	f504 7316 	add.w	r3, r4, #600	; 0x258
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80073de:	f107 0208 	add.w	r2, r7, #8
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80073e2:	9309      	str	r3, [sp, #36]	; 0x24
 80073e4:	461f      	mov	r7, r3
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80073e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e8:	9305      	str	r3, [sp, #20]
 80073ea:	2008      	movs	r0, #8
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80073ec:	ad20      	add	r5, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80073ee:	4619      	mov	r1, r3
 80073f0:	9001      	str	r0, [sp, #4]
 80073f2:	9003      	str	r0, [sp, #12]
 80073f4:	9004      	str	r0, [sp, #16]
 80073f6:	b292      	uxth	r2, r2
 80073f8:	9500      	str	r5, [sp, #0]
 80073fa:	9b07      	ldr	r3, [sp, #28]
 80073fc:	9702      	str	r7, [sp, #8]
 80073fe:	2000      	movs	r0, #0
 8007400:	f7fd fd9e 	bl	8004f40 <pal_crypt_decrypt_aes128_ccm>
 8007404:	2800      	cmp	r0, #0
 8007406:	f47f ac0b 	bne.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
 800740a:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
                        if (IFX_I2C_STACK_ERROR == return_status)
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 800740e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8007412:	f8b4 2260 	ldrh.w	r2, [r4, #608]	; 0x260
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	3101      	adds	r1, #1
 800741a:	e62d      	b.n	8007078 <ifx_i2c_prl_event_handler+0x4f0>
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 800741c:	f240 1307 	movw	r3, #263	; 0x107
 8007420:	f8a0 3264 	strh.w	r3, [r0, #612]	; 0x264
 8007424:	f7ff bbc8 	b.w	8006bb8 <ifx_i2c_prl_event_handler+0x30>
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8007428:	4629      	mov	r1, r5
 800742a:	2234      	movs	r2, #52	; 0x34
 800742c:	f7fd ff62 	bl	80052f4 <pal_os_datastore_write>
 8007430:	f7ff bbf6 	b.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8007434:	f1ba 0f01 	cmp.w	sl, #1
 8007438:	f47f abe6 	bne.w	8006c08 <ifx_i2c_prl_event_handler+0x80>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 800743c:	f504 711a 	add.w	r1, r4, #616	; 0x268
 8007440:	f504 75ea 	add.w	r5, r4, #468	; 0x1d4
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8007444:	f884 a293 	strb.w	sl, [r4, #659]	; 0x293
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8007448:	460a      	mov	r2, r1
 800744a:	462b      	mov	r3, r5
 800744c:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 8007450:	f8d3 e000 	ldr.w	lr, [r3]
 8007454:	685f      	ldr	r7, [r3, #4]
 8007456:	689e      	ldr	r6, [r3, #8]
 8007458:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800745c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8007460:	3310      	adds	r3, #16
 8007462:	4283      	cmp	r3, r0
 8007464:	f8c2 e000 	str.w	lr, [r2]
 8007468:	6057      	str	r7, [r2, #4]
 800746a:	6096      	str	r6, [r2, #8]
 800746c:	f102 0210 	add.w	r2, r2, #16
 8007470:	d1ee      	bne.n	8007450 <ifx_i2c_prl_event_handler+0x8c8>
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	6053      	str	r3, [r2, #4]
 8007478:	6010      	str	r0, [r2, #0]
 800747a:	f894 0263 	ldrb.w	r0, [r4, #611]	; 0x263
 800747e:	f894 21b2 	ldrb.w	r2, [r4, #434]	; 0x1b2
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8007482:	6963      	ldr	r3, [r4, #20]
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8007484:	f894 6262 	ldrb.w	r6, [r4, #610]	; 0x262
 8007488:	f884 2292 	strb.w	r2, [r4, #658]	; 0x292
 800748c:	f884 6290 	strb.w	r6, [r4, #656]	; 0x290
 8007490:	f884 0291 	strb.w	r0, [r4, #657]	; 0x291
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8007494:	8898      	ldrh	r0, [r3, #4]
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8007496:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800749a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800749e:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
 80074a2:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80074a6:	b138      	cbz	r0, 80074b8 <ifx_i2c_prl_event_handler+0x930>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80074a8:	2234      	movs	r2, #52	; 0x34
 80074aa:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80074ae:	f7fd ff21 	bl	80052f4 <pal_os_datastore_write>
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f47f abb4 	bne.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
                        break;
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 80074b8:	2228      	movs	r2, #40	; 0x28
 80074ba:	4628      	mov	r0, r5
 80074bc:	2100      	movs	r1, #0
 80074be:	f006 fa08 	bl	800d8d2 <memset>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2301      	movs	r3, #1
 80074c6:	f8c4 21b4 	str.w	r2, [r4, #436]	; 0x1b4
 80074ca:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
 80074ce:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
 80074d2:	f884 2262 	strb.w	r2, [r4, #610]	; 0x262
 80074d6:	f884 2263 	strb.w	r2, [r4, #611]	; 0x263
 80074da:	f884 22a0 	strb.w	r2, [r4, #672]	; 0x2a0
 80074de:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 80074e8:	f7ff bb6b 	b.w	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80074ec:	f1ba 0f01 	cmp.w	sl, #1
 80074f0:	d004      	beq.n	80074fc <ifx_i2c_prl_event_handler+0x974>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80074f2:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	f43f abd3 	beq.w	8006ca2 <ifx_i2c_prl_event_handler+0x11a>
 80074fc:	f894 3263 	ldrb.w	r3, [r4, #611]	; 0x263
 8007500:	2b03      	cmp	r3, #3
 8007502:	f43f abce 	beq.w	8006ca2 <ifx_i2c_prl_event_handler+0x11a>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8007506:	f894 3266 	ldrb.w	r3, [r4, #614]	; 0x266
 800750a:	2b01      	cmp	r3, #1
 800750c:	f000 809f 	beq.w	800764e <ifx_i2c_prl_event_handler+0xac6>
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8007510:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007514:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
 8007518:	f7ff bbca 	b.w	8006cb0 <ifx_i2c_prl_event_handler+0x128>
 800751c:	0800de1c 	.word	0x0800de1c
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8007520:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007524:	2b11      	cmp	r3, #17
 8007526:	f47f ab6f 	bne.w	8006c08 <ifx_i2c_prl_event_handler+0x80>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 800752a:	f1ba 0f05 	cmp.w	sl, #5
 800752e:	f47f ab6b 	bne.w	8006c08 <ifx_i2c_prl_event_handler+0x80>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8007532:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007536:	f504 72ea 	add.w	r2, r4, #468	; 0x1d4
 800753a:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800753e:	681e      	ldr	r6, [r3, #0]
 8007540:	685d      	ldr	r5, [r3, #4]
 8007542:	6898      	ldr	r0, [r3, #8]
 8007544:	68df      	ldr	r7, [r3, #12]
 8007546:	60d7      	str	r7, [r2, #12]
 8007548:	3310      	adds	r3, #16
 800754a:	428b      	cmp	r3, r1
 800754c:	6016      	str	r6, [r2, #0]
 800754e:	6055      	str	r5, [r2, #4]
 8007550:	6090      	str	r0, [r2, #8]
 8007552:	f102 0210 	add.w	r2, r2, #16
 8007556:	d1f2      	bne.n	800753e <ifx_i2c_prl_event_handler+0x9b6>
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	6053      	str	r3, [r2, #4]
 800755e:	6011      	str	r1, [r2, #0]
 8007560:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8007564:	f8d4 5298 	ldr.w	r5, [r4, #664]	; 0x298
 8007568:	f894 6290 	ldrb.w	r6, [r4, #656]	; 0x290
 800756c:	f894 0291 	ldrb.w	r0, [r4, #657]	; 0x291
 8007570:	f894 1292 	ldrb.w	r1, [r4, #658]	; 0x292
 8007574:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8007578:	2201      	movs	r2, #1
                p_ctx->prl.state = PRL_STATE_TXRX;
 800757a:	2304      	movs	r3, #4
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 800757c:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
 8007580:	f884 6262 	strb.w	r6, [r4, #610]	; 0x262
 8007584:	f884 0263 	strb.w	r0, [r4, #611]	; 0x263
 8007588:	f884 11b2 	strb.w	r1, [r4, #434]	; 0x1b2
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800758c:	f884 2266 	strb.w	r2, [r4, #614]	; 0x266
                p_ctx->prl.state = PRL_STATE_TXRX;
 8007590:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8007594:	e7a5      	b.n	80074e2 <ifx_i2c_prl_event_handler+0x95a>
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8007596:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800759a:	f43f ab0b 	beq.w	8006bb4 <ifx_i2c_prl_event_handler+0x2c>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800759e:	f44f 7284 	mov.w	r2, #264	; 0x108
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80075a2:	2300      	movs	r3, #0
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80075a4:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80075a8:	f880 31b2 	strb.w	r3, [r0, #434]	; 0x1b2
 80075ac:	f7ff bb04 	b.w	8006bb8 <ifx_i2c_prl_event_handler+0x30>
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 80075b0:	2360      	movs	r3, #96	; 0x60
                p_ctx->prl.prl_receive_length = 1;
 80075b2:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                p_ctx->prl.prl_txrx_receive_length = 1;
 80075b6:	f8a4 2256 	strh.w	r2, [r4, #598]	; 0x256
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 80075ba:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                p_ctx->prl.state = PRL_STATE_ERROR;
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80075be:	f504 7018 	add.w	r0, r4, #608	; 0x260
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 80075c2:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                p_ctx->prl.state = PRL_STATE_ERROR;
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80075c6:	9000      	str	r0, [sp, #0]
 80075c8:	460b      	mov	r3, r1
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 fb4e 	bl	8007c6c <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f47f ab25 	bne.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80075d6:	2302      	movs	r3, #2
 80075d8:	f884 31b3 	strb.w	r3, [r4, #435]	; 0x1b3
 80075dc:	f7ff bb45 	b.w	8006c6a <ifx_i2c_prl_event_handler+0xe2>
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
            {
                p_ctx->prl.state = PRL_STATE_START;
 80075e0:	2302      	movs	r3, #2
 80075e2:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 80075e6:	f7ff baec 	b.w	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
 80075ea:	f894 0262 	ldrb.w	r0, [r4, #610]	; 0x262
            p_ctx->prl.state = PRL_STATE_VERIFY;
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80075ee:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
 80075f2:	4410      	add	r0, r2
            p_ctx->prl.state = PRL_STATE_VERIFY;
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 80075f4:	2544      	movs	r5, #68	; 0x44
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80075f6:	f504 7118 	add.w	r1, r4, #608	; 0x260
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
            p_ctx->prl.state = PRL_STATE_VERIFY;
 80075fa:	2703      	movs	r7, #3
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80075fc:	2600      	movs	r6, #0
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
        {
            p_ctx->prl.decryption_failure_counter++;
 80075fe:	f884 0262 	strb.w	r0, [r4, #610]	; 0x262
            p_ctx->prl.state = PRL_STATE_VERIFY;
 8007602:	f884 71b0 	strb.w	r7, [r4, #432]	; 0x1b0
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8007606:	f8a4 6264 	strh.w	r6, [r4, #612]	; 0x264
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 800760a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 800760e:	f884 521c 	strb.w	r5, [r4, #540]	; 0x21c
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8007612:	4620      	mov	r0, r4
 8007614:	9100      	str	r1, [sp, #0]
 8007616:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 800761a:	f000 fb27 	bl	8007c6c <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 800761e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8007622:	f8b4 2260 	ldrh.w	r2, [r4, #608]	; 0x260
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	f7ff bb1c 	b.w	8006c64 <ifx_i2c_prl_event_handler+0xdc>
                }
                else if (data_len <= 1)
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 800762c:	f894 21b2 	ldrb.w	r2, [r4, #434]	; 0x1b2
                        p_ctx->prl.state = PRL_STATE_IDLE;
                    }
                }
                else if (data_len <= 1)
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8007630:	2307      	movs	r3, #7
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8007632:	21ff      	movs	r1, #255	; 0xff
                        p_ctx->prl.state = PRL_STATE_IDLE;
                    }
                }
                else if (data_len <= 1)
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8007634:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8007638:	f884 11d2 	strb.w	r1, [r4, #466]	; 0x1d2
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 800763c:	2a00      	cmp	r2, #0
 800763e:	f040 8087 	bne.w	8007750 <ifx_i2c_prl_event_handler+0xbc8>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8007642:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007646:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 800764a:	f7ff baba 	b.w	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 800764e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007652:	2b11      	cmp	r3, #17
 8007654:	f47f af5c 	bne.w	8007510 <ifx_i2c_prl_event_handler+0x988>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8007658:	2200      	movs	r2, #0
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800765a:	f44f 7384 	mov.w	r3, #264	; 0x108
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800765e:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8007662:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
 8007666:	f7ff bb23 	b.w	8006cb0 <ifx_i2c_prl_event_handler+0x128>
                }
                ///For slave encrypted message
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
                {
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 800766a:	f1ba 0f0d 	cmp.w	sl, #13
 800766e:	f67f aad7 	bls.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                    {
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                        break;
                    }
                    //Check invalid sequence number
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8007672:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8007676:	1cda      	adds	r2, r3, #3
 8007678:	4290      	cmp	r0, r2
 800767a:	f63f aad1 	bhi.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 800767e:	4298      	cmp	r0, r3
 8007680:	f67f aace 	bls.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8007684:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8007688:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 800768c:	f8b2 8000 	ldrh.w	r8, [r2]
                                                               (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8007690:	f8d4 71c8 	ldr.w	r7, [r4, #456]	; 0x1c8
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8007694:	f1a8 030d 	sub.w	r3, r8, #13
 8007698:	b29b      	uxth	r3, r3
 800769a:	8013      	strh	r3, [r2, #0]
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 800769c:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 80076a0:	f884 2258 	strb.w	r2, [r4, #600]	; 0x258
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80076a4:	4629      	mov	r1, r5
 80076a6:	f204 2059 	addw	r0, r4, #601	; 0x259
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 80076aa:	9307      	str	r3, [sp, #28]
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80076ac:	f000 fbb6 	bl	8007e1c <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80076b0:	9b07      	ldr	r3, [sp, #28]
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80076b2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80076b6:	f884 225d 	strb.w	r2, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80076ba:	4619      	mov	r1, r3
 80076bc:	f204 205e 	addw	r0, r4, #606	; 0x25e
 80076c0:	f000 fba8 	bl	8007e14 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80076c4:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
 80076c8:	9020      	str	r0, [sp, #128]	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80076ca:	4629      	mov	r1, r5
 80076cc:	a821      	add	r0, sp, #132	; 0x84
 80076ce:	f000 fba5 	bl	8007e1c <optiga_common_set_uint32>
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
                                                               (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80076d2:	3705      	adds	r7, #5
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80076d4:	2308      	movs	r3, #8
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80076d6:	ad20      	add	r5, sp, #128	; 0x80
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80076d8:	f1a8 0205 	sub.w	r2, r8, #5
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80076dc:	f504 7e16 	add.w	lr, r4, #600	; 0x258
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	9303      	str	r3, [sp, #12]
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	b292      	uxth	r2, r2
 80076e8:	9705      	str	r7, [sp, #20]
 80076ea:	4639      	mov	r1, r7
 80076ec:	4630      	mov	r0, r6
 80076ee:	9500      	str	r5, [sp, #0]
 80076f0:	f8cd e008 	str.w	lr, [sp, #8]
 80076f4:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 80076f8:	f7fd fc22 	bl	8004f40 <pal_crypt_decrypt_aes128_ccm>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d054      	beq.n	80077aa <ifx_i2c_prl_event_handler+0xc22>
                                                            PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                            PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8007700:	2306      	movs	r3, #6
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8007702:	2204      	movs	r2, #4
                                                            PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                            PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
                    {
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8007704:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8007708:	f884 21d2 	strb.w	r2, [r4, #466]	; 0x1d2
                        break;
 800770c:	f7ff ba59 	b.w	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8007710:	2334      	movs	r3, #52	; 0x34
 8007712:	f8a4 3260 	strh.w	r3, [r4, #608]	; 0x260
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8007716:	f504 711a 	add.w	r1, r4, #616	; 0x268
 800771a:	f504 7218 	add.w	r2, r4, #608	; 0x260
 800771e:	f7fd fe0f 	bl	8005340 <pal_os_datastore_read>
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8007722:	2801      	cmp	r0, #1
 8007724:	f43f aa7c 	beq.w	8006c20 <ifx_i2c_prl_event_handler+0x98>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8007728:	f894 3293 	ldrb.w	r3, [r4, #659]	; 0x293
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 800772c:	f894 2292 	ldrb.w	r2, [r4, #658]	; 0x292
 8007730:	f884 21b2 	strb.w	r2, [r4, #434]	; 0x1b2
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8007734:	2b00      	cmp	r3, #0
 8007736:	f47f adb7 	bne.w	80072a8 <ifx_i2c_prl_event_handler+0x720>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 800773a:	2302      	movs	r3, #2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800773c:	2100      	movs	r1, #0
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800773e:	2201      	movs	r2, #1
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8007740:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8007744:	f884 11b2 	strb.w	r1, [r4, #434]	; 0x1b2
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8007748:	f884 2266 	strb.w	r2, [r4, #614]	; 0x266
 800774c:	f7ff ba39 	b.w	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8007750:	f44f 7284 	mov.w	r2, #264	; 0x108
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8007754:	f884 61b2 	strb.w	r6, [r4, #434]	; 0x1b2
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8007758:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 800775c:	f7ff ba31 	b.w	8006bc2 <ifx_i2c_prl_event_handler+0x3a>
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8007760:	2128      	movs	r1, #40	; 0x28
 8007762:	9601      	str	r6, [sp, #4]
 8007764:	f04f 0e10 	mov.w	lr, #16
 8007768:	2620      	movs	r6, #32
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 800776a:	f504 75ea 	add.w	r5, r4, #468	; 0x1d4
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 800776e:	9104      	str	r1, [sp, #16]
 8007770:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8007774:	f8cd e000 	str.w	lr, [sp]
 8007778:	ab0e      	add	r3, sp, #56	; 0x38
 800777a:	9602      	str	r6, [sp, #8]
 800777c:	9503      	str	r5, [sp, #12]
 800777e:	4641      	mov	r1, r8
 8007780:	f7fd fafc 	bl	8004d7c <pal_crypt_tls_prf_sha256>
 8007784:	b130      	cbz	r0, 8007794 <ifx_i2c_prl_event_handler+0xc0c>
                                                           p_ctx->prl.session_key,
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
        }
        memset(secret_input, 0, shared_secret_length);
 8007786:	4640      	mov	r0, r8
 8007788:	4639      	mov	r1, r7
 800778a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800778e:	f006 f8a0 	bl	800d8d2 <memset>
 8007792:	e568      	b.n	8007266 <ifx_i2c_prl_event_handler+0x6de>
 8007794:	4640      	mov	r0, r8
 8007796:	4639      	mov	r1, r7
 8007798:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800779c:	f006 f899 	bl	800d8d2 <memset>
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 80077a0:	2333      	movs	r3, #51	; 0x33
 80077a2:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 80077a6:	f7ff bacf 	b.w	8006d48 <ifx_i2c_prl_event_handler+0x1c0>
                        break;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                        p_ctx->prl.state = PRL_STATE_IDLE;
 80077aa:	2301      	movs	r3, #1
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
                        break;
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80077ac:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
                        p_ctx->prl.state = PRL_STATE_IDLE;
 80077b0:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 80077b4:	f7ff ba05 	b.w	8006bc2 <ifx_i2c_prl_event_handler+0x3a>

080077b8 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80077b8:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 80077ba:	2300      	movs	r3, #0
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80077bc:	460d      	mov	r5, r1
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 80077be:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 80077c2:	4911      	ldr	r1, [pc, #68]	; (8007808 <ifx_i2c_prl_init+0x50>)
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80077c4:	4604      	mov	r4, r0
    p_ctx->tl.state = PRL_STATE_UNINIT;

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 80077c6:	f000 fa37 	bl	8007c38 <ifx_i2c_tl_init>
 80077ca:	b110      	cbz	r0, 80077d2 <ifx_i2c_prl_init+0x1a>
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80077cc:	f44f 7081 	mov.w	r0, #258	; 0x102
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    
    return (return_status);
}
 80077d0:	bd38      	pop	{r3, r4, r5, pc}
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80077d2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80077d6:	f884 01b2 	strb.w	r0, [r4, #434]	; 0x1b2
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80077da:	3b11      	subs	r3, #17
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 80077dc:	f04f 0101 	mov.w	r1, #1

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 80077e0:	f04f 0211 	mov.w	r2, #17
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80077e4:	bf18      	it	ne
 80077e6:	2301      	movne	r3, #1
 80077e8:	f884 3266 	strb.w	r3, [r4, #614]	; 0x266
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 80077ec:	f884 11b0 	strb.w	r1, [r4, #432]	; 0x1b0

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80077f0:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 80077f4:	f884 21b1 	strb.w	r2, [r4, #433]	; 0x1b1
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80077f8:	f884 21d2 	strb.w	r2, [r4, #466]	; 0x1d2
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 80077fc:	f8c4 529c 	str.w	r5, [r4, #668]	; 0x29c
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8007800:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	08006b89 	.word	0x08006b89

0800780c <ifx_i2c_prl_close>:
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 800780c:	f890 31b0 	ldrb.w	r3, [r0, #432]	; 0x1b0
 8007810:	2b01      	cmp	r3, #1
 8007812:	d002      	beq.n	800781a <ifx_i2c_prl_close+0xe>
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8007814:	f44f 7081 	mov.w	r0, #258	; 0x102
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }
    } while (FALSE);
    return (return_status);
}
 8007818:	4770      	bx	lr
    
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800781a:	b510      	push	{r4, lr}
 800781c:	460c      	mov	r4, r1
        if (PRL_STATE_IDLE != p_ctx->prl.state)
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 800781e:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 8007822:	f8c0 429c 	str.w	r4, [r0, #668]	; 0x29c
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8007826:	2933      	cmp	r1, #51	; 0x33
 8007828:	d014      	beq.n	8007854 <ifx_i2c_prl_close+0x48>
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 800782a:	f890 31b2 	ldrb.w	r3, [r0, #434]	; 0x1b2
 800782e:	2b01      	cmp	r3, #1
 8007830:	d002      	beq.n	8007838 <ifx_i2c_prl_close+0x2c>
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8007832:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007836:	bd10      	pop	{r4, pc}
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8007838:	2922      	cmp	r1, #34	; 0x22
 800783a:	d1fa      	bne.n	8007832 <ifx_i2c_prl_close+0x26>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 800783c:	2108      	movs	r1, #8
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 800783e:	f880 31b3 	strb.w	r3, [r0, #435]	; 0x1b3
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8007842:	f880 11b0 	strb.w	r1, [r0, #432]	; 0x1b0
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8007846:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 800784a:	2100      	movs	r1, #0
 800784c:	f7ff f99c 	bl	8006b88 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8007850:	2000      	movs	r0, #0
            break;
        }
    } while (FALSE);
    return (return_status);
}
 8007852:	bd10      	pop	{r4, pc}
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8007854:	2100      	movs	r1, #0
 8007856:	460a      	mov	r2, r1
 8007858:	460b      	mov	r3, r1
 800785a:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 800785c:	2000      	movs	r0, #0
            break;
 800785e:	bd10      	pop	{r4, pc}

08007860 <ifx_i2c_prl_transceive>:
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8007860:	b3a1      	cbz	r1, 80078cc <ifx_i2c_prl_transceive+0x6c>
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8007862:	b570      	push	{r4, r5, r6, lr}
 8007864:	4615      	mov	r5, r2
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8007866:	b912      	cbnz	r2, 800786e <ifx_i2c_prl_transceive+0xe>
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8007868:	f44f 7081 	mov.w	r0, #258	; 0x102
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;

    } while (FALSE);
    return (return_status);
}
 800786c:	bd70      	pop	{r4, r5, r6, pc}
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 800786e:	f890 21b0 	ldrb.w	r2, [r0, #432]	; 0x1b0
 8007872:	2a01      	cmp	r2, #1
 8007874:	d1f8      	bne.n	8007868 <ifx_i2c_prl_transceive+0x8>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8007876:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 800787a:	2c11      	cmp	r4, #17
 800787c:	d029      	beq.n	80078d2 <ifx_i2c_prl_transceive+0x72>
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 800787e:	2402      	movs	r4, #2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
        p_ctx->prl.actual_payload_length = tx_data_len;

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8007880:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 8007884:	f880 41b0 	strb.w	r4, [r0, #432]	; 0x1b0
 8007888:	f002 0203 	and.w	r2, r2, #3
 800788c:	3a02      	subs	r2, #2
 800788e:	2a01      	cmp	r2, #1
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8007890:	bf88      	it	hi
 8007892:	3304      	addhi	r3, #4
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
 8007894:	2400      	movs	r4, #0
 8007896:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 800789a:	2611      	movs	r6, #17
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 800789c:	9b04      	ldr	r3, [sp, #16]
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 800789e:	f8c0 11c0 	str.w	r1, [r0, #448]	; 0x1c0
        p_ctx->prl.actual_payload_length = tx_data_len;
 80078a2:	f8a0 51c4 	strh.w	r5, [r0, #452]	; 0x1c4
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80078a6:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;

        ifx_i2c_prl_event_handler(p_ctx,
 80078aa:	460a      	mov	r2, r1
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
 80078ac:	f880 4263 	strb.w	r4, [r0, #611]	; 0x263
        p_ctx->prl.trans_repeat_status = FALSE;
 80078b0:	f880 42a0 	strb.w	r4, [r0, #672]	; 0x2a0
        p_ctx->prl.decryption_failure_counter = 0;
 80078b4:	f880 4262 	strb.w	r4, [r0, #610]	; 0x262
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80078b8:	f8a0 4264 	strh.w	r4, [r0, #612]	; 0x264
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80078bc:	f880 61d2 	strb.w	r6, [r0, #466]	; 0x1d2

        ifx_i2c_prl_event_handler(p_ctx,
 80078c0:	462b      	mov	r3, r5
 80078c2:	4621      	mov	r1, r4
 80078c4:	f7ff f960 	bl	8006b88 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 80078c8:	4620      	mov	r0, r4
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80078cc:	f44f 7081 	mov.w	r0, #258	; 0x102
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;

    } while (FALSE);
    return (return_status);
}
 80078d0:	4770      	bx	lr
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 80078d2:	f890 4266 	ldrb.w	r4, [r0, #614]	; 0x266
 80078d6:	2c00      	cmp	r4, #0
 80078d8:	d1d1      	bne.n	800787e <ifx_i2c_prl_transceive+0x1e>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80078da:	f880 21b3 	strb.w	r2, [r0, #435]	; 0x1b3
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80078de:	2408      	movs	r4, #8
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80078e0:	e7ce      	b.n	8007880 <ifx_i2c_prl_transceive+0x20>
 80078e2:	bf00      	nop

080078e4 <ifx_i2c_dl_event_handler>:
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80078e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 80078e8:	f001 0502 	and.w	r5, r1, #2
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80078ec:	b085      	sub	sp, #20
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80078ee:	f001 0b04 	and.w	fp, r1, #4
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t pctr = 0;
    uint8_t chaining = 0;
 80078f2:	f04f 0800 	mov.w	r8, #0
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80078f6:	461f      	mov	r7, r3
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 80078f8:	b2ab      	uxth	r3, r5
 80078fa:	9301      	str	r3, [sp, #4]
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80078fc:	4604      	mov	r4, r0
 80078fe:	4616      	mov	r6, r2
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8007900:	fa1f fb8b 	uxth.w	fp, fp
 8007904:	f001 0301 	and.w	r3, r1, #1
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t pctr = 0;
 8007908:	4645      	mov	r5, r8
            chaining = pctr & TL_PCTR_CHAIN_MASK;
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 800790a:	f04f 0906 	mov.w	r9, #6
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800790e:	f44f 7a81 	mov.w	sl, #258	; 0x102
    uint8_t pctr = 0;
    uint8_t chaining = 0;
    uint8_t exit_machine = TRUE;
    do
    {
        if (NULL != p_data)
 8007912:	b116      	cbz	r6, 800791a <ifx_i2c_dl_event_handler+0x36>
        {
            pctr = p_data[0];
 8007914:	7835      	ldrb	r5, [r6, #0]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 8007916:	f005 0807 	and.w	r8, r5, #7
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 800791a:	b11b      	cbz	r3, 8007924 <ifx_i2c_dl_event_handler+0x40>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 800791c:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8007920:	f8a4 a054 	strh.w	sl, [r4, #84]	; 0x54
        }
        if (0 != data_len)
 8007924:	b13f      	cbz	r7, 8007936 <ifx_i2c_dl_event_handler+0x52>

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8007926:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800792a:	b922      	cbnz	r2, 8007936 <ifx_i2c_dl_event_handler+0x52>
 800792c:	f005 0107 	and.w	r1, r5, #7
 8007930:	2901      	cmp	r1, #1
 8007932:	f240 809c 	bls.w	8007a6e <ifx_i2c_dl_event_handler+0x18a>
 8007936:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 800793a:	2100      	movs	r1, #0
        switch (p_ctx->tl.state)
 800793c:	3a01      	subs	r2, #1
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 800793e:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
        switch (p_ctx->tl.state)
 8007942:	2a07      	cmp	r2, #7
 8007944:	f200 80ac 	bhi.w	8007aa0 <ifx_i2c_dl_event_handler+0x1bc>
 8007948:	e8df f002 	tbb	[pc, r2]
 800794c:	38aa5287 	.word	0x38aa5287
 8007950:	04159f2e 	.word	0x04159f2e
            break;
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8007954:	2f01      	cmp	r7, #1
 8007956:	d903      	bls.n	8007960 <ifx_i2c_dl_event_handler+0x7c>
 8007958:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 800795c:	2a01      	cmp	r2, #1
 800795e:	d029      	beq.n	80079b4 <ifx_i2c_dl_event_handler+0xd0>
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
                    break;
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8007960:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8007964:	1c51      	adds	r1, r2, #1
 8007966:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 800796a:	2a00      	cmp	r2, #0
 800796c:	f000 80df 	beq.w	8007b2e <ifx_i2c_dl_event_handler+0x24a>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 8007970:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
                            break;
 8007974:	e7cd      	b.n	8007912 <ifx_i2c_dl_event_handler+0x2e>
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8007976:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 800797a:	2102      	movs	r1, #2
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 800797c:	1c50      	adds	r0, r2, #1
 800797e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8007982:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8007986:	2a00      	cmp	r2, #0
 8007988:	d1f2      	bne.n	8007970 <ifx_i2c_dl_event_handler+0x8c>

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
    uint16_t tl_fragment_size = 1;
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 800798a:	2107      	movs	r1, #7
 800798c:	f884 12a7 	strb.w	r1, [r4, #679]	; 0x2a7
    p_ctx->tl.total_recv_length = 0;
 8007990:	87a2      	strh	r2, [r4, #60]	; 0x3c
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 8007992:	4620      	mov	r0, r4
 8007994:	2101      	movs	r1, #1
 8007996:	9302      	str	r3, [sp, #8]
 8007998:	f7fe fd00 	bl	800639c <ifx_i2c_dl_send_frame>
                p_ctx->tl.state = TL_STATE_TX;
                if (0 == (p_ctx->tl.master_chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 800799c:	9b02      	ldr	r3, [sp, #8]
 800799e:	2800      	cmp	r0, #0
 80079a0:	d1e6      	bne.n	8007970 <ifx_i2c_dl_event_handler+0x8c>
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 80079a2:	b005      	add	sp, #20
 80079a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 80079a8:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80079ac:	1c51      	adds	r1, r2, #1
 80079ae:	428f      	cmp	r7, r1
 80079b0:	f000 80ab 	beq.w	8007b0a <ifx_i2c_dl_event_handler+0x226>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 80079b4:	2207      	movs	r2, #7
 80079b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                    break;
 80079ba:	e7aa      	b.n	8007912 <ifx_i2c_dl_event_handler+0x2e>
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80079bc:	f1bb 0f00 	cmp.w	fp, #0
 80079c0:	d0d6      	beq.n	8007970 <ifx_i2c_dl_event_handler+0x8c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 80079c2:	2f00      	cmp	r7, #0
 80079c4:	d0d4      	beq.n	8007970 <ifx_i2c_dl_event_handler+0x8c>
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 80079c6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80079ca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80079ce:	f000 80f3 	beq.w	8007bb8 <ifx_i2c_dl_event_handler+0x2d4>

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 80079d2:	f1b8 0f07 	cmp.w	r8, #7
                        exit_machine = FALSE;
                        break;
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 80079d6:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 80079da:	d07e      	beq.n	8007ada <ifx_i2c_dl_event_handler+0x1f6>
 80079dc:	f1b8 0f02 	cmp.w	r8, #2
 80079e0:	d97b      	bls.n	8007ada <ifx_i2c_dl_event_handler+0x1f6>
 80079e2:	f1b8 0f04 	cmp.w	r8, #4
 80079e6:	d078      	beq.n	8007ada <ifx_i2c_dl_event_handler+0x1f6>

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 80079e8:	2208      	movs	r2, #8
 80079ea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                        break;
 80079ee:	e790      	b.n	8007912 <ifx_i2c_dl_event_handler+0x2e>
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 80079f0:	9a01      	ldr	r2, [sp, #4]
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	d0bc      	beq.n	8007970 <ifx_i2c_dl_event_handler+0x8c>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 80079f6:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
 80079fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80079fc:	4594      	cmp	ip, r2
 80079fe:	d254      	bcs.n	8007aaa <ifx_i2c_dl_event_handler+0x1c6>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8007a00:	f1b8 0f07 	cmp.w	r8, #7
 8007a04:	d0f0      	beq.n	80079e8 <ifx_i2c_dl_event_handler+0x104>
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
                            break;
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8007a06:	2f00      	cmp	r7, #0
 8007a08:	d1b2      	bne.n	8007970 <ifx_i2c_dl_event_handler+0x8c>

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8007a0a:	ebcc 0202 	rsb	r2, ip, r2
 8007a0e:	b293      	uxth	r3, r2
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8007a10:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 8007a14:	f1bc 0f00 	cmp.w	ip, #0
 8007a18:	f000 80ec 	beq.w	8007bf4 <ifx_i2c_dl_event_handler+0x310>
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
    {
        pctr = TL_CHAINING_FIRST;
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 8007a1c:	429d      	cmp	r5, r3
 8007a1e:	bf2c      	ite	cs
 8007a20:	200c      	movcs	r0, #12
 8007a22:	200a      	movcc	r0, #10
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8007a24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8007a26:	f884 02a7 	strb.w	r0, [r4, #679]	; 0x2a7

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8007a2a:	42aa      	cmp	r2, r5
 8007a2c:	bfb8      	it	lt
 8007a2e:	461d      	movlt	r5, r3
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8007a30:	4461      	add	r1, ip
 8007a32:	462a      	mov	r2, r5
 8007a34:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 8007a38:	f8cd c004 	str.w	ip, [sp, #4]
 8007a3c:	f005 ff3e 	bl	800d8bc <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007a40:	f8dd c004 	ldr.w	ip, [sp, #4]
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007a44:	1c69      	adds	r1, r5, #1
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007a46:	44ac      	add	ip, r5
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007a48:	b289      	uxth	r1, r1
 8007a4a:	4620      	mov	r0, r4
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007a4c:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8007a50:	b005      	add	sp, #20
 8007a52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007a56:	f7fe bca1 	b.w	800639c <ifx_i2c_dl_send_frame>
        switch (p_ctx->tl.state)
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8007a5e:	460a      	mov	r2, r1
 8007a60:	460b      	mov	r3, r1
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8007a62:	4620      	mov	r0, r4
 8007a64:	46ac      	mov	ip, r5
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8007a66:	b005      	add	sp, #20
 8007a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8007a6c:	4760      	bx	ip
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 8007a6e:	f005 01f8 	and.w	r1, r5, #248	; 0xf8
 8007a72:	2908      	cmp	r1, #8
 8007a74:	f43f af5f 	beq.w	8007936 <ifx_i2c_dl_event_handler+0x52>
        }
        if (0 != data_len)
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8007a78:	2006      	movs	r0, #6
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8007a7a:	f44f 7181 	mov.w	r1, #258	; 0x102
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8007a7e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        }
        if (0 != data_len)
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8007a82:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8007a86:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
            break;
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8007a8a:	b903      	cbnz	r3, 8007a8e <ifx_i2c_dl_event_handler+0x1aa>
 8007a8c:	b117      	cbz	r7, 8007a94 <ifx_i2c_dl_event_handler+0x1b0>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8007a94:	2200      	movs	r2, #0
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8007a96:	4613      	mov	r3, r2
 8007a98:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8007a9a:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 8007a9e:	e7e0      	b.n	8007a62 <ifx_i2c_dl_event_handler+0x17e>
            }
            break;
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8007aa0:	2301      	movs	r3, #1
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8007aa2:	2200      	movs	r2, #0
            }
            break;
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8007aa4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8007aa8:	e7f5      	b.n	8007a96 <ifx_i2c_dl_event_handler+0x1b2>
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
                        p_ctx->tl.total_recv_length = 0;
 8007aaa:	2200      	movs	r2, #0
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
 8007aac:	2004      	movs	r0, #4
                        p_ctx->tl.total_recv_length = 0;
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
                        p_ctx->tl.transmission_completed = 1;
 8007aae:	2101      	movs	r1, #1
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
 8007ab0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
                        p_ctx->tl.total_recv_length = 0;
 8007ab4:	87a2      	strh	r2, [r4, #60]	; 0x3c
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8007ab6:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
                        p_ctx->tl.transmission_completed = 1;
 8007aba:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
                        // if data is received after sending last frame
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8007abe:	f1bb 0f00 	cmp.w	fp, #0
 8007ac2:	f47f af26 	bne.w	8007912 <ifx_i2c_dl_event_handler+0x2e>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data already received after Tx\n");
                            // Received CTRL frame, trigger reception in Data Link layer
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7fe fcc2 	bl	8006450 <ifx_i2c_dl_receive_frame>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f43f af68 	beq.w	80079a2 <ifx_i2c_dl_event_handler+0xbe>
                            {
                                LOG_TL("[IFX-TL]: Tx:RX Received CTRL frame fail -> Inform UL\n");
                                p_ctx->tl.state = TL_STATE_ERROR;
 8007ad2:	2306      	movs	r3, #6
 8007ad4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8007ad8:	e763      	b.n	80079a2 <ifx_i2c_dl_event_handler+0xbe>
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8007ada:	4956      	ldr	r1, [pc, #344]	; (8007c34 <ifx_i2c_dl_event_handler+0x350>)
 8007adc:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
 8007ae0:	4291      	cmp	r1, r2
 8007ae2:	d006      	beq.n	8007af2 <ifx_i2c_dl_event_handler+0x20e>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8007ae4:	4953      	ldr	r1, [pc, #332]	; (8007c34 <ifx_i2c_dl_event_handler+0x350>)
 8007ae6:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8007aea:	7849      	ldrb	r1, [r1, #1]
 8007aec:	4291      	cmp	r1, r2
 8007aee:	f47f af7b 	bne.w	80079e8 <ifx_i2c_dl_event_handler+0x104>
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
                        break;
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8007af2:	f884 8052 	strb.w	r8, [r4, #82]	; 0x52
                    if (NULL == p_data)
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	f43f af3a 	beq.w	8007970 <ifx_i2c_dl_event_handler+0x8c>
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8007afc:	f018 0c03 	ands.w	ip, r8, #3
 8007b00:	d06a      	beq.n	8007bd8 <ifx_i2c_dl_event_handler+0x2f4>
                                                            p_ctx->tl.p_recv_packet_buffer,
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
                    }
                    else
                    {
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8007b02:	2205      	movs	r2, #5
 8007b04:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 8007b08:	e703      	b.n	8007912 <ifx_i2c_dl_event_handler+0x2e>
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
                    break;
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8007b0a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b0c:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8007b0e:	f8b1 e000 	ldrh.w	lr, [r1]
 8007b12:	eb07 0c00 	add.w	ip, r7, r0
 8007b16:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007b1a:	4571      	cmp	r1, lr
 8007b1c:	dd33      	ble.n	8007b86 <ifx_i2c_dl_event_handler+0x2a2>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8007b1e:	f44f 7182 	mov.w	r1, #260	; 0x104
                    p_ctx->tl.state = TL_STATE_RX;
 8007b22:	2204      	movs	r2, #4
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8007b24:	f8a4 1054 	strh.w	r1, [r4, #84]	; 0x54
                    p_ctx->tl.state = TL_STATE_RX;
 8007b28:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                    break;
 8007b2c:	e6f1      	b.n	8007912 <ifx_i2c_dl_event_handler+0x2e>
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8007b2e:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
 8007b32:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    if (TL_STATE_IDLE != p_ctx->tl.state)
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
 8007b34:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
    {
        pctr = TL_CHAINING_NO;
 8007b38:	4584      	cmp	ip, r0
 8007b3a:	bf2c      	ite	cs
 8007b3c:	2100      	movcs	r1, #0
 8007b3e:	2101      	movcc	r1, #1
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8007b40:	4584      	cmp	ip, r0
 8007b42:	bfa8      	it	ge
 8007b44:	4684      	movge	ip, r0
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8007b46:	f041 0108 	orr.w	r1, r1, #8
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
    p_ctx->tl.total_recv_length = 0;
    p_ctx->tl.state = TL_STATE_TX;
 8007b4a:	2002      	movs	r0, #2
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
    p_ctx->tl.total_recv_length = 0;
 8007b4c:	87a2      	strh	r2, [r4, #60]	; 0x3c
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8007b4e:	f884 12a7 	strb.w	r1, [r4, #679]	; 0x2a7
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8007b52:	4662      	mov	r2, ip
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
    p_ctx->tl.total_recv_length = 0;
    p_ctx->tl.state = TL_STATE_TX;
 8007b54:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8007b58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b5a:	9303      	str	r3, [sp, #12]
 8007b5c:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 8007b60:	f8cd c008 	str.w	ip, [sp, #8]
 8007b64:	f005 feaa 	bl	800d8bc <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007b68:	f8dd c008 	ldr.w	ip, [sp, #8]
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007b6c:	f8a4 c040 	strh.w	ip, [r4, #64]	; 0x40
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007b70:	f10c 0101 	add.w	r1, ip, #1
 8007b74:	b289      	uxth	r1, r1
 8007b76:	4620      	mov	r0, r4
 8007b78:	f7fe fc10 	bl	800639c <ifx_i2c_dl_send_frame>
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f47f aef6 	bne.w	8007970 <ifx_i2c_dl_event_handler+0x8c>
 8007b84:	e70d      	b.n	80079a2 <ifx_i2c_dl_event_handler+0xbe>
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
                    p_ctx->tl.state = TL_STATE_RX;
                    break;
                }
                if (NULL == p_data)
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	f43f aef2 	beq.w	8007970 <ifx_i2c_dl_event_handler+0x8c>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8007b8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b8e:	1c71      	adds	r1, r6, #1
 8007b90:	4418      	add	r0, r3
 8007b92:	f005 fe93 	bl	800d8bc <memcpy>
 8007b96:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8007b98:	3b01      	subs	r3, #1
                p_ctx->tl.total_recv_length += (data_len - 1);
 8007b9a:	441f      	add	r7, r3

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8007b9c:	f005 0507 	and.w	r5, r5, #7
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8007ba0:	2304      	movs	r3, #4
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8007ba2:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);
 8007ba6:	87a7      	strh	r7, [r4, #60]	; 0x3c

                p_ctx->tl.previous_chaining = pctr & 0x07;
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8007ba8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8007bac:	4620      	mov	r0, r4
 8007bae:	f7fe fc4f 	bl	8006450 <ifx_i2c_dl_receive_frame>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d18d      	bne.n	8007ad2 <ifx_i2c_dl_event_handler+0x1ee>
 8007bb6:	e6f4      	b.n	80079a2 <ifx_i2c_dl_event_handler+0xbe>
                        break;
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8007bb8:	f1b8 0f04 	cmp.w	r8, #4
 8007bbc:	f43f aed8 	beq.w	8007970 <ifx_i2c_dl_event_handler+0x8c>
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	9302      	str	r3, [sp, #8]
 8007bc4:	f7fe fc44 	bl	8006450 <ifx_i2c_dl_receive_frame>
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f47f aed0 	bne.w	8007970 <ifx_i2c_dl_event_handler+0x8c>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        exit_machine = FALSE;
                        break;
 8007bd6:	e6e4      	b.n	80079a2 <ifx_i2c_dl_event_handler+0xbe>
                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8007bd8:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8007bda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bdc:	19c2      	adds	r2, r0, r7
 8007bde:	8809      	ldrh	r1, [r1, #0]
 8007be0:	3a01      	subs	r2, #1
 8007be2:	428a      	cmp	r2, r1
 8007be4:	dd0b      	ble.n	8007bfe <ifx_i2c_dl_event_handler+0x31a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8007be6:	f44f 7282 	mov.w	r2, #260	; 0x104
                            p_ctx->tl.state = TL_STATE_ERROR;
 8007bea:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8007bee:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
 8007bf2:	e68e      	b.n	8007912 <ifx_i2c_dl_event_handler+0x2e>
 8007bf4:	429d      	cmp	r5, r3
 8007bf6:	bf34      	ite	cc
 8007bf8:	2009      	movcc	r0, #9
 8007bfa:	2008      	movcs	r0, #8
 8007bfc:	e712      	b.n	8007a24 <ifx_i2c_dl_event_handler+0x140>
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8007bfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007c00:	f8cd c004 	str.w	ip, [sp, #4]
 8007c04:	1c71      	adds	r1, r6, #1
 8007c06:	4418      	add	r0, r3
 8007c08:	1e7a      	subs	r2, r7, #1
 8007c0a:	f005 fe57 	bl	800d8bc <memcpy>
 8007c0e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8007c10:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8007c12:	f8dd c004 	ldr.w	ip, [sp, #4]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8007c16:	6ca5      	ldr	r5, [r4, #72]	; 0x48
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8007c18:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007c1a:	3801      	subs	r0, #1
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8007c1c:	4438      	add	r0, r7
 8007c1e:	b280      	uxth	r0, r0
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8007c20:	2301      	movs	r3, #1
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8007c22:	87a0      	strh	r0, [r4, #60]	; 0x3c
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8007c24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8007c28:	4661      	mov	r1, ip
 8007c2a:	4603      	mov	r3, r0
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8007c2c:	8028      	strh	r0, [r5, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8007c2e:	46b4      	mov	ip, r6
 8007c30:	4620      	mov	r0, r4
 8007c32:	e718      	b.n	8007a66 <ifx_i2c_dl_event_handler+0x182>
 8007c34:	0800de30 	.word	0x0800de30

08007c38 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8007c38:	b538      	push	{r3, r4, r5, lr}
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8007c3a:	2300      	movs	r3, #0
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8007c3c:	460d      	mov	r5, r1
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8007c3e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 8007c42:	4909      	ldr	r1, [pc, #36]	; (8007c68 <ifx_i2c_tl_init+0x30>)
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8007c44:	4604      	mov	r4, r0
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 8007c46:	f7fe fb85 	bl	8006354 <ifx_i2c_dl_init>
 8007c4a:	b110      	cbz	r0, 8007c52 <ifx_i2c_tl_init+0x1a>
    {
        return (IFX_I2C_STACK_ERROR);
 8007c4c:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);

    return (IFX_I2C_STACK_SUCCESS);
}
 8007c50:	bd38      	pop	{r3, r4, r5, pc}
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 8007c52:	88a3      	ldrh	r3, [r4, #4]
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
    p_ctx->tl.upper_layer_event_handler = handler;
 8007c54:	65e5      	str	r5, [r4, #92]	; 0x5c
    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
 8007c56:	2201      	movs	r2, #1
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 8007c58:	3b06      	subs	r3, #6
    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
 8007c5a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
 8007c5e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 8007c62:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42

    return (IFX_I2C_STACK_SUCCESS);
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	080078e5 	.word	0x080078e5

08007c6c <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 8007c72:	b101      	cbz	r1, 8007c76 <ifx_i2c_tl_transceive+0xa>
 8007c74:	b91a      	cbnz	r2, 8007c7e <ifx_i2c_tl_transceive+0x12>
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
    } while (FALSE);
    return (status);
}
 8007c76:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007c7a:	b005      	add	sp, #20
 8007c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c7e:	4604      	mov	r4, r0
        if ((NULL == p_packet) || (0 == packet_len))
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 8007c80:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8007c84:	2801      	cmp	r0, #1
 8007c86:	d1f6      	bne.n	8007c76 <ifx_i2c_tl_transceive+0xa>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8007c88:	2002      	movs	r0, #2
 8007c8a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 8007c8e:	9303      	str	r3, [sp, #12]
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	9101      	str	r1, [sp, #4]
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8007c94:	f7fd fc06 	bl	80054a4 <pal_os_timer_get_time_in_milliseconds>
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8007c98:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
    {
        pctr = TL_CHAINING_NO;
 8007c9c:	9a02      	ldr	r2, [sp, #8]
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
 8007c9e:	9901      	ldr	r1, [sp, #4]
        if (TL_STATE_IDLE != p_ctx->tl.state)
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8007ca0:	64e0      	str	r0, [r4, #76]	; 0x4c
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
    {
        pctr = TL_CHAINING_NO;
 8007ca2:	42b2      	cmp	r2, r6
 8007ca4:	bf94      	ite	ls
 8007ca6:	2700      	movls	r7, #0
 8007ca8:	2701      	movhi	r7, #1
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8007caa:	4296      	cmp	r6, r2
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
 8007cac:	f04f 0000 	mov.w	r0, #0
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8007cb0:	bfa8      	it	ge
 8007cb2:	4616      	movge	r6, r2
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8007cb4:	f44f 7e81 	mov.w	lr, #258	; 0x102
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 8007cb8:	9b03      	ldr	r3, [sp, #12]
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
 8007cba:	63a1      	str	r1, [r4, #56]	; 0x38
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8007cbc:	f047 0708 	orr.w	r7, r7, #8
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
 8007cc0:	87e2      	strh	r2, [r4, #62]	; 0x3e
        p_ctx->tl.packet_offset = 0;
 8007cc2:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
 8007cc6:	87a0      	strh	r0, [r4, #60]	; 0x3c
        p_ctx->tl.chaining_error_count = 0;
 8007cc8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        p_ctx->tl.master_chaining_error_count = 0;
 8007ccc:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
        p_ctx->tl.transmission_completed = 0;
 8007cd0:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 8007cd4:	6463      	str	r3, [r4, #68]	; 0x44
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8007cd6:	64a5      	str	r5, [r4, #72]	; 0x48
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8007cd8:	f884 72a7 	strb.w	r7, [r4, #679]	; 0x2a7
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8007cdc:	4632      	mov	r2, r6
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8007cde:	f8a4 e054 	strh.w	lr, [r4, #84]	; 0x54
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8007ce2:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
 8007ce6:	f005 fde9 	bl	800d8bc <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007cea:	1c71      	adds	r1, r6, #1
 8007cec:	b289      	uxth	r1, r1
 8007cee:	4620      	mov	r0, r4
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8007cf0:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
    } while (FALSE);
    return (status);
}
 8007cf4:	b005      	add	sp, #20
 8007cf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8007cfa:	f7fe bb4f 	b.w	800639c <ifx_i2c_dl_send_frame>
 8007cfe:	bf00      	nop

08007d00 <ifx_i2c_event_handler>:
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8007d00:	b510      	push	{r4, lr}
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8007d02:	6883      	ldr	r3, [r0, #8]
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8007d04:	4604      	mov	r4, r0
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8007d06:	6840      	ldr	r0, [r0, #4]
 8007d08:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	7363      	strb	r3, [r4, #13]
 8007d0e:	bd10      	pop	{r4, pc}

08007d10 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
 8007d12:	4c09      	ldr	r4, [pc, #36]	; (8007d38 <optiga_comms_create+0x28>)
 8007d14:	7b27      	ldrb	r7, [r4, #12]
 8007d16:	b10f      	cbz	r7, 8007d1c <optiga_comms_create+0xc>
{
    optiga_comms_t * p_optiga_comms = NULL;

    do
    {
        p_optiga_comms = &optiga_comms;
 8007d18:	4620      	mov	r0, r4
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	4606      	mov	r6, r0

        if (FALSE == p_optiga_comms->instance_init_state)
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8007d20:	f7fd f82a 	bl	8004d78 <pal_init>
 8007d24:	b928      	cbnz	r0, 8007d32 <optiga_comms_create+0x22>
                break;
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
            p_optiga_comms->p_upper_layer_ctx = context;
            p_optiga_comms->instance_init_state = TRUE;
 8007d26:	2301      	movs	r3, #1
 8007d28:	7323      	strb	r3, [r4, #12]
            {
                p_optiga_comms = NULL;
                break;
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8007d2a:	60a6      	str	r6, [r4, #8]
            p_optiga_comms->p_upper_layer_ctx = context;
 8007d2c:	6065      	str	r5, [r4, #4]
{
    optiga_comms_t * p_optiga_comms = NULL;

    do
    {
        p_optiga_comms = &optiga_comms;
 8007d2e:	4620      	mov	r0, r4
 8007d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (FALSE == p_optiga_comms->instance_init_state)
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
            {
                p_optiga_comms = NULL;
 8007d32:	4638      	mov	r0, r7
            p_optiga_comms->p_upper_layer_ctx = context;
            p_optiga_comms->instance_init_state = TRUE;
        }
    } while (FALSE);
    return (p_optiga_comms);
}
 8007d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d36:	bf00      	nop
 8007d38:	1ffed6ec 	.word	0x1ffed6ec

08007d3c <optiga_comms_set_callback_context>:
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
    p_optiga_comms->p_upper_layer_ctx = context;
 8007d3c:	6041      	str	r1, [r0, #4]
    return (0);
}
 8007d3e:	2000      	movs	r0, #0
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop

08007d44 <optiga_comms_open>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007d44:	b1c0      	cbz	r0, 8007d78 <optiga_comms_open+0x34>
 8007d46:	7b43      	ldrb	r3, [r0, #13]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d015      	beq.n	8007d78 <optiga_comms_open+0x34>


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8007d4c:	b510      	push	{r4, lr}
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007d4e:	6803      	ldr	r3, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007d50:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <optiga_comms_open+0x3c>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8007d52:	2101      	movs	r1, #1
 8007d54:	7341      	strb	r1, [r0, #13]
optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007d56:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007d58:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8007d5a:	7c02      	ldrb	r2, [r0, #16]
 8007d5c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8007d60:	4604      	mov	r4, r0
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8007d62:	6800      	ldr	r0, [r0, #0]
 8007d64:	6963      	ldr	r3, [r4, #20]
 8007d66:	f8c0 34d0 	str.w	r3, [r0, #1232]	; 0x4d0

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8007d6a:	f7fd ffbf 	bl	8005cec <ifx_i2c_open>
        if (IFX_I2C_STACK_SUCCESS != status)
 8007d6e:	b110      	cbz	r0, 8007d76 <optiga_comms_open+0x32>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	7363      	strb	r3, [r4, #13]
 8007d74:	bd10      	pop	{r4, pc}
        }
    }
    return (status);
}
 8007d76:	bd10      	pop	{r4, pc}

/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007d78:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	08007d01 	.word	0x08007d01

08007d84 <optiga_comms_transceive>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007d84:	b320      	cbz	r0, 8007dd0 <optiga_comms_transceive+0x4c>
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8007d86:	b570      	push	{r4, r5, r6, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007d88:	7b44      	ldrb	r4, [r0, #13]
 8007d8a:	2c01      	cmp	r4, #1
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8007d8c:	b082      	sub	sp, #8

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007d8e:	d01b      	beq.n	8007dc8 <optiga_comms_transceive+0x44>
 8007d90:	4604      	mov	r4, r0
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007d92:	6800      	ldr	r0, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007d94:	4d10      	ldr	r5, [pc, #64]	; (8007dd8 <optiga_comms_transceive+0x54>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8007d96:	2601      	movs	r6, #1
 8007d98:	7366      	strb	r6, [r4, #13]
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007d9a:	61c4      	str	r4, [r0, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007d9c:	6185      	str	r5, [r0, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8007d9e:	7ba5      	ldrb	r5, [r4, #14]
 8007da0:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	7be5      	ldrb	r5, [r4, #15]
 8007da8:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	7c25      	ldrb	r5, [r4, #16]
 8007db0:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8007db4:	9d06      	ldr	r5, [sp, #24]
 8007db6:	6820      	ldr	r0, [r4, #0]
 8007db8:	9500      	str	r5, [sp, #0]
 8007dba:	f7fd ffc5 	bl	8005d48 <ifx_i2c_transceive>
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8007dbe:	b108      	cbz	r0, 8007dc4 <optiga_comms_transceive+0x40>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	7363      	strb	r3, [r4, #13]
        }
    }
    return (status);
}
 8007dc4:	b002      	add	sp, #8
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007dc8:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007dd0:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	08007d01 	.word	0x08007d01

08007ddc <optiga_comms_close>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8007ddc:	b1a8      	cbz	r0, 8007e0a <optiga_comms_close+0x2e>
 8007dde:	7b43      	ldrb	r3, [r0, #13]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d012      	beq.n	8007e0a <optiga_comms_close+0x2e>
    return (status);
}


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8007de4:	b510      	push	{r4, lr}
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007de6:	6803      	ldr	r3, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007de8:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <optiga_comms_close+0x34>)
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8007dea:	2101      	movs	r1, #1
 8007dec:	7341      	strb	r1, [r0, #13]
optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8007dee:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8007df0:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8007df2:	7c02      	ldrb	r2, [r0, #16]
 8007df4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8007df8:	4604      	mov	r4, r0
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8007dfa:	6800      	ldr	r0, [r0, #0]
 8007dfc:	f7fd ffc2 	bl	8005d84 <ifx_i2c_close>
        if (IFX_I2C_STACK_SUCCESS != status)
 8007e00:	b110      	cbz	r0, 8007e08 <optiga_comms_close+0x2c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8007e02:	2300      	movs	r3, #0
 8007e04:	7363      	strb	r3, [r4, #13]
 8007e06:	bd10      	pop	{r4, pc}
        }
    }
    return (status);
}
 8007e08:	bd10      	pop	{r4, pc}
}


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8007e0a:	f44f 7081 	mov.w	r0, #258	; 0x102
 8007e0e:	4770      	bx	lr
 8007e10:	08007d01 	.word	0x08007d01

08007e14 <optiga_common_set_uint16>:
#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8007e14:	0a0b      	lsrs	r3, r1, #8
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8007e16:	7041      	strb	r1, [r0, #1]
#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8007e18:	7003      	strb	r3, [r0, #0]
 8007e1a:	4770      	bx	lr

08007e1c <optiga_common_set_uint32>:
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8007e1c:	b410      	push	{r4}
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8007e1e:	0c0a      	lsrs	r2, r1, #16
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8007e20:	0e0c      	lsrs	r4, r1, #24
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8007e22:	0a0b      	lsrs	r3, r1, #8
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8007e24:	7004      	strb	r4, [r0, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8007e26:	70c1      	strb	r1, [r0, #3]
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8007e28:	7042      	strb	r2, [r0, #1]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8007e2a:	7083      	strb	r3, [r0, #2]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
}
 8007e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8007e34:	7842      	ldrb	r2, [r0, #1]
 8007e36:	7803      	ldrb	r3, [r0, #0]
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8007e38:	78c1      	ldrb	r1, [r0, #3]
 8007e3a:	7880      	ldrb	r0, [r0, #2]
}

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8007e3c:	0412      	lsls	r2, r2, #16
 8007e3e:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8007e42:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));

    return (four_byte_value);
}
 8007e44:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop

08007e4c <optiga_common_get_uint16>:

void optiga_common_get_uint16 (const uint8_t * p_input_buffer,uint16_t* p_two_byte_value)
{
    *p_two_byte_value = (uint16_t)(*p_input_buffer << 8);
 8007e4c:	7803      	ldrb	r3, [r0, #0]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	800b      	strh	r3, [r1, #0]
    *p_two_byte_value |= (uint16_t)(*(p_input_buffer+1));
 8007e52:	7842      	ldrb	r2, [r0, #1]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	800b      	strh	r3, [r1, #0]
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <optiga_lib_print_bytes>:
    pal_logger_write(&logger_console, new_line_characters, 2);

}

void optiga_lib_print_bytes(const uint8_t buff[], const uint8_t size)
{
 8007e5c:	460a      	mov	r2, r1
//	   index += sprintf(&str[index], "%d", buff[i]);
//	}
//	memcpy(str, buff, size);
//	optiga_lib_print_string(str);

	pal_logger_write(&logger_console, buff, size);
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <optiga_lib_print_bytes+0xc>)
 8007e62:	f7fd ba07 	b.w	8005274 <pal_logger_write>
 8007e66:	bf00      	nop
 8007e68:	1ffed1c4 	.word	0x1ffed1c4

08007e6c <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	4602      	mov	r2, r0
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
            }
            break;
            case OPTIGA_CMD_QUEUE_SLOT_STATE:
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 8007e72:	f890 0639 	ldrb.w	r0, [r0, #1593]	; 0x639
 8007e76:	f892 5645 	ldrb.w	r5, [r2, #1605]	; 0x645
 8007e7a:	f892 8651 	ldrb.w	r8, [r2, #1617]	; 0x651
 8007e7e:	f892 c65d 	ldrb.w	ip, [r2, #1629]	; 0x65d
 8007e82:	f892 e669 	ldrb.w	lr, [r2, #1641]	; 0x669
 8007e86:	f892 4675 	ldrb.w	r4, [r2, #1653]	; 0x675
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8007e8a:	f8d2 1678 	ldr.w	r1, [r2, #1656]	; 0x678
 8007e8e:	f1a0 0302 	sub.w	r3, r0, #2
 8007e92:	fab3 f383 	clz	r3, r3
 8007e96:	095b      	lsrs	r3, r3, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007e98:	1c5e      	adds	r6, r3, #1
 8007e9a:	b2f6      	uxtb	r6, r6
 8007e9c:	2d02      	cmp	r5, #2
 8007e9e:	bf08      	it	eq
 8007ea0:	4633      	moveq	r3, r6
 8007ea2:	1c5e      	adds	r6, r3, #1
 8007ea4:	b2f6      	uxtb	r6, r6
 8007ea6:	f1b8 0f02 	cmp.w	r8, #2
 8007eaa:	bf08      	it	eq
 8007eac:	4633      	moveq	r3, r6
 8007eae:	1c5e      	adds	r6, r3, #1
 8007eb0:	b2f6      	uxtb	r6, r6
 8007eb2:	f1bc 0f02 	cmp.w	ip, #2
 8007eb6:	bf08      	it	eq
 8007eb8:	4633      	moveq	r3, r6
 8007eba:	1c5e      	adds	r6, r3, #1
 8007ebc:	b2f6      	uxtb	r6, r6
 8007ebe:	f1be 0f02 	cmp.w	lr, #2
 8007ec2:	bf08      	it	eq
 8007ec4:	4633      	moveq	r3, r6
 8007ec6:	1c5e      	adds	r6, r3, #1
 8007ec8:	b2f6      	uxtb	r6, r6
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8007eca:	2c02      	cmp	r4, #2
 8007ecc:	bf08      	it	eq
 8007ece:	4633      	moveq	r3, r6
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8007ed0:	b085      	sub	sp, #20
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8007ed2:	bb1b      	cbnz	r3, 8007f1c <optiga_cmd_queue_scheduler+0xb0>
 8007ed4:	f1a0 0308 	sub.w	r3, r0, #8
 8007ed8:	fab3 f383 	clz	r3, r3
 8007edc:	095b      	lsrs	r3, r3, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007ede:	1c5e      	adds	r6, r3, #1
 8007ee0:	b2f6      	uxtb	r6, r6
 8007ee2:	2d08      	cmp	r5, #8
 8007ee4:	bf08      	it	eq
 8007ee6:	4633      	moveq	r3, r6
 8007ee8:	1c5e      	adds	r6, r3, #1
 8007eea:	b2f6      	uxtb	r6, r6
 8007eec:	f1b8 0f08 	cmp.w	r8, #8
 8007ef0:	bf08      	it	eq
 8007ef2:	4633      	moveq	r3, r6
 8007ef4:	1c5e      	adds	r6, r3, #1
 8007ef6:	b2f6      	uxtb	r6, r6
 8007ef8:	f1bc 0f08 	cmp.w	ip, #8
 8007efc:	bf08      	it	eq
 8007efe:	4633      	moveq	r3, r6
 8007f00:	1c5e      	adds	r6, r3, #1
 8007f02:	b2f6      	uxtb	r6, r6
 8007f04:	f1be 0f08 	cmp.w	lr, #8
 8007f08:	bf08      	it	eq
 8007f0a:	4633      	moveq	r3, r6
 8007f0c:	1c5e      	adds	r6, r3, #1
 8007f0e:	b2f6      	uxtb	r6, r6
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8007f10:	2c08      	cmp	r4, #8
 8007f12:	bf08      	it	eq
 8007f14:	4633      	moveq	r3, r6
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 80ed 	beq.w	80080f6 <optiga_cmd_queue_scheduler+0x28a>
 8007f1c:	f1a0 0704 	sub.w	r7, r0, #4
 8007f20:	fab7 f787 	clz	r7, r7
 8007f24:	097f      	lsrs	r7, r7, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007f26:	1c7e      	adds	r6, r7, #1
 8007f28:	b2f6      	uxtb	r6, r6
 8007f2a:	2d04      	cmp	r5, #4
 8007f2c:	bf18      	it	ne
 8007f2e:	463e      	movne	r6, r7
 8007f30:	1c70      	adds	r0, r6, #1
 8007f32:	b2c0      	uxtb	r0, r0
 8007f34:	f1b8 0f04 	cmp.w	r8, #4
 8007f38:	bf14      	ite	ne
 8007f3a:	4635      	movne	r5, r6
 8007f3c:	4605      	moveq	r5, r0
 8007f3e:	1c6b      	adds	r3, r5, #1
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f1bc 0f04 	cmp.w	ip, #4
 8007f46:	bf14      	ite	ne
 8007f48:	4628      	movne	r0, r5
 8007f4a:	4618      	moveq	r0, r3
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f1be 0f04 	cmp.w	lr, #4
 8007f54:	bf18      	it	ne
 8007f56:	4603      	movne	r3, r0
 8007f58:	1c58      	adds	r0, r3, #1
 8007f5a:	b2c0      	uxtb	r0, r0

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8007f5c:	2c04      	cmp	r4, #4
 8007f5e:	bf08      	it	eq
 8007f60:	4603      	moveq	r3, r0
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	f000 8098 	beq.w	8008098 <optiga_cmd_queue_scheduler+0x22c>
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
                                               p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
    }
    else
    {
        pal_os_event_stop(my_os_event);
 8007f68:	4608      	mov	r0, r1
 8007f6a:	9101      	str	r1, [sp, #4]
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	f7fd fa27 	bl	80053c0 <pal_os_event_stop>
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8007f72:	f8df c230 	ldr.w	ip, [pc, #560]	; 80081a4 <optiga_cmd_queue_scheduler+0x338>
 8007f76:	9901      	ldr	r1, [sp, #4]
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8007f78:	f04f 39ff 	mov.w	r9, #4294967295
 8007f7c:	f04f 0b00 	mov.w	fp, #0
 8007f80:	2500      	movs	r5, #0
 8007f82:	462a      	mov	r2, r5
 8007f84:	4626      	mov	r6, r4
 8007f86:	f04f 08ff 	mov.w	r8, #255	; 0xff
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8007f8a:	f104 0a08 	add.w	sl, r4, #8
 8007f8e:	e008      	b.n	8007fa2 <optiga_cmd_queue_scheduler+0x136>

                }
                else
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8007f90:	f896 3639 	ldrb.w	r3, [r6, #1593]	; 0x639
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d05f      	beq.n	8008058 <optiga_cmd_queue_scheduler+0x1ec>
 8007f98:	3501      	adds	r5, #1
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8007f9a:	2d06      	cmp	r5, #6
 8007f9c:	f106 060c 	add.w	r6, r6, #12
 8007fa0:	d067      	beq.n	8008072 <optiga_cmd_queue_scheduler+0x206>
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007fa2:	f894 0645 	ldrb.w	r0, [r4, #1605]	; 0x645
 8007fa6:	f894 3639 	ldrb.w	r3, [r4, #1593]	; 0x639
 8007faa:	2808      	cmp	r0, #8
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
 8007fac:	f1a3 0308 	sub.w	r3, r3, #8
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007fb0:	f894 0651 	ldrb.w	r0, [r4, #1617]	; 0x651
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
 8007fb4:	fab3 f383 	clz	r3, r3
 8007fb8:	ea4f 1353 	mov.w	r3, r3, lsr #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8007fbc:	bf04      	itt	eq
 8007fbe:	3301      	addeq	r3, #1
 8007fc0:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007fc2:	2808      	cmp	r0, #8
 8007fc4:	f894 065d 	ldrb.w	r0, [r4, #1629]	; 0x65d
        {
            count++;
 8007fc8:	bf04      	itt	eq
 8007fca:	3301      	addeq	r3, #1
 8007fcc:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007fce:	2808      	cmp	r0, #8
 8007fd0:	f894 0669 	ldrb.w	r0, [r4, #1641]	; 0x669
        {
            count++;
 8007fd4:	bf04      	itt	eq
 8007fd6:	3301      	addeq	r3, #1
 8007fd8:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007fda:	2808      	cmp	r0, #8
 8007fdc:	f894 0675 	ldrb.w	r0, [r4, #1653]	; 0x675
        {
            count++;
 8007fe0:	bf04      	itt	eq
 8007fe2:	3301      	addeq	r3, #1
 8007fe4:	b2db      	uxtbeq	r3, r3
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007fe6:	2808      	cmp	r0, #8
        {
            count++;
 8007fe8:	bf04      	itt	eq
 8007fea:	3301      	addeq	r3, #1
 8007fec:	b2db      	uxtbeq	r3, r3
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);

                // if any slot has acquired strict lock, highest priority is given to it
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	b2ef      	uxtb	r7, r5
 8007ff2:	d1cd      	bne.n	8007f90 <optiga_cmd_queue_scheduler+0x124>
                {
                    // Select the slot which has acquired strict lock
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8007ff4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8007ff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ffc:	f640 0023 	movw	r0, #2083	; 0x823
 8008000:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 8008004:	4283      	cmp	r3, r0
 8008006:	d1c7      	bne.n	8007f98 <optiga_cmd_queue_scheduler+0x12c>
 8008008:	3501      	adds	r5, #1
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800800a:	2d06      	cmp	r5, #6
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
                        {
                            reference_time_stamp = p_queue_entry->arrival_time;
 800800c:	f8d6 9634 	ldr.w	r9, [r6, #1588]	; 0x634
 8008010:	46b8      	mov	r8, r7
 8008012:	f106 060c 	add.w	r6, r6, #12
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8008016:	d1c4      	bne.n	8007fa2 <optiga_cmd_queue_scheduler+0x136>
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8008018:	ea4f 0548 	mov.w	r5, r8, lsl #1
 800801c:	eb05 0308 	add.w	r3, r5, r8
 8008020:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008024:	f893 2638 	ldrb.w	r2, [r3, #1592]	; 0x638
 8008028:	2a22      	cmp	r2, #34	; 0x22
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 800802a:	f8d3 2630 	ldr.w	r2, [r3, #1584]	; 0x630
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 800802e:	f000 8087 	beq.w	8008140 <optiga_cmd_queue_scheduler+0x2d4>
 8008032:	6813      	ldr	r3, [r2, #0]
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
            pal_os_event_register_callback_oneshot(my_os_event,
 8008034:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8008038:	4958      	ldr	r1, [pc, #352]	; (800819c <optiga_cmd_queue_scheduler+0x330>)
 800803a:	2332      	movs	r3, #50	; 0x32
 800803c:	f7fd f9fa 	bl	8005434 <pal_os_event_register_callback_oneshot>
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8008040:	eb05 0308 	add.w	r3, r5, r8
 8008044:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008048:	2204      	movs	r2, #4
 800804a:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 800804e:	f8c4 967c 	str.w	r9, [r4, #1660]	; 0x67c
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8008052:	b005      	add	sp, #20
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8008058:	f8d6 0634 	ldr.w	r0, [r6, #1588]	; 0x634
 800805c:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
 8008060:	4298      	cmp	r0, r3
 8008062:	d20e      	bcs.n	8008082 <optiga_cmd_queue_scheduler+0x216>
 8008064:	3501      	adds	r5, #1
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8008066:	2d06      	cmp	r5, #6
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
                        {
                            overflow_detected = TRUE;
 8008068:	f04f 0201 	mov.w	r2, #1
 800806c:	f106 060c 	add.w	r6, r6, #12
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8008070:	d197      	bne.n	8007fa2 <optiga_cmd_queue_scheduler+0x136>
                            prefered_index = index;
                        }
                    }
                }
            }
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 8008072:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8008076:	d1cf      	bne.n	8008018 <optiga_cmd_queue_scheduler+0x1ac>
 8008078:	2a00      	cmp	r2, #0
 800807a:	d05e      	beq.n	800813a <optiga_cmd_queue_scheduler+0x2ce>
        do
        {
            //reset overflow detected flag and the last_time stamp
            if(overflow_detected == TRUE)
            {
                p_optiga_ctx->last_time_stamp = 0;
 800807c:	f8c4 b67c 	str.w	fp, [r4, #1660]	; 0x67c
 8008080:	e77e      	b.n	8007f80 <optiga_cmd_queue_scheduler+0x114>
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8008082:	4548      	cmp	r0, r9
 8008084:	d888      	bhi.n	8007f98 <optiga_cmd_queue_scheduler+0x12c>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8008086:	f896 3638 	ldrb.w	r3, [r6, #1592]	; 0x638
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800808a:	2b22      	cmp	r3, #34	; 0x22
 800808c:	d03c      	beq.n	8008108 <optiga_cmd_queue_scheduler+0x29c>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800808e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8008092:	2b21      	cmp	r3, #33	; 0x21
 8008094:	d180      	bne.n	8007f98 <optiga_cmd_queue_scheduler+0x12c>
 8008096:	e7b7      	b.n	8008008 <optiga_cmd_queue_scheduler+0x19c>
 8008098:	f892 6638 	ldrb.w	r6, [r2, #1592]	; 0x638
 800809c:	f892 4644 	ldrb.w	r4, [r2, #1604]	; 0x644
 80080a0:	f892 0650 	ldrb.w	r0, [r2, #1616]	; 0x650
 80080a4:	f892 e65c 	ldrb.w	lr, [r2, #1628]	; 0x65c
 80080a8:	f892 3668 	ldrb.w	r3, [r2, #1640]	; 0x668
 80080ac:	f892 7674 	ldrb.w	r7, [r2, #1652]	; 0x674
 80080b0:	f1a6 0623 	sub.w	r6, r6, #35	; 0x23
 80080b4:	fab6 f686 	clz	r6, r6
 80080b8:	0976      	lsrs	r6, r6, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 80080ba:	1c75      	adds	r5, r6, #1
 80080bc:	b2ed      	uxtb	r5, r5
 80080be:	2c23      	cmp	r4, #35	; 0x23
 80080c0:	bf18      	it	ne
 80080c2:	4635      	movne	r5, r6
 80080c4:	1c6c      	adds	r4, r5, #1
 80080c6:	b2e4      	uxtb	r4, r4
 80080c8:	2823      	cmp	r0, #35	; 0x23
 80080ca:	bf18      	it	ne
 80080cc:	462c      	movne	r4, r5
 80080ce:	1c60      	adds	r0, r4, #1
 80080d0:	b2c0      	uxtb	r0, r0
 80080d2:	f1be 0f23 	cmp.w	lr, #35	; 0x23
 80080d6:	bf18      	it	ne
 80080d8:	4620      	movne	r0, r4
 80080da:	1c44      	adds	r4, r0, #1
 80080dc:	b2e4      	uxtb	r4, r4
 80080de:	2b23      	cmp	r3, #35	; 0x23
 80080e0:	bf14      	ite	ne
 80080e2:	4603      	movne	r3, r0
 80080e4:	4623      	moveq	r3, r4
 80080e6:	1c58      	adds	r0, r3, #1
 80080e8:	b2c0      	uxtb	r0, r0
    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80080ea:	2f23      	cmp	r7, #35	; 0x23
 80080ec:	bf08      	it	eq
 80080ee:	4603      	moveq	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f43f af39 	beq.w	8007f68 <optiga_cmd_queue_scheduler+0xfc>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 80080f6:	4608      	mov	r0, r1
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 80080f8:	4929      	ldr	r1, [pc, #164]	; (80081a0 <optiga_cmd_queue_scheduler+0x334>)
 80080fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 80080fe:	b005      	add	sp, #20
 8008100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8008104:	f7fd b996 	b.w	8005434 <pal_os_event_register_callback_oneshot>
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8008108:	4650      	mov	r0, sl
 800810a:	f8cd c00c 	str.w	ip, [sp, #12]
 800810e:	9102      	str	r1, [sp, #8]
 8008110:	9201      	str	r2, [sp, #4]
 8008112:	f7ff fe8f 	bl	8007e34 <optiga_common_get_uint32>
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8008116:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800811a:	9a01      	ldr	r2, [sp, #4]
 800811c:	9902      	ldr	r1, [sp, #8]
 800811e:	4560      	cmp	r0, ip
 8008120:	f67f af72 	bls.w	8008008 <optiga_cmd_queue_scheduler+0x19c>
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8008124:	f896 3638 	ldrb.w	r3, [r6, #1592]	; 0x638
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8008128:	2b22      	cmp	r3, #34	; 0x22
 800812a:	d1b0      	bne.n	800808e <optiga_cmd_queue_scheduler+0x222>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800812c:	f8d6 3630 	ldr.w	r3, [r6, #1584]	; 0x630
 8008130:	8a9b      	ldrh	r3, [r3, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f47f af68 	bne.w	8008008 <optiga_cmd_queue_scheduler+0x19c>
 8008138:	e72e      	b.n	8007f98 <optiga_cmd_queue_scheduler+0x12c>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 800813a:	4608      	mov	r0, r1
 800813c:	4622      	mov	r2, r4
 800813e:	e7db      	b.n	80080f8 <optiga_cmd_queue_scheduler+0x28c>
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8008140:	8a91      	ldrh	r1, [r2, #20]
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	2900      	cmp	r1, #0
 8008146:	f47f af75 	bne.w	8008034 <optiga_cmd_queue_scheduler+0x1c8>
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 800814a:	7a1e      	ldrb	r6, [r3, #8]
 800814c:	2e10      	cmp	r6, #16
/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 800814e:	f103 0008 	add.w	r0, r3, #8
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8008152:	d112      	bne.n	800817a <optiga_cmd_queue_scheduler+0x30e>
 8008154:	7a59      	ldrb	r1, [r3, #9]
 8008156:	2910      	cmp	r1, #16
 8008158:	f103 0009 	add.w	r0, r3, #9
 800815c:	d11c      	bne.n	8008198 <optiga_cmd_queue_scheduler+0x32c>
 800815e:	7a99      	ldrb	r1, [r3, #10]
 8008160:	2910      	cmp	r1, #16
 8008162:	f103 000a 	add.w	r0, r3, #10
 8008166:	d115      	bne.n	8008194 <optiga_cmd_queue_scheduler+0x328>
 8008168:	7ad9      	ldrb	r1, [r3, #11]
 800816a:	2910      	cmp	r1, #16
 800816c:	f103 000b 	add.w	r0, r3, #11
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8008170:	bf18      	it	ne
 8008172:	2303      	movne	r3, #3
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8008174:	f43f af5e 	beq.w	8008034 <optiga_cmd_queue_scheduler+0x1c8>
 8008178:	e000      	b.n	800817c <optiga_cmd_queue_scheduler+0x310>
 800817a:	460b      	mov	r3, r1
 800817c:	eb05 0108 	add.w	r1, r5, r8
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8008180:	f443 4361 	orr.w	r3, r3, #57600	; 0xe100
 8008184:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8008188:	2610      	movs	r6, #16
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 800818a:	8293      	strh	r3, [r2, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 800818c:	7006      	strb	r6, [r0, #0]
 800818e:	f8d1 2630 	ldr.w	r2, [r1, #1584]	; 0x630
 8008192:	e74e      	b.n	8008032 <optiga_cmd_queue_scheduler+0x1c6>
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8008194:	2302      	movs	r3, #2
 8008196:	e7f1      	b.n	800817c <optiga_cmd_queue_scheduler+0x310>
 8008198:	2301      	movs	r3, #1
 800819a:	e7ef      	b.n	800817c <optiga_cmd_queue_scheduler+0x310>
 800819c:	0800941d 	.word	0x0800941d
 80081a0:	08007e6d 	.word	0x08007e6d
 80081a4:	1010100f 	.word	0x1010100f

080081a8 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 80081a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 80081aa:	7d86      	ldrb	r6, [r0, #22]
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 80081ac:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 80081ae:	2e02      	cmp	r6, #2

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 80081b0:	4604      	mov	r4, r0
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 80081b2:	d01a      	beq.n	80081ea <optiga_cmd_get_data_object_handler+0x42>
 80081b4:	2e03      	cmp	r6, #3
 80081b6:	d115      	bne.n	80081e4 <optiga_cmd_get_data_object_handler+0x3c>
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
 80081b8:	2300      	movs	r3, #0
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80081ba:	6801      	ldr	r1, [r0, #0]
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
 80081bc:	7603      	strb	r3, [r0, #24]
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80081be:	7c8f      	ldrb	r7, [r1, #18]
 80081c0:	2f00      	cmp	r7, #0
 80081c2:	d137      	bne.n	8008234 <optiga_cmd_get_data_object_handler+0x8c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                }
                return_status = OPTIGA_CMD_ERROR;
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 80081c4:	8c02      	ldrh	r2, [r0, #32]
 80081c6:	f248 0308 	movw	r3, #32776	; 0x8008
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d054      	beq.n	8008278 <optiga_cmd_get_data_object_handler+0xd0>
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 80081ce:	88ce      	ldrh	r6, [r1, #6]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
 80081d0:	88ab      	ldrh	r3, [r5, #4]
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 80081d2:	3e04      	subs	r6, #4
 80081d4:	b2b6      	uxth	r6, r6

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
 80081d6:	42b3      	cmp	r3, r6
 80081d8:	d253      	bcs.n	8008282 <optiga_cmd_get_data_object_handler+0xda>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 80081da:	68eb      	ldr	r3, [r5, #12]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80081dc:	f44f 7001 	mov.w	r0, #516	; 0x204
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 80081e0:	801f      	strh	r7, [r3, #0]
                    break;
 80081e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80081e4:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 80081e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80081ea:	6800      	ldr	r0, [r0, #0]
 80081ec:	8829      	ldrh	r1, [r5, #0]
 80081ee:	3016      	adds	r0, #22
 80081f0:	f7ff fe10 	bl	8007e14 <optiga_common_set_uint16>
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 80081f4:	88ea      	ldrh	r2, [r5, #6]
 80081f6:	88ab      	ldrh	r3, [r5, #4]
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 80081f8:	7aa9      	ldrb	r1, [r5, #10]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	f240 6011 	movw	r0, #1553	; 0x611
 8008200:	4283      	cmp	r3, r0
 8008202:	bfa8      	it	ge
 8008204:	4603      	movge	r3, r0
 8008206:	b29f      	uxth	r7, r3
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 8008208:	b1e9      	cbz	r1, 8008246 <optiga_cmd_get_data_object_handler+0x9e>
 800820a:	f04f 0e06 	mov.w	lr, #6
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 800820e:	6823      	ldr	r3, [r4, #0]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
 8008210:	7e61      	ldrb	r1, [r4, #25]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8008212:	882a      	ldrh	r2, [r5, #0]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8008214:	74d9      	strb	r1, [r3, #19]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8008216:	f24f 11c2 	movw	r1, #61890	; 0xf1c2
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 800821a:	428a      	cmp	r2, r1
 800821c:	bf14      	ite	ne
 800821e:	2281      	movne	r2, #129	; 0x81
 8008220:	2201      	moveq	r2, #1
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008222:	2000      	movs	r0, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008224:	749a      	strb	r2, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8008226:	755e      	strb	r6, [r3, #21]
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008228:	7518      	strb	r0, [r3, #20]
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	f8a3 e004 	strh.w	lr, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 8008230:	812f      	strh	r7, [r5, #8]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 8008232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 8008234:	88eb      	ldrh	r3, [r5, #6]
 8008236:	b1b3      	cbz	r3, 8008266 <optiga_cmd_get_data_object_handler+0xbe>
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8008238:	7f43      	ldrb	r3, [r0, #29]
 800823a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800823e:	7743      	strb	r3, [r0, #29]
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                }
                return_status = OPTIGA_CMD_ERROR;
 8008240:	f240 2002 	movw	r0, #514	; 0x202
 8008244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
            {
                //offset
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8008246:	8869      	ldrh	r1, [r5, #2]
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	4411      	add	r1, r2
 800824c:	b289      	uxth	r1, r1
 800824e:	3018      	adds	r0, #24
 8008250:	f7ff fde0 	bl	8007e14 <optiga_common_set_uint16>
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                //length
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8008254:	6820      	ldr	r0, [r4, #0]
 8008256:	4639      	mov	r1, r7
 8008258:	301a      	adds	r0, #26
 800825a:	f7ff fddb 	bl	8007e14 <optiga_common_set_uint16>
 800825e:	2606      	movs	r6, #6
 8008260:	f04f 0e0a 	mov.w	lr, #10
 8008264:	e7d3      	b.n	800820e <optiga_cmd_get_data_object_handler+0x66>
                //flag used to setting the received buffer length to 0, in case unexpected error
                else
                {
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8008266:	7f42      	ldrb	r2, [r0, #29]
 8008268:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800826c:	7742      	strb	r2, [r0, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800826e:	68ea      	ldr	r2, [r5, #12]
                }
                return_status = OPTIGA_CMD_ERROR;
 8008270:	f240 2002 	movw	r0, #514	; 0x202
                else
                {
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8008274:	8013      	strh	r3, [r2, #0]
 8008276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                }
                return_status = OPTIGA_CMD_ERROR;
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
            {
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8008278:	68eb      	ldr	r3, [r5, #12]
 800827a:	88ea      	ldrh	r2, [r5, #6]
 800827c:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 800827e:	4638      	mov	r0, r7
 8008280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                    break;
                }

                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8008282:	88eb      	ldrh	r3, [r5, #6]
 8008284:	6928      	ldr	r0, [r5, #16]
 8008286:	4632      	mov	r2, r6
 8008288:	4418      	add	r0, r3
 800828a:	3116      	adds	r1, #22
 800828c:	f7fd f8ec 	bl	8005468 <pal_os_memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8008290:	88eb      	ldrh	r3, [r5, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8008292:	892a      	ldrh	r2, [r5, #8]
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8008294:	4433      	add	r3, r6
 8008296:	b29b      	uxth	r3, r3

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8008298:	42b2      	cmp	r2, r6
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 800829a:	80eb      	strh	r3, [r5, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
 800829c:	d806      	bhi.n	80082ac <optiga_cmd_get_data_object_handler+0x104>
 800829e:	88aa      	ldrh	r2, [r5, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d003      	beq.n	80082ac <optiga_cmd_get_data_object_handler+0x104>
                    p_optiga_read_data->accumulated_size = 0;
                    p_optiga_read_data->last_read_size = 0;
                }
                else
                {
                    me->chaining_ongoing = TRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	7623      	strb	r3, [r4, #24]
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
                return_status = OPTIGA_LIB_SUCCESS;
 80082a8:	4638      	mov	r0, r7
 80082aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                p_optiga_read_data->accumulated_size += data_read;

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80082ac:	68e9      	ldr	r1, [r5, #12]
                    p_optiga_read_data->accumulated_size = 0;
 80082ae:	2200      	movs	r2, #0
                p_optiga_read_data->accumulated_size += data_read;

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80082b0:	800b      	strh	r3, [r1, #0]
                else
                {
                    me->chaining_ongoing = TRUE;
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
                return_status = OPTIGA_LIB_SUCCESS;
 80082b2:	4610      	mov	r0, r2

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
                    p_optiga_read_data->accumulated_size = 0;
 80082b4:	80ea      	strh	r2, [r5, #6]
                    p_optiga_read_data->last_read_size = 0;
 80082b6:	812a      	strh	r2, [r5, #8]
 80082b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ba:	bf00      	nop

080082bc <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 80082be:	7d83      	ldrb	r3, [r0, #22]
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
 80082c0:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d00e      	beq.n	80082e4 <optiga_cmd_set_data_object_handler+0x28>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d109      	bne.n	80082de <optiga_cmd_set_data_object_handler+0x22>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80082ca:	6803      	ldr	r3, [r0, #0]
 80082cc:	7c9b      	ldrb	r3, [r3, #18]
 80082ce:	b363      	cbz	r3, 800832a <optiga_cmd_set_data_object_handler+0x6e>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80082d0:	7f43      	ldrb	r3, [r0, #29]
 80082d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d6:	7743      	strb	r3, [r0, #29]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80082d8:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 80082dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80082de:	f240 2002 	movw	r0, #514	; 0x202
 80082e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e4:	4604      	mov	r4, r0
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
 80082e6:	2300      	movs	r3, #0
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80082e8:	6800      	ldr	r0, [r0, #0]
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
 80082ea:	7623      	strb	r3, [r4, #24]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80082ec:	8829      	ldrh	r1, [r5, #0]
 80082ee:	3016      	adds	r0, #22
 80082f0:	f7ff fd90 	bl	8007e14 <optiga_common_set_uint16>
                                     p_optiga_write_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            //offset
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80082f4:	886b      	ldrh	r3, [r5, #2]
 80082f6:	88e9      	ldrh	r1, [r5, #6]
 80082f8:	6820      	ldr	r0, [r4, #0]
 80082fa:	4419      	add	r1, r3
 80082fc:	b289      	uxth	r1, r1
 80082fe:	3018      	adds	r0, #24
 8008300:	f7ff fd88 	bl	8007e14 <optiga_common_set_uint16>
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
 8008304:	88ab      	ldrh	r3, [r5, #4]
 8008306:	88ea      	ldrh	r2, [r5, #6]
 8008308:	f240 610d 	movw	r1, #1549	; 0x60d
 800830c:	1a9a      	subs	r2, r3, r2
 800830e:	428a      	cmp	r2, r1
 8008310:	bfa8      	it	ge
 8008312:	460a      	movge	r2, r1
 8008314:	b296      	uxth	r6, r2
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8008316:	f106 0708 	add.w	r7, r6, #8
 800831a:	b2bf      	uxth	r7, r7
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800831c:	f240 6315 	movw	r3, #1557	; 0x615
 8008320:	429f      	cmp	r7, r3
 8008322:	d904      	bls.n	800832e <optiga_cmd_set_data_object_handler+0x72>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8008324:	f44f 7001 	mov.w	r0, #516	; 0x204
        break;
        default:
            break;
    }
    return (return_status);
}
 8008328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            {
                me->chaining_ongoing = TRUE;
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
            }
            return_status = OPTIGA_LIB_SUCCESS;
 800832a:	2000      	movs	r0, #0
 800832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800832e:	6823      	ldr	r3, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 8008330:	7e61      	ldrb	r1, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8008332:	74d9      	strb	r1, [r3, #19]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 8008334:	1d32      	adds	r2, r6, #4
 8008336:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008338:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800833a:	2182      	movs	r1, #130	; 0x82
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 800833c:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 800833e:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008340:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
            //data to be written
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
 8008342:	7e63      	ldrb	r3, [r4, #25]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d110      	bne.n	800836a <optiga_cmd_set_data_object_handler+0xae>
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	7baa      	ldrb	r2, [r5, #14]
 800834c:	769a      	strb	r2, [r3, #26]
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 800834e:	88ea      	ldrh	r2, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 8008350:	88ab      	ldrh	r3, [r5, #4]
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 8008352:	6821      	ldr	r1, [r4, #0]
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 8008354:	4432      	add	r2, r6
 8008356:	b292      	uxth	r2, r2

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 8008358:	4293      	cmp	r3, r2
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 800835a:	80ea      	strh	r2, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 800835c:	808f      	strh	r7, [r1, #4]

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 800835e:	d0e4      	beq.n	800832a <optiga_cmd_set_data_object_handler+0x6e>
            {
                me->chaining_ongoing = TRUE;
 8008360:	2301      	movs	r3, #1
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 8008362:	2000      	movs	r0, #0
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
            {
                me->chaining_ongoing = TRUE;
 8008364:	7623      	strb	r3, [r4, #24]
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 8008366:	7660      	strb	r0, [r4, #25]
 8008368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
            }
            else
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800836a:	6820      	ldr	r0, [r4, #0]
 800836c:	88eb      	ldrh	r3, [r5, #6]
 800836e:	68a9      	ldr	r1, [r5, #8]
 8008370:	301a      	adds	r0, #26
 8008372:	4419      	add	r1, r3
 8008374:	4632      	mov	r2, r6
 8008376:	f7fd f877 	bl	8005468 <pal_os_memcpy>
 800837a:	e7e8      	b.n	800834e <optiga_cmd_set_data_object_handler+0x92>

0800837c <optiga_cmd_get_random_handler>:
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 800837c:	7d83      	ldrb	r3, [r0, #22]
 800837e:	2b02      	cmp	r3, #2
#if defined (OPTIGA_CRYPT_RANDOM_ENABLED) || defined (OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED) || defined (OPTIGA_CRYPT_GENERATE_AUTH_CODE_ENABLED)
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4604      	mov	r4, r0
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
 8008384:	6886      	ldr	r6, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8008386:	d00e      	beq.n	80083a6 <optiga_cmd_get_random_handler+0x2a>
 8008388:	2b03      	cmp	r3, #3
 800838a:	d109      	bne.n	80083a0 <optiga_cmd_get_random_handler+0x24>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for get random command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800838c:	6801      	ldr	r1, [r0, #0]
 800838e:	7c8d      	ldrb	r5, [r1, #18]
 8008390:	b315      	cbz	r5, 80083d8 <optiga_cmd_get_random_handler+0x5c>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8008392:	7f43      	ldrb	r3, [r0, #29]
 8008394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008398:	7743      	strb	r3, [r0, #29]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800839a:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 800839e:	bd70      	pop	{r4, r5, r6, pc}
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80083a0:	f240 2002 	movw	r0, #514	; 0x202
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");
            /// APDU header size + length of random
            /// OID size in case of param 0x04
            /// 0x41, Length and prepending optional data
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            total_apdu_length += ((TRUE == p_random_params->store_in_session) ?
 80083a6:	7b33      	ldrb	r3, [r6, #12]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d01f      	beq.n	80083ec <optiga_cmd_get_random_handler+0x70>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	8831      	ldrh	r1, [r6, #0]
 80083b0:	3016      	adds	r0, #22
 80083b2:	f7ff fd2f 	bl	8007e14 <optiga_common_set_uint16>
                                     p_random_params->random_data_length);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            if (TRUE == p_random_params->store_in_session)
 80083b6:	7b33      	ldrb	r3, [r6, #12]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d021      	beq.n	8008400 <optiga_cmd_get_random_handler+0x84>
 80083bc:	2002      	movs	r0, #2
 80083be:	2100      	movs	r1, #0
 80083c0:	2206      	movs	r2, #6
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80083c2:	6823      	ldr	r3, [r4, #0]
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
 80083c4:	7e65      	ldrb	r5, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80083c6:	74dd      	strb	r5, [r3, #19]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80083c8:	258c      	movs	r5, #140	; 0x8c
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80083ca:	7558      	strb	r0, [r3, #21]
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80083cc:	7519      	strb	r1, [r3, #20]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80083ce:	749d      	strb	r5, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80083d0:	6823      	ldr	r3, [r4, #0]

            return_status = OPTIGA_LIB_SUCCESS;
 80083d2:	2000      	movs	r0, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80083d4:	809a      	strh	r2, [r3, #4]

            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            if (OPTIGA_CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET != (uint8_t)me->cmd_param)
 80083d8:	7e43      	ldrb	r3, [r0, #25]
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d02e      	beq.n	800843c <optiga_cmd_get_random_handler+0xc0>
            {
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_random_params->random_data,
 80083de:	6870      	ldr	r0, [r6, #4]
 80083e0:	8832      	ldrh	r2, [r6, #0]
 80083e2:	3116      	adds	r1, #22
 80083e4:	f7fd f840 	bl	8005468 <pal_os_memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              p_random_params->random_data_length);
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 80083e8:	4628      	mov	r0, r5
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");
            /// APDU header size + length of random
            /// OID size in case of param 0x04
            /// 0x41, Length and prepending optional data
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            total_apdu_length += ((TRUE == p_random_params->store_in_session) ?
 80083ec:	8873      	ldrh	r3, [r6, #2]
 80083ee:	330b      	adds	r3, #11
                                (OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_TAG_LENGTH_SIZE + p_random_params->optional_data_length) : 0x00);

            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f240 6215 	movw	r2, #1557	; 0x615
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d9d8      	bls.n	80083ac <optiga_cmd_get_random_handler+0x30>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80083fa:	f44f 7001 	mov.w	r0, #516	; 0x204
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            if (TRUE == p_random_params->store_in_session)
            {
                /// Copy the data to buffer
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	8aa1      	ldrh	r1, [r4, #20]
 8008404:	3018      	adds	r0, #24
 8008406:	f7ff fd05 	bl	8007e14 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                /// TLV formation for key usage
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
 800840a:	68b3      	ldr	r3, [r6, #8]
 800840c:	b1db      	cbz	r3, 8008446 <optiga_cmd_get_random_handler+0xca>
 800840e:	8873      	ldrh	r3, [r6, #2]
 8008410:	0a18      	lsrs	r0, r3, #8
 8008412:	b2db      	uxtb	r3, r3
                                              ((NULL != p_random_params->optional_data) ?
                                              p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
 8008414:	6822      	ldr	r2, [r4, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008416:	2141      	movs	r1, #65	; 0x41
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008418:	76d0      	strb	r0, [r2, #27]
    buffer[start_position++] = (uint8_t )(tag_length);
 800841a:	7713      	strb	r3, [r2, #28]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800841c:	7691      	strb	r1, [r2, #26]
                                              ((NULL != p_random_params->optional_data) ?
                                              p_random_params->optional_data_length : 0x0000),
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                if ((NULL != p_random_params->optional_data))
 800841e:	68b1      	ldr	r1, [r6, #8]
 8008420:	b171      	cbz	r1, 8008440 <optiga_cmd_get_random_handler+0xc4>
                {
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
 8008422:	6820      	ldr	r0, [r4, #0]
 8008424:	8872      	ldrh	r2, [r6, #2]
 8008426:	301d      	adds	r0, #29
 8008428:	f7fd f81e 	bl	8005468 <pal_os_memcpy>
                                  p_random_params->optional_data_length);
                    index_for_data += p_random_params->optional_data_length;
 800842c:	8873      	ldrh	r3, [r6, #2]
 800842e:	1dd8      	adds	r0, r3, #7
 8008430:	b280      	uxth	r0, r0
 8008432:	330b      	adds	r3, #11
 8008434:	0a01      	lsrs	r1, r0, #8
 8008436:	b29a      	uxth	r2, r3
 8008438:	b2c0      	uxtb	r0, r0
 800843a:	e7c2      	b.n	80083c2 <optiga_cmd_get_random_handler+0x46>
                pal_os_memcpy(p_random_params->random_data,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              p_random_params->random_data_length);
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800843c:	4628      	mov	r0, r5
        default:
            break;
    }

    return (return_status);
}
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	2007      	movs	r0, #7
 8008442:	220b      	movs	r2, #11
 8008444:	e7bd      	b.n	80083c2 <optiga_cmd_get_random_handler+0x46>
 8008446:	4618      	mov	r0, r3
 8008448:	e7e4      	b.n	8008414 <optiga_cmd_get_random_handler+0x98>
 800844a:	bf00      	nop

0800844c <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8008450:	7d83      	ldrb	r3, [r0, #22]
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 8008452:	6884      	ldr	r4, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8008454:	2b02      	cmp	r3, #2
 8008456:	d00c      	beq.n	8008472 <optiga_cmd_verify_sign_handler+0x26>
 8008458:	2b03      	cmp	r3, #3
 800845a:	d106      	bne.n	800846a <optiga_cmd_verify_sign_handler+0x1e>
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800845c:	6803      	ldr	r3, [r0, #0]
 800845e:	7c9b      	ldrb	r3, [r3, #18]
 8008460:	2bff      	cmp	r3, #255	; 0xff
 8008462:	d01e      	beq.n	80084a2 <optiga_cmd_verify_sign_handler+0x56>
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008464:	2000      	movs	r0, #0
        default:
            break;
    }

    return (return_status);
}
 8008466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800846a:	f240 2002 	movw	r0, #514	; 0x202
 800846e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008472:	89a3      	ldrh	r3, [r4, #12]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8008474:	7925      	ldrb	r5, [r4, #4]
 8008476:	7ba1      	ldrb	r1, [r4, #14]
 8008478:	330a      	adds	r3, #10
 800847a:	b29b      	uxth	r3, r3
 800847c:	b2aa      	uxth	r2, r5
 800847e:	b959      	cbnz	r1, 8008498 <optiga_cmd_verify_sign_handler+0x4c>
 8008480:	2105      	movs	r1, #5
 8008482:	4413      	add	r3, r2
 8008484:	440b      	add	r3, r1
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8008486:	b29b      	uxth	r3, r3
 8008488:	f240 6215 	movw	r2, #1557	; 0x615
 800848c:	4293      	cmp	r3, r2
 800848e:	d910      	bls.n	80084b2 <optiga_cmd_verify_sign_handler+0x66>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8008490:	f44f 7001 	mov.w	r0, #516	; 0x204
 8008494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
 8008498:	6921      	ldr	r1, [r4, #16]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800849a:	8889      	ldrh	r1, [r1, #4]
 800849c:	3109      	adds	r1, #9
 800849e:	b289      	uxth	r1, r1
 80084a0:	e7ef      	b.n	8008482 <optiga_cmd_verify_sign_handler+0x36>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80084a2:	7f43      	ldrb	r3, [r0, #29]
 80084a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a8:	7743      	strb	r3, [r0, #29]
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80084aa:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 80084ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
 80084b2:	6803      	ldr	r3, [r0, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80084b4:	2701      	movs	r7, #1
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80084b6:	f04f 0800 	mov.w	r8, #0
    buffer[start_position++] = (uint8_t )(tag_length);
 80084ba:	761d      	strb	r5, [r3, #24]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80084bc:	759f      	strb	r7, [r3, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80084be:	f883 8017 	strb.w	r8, [r3, #23]
 80084c2:	4606      	mov	r6, r0
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80084c4:	6800      	ldr	r0, [r0, #0]
 80084c6:	6821      	ldr	r1, [r4, #0]
 80084c8:	7922      	ldrb	r2, [r4, #4]
 80084ca:	3019      	adds	r0, #25
 80084cc:	f7fc ffcc 	bl	8005468 <pal_os_memcpy>
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
 80084d0:	7923      	ldrb	r3, [r4, #4]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
 80084d2:	6832      	ldr	r2, [r6, #0]
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 80084d4:	89a1      	ldrh	r1, [r4, #12]
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
 80084d6:	320d      	adds	r2, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80084d8:	f103 050d 	add.w	r5, r3, #13
    buffer[start_position++] = (uint8_t )(tag_length);
 80084dc:	f103 000e 	add.w	r0, r3, #14
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80084e0:	f103 0c0c 	add.w	ip, r3, #12
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80084e4:	ea4f 2e11 	mov.w	lr, r1, lsr #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80084e8:	f04f 0902 	mov.w	r9, #2
 80084ec:	f802 900c 	strb.w	r9, [r2, ip]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80084f0:	f802 e005 	strb.w	lr, [r2, r5]
    buffer[start_position++] = (uint8_t )(tag_length);
 80084f4:	5411      	strb	r1, [r2, r0]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80084f6:	6830      	ldr	r0, [r6, #0]
 80084f8:	89a2      	ldrh	r2, [r4, #12]
 80084fa:	68a1      	ldr	r1, [r4, #8]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80084fc:	f103 050f 	add.w	r5, r3, #15
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008500:	4428      	add	r0, r5
 8008502:	300d      	adds	r0, #13
 8008504:	f7fc ffb0 	bl	8005468 <pal_os_memcpy>
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
 8008508:	89a3      	ldrh	r3, [r4, #12]

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 800850a:	7ba2      	ldrb	r2, [r4, #14]
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
 800850c:	441d      	add	r5, r3
 800850e:	b2ad      	uxth	r5, r5
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 8008510:	6833      	ldr	r3, [r6, #0]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 8008512:	2a00      	cmp	r2, #0
 8008514:	d042      	beq.n	800859c <optiga_cmd_verify_sign_handler+0x150>
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008516:	1c69      	adds	r1, r5, #1
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008518:	1caa      	adds	r2, r5, #2
            else
            {
                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 800851a:	330d      	adds	r3, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800851c:	b289      	uxth	r1, r1
    buffer[start_position++] = (uint8_t )(tag_length);
 800851e:	b292      	uxth	r2, r2
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008520:	2005      	movs	r0, #5
 8008522:	5558      	strb	r0, [r3, r5]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008524:	f803 8001 	strb.w	r8, [r3, r1]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008528:	549f      	strb	r7, [r3, r2]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 800852a:	6831      	ldr	r1, [r6, #0]
 800852c:	6922      	ldr	r2, [r4, #16]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 800852e:	1ceb      	adds	r3, r5, #3
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 8008530:	fa11 f383 	uxtah	r3, r1, r3
 8008534:	7992      	ldrb	r2, [r2, #6]
 8008536:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8008538:	6922      	ldr	r2, [r4, #16]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
 800853a:	6833      	ldr	r3, [r6, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 800853c:	8897      	ldrh	r7, [r2, #4]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 800853e:	1d28      	adds	r0, r5, #4
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008540:	1d69      	adds	r1, r5, #5
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008542:	1daa      	adds	r2, r5, #6

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
 8008544:	330d      	adds	r3, #13
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008546:	b280      	uxth	r0, r0
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008548:	b289      	uxth	r1, r1
    buffer[start_position++] = (uint8_t )(tag_length);
 800854a:	b292      	uxth	r2, r2
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800854c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008550:	f04f 0c06 	mov.w	ip, #6
 8008554:	f803 c000 	strb.w	ip, [r3, r0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008558:	f803 e001 	strb.w	lr, [r3, r1]
    buffer[start_position++] = (uint8_t )(tag_length);
 800855c:	549f      	strb	r7, [r3, r2]
 800855e:	3507      	adds	r5, #7
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008560:	6830      	ldr	r0, [r6, #0]
                              p_optiga_verify_sign->public_key->public_key,
 8008562:	6923      	ldr	r3, [r4, #16]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008564:	b2ad      	uxth	r5, r5
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008566:	4428      	add	r0, r5
 8008568:	6819      	ldr	r1, [r3, #0]
 800856a:	889a      	ldrh	r2, [r3, #4]
 800856c:	300d      	adds	r0, #13
 800856e:	f7fc ff7b 	bl	8005468 <pal_os_memcpy>
                              p_optiga_verify_sign->public_key->public_key,
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	889b      	ldrh	r3, [r3, #4]
 8008576:	441d      	add	r5, r3
 8008578:	b2ad      	uxth	r5, r5

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800857a:	6833      	ldr	r3, [r6, #0]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 800857c:	7e71      	ldrb	r1, [r6, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 800857e:	74d9      	strb	r1, [r3, #19]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8008580:	f1a5 0209 	sub.w	r2, r5, #9
 8008584:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008586:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008588:	21b2      	movs	r1, #178	; 0xb2
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 800858a:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 800858c:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800858e:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8008590:	6833      	ldr	r3, [r6, #0]
 8008592:	3d05      	subs	r5, #5
 8008594:	809d      	strh	r5, [r3, #4]

            return_status = OPTIGA_LIB_SUCCESS;
 8008596:	2000      	movs	r0, #0
        }
        break;
 8008598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800859c:	19e8      	adds	r0, r5, r7
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800859e:	eb05 0109 	add.w	r1, r5, r9
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 80085a2:	330d      	adds	r3, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80085a4:	b280      	uxth	r0, r0
    buffer[start_position++] = (uint8_t )(tag_length);
 80085a6:	b289      	uxth	r1, r1
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80085a8:	2704      	movs	r7, #4
 80085aa:	555f      	strb	r7, [r3, r5]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80085ac:	541a      	strb	r2, [r3, r0]
    buffer[start_position++] = (uint8_t )(tag_length);
 80085ae:	f803 9001 	strb.w	r9, [r3, r1]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80085b2:	6830      	ldr	r0, [r6, #0]
 80085b4:	8aa1      	ldrh	r1, [r4, #20]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80085b6:	1ceb      	adds	r3, r5, #3
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80085b8:	fa10 f083 	uxtah	r0, r0, r3
 80085bc:	300d      	adds	r0, #13
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80085be:	3505      	adds	r5, #5
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80085c0:	f7ff fc28 	bl	8007e14 <optiga_common_set_uint16>
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80085c4:	b2ad      	uxth	r5, r5
 80085c6:	e7d8      	b.n	800857a <optiga_cmd_verify_sign_handler+0x12e>

080085c8 <optiga_cmd_encrypt_asym_handler>:

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
 80085c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
 80085cc:	7d83      	ldrb	r3, [r0, #22]
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
 80085ce:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
 80085d0:	2b02      	cmp	r3, #2

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
 80085d2:	b083      	sub	sp, #12
 80085d4:	4604      	mov	r4, r0
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
 80085d6:	d017      	beq.n	8008608 <optiga_cmd_encrypt_asym_handler+0x40>
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d110      	bne.n	80085fe <optiga_cmd_encrypt_asym_handler+0x36>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for asymmetric encryption command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80085dc:	6800      	ldr	r0, [r0, #0]
 80085de:	7c86      	ldrb	r6, [r0, #18]
 80085e0:	2e00      	cmp	r6, #0
 80085e2:	f000 808f 	beq.w	8008704 <optiga_cmd_encrypt_asym_handler+0x13c>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 80085e6:	686b      	ldr	r3, [r5, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	801a      	strh	r2, [r3, #0]
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80085ec:	7f63      	ldrb	r3, [r4, #29]
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80085ee:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80085f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f6:	7763      	strb	r3, [r4, #29]
        default:
            break;
    }

    return (return_status);
}
 80085f8:	b003      	add	sp, #12
 80085fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80085fe:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 8008602:	b003      	add	sp, #12
 8008604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending asymmetric encryption command..");
            // APDU header length + default TLV of OID of session + default TLV of OID of public key
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_TAG_LENGTH_SIZE +
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
 8008608:	68ab      	ldr	r3, [r5, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 809c 	beq.w	8008748 <optiga_cmd_encrypt_asym_handler+0x180>
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
 8008610:	8829      	ldrh	r1, [r5, #0]
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
 8008612:	7b2a      	ldrb	r2, [r5, #12]
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_TAG_LENGTH_SIZE +
                                OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            if (NULL != p_optiga_encrypt_asym->message)
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
 8008614:	f101 030c 	add.w	r3, r1, #12
 8008618:	b29b      	uxth	r3, r3
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
 800861a:	b122      	cbz	r2, 8008626 <optiga_cmd_encrypt_asym_handler+0x5e>
            {
                // Add TLV of public key and reduce 1 because alg id is only 1 byte
                total_apdu_length += (OPTIGA_CMD_TAG_LENGTH_SIZE +(PUBLIC_KEY_HOST->length));
 800861c:	692a      	ldr	r2, [r5, #16]
 800861e:	8892      	ldrh	r2, [r2, #4]
 8008620:	3202      	adds	r2, #2
                total_apdu_length--;
 8008622:	4413      	add	r3, r2
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8008624:	b29b      	uxth	r3, r3
 8008626:	f240 6215 	movw	r2, #1557	; 0x615
 800862a:	4293      	cmp	r3, r2
 800862c:	d907      	bls.n	800863e <optiga_cmd_encrypt_asym_handler+0x76>
            {
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 800862e:	686b      	ldr	r3, [r5, #4]
 8008630:	2200      	movs	r2, #0
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8008632:	f44f 7001 	mov.w	r0, #516	; 0x204
                total_apdu_length += (OPTIGA_CMD_TAG_LENGTH_SIZE +(PUBLIC_KEY_HOST->length));
                total_apdu_length--;
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 8008636:	801a      	strh	r2, [r3, #0]
        default:
            break;
    }

    return (return_status);
}
 8008638:	b003      	add	sp, #12
 800863a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else
            {
                //TLV formation for message
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_MESSAGE_TAG,
                                              p_optiga_encrypt_asym->message_length,
                                              me->p_optiga->optiga_comms_buffer,
 800863e:	6823      	ldr	r3, [r4, #0]
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008640:	0a08      	lsrs	r0, r1, #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008642:	2261      	movs	r2, #97	; 0x61
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008644:	7619      	strb	r1, [r3, #24]
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008646:	75d8      	strb	r0, [r3, #23]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008648:	759a      	strb	r2, [r3, #22]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_MESSAGE_TAG,
                                              p_optiga_encrypt_asym->message_length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800864a:	6820      	ldr	r0, [r4, #0]
 800864c:	68a9      	ldr	r1, [r5, #8]
 800864e:	882a      	ldrh	r2, [r5, #0]
 8008650:	3019      	adds	r0, #25
 8008652:	f7fc ff09 	bl	8005468 <pal_os_memcpy>
                                p_optiga_encrypt_asym->message,
                                p_optiga_encrypt_asym->message_length);
                index_for_data += p_optiga_encrypt_asym->message_length;
 8008656:	882a      	ldrh	r2, [r5, #0]
 8008658:	f102 030c 	add.w	r3, r2, #12
 800865c:	f102 010f 	add.w	r1, r2, #15
 8008660:	f102 070d 	add.w	r7, r2, #13
 8008664:	f102 000e 	add.w	r0, r2, #14
 8008668:	b29b      	uxth	r3, r3
 800866a:	3211      	adds	r2, #17
 800866c:	469e      	mov	lr, r3
 800866e:	b289      	uxth	r1, r1
 8008670:	b2bf      	uxth	r7, r7
 8008672:	b280      	uxth	r0, r0
 8008674:	b296      	uxth	r6, r2

            }

            // key for encryption

            if (p_optiga_encrypt_asym->public_key_source_type)
 8008676:	7b2a      	ldrb	r2, [r5, #12]
 8008678:	2a00      	cmp	r2, #0
 800867a:	d052      	beq.n	8008722 <optiga_cmd_encrypt_asym_handler+0x15a>
            {

                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	320d      	adds	r2, #13
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 8008680:	f04f 0c01 	mov.w	ip, #1
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008684:	f04f 0905 	mov.w	r9, #5
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008688:	f04f 0800 	mov.w	r8, #0
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800868c:	f802 900e 	strb.w	r9, [r2, lr]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008690:	f802 8007 	strb.w	r8, [r2, r7]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008694:	f802 c000 	strb.w	ip, [r2, r0]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	6928      	ldr	r0, [r5, #16]
 800869c:	4411      	add	r1, r2
 800869e:	7982      	ldrb	r2, [r0, #6]
 80086a0:	734a      	strb	r2, [r1, #13]

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
 80086a2:	6929      	ldr	r1, [r5, #16]
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
 80086a4:	6822      	ldr	r2, [r4, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
 80086a6:	888f      	ldrh	r7, [r1, #4]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
 80086a8:	1d18      	adds	r0, r3, #4
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80086aa:	1d99      	adds	r1, r3, #6

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
 80086ac:	320d      	adds	r2, #13
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80086ae:	b280      	uxth	r0, r0
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80086b0:	b289      	uxth	r1, r1
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80086b2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80086b6:	f04f 0c06 	mov.w	ip, #6
 80086ba:	f802 c000 	strb.w	ip, [r2, r0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80086be:	f802 e006 	strb.w	lr, [r2, r6]
    buffer[start_position++] = (uint8_t )(tag_length);
 80086c2:	5457      	strb	r7, [r2, r1]
 80086c4:	3307      	adds	r3, #7
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80086c6:	6820      	ldr	r0, [r4, #0]
                              PUBLIC_KEY_HOST->public_key,
 80086c8:	692a      	ldr	r2, [r5, #16]
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80086ca:	b29e      	uxth	r6, r3
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
                                              PUBLIC_KEY_HOST->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80086cc:	4430      	add	r0, r6
 80086ce:	6811      	ldr	r1, [r2, #0]
 80086d0:	8892      	ldrh	r2, [r2, #4]
 80086d2:	300d      	adds	r0, #13
 80086d4:	f7fc fec8 	bl	8005468 <pal_os_memcpy>
                              PUBLIC_KEY_HOST->public_key,
                              PUBLIC_KEY_HOST->length);

                index_for_data += PUBLIC_KEY_HOST->length;
 80086d8:	692b      	ldr	r3, [r5, #16]
 80086da:	889b      	ldrh	r3, [r3, #4]
 80086dc:	441e      	add	r6, r3
 80086de:	b2b6      	uxth	r6, r6

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80086e0:	6823      	ldr	r3, [r4, #0]
                index_for_data += OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
 80086e2:	7e61      	ldrb	r1, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80086e4:	74d9      	strb	r1, [r3, #19]
                index_for_data += OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
            }


            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
 80086e6:	f1a6 0209 	sub.w	r2, r6, #9
 80086ea:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80086ec:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80086ee:	219e      	movs	r1, #158	; 0x9e
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80086f0:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80086f2:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80086f4:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	3e05      	subs	r6, #5

            return_status = OPTIGA_LIB_SUCCESS;
 80086fa:	2000      	movs	r0, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80086fc:	809e      	strh	r6, [r3, #4]
        default:
            break;
    }

    return (return_status);
}
 80086fe:	b003      	add	sp, #12
 8008700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
 8008704:	f10d 0106 	add.w	r1, sp, #6
 8008708:	3017      	adds	r0, #23
 800870a:	f7ff fb9f 	bl	8007e4c <optiga_common_get_uint16>
                                     &out_data_size);
            if ((*(p_optiga_encrypt_asym->processed_message_length )) < out_data_size)
 800870e:	686b      	ldr	r3, [r5, #4]
 8008710:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008714:	8819      	ldrh	r1, [r3, #0]
 8008716:	4291      	cmp	r1, r2
 8008718:	d238      	bcs.n	800878c <optiga_cmd_encrypt_asym_handler+0x1c4>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing asymmetric encryption response...");
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 800871a:	801e      	strh	r6, [r3, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800871c:	f44f 7001 	mov.w	r0, #516	; 0x204
                break;
 8008720:	e76f      	b.n	8008602 <optiga_cmd_encrypt_asym_handler+0x3a>
            else
            {
                //TLV for public key from OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	330d      	adds	r3, #13
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008726:	f04f 0804 	mov.w	r8, #4
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 800872a:	f04f 0c02 	mov.w	ip, #2
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800872e:	f803 800e 	strb.w	r8, [r3, lr]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008732:	55da      	strb	r2, [r3, r7]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008734:	f803 c000 	strb.w	ip, [r3, r0]
                                              OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008738:	6820      	ldr	r0, [r4, #0]
 800873a:	692b      	ldr	r3, [r5, #16]
 800873c:	4408      	add	r0, r1
 800873e:	300d      	adds	r0, #13
 8008740:	8819      	ldrh	r1, [r3, #0]
 8008742:	f7ff fb67 	bl	8007e14 <optiga_common_set_uint16>
 8008746:	e7cb      	b.n	80086e0 <optiga_cmd_encrypt_asym_handler+0x118>
            if (NULL != p_optiga_encrypt_asym->message)
            {
                // Add TLV of message and reduce 2 it is already added by default
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
 8008748:	7b2b      	ldrb	r3, [r5, #12]
 800874a:	b9ab      	cbnz	r3, 8008778 <optiga_cmd_encrypt_asym_handler+0x1b0>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // message for encryption
            if ((NULL == p_optiga_encrypt_asym->message) && (0 == p_optiga_encrypt_asym->message_length))
 800874c:	8829      	ldrh	r1, [r5, #0]
 800874e:	2900      	cmp	r1, #0
 8008750:	f47f af75 	bne.w	800863e <optiga_cmd_encrypt_asym_handler+0x76>
            {
                //TLV formation for session
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_SESSION_OID_TAG,
                                              OPTIGA_CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 8008754:	6823      	ldr	r3, [r4, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 8008756:	2202      	movs	r2, #2
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8008758:	75d9      	strb	r1, [r3, #23]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800875a:	759a      	strb	r2, [r3, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 800875c:	761a      	strb	r2, [r3, #24]
                                              OPTIGA_CMD_ENCRYPT_ASYM_SESSION_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                //Add session OID
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data ), (me->session_oid));
 800875e:	6820      	ldr	r0, [r4, #0]
 8008760:	8aa1      	ldrh	r1, [r4, #20]
 8008762:	3019      	adds	r0, #25
 8008764:	f7ff fb56 	bl	8007e14 <optiga_common_set_uint16>
                index_for_data += 2;
 8008768:	f04f 0e0e 	mov.w	lr, #14
 800876c:	4673      	mov	r3, lr
 800876e:	2613      	movs	r6, #19
 8008770:	2010      	movs	r0, #16
 8008772:	270f      	movs	r7, #15
 8008774:	2111      	movs	r1, #17
 8008776:	e77e      	b.n	8008676 <optiga_cmd_encrypt_asym_handler+0xae>
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
            }
            if (p_optiga_encrypt_asym->public_key_source_type)
            {
                // Add TLV of public key and reduce 1 because alg id is only 1 byte
                total_apdu_length += (OPTIGA_CMD_TAG_LENGTH_SIZE +(PUBLIC_KEY_HOST->length));
 8008778:	692b      	ldr	r3, [r5, #16]
 800877a:	889b      	ldrh	r3, [r3, #4]
                total_apdu_length--;
 800877c:	3310      	adds	r3, #16
            }
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800877e:	b29b      	uxth	r3, r3
 8008780:	f240 6215 	movw	r2, #1557	; 0x615
 8008784:	4293      	cmp	r3, r2
 8008786:	f63f af52 	bhi.w	800862e <optiga_cmd_encrypt_asym_handler+0x66>
 800878a:	e7df      	b.n	800874c <optiga_cmd_encrypt_asym_handler+0x184>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800878c:	6821      	ldr	r1, [r4, #0]
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
 800878e:	6968      	ldr	r0, [r5, #20]
 8008790:	3119      	adds	r1, #25
 8008792:	f7fc fe69 	bl	8005468 <pal_os_memcpy>
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                          OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            *(p_optiga_encrypt_asym->processed_message_length) = out_data_size ;
 8008796:	686b      	ldr	r3, [r5, #4]
 8008798:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800879c:	801a      	strh	r2, [r3, #0]
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric encryption command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800879e:	4630      	mov	r0, r6
        }
        break;
 80087a0:	e72f      	b.n	8008602 <optiga_cmd_encrypt_asym_handler+0x3a>
 80087a2:	bf00      	nop

080087a4 <optiga_cmd_calc_hash_handler>:

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 80087a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 80087a6:	7d83      	ldrb	r3, [r0, #22]
/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
 80087a8:	6885      	ldr	r5, [r0, #8]
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 80087aa:	2b02      	cmp	r3, #2

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 80087ac:	b083      	sub	sp, #12
 80087ae:	4604      	mov	r4, r0
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 80087b0:	d02a      	beq.n	8008808 <optiga_cmd_calc_hash_handler+0x64>
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d003      	beq.n	80087be <optiga_cmd_calc_hash_handler+0x1a>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80087b6:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 80087ba:	b003      	add	sp, #12
 80087bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate hash command...");
            // check for response status code
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80087be:	6803      	ldr	r3, [r0, #0]
 80087c0:	7c9a      	ldrb	r2, [r3, #18]
 80087c2:	2aff      	cmp	r2, #255	; 0xff
 80087c4:	d069      	beq.n	800889a <optiga_cmd_calc_hash_handler+0xf6>
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            // Copy the digest to buffer, if chaining is false and digest out buffer is not NULL
            if((FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_out_digest))
 80087c6:	7e07      	ldrb	r7, [r0, #24]
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	f040 80ab 	bne.w	8008924 <optiga_cmd_calc_hash_handler+0x180>
 80087ce:	696e      	ldr	r6, [r5, #20]
 80087d0:	2e00      	cmp	r6, #0
 80087d2:	f000 80d0 	beq.w	8008976 <optiga_cmd_calc_hash_handler+0x1d2>
            {
                // If the out data tag is not the digest out then return failure
                if (OPTIGA_CRYPT_HASH_START_FINAL != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 80087d6:	7d9a      	ldrb	r2, [r3, #22]
 80087d8:	2a01      	cmp	r2, #1
 80087da:	d1ec      	bne.n	80087b6 <optiga_cmd_calc_hash_handler+0x12>
                {
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80087dc:	f103 0017 	add.w	r0, r3, #23
 80087e0:	f10d 0106 	add.w	r1, sp, #6
 80087e4:	f7ff fb32 	bl	8007e4c <optiga_common_get_uint16>

_STATIC_H uint16_t optiga_cmd_check_hash_alg_length(uint8_t algo_identifier)
{
    uint16_t hash_output_len = 0;    

    switch(algo_identifier)
 80087e8:	7e63      	ldrb	r3, [r4, #25]
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
 80087ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    }
}

_STATIC_H uint16_t optiga_cmd_check_hash_alg_length(uint8_t algo_identifier)
{
    uint16_t hash_output_len = 0;    
 80087ee:	2be2      	cmp	r3, #226	; 0xe2
 80087f0:	bf0c      	ite	eq
 80087f2:	2320      	moveq	r3, #32
 80087f4:	2300      	movne	r3, #0
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d1dd      	bne.n	80087b6 <optiga_cmd_calc_hash_handler+0x12>
                {
                    break;
                }
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80087fa:	6821      	ldr	r1, [r4, #0]

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
                {
                    break;
                }
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 80087fc:	6968      	ldr	r0, [r5, #20]
 80087fe:	3119      	adds	r1, #25
 8008800:	f7fc fe32 	bl	8005468 <pal_os_memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008804:	4638      	mov	r0, r7

                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
                {
                    break;
                }
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 8008806:	e7d8      	b.n	80087ba <optiga_cmd_calc_hash_handler+0x16>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint32_t apparent_comms_buffer_size = (OPTIGA_MAX_COMMS_BUFFER_SIZE - (OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_HASH_HEADER_SIZE \
                                          + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER));

    p_optiga_calc_hash->current_hash_sequence = p_optiga_calc_hash->hash_sequence;
 8008808:	7b2a      	ldrb	r2, [r5, #12]
 800880a:	736a      	strb	r2, [r5, #13]

    // Check for hash sequence as S&F
    if(OPTIGA_CRYPT_HASH_START_FINAL == p_optiga_calc_hash->hash_sequence)
 800880c:	2a01      	cmp	r2, #1
 800880e:	d05c      	beq.n	80088ca <optiga_cmd_calc_hash_handler+0x126>
        {
            optiga_cmd_calc_hash_set_current_hash_sequence(me);
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate hash command..");
            //Hash Input
            // tag setting
            me->chaining_ongoing = FALSE;
 8008810:	2300      	movs	r3, #0
 8008812:	7623      	strb	r3, [r4, #24]

            // add data if available
            if (NULL != p_optiga_calc_hash->p_hash_data)
 8008814:	686a      	ldr	r2, [r5, #4]
 8008816:	2a00      	cmp	r2, #0
 8008818:	d067      	beq.n	80088ea <optiga_cmd_calc_hash_handler+0x146>
            {
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 800881a:	69eb      	ldr	r3, [r5, #28]
 800881c:	6852      	ldr	r2, [r2, #4]
 800881e:	692f      	ldr	r7, [r5, #16]
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;
 8008820:	6821      	ldr	r1, [r4, #0]
 8008822:	7b68      	ldrb	r0, [r5, #13]
 8008824:	7588      	strb	r0, [r1, #22]
            if (NULL != p_optiga_calc_hash->p_hash_data)
            {
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 8008826:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800882a:	1bd7      	subs	r7, r2, r7
 800882c:	3303      	adds	r3, #3
 800882e:	429f      	cmp	r7, r3
 8008830:	bf28      	it	cs
 8008832:	461f      	movcs	r7, r3
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	b2be      	uxth	r6, r7
 8008838:	4631      	mov	r1, r6
 800883a:	3017      	adds	r0, #23
 800883c:	f7ff faea 	bl	8007e14 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
 8008840:	686a      	ldr	r2, [r5, #4]

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008842:	692b      	ldr	r3, [r5, #16]
 8008844:	6811      	ldr	r1, [r2, #0]
 8008846:	6820      	ldr	r0, [r4, #0]
 8008848:	463a      	mov	r2, r7
 800884a:	4419      	add	r1, r3
 800884c:	3019      	adds	r0, #25
 800884e:	f7fc fe0b 	bl	8005468 <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 8008852:	686a      	ldr	r2, [r5, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
 8008854:	692b      	ldr	r3, [r5, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 8008856:	6852      	ldr	r2, [r2, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
 8008858:	441f      	add	r7, r3
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 800885a:	360c      	adds	r6, #12

                p_optiga_calc_hash->data_sent += length_to_hash;
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 800885c:	4297      	cmp	r7, r2
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 800885e:	b2b6      	uxth	r6, r6

                p_optiga_calc_hash->data_sent += length_to_hash;
 8008860:	612f      	str	r7, [r5, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 8008862:	d001      	beq.n	8008868 <optiga_cmd_calc_hash_handler+0xc4>
                {
                    me->chaining_ongoing = TRUE;
 8008864:	2301      	movs	r3, #1
 8008866:	7623      	strb	r3, [r4, #24]
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
                                               (uint16_t*)&index_for_data);
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
 8008868:	68ab      	ldr	r3, [r5, #8]
 800886a:	b113      	cbz	r3, 8008872 <optiga_cmd_calc_hash_handler+0xce>
 800886c:	69eb      	ldr	r3, [r5, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d15a      	bne.n	8008928 <optiga_cmd_calc_hash_handler+0x184>
                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
                p_optiga_calc_hash->apparent_context_size = 0;
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
 8008872:	7e2b      	ldrb	r3, [r5, #24]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d018      	beq.n	80088aa <optiga_cmd_calc_hash_handler+0x106>

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8008878:	6823      	ldr	r3, [r4, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 800887a:	7e61      	ldrb	r1, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 800887c:	74d9      	strb	r1, [r3, #19]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 800887e:	f1a6 0209 	sub.w	r2, r6, #9
 8008882:	b292      	uxth	r2, r2
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008884:	0a10      	lsrs	r0, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008886:	21b0      	movs	r1, #176	; 0xb0
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008888:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 800888a:	755a      	strb	r2, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800888c:	7499      	strb	r1, [r3, #18]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	3e05      	subs	r6, #5
            return_status = OPTIGA_LIB_SUCCESS;
 8008892:	2000      	movs	r0, #0
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8008894:	809e      	strh	r6, [r3, #4]
        default:
            break;
    }

    return (return_status);
}
 8008896:	b003      	add	sp, #12
 8008898:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800889a:	7f43      	ldrb	r3, [r0, #29]
 800889c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a0:	7743      	strb	r3, [r0, #29]
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80088a2:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 80088a6:	b003      	add	sp, #12
 80088a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
                p_optiga_calc_hash->apparent_context_size = 0;
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
 80088aa:	7e22      	ldrb	r2, [r4, #24]
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	d1e3      	bne.n	8008878 <optiga_cmd_calc_hash_handler+0xd4>
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
 80088b0:	6823      	ldr	r3, [r4, #0]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80088b2:	1c70      	adds	r0, r6, #1
            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
 80088b4:	330d      	adds	r3, #13
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80088b6:	1cb1      	adds	r1, r6, #2
 80088b8:	b280      	uxth	r0, r0
 80088ba:	b289      	uxth	r1, r1
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80088bc:	2507      	movs	r5, #7
 80088be:	559d      	strb	r5, [r3, r6]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80088c0:	3603      	adds	r6, #3
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80088c2:	541a      	strb	r2, [r3, r0]
    buffer[start_position++] = (uint8_t )(tag_length);
 80088c4:	b2b6      	uxth	r6, r6
 80088c6:	545a      	strb	r2, [r3, r1]
 80088c8:	e7d6      	b.n	8008878 <optiga_cmd_calc_hash_handler+0xd4>

    // Check for hash sequence as S&F
    if(OPTIGA_CRYPT_HASH_START_FINAL == p_optiga_calc_hash->hash_sequence)
    {
        // Calculate the apparent comms buffer size and compare with hash data length
        if(apparent_comms_buffer_size < p_optiga_calc_hash->p_hash_data->length)
 80088ca:	686a      	ldr	r2, [r5, #4]
 80088cc:	6851      	ldr	r1, [r2, #4]
 80088ce:	f240 6203 	movw	r2, #1539	; 0x603
 80088d2:	4291      	cmp	r1, r2
 80088d4:	d99c      	bls.n	8008810 <optiga_cmd_calc_hash_handler+0x6c>
        {
            // sent data is 0 hence change the hash sequence to S
            if( 0 == p_optiga_calc_hash->data_sent)
 80088d6:	692a      	ldr	r2, [r5, #16]
 80088d8:	2a00      	cmp	r2, #0
 80088da:	d043      	beq.n	8008964 <optiga_cmd_calc_hash_handler+0x1c0>
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_START;
            }
            // sent data is greater than 0 and next fragment is greater than apparent_comms_buffer_size hence change the hash sequence to C
            else if((p_optiga_calc_hash->data_sent + apparent_comms_buffer_size) < p_optiga_calc_hash->p_hash_data->length)
 80088dc:	f202 6203 	addw	r2, r2, #1539	; 0x603
 80088e0:	4291      	cmp	r1, r2
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
            }
            // sent data is greater than 0 and next fragment is less than apparent_comms_buffer_size hence change the hash sequence to F
            else
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
 80088e2:	bf98      	it	ls
 80088e4:	2303      	movls	r3, #3
 80088e6:	736b      	strb	r3, [r5, #13]
 80088e8:	e792      	b.n	8008810 <optiga_cmd_calc_hash_handler+0x6c>
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
                {
                    me->chaining_ongoing = TRUE;
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d03b      	beq.n	8008968 <optiga_cmd_calc_hash_handler+0x1c4>
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 80088f0:	6823      	ldr	r3, [r4, #0]
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
 80088f2:	7b69      	ldrb	r1, [r5, #13]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 80088f4:	7599      	strb	r1, [r3, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
    buffer[start_position++] = (uint8_t )(tag_length);
 80088f6:	2106      	movs	r1, #6
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80088f8:	75da      	strb	r2, [r3, #23]
    buffer[start_position++] = (uint8_t )(tag_length);
 80088fa:	7619      	strb	r1, [r3, #24]
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	8819      	ldrh	r1, [r3, #0]
 8008902:	3019      	adds	r0, #25
 8008904:	f7ff fa86 	bl	8007e14 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	6820      	ldr	r0, [r4, #0]
 800890c:	8859      	ldrh	r1, [r3, #2]
 800890e:	301b      	adds	r0, #27
 8008910:	f7ff fa80 	bl	8007e14 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	301d      	adds	r0, #29
 800891a:	8899      	ldrh	r1, [r3, #4]
 800891c:	f7ff fa7a 	bl	8007e14 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8008920:	2612      	movs	r6, #18
 8008922:	e7a1      	b.n	8008868 <optiga_cmd_calc_hash_handler+0xc4>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008924:	2000      	movs	r0, #0
 8008926:	e748      	b.n	80087ba <optiga_cmd_calc_hash_handler+0x16>
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	4433      	add	r3, r6
 800892c:	2206      	movs	r2, #6
 800892e:	735a      	strb	r2, [r3, #13]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	68aa      	ldr	r2, [r5, #8]
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 8008934:	1c73      	adds	r3, r6, #1
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8008936:	fa10 f083 	uxtah	r0, r0, r3
 800893a:	8891      	ldrh	r1, [r2, #4]
 800893c:	300d      	adds	r0, #13
 800893e:	f7ff fa69 	bl	8007e14 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8008942:	3603      	adds	r6, #3

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8008944:	6820      	ldr	r0, [r4, #0]
                              p_optiga_calc_hash->p_hash_context->context_buffer,
 8008946:	68ab      	ldr	r3, [r5, #8]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8008948:	b2b6      	uxth	r6, r6

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800894a:	4430      	add	r0, r6
 800894c:	889a      	ldrh	r2, [r3, #4]
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	300d      	adds	r0, #13
 8008952:	f7fc fd89 	bl	8005468 <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
 8008956:	68ab      	ldr	r3, [r5, #8]
 8008958:	889b      	ldrh	r3, [r3, #4]
                p_optiga_calc_hash->apparent_context_size = 0;
 800895a:	2200      	movs	r2, #0

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
 800895c:	441e      	add	r6, r3
 800895e:	b2b6      	uxth	r6, r6
                p_optiga_calc_hash->apparent_context_size = 0;
 8008960:	61ea      	str	r2, [r5, #28]
 8008962:	e786      	b.n	8008872 <optiga_cmd_calc_hash_handler+0xce>
        if(apparent_comms_buffer_size < p_optiga_calc_hash->p_hash_data->length)
        {
            // sent data is 0 hence change the hash sequence to S
            if( 0 == p_optiga_calc_hash->data_sent)
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_START;
 8008964:	736a      	strb	r2, [r5, #13]
 8008966:	e753      	b.n	8008810 <optiga_cmd_calc_hash_handler+0x6c>
            else
            {
                // Tag header in case of sequence as START
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
 8008968:	6822      	ldr	r2, [r4, #0]
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            else
            {
                // Tag header in case of sequence as START
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
 800896a:	7b69      	ldrb	r1, [r5, #13]
                                             uint8_t * buffer,
                                             uint16_t * position)
{
    uint16_t start_position = *position;

    buffer[start_position++] = tag;
 800896c:	7591      	strb	r1, [r2, #22]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800896e:	75d3      	strb	r3, [r2, #23]
    buffer[start_position++] = (uint8_t )(tag_length);
 8008970:	7613      	strb	r3, [r2, #24]

    *position = start_position;
 8008972:	260c      	movs	r6, #12
 8008974:	e778      	b.n	8008868 <optiga_cmd_calc_hash_handler+0xc4>
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            // Copy the intermediate hash context
            else if ((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_hash_context))
 8008976:	7e2a      	ldrb	r2, [r5, #24]
 8008978:	2a01      	cmp	r2, #1
 800897a:	d001      	beq.n	8008980 <optiga_cmd_calc_hash_handler+0x1dc>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800897c:	4630      	mov	r0, r6
 800897e:	e71c      	b.n	80087ba <optiga_cmd_calc_hash_handler+0x16>
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            // Copy the intermediate hash context
            else if ((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_hash_context))
 8008980:	68a8      	ldr	r0, [r5, #8]
 8008982:	2800      	cmp	r0, #0
 8008984:	f43f af19 	beq.w	80087ba <optiga_cmd_calc_hash_handler+0x16>
            {
                // If the out data tag is not the intermediate tag then return failure
                if (OPTIGA_CRYPT_INTERMEDIATE != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 8008988:	7d9a      	ldrb	r2, [r3, #22]
 800898a:	2a06      	cmp	r2, #6
 800898c:	f47f af13 	bne.w	80087b6 <optiga_cmd_calc_hash_handler+0x12>
                {
                    break;
                }

                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8008990:	f103 0017 	add.w	r0, r3, #23
 8008994:	f10d 0106 	add.w	r1, sp, #6
 8008998:	f7ff fa58 	bl	8007e4c <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
 800899c:	68ab      	ldr	r3, [r5, #8]
 800899e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80089a2:	8899      	ldrh	r1, [r3, #4]
 80089a4:	4291      	cmp	r1, r2
 80089a6:	d202      	bcs.n	80089ae <optiga_cmd_calc_hash_handler+0x20a>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80089a8:	f44f 7001 	mov.w	r0, #516	; 0x204
 80089ac:	e705      	b.n	80087ba <optiga_cmd_calc_hash_handler+0x16>
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80089ae:	6821      	ldr	r1, [r4, #0]
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	3119      	adds	r1, #25
 80089b4:	f7fc fd58 	bl	8005468 <pal_os_memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
 80089b8:	68ab      	ldr	r3, [r5, #8]
 80089ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80089be:	809a      	strh	r2, [r3, #4]
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 80089c0:	4630      	mov	r0, r6
 80089c2:	e6fa      	b.n	80087ba <optiga_cmd_calc_hash_handler+0x16>

080089c4 <optiga_cmd_open_application_handler>:
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 80089c4:	7d83      	ldrb	r3, [r0, #22]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d00f      	beq.n	80089ea <optiga_cmd_open_application_handler+0x26>
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d10a      	bne.n	80089e4 <optiga_cmd_open_application_handler+0x20>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");

            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80089ce:	6802      	ldr	r2, [r0, #0]
 80089d0:	7c93      	ldrb	r3, [r2, #18]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d047      	beq.n	8008a66 <optiga_cmd_open_application_handler+0xa2>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80089d6:	7f43      	ldrb	r3, [r0, #29]
 80089d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089dc:	7743      	strb	r3, [r0, #29]
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80089de:	f240 2002 	movw	r0, #514	; 0x202
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
 80089e2:	4770      	bx	lr
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80089e4:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 80089e8:	4770      	bx	lr

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 80089ea:	b530      	push	{r4, r5, lr}
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending open app command...");

            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 80089ec:	7e42      	ldrb	r2, [r0, #25]

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 80089ee:	b083      	sub	sp, #12
 80089f0:	4604      	mov	r4, r0
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d13c      	bne.n	8008a70 <optiga_cmd_open_application_handler+0xac>
 80089f6:	2010      	movs	r0, #16
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80089f8:	6823      	ldr	r3, [r4, #0]

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80089fa:	492f      	ldr	r1, [pc, #188]	; (8008ab8 <optiga_cmd_open_application_handler+0xf4>)
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80089fc:	74da      	strb	r2, [r3, #19]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80089fe:	25f0      	movs	r5, #240	; 0xf0
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008a00:	2200      	movs	r2, #0
 8008a02:	751a      	strb	r2, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8008a04:	7558      	strb	r0, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008a06:	749d      	strb	r5, [r3, #18]
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	3016      	adds	r0, #22
 8008a0e:	f7fc fd2b 	bl	8005468 <pal_os_memcpy>
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8008a12:	7e63      	ldrb	r3, [r4, #25]
 8008a14:	b9c3      	cbnz	r3, 8008a48 <optiga_cmd_open_application_handler+0x84>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8008a16:	6820      	ldr	r0, [r4, #0]
 8008a18:	2314      	movs	r3, #20
 8008a1a:	8083      	strh	r3, [r0, #4]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8008a22:	2208      	movs	r2, #8
 8008a24:	f7fc fd22 	bl	800546c <pal_os_memset>
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8008a28:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8008a2a:	b158      	cbz	r0, 8008a44 <optiga_cmd_open_application_handler+0x80>
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                       me->p_optiga->optiga_context_handle_buffer,
 8008a2c:	6821      	ldr	r1, [r4, #0]
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8008a2e:	2208      	movs	r2, #8
 8008a30:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8008a34:	f7fc fc5e 	bl	80052f4 <pal_os_datastore_write>
                {
                    return_status = OPTIGA_CMD_ERROR;
                    break;
                }
            }
            return_status = OPTIGA_LIB_SUCCESS;
 8008a38:	f240 2302 	movw	r3, #514	; 0x202
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	bf14      	ite	ne
 8008a40:	4618      	movne	r0, r3
 8008a42:	2000      	moveq	r0, #0
        default:
            break;
    }

    return (return_status);
}
 8008a44:	b003      	add	sp, #12
 8008a46:	bd30      	pop	{r4, r5, pc}
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
            {
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8008a48:	6821      	ldr	r1, [r4, #0]
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	f101 0026 	add.w	r0, r1, #38	; 0x26
 8008a50:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8008a54:	f7fc fd08 	bl	8005468 <pal_os_memcpy>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8008a58:	7e63      	ldrb	r3, [r4, #25]
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bf0c      	ite	eq
 8008a60:	2314      	moveq	r3, #20
 8008a62:	231c      	movne	r3, #28
 8008a64:	e7d9      	b.n	8008a1a <optiga_cmd_open_application_handler+0x56>
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	2133      	movs	r1, #51	; 0x33
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8008a6a:	4618      	mov	r0, r3
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8008a6c:	7411      	strb	r1, [r2, #16]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
 8008a6e:	4770      	bx	lr
 8008a70:	8c40      	ldrh	r0, [r0, #34]	; 0x22
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8008a72:	b160      	cbz	r0, 8008a8e <optiga_cmd_open_application_handler+0xca>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8008a74:	aa02      	add	r2, sp, #8
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
                                                  me->p_optiga->optiga_context_handle_buffer,
 8008a76:	6821      	ldr	r1, [r4, #0]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8008a78:	2308      	movs	r3, #8
 8008a7a:	f822 3d02 	strh.w	r3, [r2, #-2]!
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8008a7e:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8008a82:	f7fc fc5d 	bl	8005340 <pal_os_datastore_read>
                                                  me->p_optiga->optiga_context_handle_buffer,
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8008a86:	b110      	cbz	r0, 8008a8e <optiga_cmd_open_application_handler+0xca>
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8008a88:	f240 2002 	movw	r0, #514	; 0x202
 8008a8c:	e7da      	b.n	8008a44 <optiga_cmd_open_application_handler+0x80>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8008a8e:	6820      	ldr	r0, [r4, #0]
 8008a90:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8008a94:	f7ff f9ce 	bl	8007e34 <optiga_common_get_uint32>
 8008a98:	b128      	cbz	r0, 8008aa6 <optiga_cmd_open_application_handler+0xe2>
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8008a9a:	7e62      	ldrb	r2, [r4, #25]
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	bf0c      	ite	eq
 8008aa0:	2010      	moveq	r0, #16
 8008aa2:	2018      	movne	r0, #24
 8008aa4:	e7a8      	b.n	80089f8 <optiga_cmd_open_application_handler+0x34>
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8008aa6:	6820      	ldr	r0, [r4, #0]
 8008aa8:	f200 6084 	addw	r0, r0, #1668	; 0x684
 8008aac:	f7ff f9c2 	bl	8007e34 <optiga_common_get_uint32>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d0e9      	beq.n	8008a88 <optiga_cmd_open_application_handler+0xc4>
 8008ab4:	e7f1      	b.n	8008a9a <optiga_cmd_open_application_handler+0xd6>
 8008ab6:	bf00      	nop
 8008ab8:	0800de40 	.word	0x0800de40

08008abc <optiga_cmd_execute_process_response>:
        }
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	460d      	mov	r5, r1
                me->handler(me->caller_context, me->exit_status);
                *exit_loop = TRUE;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008ac6:	2604      	movs	r6, #4

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        switch (me->cmd_sub_execution_state)
 8008ac8:	7de3      	ldrb	r3, [r4, #23]
 8008aca:	3b0a      	subs	r3, #10
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d878      	bhi.n	8008bc2 <optiga_cmd_execute_process_response+0x106>
 8008ad0:	e8df f003 	tbb	[pc, r3]
 8008ad4:	0c285f54 	.word	0x0c285f54
 8008ad8:	03          	.byte	0x03
 8008ad9:	00          	.byte	0x00
                *exit_loop = FALSE;
                break;
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	68e0      	ldr	r0, [r4, #12]
 8008ade:	8c21      	ldrh	r1, [r4, #32]
 8008ae0:	4798      	blx	r3
                *exit_loop = TRUE;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	702b      	strb	r3, [r5, #0]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
}
 8008ae6:	b002      	add	sp, #8
 8008ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8008aec:	8aa3      	ldrh	r3, [r4, #20]
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	b12b      	cbz	r3, 8008afe <optiga_cmd_execute_process_response+0x42>
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	4413      	add	r3, r2
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8008af8:	2200      	movs	r2, #0
 8008afa:	82a2      	strh	r2, [r4, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8008afc:	721a      	strb	r2, [r3, #8]
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8008afe:	8c23      	ldrh	r3, [r4, #32]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d077      	beq.n	8008bf4 <optiga_cmd_execute_process_response+0x138>
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008b04:	7f63      	ldrb	r3, [r4, #29]
 8008b06:	f023 0303 	bic.w	r3, r3, #3
 8008b0a:	f043 0301 	orr.w	r3, r3, #1
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008b0e:	220b      	movs	r2, #11
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008b10:	7763      	strb	r3, [r4, #29]
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008b12:	75e2      	strb	r2, [r4, #23]
                {
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
                    {
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                    }
                    *exit_loop = FALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	702b      	strb	r3, [r5, #0]
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8008b18:	7da3      	ldrb	r3, [r4, #22]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d0d4      	beq.n	8008ac8 <optiga_cmd_execute_process_response+0xc>
}
 8008b1e:	b002      	add	sp, #8
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008b24:	7fa3      	ldrb	r3, [r4, #30]
 8008b26:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008b28:	498a      	ldr	r1, [pc, #552]	; (8008d54 <optiga_cmd_execute_process_response+0x298>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8008b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295
 8008b36:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8008b3a:	7fa3      	ldrb	r3, [r4, #30]
 8008b3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b44:	2700      	movs	r7, #0
 8008b46:	f8c3 7630 	str.w	r7, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8008b4a:	7fa3      	ldrb	r3, [r4, #30]
 8008b4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008b54:	2001      	movs	r0, #1
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8008b56:	f882 7638 	strb.w	r7, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008b5a:	7fa3      	ldrb	r3, [r4, #30]
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008b62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b66:	f883 0639 	strb.w	r0, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8008b70:	f7fc fc10 	bl	8005394 <pal_os_event_start>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8008b74:	230e      	movs	r3, #14
 8008b76:	75e3      	strb	r3, [r4, #23]
                *exit_loop = FALSE;
 8008b78:	702f      	strb	r7, [r5, #0]
                break;
 8008b7a:	e7cd      	b.n	8008b18 <optiga_cmd_execute_process_response+0x5c>
_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
    do
    {
        *exit_loop = TRUE;
 8008b7c:	2701      	movs	r7, #1
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8008b7e:	6862      	ldr	r2, [r4, #4]
    do
    {
        *exit_loop = TRUE;
 8008b80:	702f      	strb	r7, [r5, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8008b82:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	db22      	blt.n	8008bd0 <optiga_cmd_execute_process_response+0x114>
            me->exit_status = optiga_cmd_handler(me);
        }
        else
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
 8008b8a:	2300      	movs	r3, #0
        {
            me->exit_status = optiga_cmd_handler(me);
        }
        else
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8008b8c:	75a6      	strb	r6, [r4, #22]
            *exit_loop = FALSE;
 8008b8e:	702b      	strb	r3, [r5, #0]
 8008b90:	e7c2      	b.n	8008b18 <optiga_cmd_execute_process_response+0x5c>

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8008b92:	2301      	movs	r3, #1
 8008b94:	702b      	strb	r3, [r5, #0]
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8008b96:	7f67      	ldrb	r7, [r4, #29]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 8008b98:	f8d4 8000 	ldr.w	r8, [r4]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8008b9c:	f007 0703 	and.w	r7, r7, #3
 8008ba0:	2f02      	cmp	r7, #2
 8008ba2:	d02a      	beq.n	8008bfa <optiga_cmd_execute_process_response+0x13e>
 8008ba4:	2f03      	cmp	r7, #3
 8008ba6:	f000 8081 	beq.w	8008cac <optiga_cmd_execute_process_response+0x1f0>
 8008baa:	429f      	cmp	r7, r3
 8008bac:	d04a      	beq.n	8008c44 <optiga_cmd_execute_process_response+0x188>
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8008bae:	f44f 4700 	mov.w	r7, #32768	; 0x8000
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8008bb2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8008bb6:	8427      	strh	r7, [r4, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8008bb8:	d072      	beq.n	8008ca0 <optiga_cmd_execute_process_response+0x1e4>
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8008bba:	782b      	ldrb	r3, [r5, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0ab      	beq.n	8008b18 <optiga_cmd_execute_process_response+0x5c>
 8008bc0:	e791      	b.n	8008ae6 <optiga_cmd_execute_process_response+0x2a>
                me->handler(me->caller_context, me->exit_status);
                *exit_loop = TRUE;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008bc2:	f240 2202 	movw	r2, #514	; 0x202
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75a6      	strb	r6, [r4, #22]
 8008bca:	8422      	strh	r2, [r4, #32]
 8008bcc:	702b      	strb	r3, [r5, #0]
            break;
 8008bce:	e7a3      	b.n	8008b18 <optiga_cmd_execute_process_response+0x5c>
    do
    {
        *exit_loop = TRUE;
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
        {
            me->exit_status = optiga_cmd_handler(me);
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	4790      	blx	r2
 8008bd4:	8420      	strh	r0, [r4, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d17d      	bne.n	8008cd6 <optiga_cmd_execute_process_response+0x21a>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8008bda:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008bde:	2bf1      	cmp	r3, #241	; 0xf1
 8008be0:	f000 80aa 	beq.w	8008d38 <optiga_cmd_execute_process_response+0x27c>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
            }
            else
            {
                if (FALSE == me->chaining_ongoing)
 8008be4:	7e23      	ldrb	r3, [r4, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f040 8093 	bne.w	8008d12 <optiga_cmd_execute_process_response+0x256>
                {
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8008bec:	7de3      	ldrb	r3, [r4, #23]
 8008bee:	3b0d      	subs	r3, #13
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d98f      	bls.n	8008b14 <optiga_cmd_execute_process_response+0x58>
                    {
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	75e3      	strb	r3, [r4, #23]
 8008bf8:	e78c      	b.n	8008b14 <optiga_cmd_execute_process_response+0x58>
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8008bfa:	f240 6322 	movw	r3, #1570	; 0x622
 8008bfe:	f8a8 3006 	strh.w	r3, [r8, #6]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8008c02:	f8d8 3000 	ldr.w	r3, [r8]
 8008c06:	7ea2      	ldrb	r2, [r4, #26]
 8008c08:	739a      	strb	r2, [r3, #14]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	7ee2      	ldrb	r2, [r4, #27]
 8008c0e:	681b      	ldr	r3, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8008c10:	4647      	mov	r7, r8
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008c12:	73da      	strb	r2, [r3, #15]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8008c14:	f857 0b0d 	ldr.w	r0, [r7], #13
 8008c18:	4621      	mov	r1, r4
 8008c1a:	f7ff f88f 	bl	8007d3c <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8008c1e:	f108 0806 	add.w	r8, r8, #6
 8008c22:	f858 0c06 	ldr.w	r0, [r8, #-6]
 8008c26:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 8008c2a:	f8cd 8000 	str.w	r8, [sp]
 8008c2e:	4639      	mov	r1, r7
 8008c30:	463b      	mov	r3, r7
 8008c32:	f7ff f8a7 	bl	8007d84 <optiga_comms_transceive>
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8008c36:	4607      	mov	r7, r0
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d05e      	beq.n	8008cfa <optiga_cmd_execute_process_response+0x23e>
_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8008c3c:	f240 2302 	movw	r3, #514	; 0x202
 8008c40:	8423      	strh	r3, [r4, #32]
 8008c42:	e7a2      	b.n	8008b8a <optiga_cmd_execute_process_response+0xce>

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
    {
        case OPTIGA_CMD_ERROR_CODE_PREPARE:
        {
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 8008c44:	f108 0016 	add.w	r0, r8, #22
 8008c48:	f24f 11c2 	movw	r1, #61890	; 0xf1c2
 8008c4c:	f7ff f8e2 	bl	8007e14 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8008c50:	6820      	ldr	r0, [r4, #0]
 8008c52:	2100      	movs	r1, #0
 8008c54:	3018      	adds	r0, #24
 8008c56:	f7ff f8dd 	bl	8007e14 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	301a      	adds	r0, #26
 8008c60:	f7ff f8d8 	bl	8007e14 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8008c64:	6823      	ldr	r3, [r4, #0]

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008c66:	493c      	ldr	r1, [pc, #240]	; (8008d58 <optiga_cmd_execute_process_response+0x29c>)
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8008c68:	749f      	strb	r7, [r3, #18]
    p_apdu_buffer [1] = param;
 8008c6a:	2200      	movs	r2, #0
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8008c6c:	2006      	movs	r0, #6
 8008c6e:	7558      	strb	r0, [r3, #21]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8008c70:	74da      	strb	r2, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8008c72:	751a      	strb	r2, [r3, #20]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8008c74:	6822      	ldr	r2, [r4, #0]
 8008c76:	230a      	movs	r3, #10
 8008c78:	8093      	strh	r3, [r2, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8008c7a:	7f63      	ldrb	r3, [r4, #29]
 8008c7c:	f023 0303 	bic.w	r3, r3, #3
 8008c80:	f043 0302 	orr.w	r3, r3, #2
 8008c84:	7763      	strb	r3, [r4, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008c86:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8008c8a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008c8e:	4622      	mov	r2, r4
 8008c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c94:	f7fc fbce 	bl	8005434 <pal_os_event_register_callback_oneshot>
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8008c98:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8008c9c:	8427      	strh	r7, [r4, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8008c9e:	d18c      	bne.n	8008bba <optiga_cmd_execute_process_response+0xfe>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8008ca0:	7f63      	ldrb	r3, [r4, #29]
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d187      	bne.n	8008bba <optiga_cmd_execute_process_response+0xfe>
 8008caa:	e76e      	b.n	8008b8a <optiga_cmd_execute_process_response+0xce>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_RX:
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8008cac:	f898 3012 	ldrb.w	r3, [r8, #18]
 8008cb0:	2bff      	cmp	r3, #255	; 0xff
 8008cb2:	f43f af7c 	beq.w	8008bae <optiga_cmd_execute_process_response+0xf2>
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8008cb6:	f898 3016 	ldrb.w	r3, [r8, #22]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008cba:	f8d8 0678 	ldr.w	r0, [r8, #1656]	; 0x678
 8008cbe:	4926      	ldr	r1, [pc, #152]	; (8008d58 <optiga_cmd_execute_process_response+0x29c>)
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8008cc0:	75a7      	strb	r7, [r4, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008cc2:	220a      	movs	r2, #10
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8008cc4:	f443 4700 	orr.w	r7, r3, #32768	; 0x8000
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008cc8:	75e2      	strb	r2, [r4, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cce:	4622      	mov	r2, r4
 8008cd0:	f7fc fbb0 	bl	8005434 <pal_os_event_register_callback_oneshot>
 8008cd4:	e76d      	b.n	8008bb2 <optiga_cmd_execute_process_response+0xf6>
            }
        }
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8008cd6:	f5b0 7f01 	cmp.w	r0, #516	; 0x204
 8008cda:	d015      	beq.n	8008d08 <optiga_cmd_execute_process_response+0x24c>
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
                *exit_loop = FALSE;
                break;
            }
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8008cdc:	7de3      	ldrb	r3, [r4, #23]
 8008cde:	2b0d      	cmp	r3, #13
 8008ce0:	f43f af18 	beq.w	8008b14 <optiga_cmd_execute_process_response+0x58>
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008ce4:	7f63      	ldrb	r3, [r4, #29]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	f043 0301 	orr.w	r3, r3, #1
                *exit_loop = FALSE;
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008cee:	210b      	movs	r1, #11
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
 8008cf0:	2200      	movs	r2, #0
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8008cf2:	7763      	strb	r3, [r4, #29]
                *exit_loop = FALSE;
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8008cf4:	75e1      	strb	r1, [r4, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
 8008cf6:	702a      	strb	r2, [r5, #0]
 8008cf8:	e70e      	b.n	8008b18 <optiga_cmd_execute_process_response+0x5c>
            if (OPTIGA_COMMS_SUCCESS != return_status)
            {
                return_status = OPTIGA_CMD_ERROR;
                break;
            }
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8008cfa:	7f63      	ldrb	r3, [r4, #29]
 8008cfc:	f023 0303 	bic.w	r3, r3, #3
 8008d00:	f043 0303 	orr.w	r3, r3, #3
 8008d04:	7763      	strb	r3, [r4, #29]
 8008d06:	e754      	b.n	8008bb2 <optiga_cmd_execute_process_response+0xf6>
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8008d08:	220c      	movs	r2, #12
                *exit_loop = FALSE;
 8008d0a:	2300      	movs	r3, #0
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8008d0c:	75e2      	strb	r2, [r4, #23]
                *exit_loop = FALSE;
 8008d0e:	702b      	strb	r3, [r5, #0]
 8008d10:	e702      	b.n	8008b18 <optiga_cmd_execute_process_response+0x5c>
                    break;
                }
                // for chaining, trigger preparing of next command
                else
                {
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	4910      	ldr	r1, [pc, #64]	; (8008d58 <optiga_cmd_execute_process_response+0x29c>)
 8008d16:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d20:	f7fc fb88 	bl	8005434 <pal_os_event_register_callback_oneshot>
                                                           (register_callback)optiga_cmd_event_trigger_execute,
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;
 8008d24:	702f      	strb	r7, [r5, #0]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8008d26:	7ea3      	ldrb	r3, [r4, #26]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8008d28:	2102      	movs	r1, #2
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8008d2a:	f003 0303 	and.w	r3, r3, #3
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008d2e:	2209      	movs	r2, #9
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8008d30:	76a3      	strb	r3, [r4, #26]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8008d32:	75a1      	strb	r1, [r4, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008d34:	75e2      	strb	r2, [r4, #23]
 8008d36:	e740      	b.n	8008bba <optiga_cmd_execute_process_response+0xfe>
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	4907      	ldr	r1, [pc, #28]	; (8008d58 <optiga_cmd_execute_process_response+0x29c>)
 8008d3c:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8008d40:	4622      	mov	r2, r4
 8008d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d46:	f7fc fb75 	bl	8005434 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8008d4a:	2303      	movs	r3, #3
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8008d4c:	702f      	strb	r7, [r5, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8008d4e:	75a7      	strb	r7, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8008d50:	75e3      	strb	r3, [r4, #23]
 8008d52:	e732      	b.n	8008bba <optiga_cmd_execute_process_response+0xfe>
 8008d54:	08007e6d 	.word	0x08007e6d
 8008d58:	0800941d 	.word	0x0800941d

08008d5c <optiga_cmd_execute_prepare_command>:
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
}

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8008d60:	f8d0 8004 	ldr.w	r8, [r0, #4]
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
}

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008d64:	b083      	sub	sp, #12
 8008d66:	4604      	mov	r4, r0
 8008d68:	460d      	mov	r5, r1
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008d6a:	2604      	movs	r6, #4
 8008d6c:	f240 2702 	movw	r7, #514	; 0x202
 8008d70:	f04f 0900 	mov.w	r9, #0
_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
    do
    {
        switch (me->cmd_sub_execution_state)
 8008d74:	7de3      	ldrb	r3, [r4, #23]
 8008d76:	3b05      	subs	r3, #5
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	f200 8094 	bhi.w	8008ea6 <optiga_cmd_execute_prepare_command+0x14a>
 8008d7e:	e8df f003 	tbb	[pc, r3]
 8008d82:	4a4a      	.short	0x4a4a
 8008d84:	157c      	.short	0x157c
 8008d86:	03          	.byte	0x03
 8008d87:	00          	.byte	0x00
                *exit_loop = TRUE;
                break;
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	702b      	strb	r3, [r5, #0]
                me->exit_status = optiga_cmd_handler(me);
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	47c0      	blx	r8
 8008d90:	4682      	mov	sl, r0
 8008d92:	8420      	strh	r0, [r4, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8008d94:	2800      	cmp	r0, #0
 8008d96:	f000 808b 	beq.w	8008eb0 <optiga_cmd_execute_prepare_command+0x154>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8008d9a:	75a6      	strb	r6, [r4, #22]
                    *exit_loop = FALSE;
 8008d9c:	f885 9000 	strb.w	r9, [r5]
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8008da0:	7da3      	ldrb	r3, [r4, #22]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d0e6      	beq.n	8008d74 <optiga_cmd_execute_prepare_command+0x18>
}
 8008da6:	b003      	add	sp, #12
 8008da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8008dac:	7fa3      	ldrb	r3, [r4, #30]
 8008dae:	6822      	ldr	r2, [r4, #0]
 8008db0:	0059      	lsls	r1, r3, #1
 8008db2:	18ce      	adds	r6, r1, r3
 8008db4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008db8:	f896 0638 	ldrb.w	r0, [r6, #1592]	; 0x638
 8008dbc:	2823      	cmp	r0, #35	; 0x23
 8008dbe:	d006      	beq.n	8008dce <optiga_cmd_execute_prepare_command+0x72>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008dc0:	f7fc fb68 	bl	8005494 <pal_os_timer_get_time_in_microseconds>
 8008dc4:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
 8008dc8:	7fa3      	ldrb	r3, [r4, #30]
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	0059      	lsls	r1, r3, #1
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008dce:	440b      	add	r3, r1
 8008dd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008dd4:	2023      	movs	r0, #35	; 0x23
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008dd6:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008dda:	7fa3      	ldrb	r3, [r4, #30]
 8008ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008de0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
                *exit_loop = FALSE;
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8008de4:	2600      	movs	r6, #0
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008de6:	f892 3638 	ldrb.w	r3, [r2, #1592]	; 0x638
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008dea:	4283      	cmp	r3, r0
 8008dec:	bf0c      	ite	eq
 8008dee:	2308      	moveq	r3, #8
 8008df0:	2302      	movne	r3, #2
 8008df2:	f882 3639 	strb.w	r3, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008df6:	7fa3      	ldrb	r3, [r4, #30]
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008dfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008e02:	2109      	movs	r1, #9
                *exit_loop = TRUE;
 8008e04:	2201      	movs	r2, #1
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008e06:	f883 0638 	strb.w	r0, [r3, #1592]	; 0x638
                *exit_loop = FALSE;
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8008e0a:	8426      	strh	r6, [r4, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008e0c:	75e1      	strb	r1, [r4, #23]
                *exit_loop = TRUE;
 8008e0e:	702a      	strb	r2, [r5, #0]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
}
 8008e10:	b003      	add	sp, #12
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (me->cmd_sub_execution_state)
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8008e16:	2301      	movs	r3, #1
 8008e18:	702b      	strb	r3, [r5, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8008e1a:	7de3      	ldrb	r3, [r4, #23]
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8008e1c:	f894 a01e 	ldrb.w	sl, [r4, #30]
 8008e20:	f8d4 b000 	ldr.w	fp, [r4]
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8008e24:	2b05      	cmp	r3, #5
 8008e26:	d06b      	beq.n	8008f00 <optiga_cmd_execute_prepare_command+0x1a4>
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008e28:	f7fc fb34 	bl	8005494 <pal_os_timer_get_time_in_microseconds>
 8008e2c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8008e30:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008e34:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008e36:	f8ca 0634 	str.w	r0, [sl, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008e3a:	7fa3      	ldrb	r3, [r4, #30]
 8008e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008e44:	2002      	movs	r0, #2
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008e46:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008e4a:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008e54:	2121      	movs	r1, #33	; 0x21
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008e56:	f882 0639 	strb.w	r0, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008e5a:	7fa3      	ldrb	r3, [r4, #30]
 8008e5c:	6822      	ldr	r2, [r4, #0]
 8008e5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e66:	f883 1638 	strb.w	r1, [r3, #1592]	; 0x638
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008e6a:	2309      	movs	r3, #9
                {
                    me->exit_status = optiga_cmd_request_session(me);
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8008e6c:	f8a4 9020 	strh.w	r9, [r4, #32]
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8008e70:	75e3      	strb	r3, [r4, #23]
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8008e72:	782b      	ldrb	r3, [r5, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d093      	beq.n	8008da0 <optiga_cmd_execute_prepare_command+0x44>
 8008e78:	e7ca      	b.n	8008e10 <optiga_cmd_execute_prepare_command+0xb4>
/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8008e7a:	7fa3      	ldrb	r3, [r4, #30]
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8008e8c:	7fa3      	ldrb	r3, [r4, #30]
 8008e8e:	6822      	ldr	r2, [r4, #0]
 8008e90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                break;
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8008e98:	2208      	movs	r2, #8
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8008e9a:	f883 9638 	strb.w	r9, [r3, #1592]	; 0x638
                break;
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8008e9e:	75e2      	strb	r2, [r4, #23]
                *exit_loop = FALSE;
 8008ea0:	f885 9000 	strb.w	r9, [r5]
                break;
 8008ea4:	e77c      	b.n	8008da0 <optiga_cmd_execute_prepare_command+0x44>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008ea6:	75a6      	strb	r6, [r4, #22]
 8008ea8:	8427      	strh	r7, [r4, #32]
 8008eaa:	f885 9000 	strb.w	r9, [r5]
            break;
 8008eae:	e777      	b.n	8008da0 <optiga_cmd_execute_prepare_command+0x44>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
                    *exit_loop = FALSE;
                    break;
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	f240 6222 	movw	r2, #1570	; 0x622
 8008eb6:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	7ea2      	ldrb	r2, [r4, #26]
 8008ebc:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	7ee2      	ldrb	r2, [r4, #27]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	73da      	strb	r2, [r3, #15]
                me->p_optiga->protection_level_state |= me->protection_level;
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	7ea1      	ldrb	r1, [r4, #26]
 8008eca:	f892 3688 	ldrb.w	r3, [r2, #1672]	; 0x688
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	f882 3688 	strb.w	r3, [r2, #1672]	; 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	f7fe ff2f 	bl	8007d3c <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
 8008ee4:	f103 010d 	add.w	r1, r3, #13
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->protection_level_state |= me->protection_level;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8008ee8:	3306      	adds	r3, #6
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	460b      	mov	r3, r1
 8008eee:	f7fe ff49 	bl	8007d84 <optiga_comms_transceive>
 8008ef2:	8420      	strh	r0, [r4, #32]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
                                                          &(me->p_optiga->comms_rx_size));

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8008ef4:	b1e0      	cbz	r0, 8008f30 <optiga_cmd_execute_prepare_command+0x1d4>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008ef6:	75a6      	strb	r6, [r4, #22]
 8008ef8:	8427      	strh	r7, [r4, #32]
 8008efa:	f885 a000 	strb.w	sl, [r5]
                    break;
 8008efe:	e74f      	b.n	8008da0 <optiga_cmd_execute_prepare_command+0x44>
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008f00:	f7fc fac8 	bl	8005494 <pal_os_timer_get_time_in_microseconds>
 8008f04:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8008f08:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008f0c:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8008f0e:	f8ca 0634 	str.w	r0, [sl, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008f12:	7fa3      	ldrb	r3, [r4, #30]
 8008f14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008f18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008f1c:	2002      	movs	r0, #2
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8008f1e:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8008f22:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8008f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008f28:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8008f2c:	2122      	movs	r1, #34	; 0x22
 8008f2e:	e792      	b.n	8008e56 <optiga_cmd_execute_prepare_command+0xfa>
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8008f30:	7f63      	ldrb	r3, [r4, #29]
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8008f32:	2103      	movs	r1, #3
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8008f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008f38:	220a      	movs	r2, #10
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8008f3a:	7763      	strb	r3, [r4, #29]
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8008f3c:	75a1      	strb	r1, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8008f3e:	75e2      	strb	r2, [r4, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
                break;
 8008f40:	e797      	b.n	8008e72 <optiga_cmd_execute_prepare_command+0x116>
 8008f42:	bf00      	nop

08008f44 <optiga_cmd_execute_comms_close>:

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
}

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8008f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f48:	4604      	mov	r4, r0
 8008f4a:	460d      	mov	r5, r1
    do
    {
        *exit_loop = TRUE;
 8008f4c:	2701      	movs	r7, #1
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
 8008f4e:	f04f 0800 	mov.w	r8, #0
 8008f52:	e00b      	b.n	8008f6c <optiga_cmd_execute_comms_close+0x28>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	68e0      	ldr	r0, [r4, #12]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8008f5c:	7f23      	ldrb	r3, [r4, #28]
 8008f5e:	2b22      	cmp	r3, #34	; 0x22
 8008f60:	d07d      	beq.n	800905e <optiga_cmd_execute_comms_close+0x11a>
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8008f62:	782b      	ldrb	r3, [r5, #0]
 8008f64:	b993      	cbnz	r3, 8008f8c <optiga_cmd_execute_comms_close+0x48>
 8008f66:	7da3      	ldrb	r3, [r4, #22]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d10f      	bne.n	8008f8c <optiga_cmd_execute_comms_close+0x48>

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 8008f6c:	702f      	strb	r7, [r5, #0]
        switch (me->cmd_sub_execution_state)
 8008f6e:	7de3      	ldrb	r3, [r4, #23]
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d00d      	beq.n	8008f90 <optiga_cmd_execute_comms_close+0x4c>
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d0ed      	beq.n	8008f54 <optiga_cmd_execute_comms_close+0x10>
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008f78:	f240 2302 	movw	r3, #514	; 0x202
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	75a2      	strb	r2, [r4, #22]
 8008f80:	8423      	strh	r3, [r4, #32]
 8008f82:	f885 8000 	strb.w	r8, [r5]
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8008f86:	7da3      	ldrb	r3, [r4, #22]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d0ef      	beq.n	8008f6c <optiga_cmd_execute_comms_close+0x28>
 8008f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8008f90:	7f23      	ldrb	r3, [r4, #28]
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8008f92:	7ea2      	ldrb	r2, [r4, #26]
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8008f94:	2b22      	cmp	r3, #34	; 0x22
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8008f96:	bf1c      	itt	ne
 8008f98:	2304      	movne	r3, #4
 8008f9a:	75e3      	strbne	r3, [r4, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	7ee2      	ldrb	r2, [r4, #27]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	73da      	strb	r2, [r3, #15]
                if (0 != me->p_optiga->protection_level_state)
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	f893 2688 	ldrb.w	r2, [r3, #1672]	; 0x688
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8008fb0:	681b      	ldr	r3, [r3, #0]
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                if (0 != me->p_optiga->protection_level_state)
 8008fb2:	b302      	cbz	r2, 8008ff6 <optiga_cmd_execute_comms_close+0xb2>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8008fb4:	7f22      	ldrb	r2, [r4, #28]
 8008fb6:	741a      	strb	r2, [r3, #16]
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	f883 8688 	strb.w	r8, [r3, #1672]	; 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	6813      	ldr	r3, [r2, #0]
 8008fc2:	f8d2 2678 	ldr.w	r2, [r2, #1656]	; 0x678
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8008fc6:	f04f 0904 	mov.w	r9, #4
 8008fca:	f884 9017 	strb.w	r9, [r4, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8008fce:	4618      	mov	r0, r3
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8008fd0:	615a      	str	r2, [r3, #20]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	f7fe feb2 	bl	8007d3c <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	f7fe fefe 	bl	8007ddc <optiga_comms_close>
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8008fe4:	b150      	cbz	r0, 8008ffc <optiga_cmd_execute_comms_close+0xb8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8008fe6:	f240 2302 	movw	r3, #514	; 0x202
 8008fea:	f884 9016 	strb.w	r9, [r4, #22]
 8008fee:	8423      	strh	r3, [r4, #32]
 8008ff0:	f885 8000 	strb.w	r8, [r5]
                    break;
 8008ff4:	e7b7      	b.n	8008f66 <optiga_cmd_execute_comms_close+0x22>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8008ff6:	2233      	movs	r2, #51	; 0x33
 8008ff8:	741a      	strb	r2, [r3, #16]
 8008ffa:	e7dd      	b.n	8008fb8 <optiga_cmd_execute_comms_close+0x74>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8008ffc:	7f23      	ldrb	r3, [r4, #28]
 8008ffe:	2b22      	cmp	r3, #34	; 0x22
 8009000:	d105      	bne.n	800900e <optiga_cmd_execute_comms_close+0xca>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
                    *exit_loop = TRUE;
 8009002:	2301      	movs	r3, #1
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8009004:	f884 9017 	strb.w	r9, [r4, #23]
                    *exit_loop = TRUE;
 8009008:	702b      	strb	r3, [r5, #0]
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 800900e:	7fa3      	ldrb	r3, [r4, #30]
 8009010:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8009012:	4927      	ldr	r1, [pc, #156]	; (80090b0 <optiga_cmd_execute_comms_close+0x16c>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8009014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009018:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8009024:	7fa3      	ldrb	r3, [r4, #30]
 8009026:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800902a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800902e:	f8c3 6630 	str.w	r6, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8009032:	7fa3      	ldrb	r3, [r4, #30]
 8009034:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009038:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800903c:	f882 6638 	strb.w	r6, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8009040:	7fa3      	ldrb	r3, [r4, #30]
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009048:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800904c:	f883 7639 	strb.w	r7, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8009056:	f7fc f99d 	bl	8005394 <pal_os_event_start>
                    *exit_loop = TRUE;
                }
                // For synchronous behavior: After exit from optiga_comms_close, release lock
                else
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 800905a:	8426      	strh	r6, [r4, #32]
 800905c:	e781      	b.n	8008f62 <optiga_cmd_execute_comms_close+0x1e>
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 800905e:	7fa3      	ldrb	r3, [r4, #30]
 8009060:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8009062:	4913      	ldr	r1, [pc, #76]	; (80090b0 <optiga_cmd_execute_comms_close+0x16c>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8009064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009068:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800906c:	f04f 30ff 	mov.w	r0, #4294967295
 8009070:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8009074:	7fa3      	ldrb	r3, [r4, #30]
 8009076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800907a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800907e:	f8c3 8630 	str.w	r8, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8009082:	7fa3      	ldrb	r3, [r4, #30]
 8009084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009088:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800908c:	f882 8638 	strb.w	r8, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8009090:	7fa3      	ldrb	r3, [r4, #30]
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009098:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800909c:	f883 7639 	strb.w	r7, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 80090a6:	f7fc f975 	bl	8005394 <pal_os_event_start>
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 80090aa:	f8a4 8020 	strh.w	r8, [r4, #32]
 80090ae:	e758      	b.n	8008f62 <optiga_cmd_execute_comms_close+0x1e>
 80090b0:	08007e6d 	.word	0x08007e6d

080090b4 <optiga_cmd_execute_handler>:
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 80090b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b8:	b082      	sub	sp, #8
    uint8_t exit_loop = TRUE;
 80090ba:	2301      	movs	r3, #1
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 80090bc:	4604      	mov	r4, r0
    uint8_t exit_loop = TRUE;
 80090be:	f88d 3007 	strb.w	r3, [sp, #7]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 80090c2:	460d      	mov	r5, r1
 80090c4:	2900      	cmp	r1, #0
 80090c6:	f040 80c0 	bne.w	800924a <optiga_cmd_execute_handler+0x196>
 80090ca:	7d83      	ldrb	r3, [r0, #22]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 80090cc:	2601      	movs	r6, #1
        me->exit_status = event;
    }

    do
    {
        switch (me->cmd_next_execution_state)
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d878      	bhi.n	80091c4 <optiga_cmd_execute_handler+0x110>
 80090d2:	e8df f003 	tbb	[pc, r3]
 80090d6:	8303      	.short	0x8303
 80090d8:	727d      	.short	0x727d
 80090da:	43          	.byte	0x43
 80090db:	00          	.byte	0x00
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 80090dc:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 80090de:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 80090e2:	2d01      	cmp	r5, #1
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 80090e4:	f04f 0702 	mov.w	r7, #2
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 80090e8:	d01b      	beq.n	8009122 <optiga_cmd_execute_handler+0x6e>
 80090ea:	f0c0 8087 	bcc.w	80091fc <optiga_cmd_execute_handler+0x148>
 80090ee:	2d02      	cmp	r5, #2
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80090f0:	4963      	ldr	r1, [pc, #396]	; (8009280 <optiga_cmd_execute_handler+0x1cc>)
 80090f2:	4622      	mov	r2, r4
 80090f4:	f04f 0332 	mov.w	r3, #50	; 0x32
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 80090f8:	d176      	bne.n	80091e8 <optiga_cmd_execute_handler+0x134>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	f8d0 0678 	ldr.w	r0, [r0, #1656]	; 0x678
 8009100:	f7fc f998 	bl	8005434 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8009104:	2309      	movs	r3, #9
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8009106:	75a5      	strb	r5, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8009108:	75e3      	strb	r3, [r4, #23]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 800910a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d150      	bne.n	80091b4 <optiga_cmd_execute_handler+0x100>
 8009112:	7da3      	ldrb	r3, [r4, #22]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1da      	bne.n	80090ce <optiga_cmd_execute_handler+0x1a>
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8009118:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 800911a:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 800911e:	2d01      	cmp	r5, #1
 8009120:	d1e3      	bne.n	80090ea <optiga_cmd_execute_handler+0x36>
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	7ea2      	ldrb	r2, [r4, #26]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	7ee2      	ldrb	r2, [r4, #27]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	73da      	strb	r2, [r3, #15]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	7f22      	ldrb	r2, [r4, #28]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	741a      	strb	r2, [r3, #16]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8009142:	6143      	str	r3, [r0, #20]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8009144:	4621      	mov	r1, r4
 8009146:	f7fe fdf9 	bl	8007d3c <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f7fe fdf9 	bl	8007d44 <optiga_comms_open>
 8009152:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8009154:	2800      	cmp	r0, #0
 8009156:	d147      	bne.n	80091e8 <optiga_cmd_execute_handler+0x134>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8009158:	75e7      	strb	r7, [r4, #23]
 800915a:	e7d6      	b.n	800910a <optiga_cmd_execute_handler+0x56>
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 800915c:	7fa3      	ldrb	r3, [r4, #30]
 800915e:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8009160:	4948      	ldr	r1, [pc, #288]	; (8009284 <optiga_cmd_execute_handler+0x1d0>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8009162:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009166:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800916a:	f04f 30ff 	mov.w	r0, #4294967295
 800916e:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8009172:	7fa3      	ldrb	r3, [r4, #30]
 8009174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800917c:	2000      	movs	r0, #0
 800917e:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8009182:	7fa3      	ldrb	r3, [r4, #30]
 8009184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009188:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800918c:	2501      	movs	r5, #1
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 800918e:	f882 0638 	strb.w	r0, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8009192:	7fa3      	ldrb	r3, [r4, #30]
 8009194:	6822      	ldr	r2, [r4, #0]
 8009196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800919a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800919e:	f883 5639 	strb.w	r5, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80091a2:	6822      	ldr	r2, [r4, #0]
 80091a4:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 80091a8:	f7fc f8f4 	bl	8005394 <pal_os_event_start>
{
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
        me->handler(me->caller_context, me->exit_status);
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	68e0      	ldr	r0, [r4, #12]
 80091b0:	8c21      	ldrh	r1, [r4, #32]
 80091b2:	4798      	blx	r3
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
}
 80091b4:	b002      	add	sp, #8
 80091b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                optiga_cmd_execute_prepare_command(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 80091ba:	4620      	mov	r0, r4
 80091bc:	f10d 0107 	add.w	r1, sp, #7
 80091c0:	f7ff fc7c 	bl	8008abc <optiga_cmd_execute_process_response>
            }
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 80091c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1f3      	bne.n	80091b4 <optiga_cmd_execute_handler+0x100>
 80091cc:	7da3      	ldrb	r3, [r4, #22]
 80091ce:	e77e      	b.n	80090ce <optiga_cmd_execute_handler+0x1a>
                optiga_cmd_execute_comms_close(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 80091d0:	4620      	mov	r0, r4
 80091d2:	f10d 0107 	add.w	r1, sp, #7
 80091d6:	f7ff fdc1 	bl	8008d5c <optiga_cmd_execute_prepare_command>
                break;
 80091da:	e7f3      	b.n	80091c4 <optiga_cmd_execute_handler+0x110>
                optiga_cmd_execute_comms_open(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 80091dc:	4620      	mov	r0, r4
 80091de:	f10d 0107 	add.w	r1, sp, #7
 80091e2:	f7ff feaf 	bl	8008f44 <optiga_cmd_execute_comms_close>
                break;
 80091e6:	e7ed      	b.n	80091c4 <optiga_cmd_execute_handler+0x110>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80091e8:	2300      	movs	r3, #0
 80091ea:	2104      	movs	r1, #4
 80091ec:	f240 2202 	movw	r2, #514	; 0x202
 80091f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80091f4:	75a1      	strb	r1, [r4, #22]
 80091f6:	8422      	strh	r2, [r4, #32]
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
        me->exit_status = event;
 80091f8:	2304      	movs	r3, #4
 80091fa:	e768      	b.n	80090ce <optiga_cmd_execute_handler+0x1a>
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80091fc:	7fa5      	ldrb	r5, [r4, #30]
 80091fe:	f8d4 8000 	ldr.w	r8, [r4]
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8009202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009206:	f7fc f945 	bl	8005494 <pal_os_timer_get_time_in_microseconds>
 800920a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 800920e:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8009210:	f8c5 0634 	str.w	r0, [r5, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8009214:	7fa3      	ldrb	r3, [r4, #30]
 8009216:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800921a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 800921e:	2021      	movs	r0, #33	; 0x21
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8009220:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8009224:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8009226:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800922a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800922e:	2100      	movs	r1, #0
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8009230:	f882 7639 	strb.w	r7, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8009234:	7fa3      	ldrb	r3, [r4, #30]
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800923c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009240:	f883 0638 	strb.w	r0, [r3, #1592]	; 0x638
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8009244:	75e6      	strb	r6, [r4, #23]
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8009246:	8421      	strh	r1, [r4, #32]
 8009248:	e75f      	b.n	800910a <optiga_cmd_execute_handler+0x56>
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 800924a:	7e43      	ldrb	r3, [r0, #25]
 800924c:	b113      	cbz	r3, 8009254 <optiga_cmd_execute_handler+0x1a0>
 800924e:	7f03      	ldrb	r3, [r0, #28]
 8009250:	2b22      	cmp	r3, #34	; 0x22
 8009252:	d003      	beq.n	800925c <optiga_cmd_execute_handler+0x1a8>
    if (OPTIGA_LIB_SUCCESS != event)
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8009254:	2304      	movs	r3, #4
        me->exit_status = event;
 8009256:	8425      	strh	r5, [r4, #32]
    if (OPTIGA_LIB_SUCCESS != event)
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8009258:	75a3      	strb	r3, [r4, #22]
 800925a:	e737      	b.n	80090cc <optiga_cmd_execute_handler+0x18>
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 800925c:	6800      	ldr	r0, [r0, #0]
 800925e:	2100      	movs	r1, #0
 8009260:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8009264:	2208      	movs	r2, #8
 8009266:	f7fc f901 	bl	800546c <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 800926a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800926c:	2833      	cmp	r0, #51	; 0x33
 800926e:	d1f1      	bne.n	8009254 <optiga_cmd_execute_handler+0x1a0>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                     me->p_optiga->optiga_context_handle_buffer,
 8009270:	6821      	ldr	r1, [r4, #0]
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8009272:	2208      	movs	r2, #8
 8009274:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8009278:	f7fc f83c 	bl	80052f4 <pal_os_datastore_write>
 800927c:	e7ea      	b.n	8009254 <optiga_cmd_execute_handler+0x1a0>
 800927e:	bf00      	nop
 8009280:	0800941d 	.word	0x0800941d
 8009284:	08007e6d 	.word	0x08007e6d

08009288 <optiga_cmd_execute_handler.constprop.12>:
        me->handler(me->caller_context, me->exit_status);
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
 8009288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928c:	b082      	sub	sp, #8
{
    uint8_t exit_loop = TRUE;
 800928e:	2601      	movs	r6, #1
 8009290:	7d83      	ldrb	r3, [r0, #22]
 8009292:	f88d 6007 	strb.w	r6, [sp, #7]
        me->handler(me->caller_context, me->exit_status);
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
 8009296:	4604      	mov	r4, r0
        me->exit_status = event;
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8009298:	2b04      	cmp	r3, #4
 800929a:	d878      	bhi.n	800938e <optiga_cmd_execute_handler.constprop.12+0x106>
 800929c:	e8df f003 	tbb	[pc, r3]
 80092a0:	727d8303 	.word	0x727d8303
 80092a4:	43          	.byte	0x43
 80092a5:	00          	.byte	0x00
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 80092a6:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 80092a8:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 80092ac:	2d01      	cmp	r5, #1
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 80092ae:	f04f 0702 	mov.w	r7, #2
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 80092b2:	d01b      	beq.n	80092ec <optiga_cmd_execute_handler.constprop.12+0x64>
 80092b4:	f0c0 8087 	bcc.w	80093c6 <optiga_cmd_execute_handler.constprop.12+0x13e>
 80092b8:	2d02      	cmp	r5, #2
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80092ba:	4956      	ldr	r1, [pc, #344]	; (8009414 <optiga_cmd_execute_handler.constprop.12+0x18c>)
 80092bc:	4622      	mov	r2, r4
 80092be:	f04f 0332 	mov.w	r3, #50	; 0x32
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 80092c2:	d176      	bne.n	80093b2 <optiga_cmd_execute_handler.constprop.12+0x12a>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80092c4:	6820      	ldr	r0, [r4, #0]
 80092c6:	f8d0 0678 	ldr.w	r0, [r0, #1656]	; 0x678
 80092ca:	f7fc f8b3 	bl	8005434 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80092ce:	2309      	movs	r3, #9
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 80092d0:	75a5      	strb	r5, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80092d2:	75e3      	strb	r3, [r4, #23]
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 80092d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d150      	bne.n	800937e <optiga_cmd_execute_handler.constprop.12+0xf6>
 80092dc:	7da3      	ldrb	r3, [r4, #22]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1da      	bne.n	8009298 <optiga_cmd_execute_handler.constprop.12+0x10>
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 80092e2:	7de5      	ldrb	r5, [r4, #23]

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
 80092e4:	f88d 6007 	strb.w	r6, [sp, #7]
        switch (me->cmd_sub_execution_state)
 80092e8:	2d01      	cmp	r5, #1
 80092ea:	d1e3      	bne.n	80092b4 <optiga_cmd_execute_handler.constprop.12+0x2c>
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	7ea2      	ldrb	r2, [r4, #26]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	7ee2      	ldrb	r2, [r4, #27]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	73da      	strb	r2, [r3, #15]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	7f22      	ldrb	r2, [r4, #28]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	741a      	strb	r2, [r3, #16]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 800930c:	6143      	str	r3, [r0, #20]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800930e:	4621      	mov	r1, r4
 8009310:	f7fe fd14 	bl	8007d3c <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	f7fe fd14 	bl	8007d44 <optiga_comms_open>
 800931c:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800931e:	2800      	cmp	r0, #0
 8009320:	d147      	bne.n	80093b2 <optiga_cmd_execute_handler.constprop.12+0x12a>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8009322:	75e7      	strb	r7, [r4, #23]
 8009324:	e7d6      	b.n	80092d4 <optiga_cmd_execute_handler.constprop.12+0x4c>
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8009326:	7fa3      	ldrb	r3, [r4, #30]
 8009328:	6822      	ldr	r2, [r4, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 800932a:	493b      	ldr	r1, [pc, #236]	; (8009418 <optiga_cmd_execute_handler.constprop.12+0x190>)
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 800932c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009330:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	f8c3 0634 	str.w	r0, [r3, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 800933c:	7fa3      	ldrb	r3, [r4, #30]
 800933e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009342:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009346:	2000      	movs	r0, #0
 8009348:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 800934c:	7fa3      	ldrb	r3, [r4, #30]
 800934e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009352:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8009356:	2501      	movs	r5, #1
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8009358:	f882 0638 	strb.w	r0, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800935c:	7fa3      	ldrb	r3, [r4, #30]
 800935e:	6822      	ldr	r2, [r4, #0]
 8009360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009364:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009368:	f883 5639 	strb.w	r5, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 800936c:	6822      	ldr	r2, [r4, #0]
 800936e:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8009372:	f7fc f80f 	bl	8005394 <pal_os_event_start>
{
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
        me->handler(me->caller_context, me->exit_status);
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	68e0      	ldr	r0, [r4, #12]
 800937a:	8c21      	ldrh	r1, [r4, #32]
 800937c:	4798      	blx	r3
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
}
 800937e:	b002      	add	sp, #8
 8009380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                optiga_cmd_execute_prepare_command(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8009384:	4620      	mov	r0, r4
 8009386:	f10d 0107 	add.w	r1, sp, #7
 800938a:	f7ff fb97 	bl	8008abc <optiga_cmd_execute_process_response>
            }
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 800938e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1f3      	bne.n	800937e <optiga_cmd_execute_handler.constprop.12+0xf6>
 8009396:	7da3      	ldrb	r3, [r4, #22]
 8009398:	e77e      	b.n	8009298 <optiga_cmd_execute_handler.constprop.12+0x10>
                optiga_cmd_execute_comms_close(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 800939a:	4620      	mov	r0, r4
 800939c:	f10d 0107 	add.w	r1, sp, #7
 80093a0:	f7ff fcdc 	bl	8008d5c <optiga_cmd_execute_prepare_command>
 80093a4:	e7f3      	b.n	800938e <optiga_cmd_execute_handler.constprop.12+0x106>
                optiga_cmd_execute_comms_open(me, &exit_loop);
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 80093a6:	4620      	mov	r0, r4
 80093a8:	f10d 0107 	add.w	r1, sp, #7
 80093ac:	f7ff fdca 	bl	8008f44 <optiga_cmd_execute_comms_close>
 80093b0:	e7ed      	b.n	800938e <optiga_cmd_execute_handler.constprop.12+0x106>
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80093b2:	2300      	movs	r3, #0
 80093b4:	2104      	movs	r1, #4
 80093b6:	f240 2202 	movw	r2, #514	; 0x202
 80093ba:	f88d 3007 	strb.w	r3, [sp, #7]
 80093be:	75a1      	strb	r1, [r4, #22]
 80093c0:	8422      	strh	r2, [r4, #32]
        me->handler(me->caller_context, me->exit_status);
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
 80093c2:	2304      	movs	r3, #4
 80093c4:	e768      	b.n	8009298 <optiga_cmd_execute_handler.constprop.12+0x10>
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80093c6:	7fa5      	ldrb	r5, [r4, #30]
 80093c8:	f8d4 8000 	ldr.w	r8, [r4]
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80093cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093d0:	f7fc f860 	bl	8005494 <pal_os_timer_get_time_in_microseconds>
 80093d4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80093d8:	6822      	ldr	r2, [r4, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80093da:	f8c5 0634 	str.w	r0, [r5, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80093de:	7fa3      	ldrb	r3, [r4, #30]
 80093e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80093e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 80093e8:	2021      	movs	r0, #33	; 0x21
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80093ea:	f8c3 4630 	str.w	r4, [r3, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80093ee:	7fa3      	ldrb	r3, [r4, #30]
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 80093f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80093f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80093f8:	2100      	movs	r1, #0
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 80093fa:	f882 7639 	strb.w	r7, [r2, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 80093fe:	7fa3      	ldrb	r3, [r4, #30]
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800940a:	f883 0638 	strb.w	r0, [r3, #1592]	; 0x638
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 800940e:	75e6      	strb	r6, [r4, #23]
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8009410:	8421      	strh	r1, [r4, #32]
 8009412:	e75f      	b.n	80092d4 <optiga_cmd_execute_handler.constprop.12+0x4c>
 8009414:	0800941d 	.word	0x0800941d
 8009418:	08007e6d 	.word	0x08007e6d

0800941c <optiga_cmd_event_trigger_execute>:
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 800941c:	f7ff bf34 	b.w	8009288 <optiga_cmd_execute_handler.constprop.12>

08009420 <optiga_cmd_set_shielded_connection_option>:
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
    switch (shielded_connection_option)
 8009420:	2a01      	cmp	r2, #1
 8009422:	d007      	beq.n	8009434 <optiga_cmd_set_shielded_connection_option+0x14>
 8009424:	d304      	bcc.n	8009430 <optiga_cmd_set_shielded_connection_option+0x10>
 8009426:	2a02      	cmp	r2, #2
 8009428:	d101      	bne.n	800942e <optiga_cmd_set_shielded_connection_option+0xe>
        }
        break;
        // Manage Context
        case OPTIGA_SET_MANAGE_CONTEXT:
        {
            me->manage_context_operation = value;
 800942a:	7701      	strb	r1, [r0, #28]
 800942c:	4770      	bx	lr
 800942e:	4770      	bx	lr
    switch (shielded_connection_option)
    {
        // Protection Level
        case OPTIGA_SET_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8009430:	7681      	strb	r1, [r0, #26]
        }
        break;
 8009432:	4770      	bx	lr
        // Protocol Version
        case OPTIGA_SET_PROTECTION_VERSION:
        {
            me->protocol_version = value;
 8009434:	76c1      	strb	r1, [r0, #27]
        }
        break;
 8009436:	4770      	bx	lr

08009438 <optiga_cmd_create>:
        }
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	4606      	mov	r6, r0
 800943c:	460c      	mov	r4, r1
 800943e:	4615      	mov	r5, r2
    optiga_cmd_t * me = NULL;

    pal_os_lock_enter_critical_section();
 8009440:	f7fc f80a 	bl	8005458 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8009444:	2e00      	cmp	r6, #0
 8009446:	d153      	bne.n	80094f0 <optiga_cmd_create+0xb8>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
            }
            break;
            case OPTIGA_CMD_QUEUE_SLOT_STATE:
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 8009448:	4e47      	ldr	r6, [pc, #284]	; (8009568 <optiga_cmd_create+0x130>)
 800944a:	f896 3639 	ldrb.w	r3, [r6, #1593]	; 0x639
 800944e:	fab3 f383 	clz	r3, r3
 8009452:	095b      	lsrs	r3, r3, #5
            default:
                break;
        }
        if (state_to_check == slot_value)
        {
            count++;
 8009454:	1c58      	adds	r0, r3, #1
 8009456:	f896 1645 	ldrb.w	r1, [r6, #1605]	; 0x645
 800945a:	f896 2651 	ldrb.w	r2, [r6, #1617]	; 0x651
 800945e:	f896 c65d 	ldrb.w	ip, [r6, #1629]	; 0x65d
 8009462:	f896 e669 	ldrb.w	lr, [r6, #1641]	; 0x669
 8009466:	f896 7675 	ldrb.w	r7, [r6, #1653]	; 0x675
 800946a:	b2c0      	uxtb	r0, r0
 800946c:	2900      	cmp	r1, #0
 800946e:	bf18      	it	ne
 8009470:	4618      	movne	r0, r3
 8009472:	1c41      	adds	r1, r0, #1
 8009474:	b2c9      	uxtb	r1, r1
 8009476:	2a00      	cmp	r2, #0
 8009478:	bf18      	it	ne
 800947a:	4601      	movne	r1, r0
 800947c:	1c4a      	adds	r2, r1, #1
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	f1bc 0f00 	cmp.w	ip, #0
 8009484:	bf18      	it	ne
 8009486:	460a      	movne	r2, r1
 8009488:	1c51      	adds	r1, r2, #1
 800948a:	b2c9      	uxtb	r1, r1
 800948c:	f1be 0f00 	cmp.w	lr, #0
 8009490:	bf14      	ite	ne
 8009492:	4613      	movne	r3, r2
 8009494:	460b      	moveq	r3, r1
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	b2d2      	uxtb	r2, r2
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 800949a:	2f00      	cmp	r7, #0
 800949c:	bf08      	it	eq
 800949e:	4613      	moveq	r3, r2
 80094a0:	b333      	cbz	r3, 80094f0 <optiga_cmd_create+0xb8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 80094a2:	2001      	movs	r0, #1
 80094a4:	2128      	movs	r1, #40	; 0x28
 80094a6:	f7fb ffdb 	bl	8005460 <pal_os_calloc>
        if (NULL == me)
 80094aa:	4607      	mov	r7, r0
 80094ac:	b300      	cbz	r0, 80094f0 <optiga_cmd_create+0xb8>
        {
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
 80094ae:	60c5      	str	r5, [r0, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 80094b0:	6006      	str	r6, [r0, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
 80094b2:	7b33      	ldrb	r3, [r6, #12]
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 80094b4:	6104      	str	r4, [r0, #16]
        me->caller_context = caller_context;

        me->p_optiga = g_optiga_list[optiga_instance_id];
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 80094b6:	2233      	movs	r2, #51	; 0x33
 80094b8:	8442      	strh	r2, [r0, #34]	; 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 80094ba:	b1f3      	cbz	r3, 80094fa <optiga_cmd_create+0xc2>
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80094bc:	f896 3639 	ldrb.w	r3, [r6, #1593]	; 0x639
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d033      	beq.n	800952c <optiga_cmd_create+0xf4>
 80094c4:	f896 3645 	ldrb.w	r3, [r6, #1605]	; 0x645
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d03f      	beq.n	800954c <optiga_cmd_create+0x114>
 80094cc:	f896 3651 	ldrb.w	r3, [r6, #1617]	; 0x651
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d03e      	beq.n	8009552 <optiga_cmd_create+0x11a>
 80094d4:	f896 365d 	ldrb.w	r3, [r6, #1629]	; 0x65d
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d03d      	beq.n	8009558 <optiga_cmd_create+0x120>
 80094dc:	f896 3669 	ldrb.w	r3, [r6, #1641]	; 0x669
 80094e0:	b31b      	cbz	r3, 800952a <optiga_cmd_create+0xf2>
 80094e2:	f896 3675 	ldrb.w	r3, [r6, #1653]	; 0x675
 80094e6:	b373      	cbz	r3, 8009546 <optiga_cmd_create+0x10e>
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 80094e8:	f7fb ffb8 	bl	800545c <pal_os_lock_exit_critical_section>
    return (me);
}
 80094ec:	4638      	mov	r0, r7
 80094ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
    optiga_cmd_t * me = NULL;
 80094f0:	2700      	movs	r7, #0
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 80094f2:	f7fb ffb3 	bl	800545c <pal_os_lock_exit_critical_section>
    return (me);
}
 80094f6:	4638      	mov	r0, r7
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 80094fa:	4631      	mov	r1, r6
 80094fc:	481b      	ldr	r0, [pc, #108]	; (800956c <optiga_cmd_create+0x134>)
 80094fe:	f7fb ff63 	bl	80053c8 <pal_os_event_create>
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8009502:	4639      	mov	r1, r7
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8009504:	f8c6 0678 	str.w	r0, [r6, #1656]	; 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8009508:	4819      	ldr	r0, [pc, #100]	; (8009570 <optiga_cmd_create+0x138>)
 800950a:	683c      	ldr	r4, [r7, #0]
 800950c:	f7fe fc00 	bl	8007d10 <optiga_comms_create>
            if (NULL == me->p_optiga->p_optiga_comms)
 8009510:	683b      	ldr	r3, [r7, #0]

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8009512:	6020      	str	r0, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	b314      	cbz	r4, 800955e <optiga_cmd_create+0x126>
            {
                pal_os_free(me);
                me = NULL;
                break;
            }
            me->p_optiga->instance_init_state = TRUE;
 8009518:	2201      	movs	r2, #1
 800951a:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8009524:	6153      	str	r3, [r2, #20]
 8009526:	683e      	ldr	r6, [r7, #0]
 8009528:	e7c8      	b.n	80094bc <optiga_cmd_create+0x84>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800952a:	2304      	movs	r3, #4
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800952c:	461a      	mov	r2, r3
        {
            * queue_index_store =  index;
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800952e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009532:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8009536:	2201      	movs	r2, #1
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
        {
            * queue_index_store =  index;
 8009538:	77bb      	strb	r3, [r7, #30]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800953a:	f886 2639 	strb.w	r2, [r6, #1593]	; 0x639
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 800953e:	f7fb ff8d 	bl	800545c <pal_os_lock_exit_critical_section>
    return (me);
}
 8009542:	4638      	mov	r0, r7
 8009544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8009546:	2305      	movs	r3, #5
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8009548:	461a      	mov	r2, r3
 800954a:	e7f0      	b.n	800952e <optiga_cmd_create+0xf6>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800954c:	2301      	movs	r3, #1
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800954e:	461a      	mov	r2, r3
 8009550:	e7ed      	b.n	800952e <optiga_cmd_create+0xf6>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8009552:	2302      	movs	r3, #2
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8009554:	461a      	mov	r2, r3
 8009556:	e7ea      	b.n	800952e <optiga_cmd_create+0xf6>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8009558:	2303      	movs	r3, #3
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800955a:	461a      	mov	r2, r3
 800955c:	e7e7      	b.n	800952e <optiga_cmd_create+0xf6>
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
            if (NULL == me->p_optiga->p_optiga_comms)
            {
                pal_os_free(me);
 800955e:	4638      	mov	r0, r7
 8009560:	f7fb ff80 	bl	8005464 <pal_os_free>
                me = NULL;
 8009564:	4627      	mov	r7, r4
                break;
 8009566:	e7bf      	b.n	80094e8 <optiga_cmd_create+0xb0>
 8009568:	1ffee818 	.word	0x1ffee818
 800956c:	08007e6d 	.word	0x08007e6d
 8009570:	080090b5 	.word	0x080090b5

08009574 <optiga_cmd_destroy>:
optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (NULL != me)
 8009574:	b300      	cbz	r0, 80095b8 <optiga_cmd_destroy+0x44>
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8009576:	8a83      	ldrh	r3, [r0, #20]
 8009578:	6802      	ldr	r2, [r0, #0]
    pal_os_lock_exit_critical_section();
    return (me);
}

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 800957a:	b510      	push	{r4, lr}
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 800957c:	b133      	cbz	r3, 800958c <optiga_cmd_destroy+0x18>
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 800957e:	f003 030f 	and.w	r3, r3, #15
 8009582:	441a      	add	r2, r3
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8009584:	2300      	movs	r3, #0
 8009586:	8283      	strh	r3, [r0, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8009588:	7213      	strb	r3, [r2, #8]
 800958a:	6802      	ldr	r2, [r0, #0]
/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 800958c:	7f81      	ldrb	r1, [r0, #30]
 800958e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009592:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009596:	2400      	movs	r4, #0
 8009598:	f882 4639 	strb.w	r4, [r2, #1593]	; 0x639
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 800959c:	7f82      	ldrb	r2, [r0, #30]
 800959e:	6801      	ldr	r1, [r0, #0]
 80095a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80095a4:	4603      	mov	r3, r0
 80095a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80095aa:	f882 4638 	strb.w	r4, [r2, #1592]	; 0x638
    me->queue_id = 0;
 80095ae:	779c      	strb	r4, [r3, #30]
        if (NULL != me)
        {
            return_status = optiga_cmd_release_session(me);
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
            pal_os_free(me);
 80095b0:	f7fb ff58 	bl	8005464 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 80095b4:	4620      	mov	r0, r4
 80095b6:	bd10      	pop	{r4, pc}
    return (me);
}

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80095b8:	f240 2002 	movw	r0, #514	; 0x202
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <optiga_cmd_open_application>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80095c0:	b538      	push	{r3, r4, r5, lr}
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80095c2:	2400      	movs	r4, #0
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 80095c4:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 80095c6:	4d06      	ldr	r5, [pc, #24]	; (80095e0 <optiga_cmd_open_application+0x20>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 80095c8:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 80095ca:	22f0      	movs	r2, #240	; 0xf0
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 80095cc:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80095ce:	8482      	strh	r2, [r0, #36]	; 0x24
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80095d0:	7584      	strb	r4, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80095d2:	75c4      	strb	r4, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80095d4:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80095d6:	f7ff fe57 	bl	8009288 <optiga_cmd_execute_handler.constprop.12>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 80095da:	4620      	mov	r0, r4
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	bf00      	nop
 80095e0:	080089c5 	.word	0x080089c5

080095e4 <optiga_cmd_get_data_object>:
    return (return_status);
}

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 80095e6:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80095e8:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80095ea:	2281      	movs	r2, #129	; 0x81
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80095ec:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 80095ee:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 80095f0:	4d05      	ldr	r5, [pc, #20]	; (8009608 <optiga_cmd_get_data_object+0x24>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 80095f2:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80095f4:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80095f6:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80095f8:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80095fa:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80095fc:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80095fe:	f7ff fe43 	bl	8009288 <optiga_cmd_execute_handler.constprop.12>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8009602:	4620      	mov	r0, r4
 8009604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009606:	bf00      	nop
 8009608:	080081a9 	.word	0x080081a9

0800960c <optiga_cmd_set_data_object>:
}


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 800960e:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009610:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009612:	2282      	movs	r2, #130	; 0x82
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009614:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 8009616:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 8009618:	4d05      	ldr	r5, [pc, #20]	; (8009630 <optiga_cmd_set_data_object+0x24>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 800961a:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 800961c:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 800961e:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8009620:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009622:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009624:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8009626:	f7ff fe2f 	bl	8009288 <optiga_cmd_execute_handler.constprop.12>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_SET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 800962a:	4620      	mov	r0, r4
 800962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962e:	bf00      	nop
 8009630:	080082bd 	.word	0x080082bd

08009634 <optiga_cmd_get_random>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (TRUE == params->store_in_session)
 8009636:	7b14      	ldrb	r4, [r2, #12]
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 8009638:	4d09      	ldr	r5, [pc, #36]	; (8009660 <optiga_cmd_get_random+0x2c>)
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 800963a:	6082      	str	r2, [r0, #8]

optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (TRUE == params->store_in_session)
 800963c:	2c01      	cmp	r4, #1
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
 800963e:	bf14      	ite	ne
 8009640:	2606      	movne	r6, #6
 8009642:	2605      	moveq	r6, #5
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009644:	228c      	movs	r2, #140	; 0x8c
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009646:	2400      	movs	r4, #0
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009648:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 800964a:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 800964c:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 800964e:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8009650:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009652:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009654:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8009656:	f7ff fe17 	bl	8009288 <optiga_cmd_execute_handler.constprop.12>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_RANDOM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 800965a:	4620      	mov	r0, r4
 800965c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800965e:	bf00      	nop
 8009660:	0800837d 	.word	0x0800837d

08009664 <optiga_cmd_verify_sign>:
}

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8009666:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009668:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 800966a:	22b2      	movs	r2, #178	; 0xb2
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 800966c:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 800966e:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 8009670:	4d05      	ldr	r5, [pc, #20]	; (8009688 <optiga_cmd_verify_sign+0x24>)
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 8009672:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009674:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8009676:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8009678:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 800967a:	8482      	strh	r2, [r0, #36]	; 0x24
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 800967c:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 800967e:	f7ff fe03 	bl	8009288 <optiga_cmd_execute_handler.constprop.12>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8009682:	4620      	mov	r0, r4
 8009684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009686:	bf00      	nop
 8009688:	0800844d 	.word	0x0800844d

0800968c <optiga_cmd_encrypt_asym>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
 800968e:	6893      	ldr	r3, [r2, #8]
 8009690:	b17b      	cbz	r3, 80096b2 <optiga_cmd_encrypt_asym+0x26>
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8009692:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8009694:	239e      	movs	r3, #158	; 0x9e
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8009696:	2702      	movs	r7, #2
    me->cmd_sub_execution_state = sub_state;
 8009698:	2606      	movs	r6, #6
    me->cmd_hdlrs = cmd_hdlrs;
 800969a:	4d0a      	ldr	r5, [pc, #40]	; (80096c4 <optiga_cmd_encrypt_asym+0x38>)
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 800969c:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 800969e:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80096a0:	7587      	strb	r7, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80096a2:	75c6      	strb	r6, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80096a4:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
 80096a6:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80096a8:	8483      	strh	r3, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80096aa:	f7ff fded 	bl	8009288 <optiga_cmd_execute_handler.constprop.12>
                           OPTIGA_CMD_EXEC_REQUEST_LOCK,
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_ENCRYPT_ASYM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
 80096ae:	4620      	mov	r0, r4
 80096b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
 80096b2:	8813      	ldrh	r3, [r2, #0]
 80096b4:	b913      	cbnz	r3, 80096bc <optiga_cmd_encrypt_asym+0x30>
 80096b6:	8a83      	ldrh	r3, [r0, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1ea      	bne.n	8009692 <optiga_cmd_encrypt_asym+0x6>
    return (return_status);
}

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
 80096bc:	f240 2003 	movw	r0, #515	; 0x203
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_ENCRYPT_ASYM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
    }
    return (return_status);
}
 80096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c2:	bf00      	nop
 80096c4:	080085c9 	.word	0x080085c9

080096c8 <optiga_cmd_calc_hash>:
}

optiga_lib_status_t optiga_cmd_calc_hash(optiga_cmd_t * me,
                                         uint8_t cmd_param,
                                         optiga_calc_hash_params_t * params)
{
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    p_optiga_calc_hash->data_sent = 0;
 80096ca:	2400      	movs	r4, #0
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80096cc:	f04f 0e02 	mov.w	lr, #2
    me->cmd_sub_execution_state = sub_state;
 80096d0:	2706      	movs	r7, #6
    me->cmd_hdlrs = cmd_hdlrs;
 80096d2:	4e07      	ldr	r6, [pc, #28]	; (80096f0 <optiga_cmd_calc_hash+0x28>)
                                         optiga_calc_hash_params_t * params)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    p_optiga_calc_hash->data_sent = 0;
 80096d4:	6114      	str	r4, [r2, #16]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80096d6:	25b0      	movs	r5, #176	; 0xb0
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 80096d8:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80096da:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 80096dc:	7641      	strb	r1, [r0, #25]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80096de:	f880 e016 	strb.w	lr, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80096e2:	75c7      	strb	r7, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80096e4:	6046      	str	r6, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80096e6:	8485      	strh	r5, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80096e8:	f7ff fdce 	bl	8009288 <optiga_cmd_execute_handler.constprop.12>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_HASH, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 80096ec:	4620      	mov	r0, r4
 80096ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f0:	080087a5 	.word	0x080087a5

080096f4 <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 80096fc:	2300      	movs	r3, #0
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 80096fe:	2101      	movs	r1, #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8009700:	4618      	mov	r0, r3
    {
        pow[i] = x;
        log[x] = i;
 8009702:	f8cd 341c 	str.w	r3, [sp, #1052]	; 0x41c
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 8009706:	9106      	str	r1, [sp, #24]
 8009708:	ac06      	add	r4, sp, #24
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800970a:	2202      	movs	r2, #2
 800970c:	e00a      	b.n	8009724 <aes_gen_tables+0x30>
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 800970e:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8009712:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 8009716:	f844 1f04 	str.w	r1, [r4, #4]!
        log[x] = i;
 800971a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800971e:	bf18      	it	ne
 8009720:	231b      	movne	r3, #27
 8009722:	004a      	lsls	r2, r1, #1
 8009724:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8009726:	3001      	adds	r0, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8009728:	4053      	eors	r3, r2
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 800972a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800972e:	b2d9      	uxtb	r1, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8009730:	d1ed      	bne.n	800970e <aes_gen_tables+0x1a>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 8009732:	4b7a      	ldr	r3, [pc, #488]	; (800991c <aes_gen_tables+0x228>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8009734:	4e7a      	ldr	r6, [pc, #488]	; (8009920 <aes_gen_tables+0x22c>)
    RSb[0x63] = 0x00;
 8009736:	f8df e20c 	ldr.w	lr, [pc, #524]	; 8009944 <aes_gen_tables+0x250>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 800973a:	2502      	movs	r5, #2
 800973c:	2104      	movs	r1, #4
 800973e:	2208      	movs	r2, #8
 8009740:	2780      	movs	r7, #128	; 0x80
 8009742:	f04f 0910 	mov.w	r9, #16
 8009746:	f04f 0820 	mov.w	r8, #32
 800974a:	f04f 0c40 	mov.w	ip, #64	; 0x40
 800974e:	241b      	movs	r4, #27
 8009750:	2036      	movs	r0, #54	; 0x36
 8009752:	605d      	str	r5, [r3, #4]
 8009754:	6099      	str	r1, [r3, #8]
 8009756:	2501      	movs	r5, #1
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8009758:	2163      	movs	r1, #99	; 0x63
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 800975a:	60da      	str	r2, [r3, #12]

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;
 800975c:	2200      	movs	r2, #0
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 800975e:	61df      	str	r7, [r3, #28]
 8009760:	f8c3 9010 	str.w	r9, [r3, #16]
 8009764:	f8c3 8014 	str.w	r8, [r3, #20]
 8009768:	f8c3 c018 	str.w	ip, [r3, #24]
 800976c:	621c      	str	r4, [r3, #32]
 800976e:	6258      	str	r0, [r3, #36]	; 0x24
 8009770:	601d      	str	r5, [r3, #0]
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8009772:	7031      	strb	r1, [r6, #0]
    RSb[0x63] = 0x00;
 8009774:	f88e 2063 	strb.w	r2, [lr, #99]	; 0x63
 8009778:	f50d 6783 	add.w	r7, sp, #1048	; 0x418

    for( i = 1; i < 256; i++ )
    {
        x = pow[255 - log[i]];
 800977c:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8009780:	aa06      	add	r2, sp, #24
 8009782:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009786:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800978a:	0041      	lsls	r1, r0, #1
 800978c:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
 8009790:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8009792:	004a      	lsls	r2, r1, #1
 8009794:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
 8009798:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800979a:	0053      	lsls	r3, r2, #1
 800979c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	f080 0063 	eor.w	r0, r0, #99	; 0x63
 80097a6:	4041      	eors	r1, r0
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80097a8:	0058      	lsls	r0, r3, #1
 80097aa:	404a      	eors	r2, r1
 80097ac:	ea40 11d3 	orr.w	r1, r0, r3, lsr #7
 80097b0:	4053      	eors	r3, r2
 80097b2:	b2ca      	uxtb	r2, r1
        x ^= y ^ 0x63;
 80097b4:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 80097b6:	f806 3f01 	strb.w	r3, [r6, #1]!
        RSb[x] = (unsigned char) i;
 80097ba:	f80e 5003 	strb.w	r5, [lr, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 80097be:	3501      	adds	r5, #1
 80097c0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80097c4:	d1da      	bne.n	800977c <aes_gen_tables+0x88>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80097c6:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
 80097ca:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80097cc:	f8dd 343c 	ldr.w	r3, [sp, #1084]	; 0x43c
 80097d0:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80097d2:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8009948 <aes_gen_tables+0x254>
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80097dc:	f8dd 3444 	ldr.w	r3, [sp, #1092]	; 0x444
 80097e0:	9305      	str	r3, [sp, #20]
 80097e2:	4c50      	ldr	r4, [pc, #320]	; (8009924 <aes_gen_tables+0x230>)
 80097e4:	4b50      	ldr	r3, [pc, #320]	; (8009928 <aes_gen_tables+0x234>)
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	f8df c160 	ldr.w	ip, [pc, #352]	; 800994c <aes_gen_tables+0x258>
 80097ec:	f8df e160 	ldr.w	lr, [pc, #352]	; 8009950 <aes_gen_tables+0x25c>
 80097f0:	4d4e      	ldr	r5, [pc, #312]	; (800992c <aes_gen_tables+0x238>)
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80097f2:	484f      	ldr	r0, [pc, #316]	; (8009930 <aes_gen_tables+0x23c>)
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80097f4:	9401      	str	r4, [sp, #4]
 80097f6:	2100      	movs	r1, #0
 80097f8:	46d3      	mov	fp, sl
 80097fa:	e05d      	b.n	80098b8 <aes_gen_tables+0x1c4>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80097fc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8009800:	9c03      	ldr	r4, [sp, #12]
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009802:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	eb06 0a03 	add.w	sl, r6, r3
 800980c:	fb8a 2300 	smull	r2, r3, sl, r0
 8009810:	eb0a 0803 	add.w	r8, sl, r3
 8009814:	ea4f 73ea 	mov.w	r3, sl, asr #31
 8009818:	ebc3 18e8 	rsb	r8, r3, r8, asr #7
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800981c:	9a02      	ldr	r2, [sp, #8]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800981e:	9b05      	ldr	r3, [sp, #20]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8009820:	eb06 0904 	add.w	r9, r6, r4
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009824:	4432      	add	r2, r6
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009826:	18f3      	adds	r3, r6, r3

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8009828:	ebc8 2808 	rsb	r8, r8, r8, lsl #8
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800982c:	fb89 6700 	smull	r6, r7, r9, r0
 8009830:	eb09 0607 	add.w	r6, r9, r7
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8009834:	ebc8 080a 	rsb	r8, r8, sl
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8009838:	ea4f 7ae9 	mov.w	sl, r9, asr #31
 800983c:	ebca 1ae6 	rsb	sl, sl, r6, asr #7
 8009840:	ebca 2a0a 	rsb	sl, sl, sl, lsl #8
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009844:	fb82 6700 	smull	r6, r7, r2, r0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8009848:	ac06      	add	r4, sp, #24
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800984a:	19d6      	adds	r6, r2, r7
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800984c:	ebca 0909 	rsb	r9, sl, r9
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009850:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 8009854:	ebca 1ae6 	rsb	sl, sl, r6, asr #7
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009858:	fb83 6700 	smull	r6, r7, r3, r0
 800985c:	19de      	adds	r6, r3, r7

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800985e:	f854 7028 	ldr.w	r7, [r4, r8, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8009862:	f854 8029 	ldr.w	r8, [r4, r9, lsl #2]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009866:	ea4f 79e3 	mov.w	r9, r3, asr #31
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800986a:	ebca 2a0a 	rsb	sl, sl, sl, lsl #8
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800986e:	ebc9 16e6 	rsb	r6, r9, r6, asr #7
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009872:	ebca 0a02 	rsb	sl, sl, r2
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009876:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 800987a:	1b9e      	subs	r6, r3, r6
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800987c:	f854 202a 	ldr.w	r2, [r4, sl, lsl #2]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8009880:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8009884:	043b      	lsls	r3, r7, #16
 8009886:	ea83 2708 	eor.w	r7, r3, r8, lsl #8
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800988a:	4057      	eors	r7, r2
 800988c:	ea87 6706 	eor.w	r7, r7, r6, lsl #24
 8009890:	ea4f 6637 	mov.w	r6, r7, ror #24
 8009894:	ea4f 6236 	mov.w	r2, r6, ror #24
 8009898:	ea4f 6332 	mov.w	r3, r2, ror #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
 800989c:	f845 2f04 	str.w	r2, [r5, #4]!
        RT3[i] = ROTL8( RT2[i] );
 80098a0:	9a01      	ldr	r2, [sp, #4]
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80098a2:	f84c 7f04 	str.w	r7, [ip, #4]!
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80098a6:	3101      	adds	r1, #1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 80098a8:	f842 3f04 	str.w	r3, [r2, #4]!
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80098ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 80098b0:	f84e 6f04 	str.w	r6, [lr, #4]!
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 80098b4:	9201      	str	r2, [sp, #4]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80098b6:	d02d      	beq.n	8009914 <aes_gen_tables+0x220>
    {
        x = FSb[i];
 80098b8:	9a00      	ldr	r2, [sp, #0]
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
 80098ba:	4c1e      	ldr	r4, [pc, #120]	; (8009934 <aes_gen_tables+0x240>)
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 80098bc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80098c0:	9200      	str	r2, [sp, #0]
        y = XTIME( x ) & 0xFF;
 80098c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098c6:	bf14      	ite	ne
 80098c8:	221b      	movne	r2, #27
 80098ca:	2200      	moveq	r2, #0
 80098cc:	ea82 0243 	eor.w	r2, r2, r3, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 80098d0:	021f      	lsls	r7, r3, #8
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 80098d8:	4057      	eors	r7, r2
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;
 80098da:	4053      	eors	r3, r2

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 80098dc:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
 80098e0:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80098e4:	4c14      	ldr	r4, [pc, #80]	; (8009938 <aes_gen_tables+0x244>)
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 80098e6:	f81b 6f01 	ldrb.w	r6, [fp, #1]!
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80098ea:	ea4f 6733 	mov.w	r7, r3, ror #24
 80098ee:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80098f2:	4c12      	ldr	r4, [pc, #72]	; (800993c <aes_gen_tables+0x248>)
 80098f4:	ea4f 6237 	mov.w	r2, r7, ror #24
        FT3[i] = ROTL8( FT2[i] );
 80098f8:	ea4f 6332 	mov.w	r3, r2, ror #24
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
        FT2[i] = ROTL8( FT1[i] );
 80098fc:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8009900:	4a0f      	ldr	r2, [pc, #60]	; (8009940 <aes_gen_tables+0x24c>)
 8009902:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8009906:	2e00      	cmp	r6, #0
 8009908:	f47f af78 	bne.w	80097fc <aes_gen_tables+0x108>
 800990c:	4633      	mov	r3, r6
 800990e:	4632      	mov	r2, r6
 8009910:	461f      	mov	r7, r3
 8009912:	e7c3      	b.n	800989c <aes_gen_tables+0x1a8>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8009914:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 8009918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991c:	1ffefea4 	.word	0x1ffefea4
 8009920:	1ffefed0 	.word	0x1ffefed0
 8009924:	1fff0ccc 	.word	0x1fff0ccc
 8009928:	1ffefecf 	.word	0x1ffefecf
 800992c:	1fff07cc 	.word	0x1fff07cc
 8009930:	80808081 	.word	0x80808081
 8009934:	1ffeeea4 	.word	0x1ffeeea4
 8009938:	1ffef2a4 	.word	0x1ffef2a4
 800993c:	1ffef6a4 	.word	0x1ffef6a4
 8009940:	1ffefaa4 	.word	0x1ffefaa4
 8009944:	1fff0bd0 	.word	0x1fff0bd0
 8009948:	1fff0bcf 	.word	0x1fff0bcf
 800994c:	1ffeffcc 	.word	0x1ffeffcc
 8009950:	1fff03cc 	.word	0x1fff03cc

08009954 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8009954:	2100      	movs	r1, #0
 8009956:	f44f 728c 	mov.w	r2, #280	; 0x118
 800995a:	f003 bfba 	b.w	800d8d2 <memset>
 800995e:	bf00      	nop

08009960 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 8009960:	b118      	cbz	r0, 800996a <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8009962:	f44f 718c 	mov.w	r1, #280	; 0x118
 8009966:	f001 bfa9 	b.w	800b8bc <mbedtls_platform_zeroize>
 800996a:	4770      	bx	lr

0800996c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8009970:	2ac0      	cmp	r2, #192	; 0xc0
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8009972:	b083      	sub	sp, #12
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8009974:	d04d      	beq.n	8009a12 <mbedtls_aes_setkey_enc+0xa6>
 8009976:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800997a:	d036      	beq.n	80099ea <mbedtls_aes_setkey_enc+0x7e>
 800997c:	2a80      	cmp	r2, #128	; 0x80
 800997e:	d004      	beq.n	800998a <mbedtls_aes_setkey_enc+0x1e>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8009980:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
 8009984:	b003      	add	sp, #12
 8009986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
 800998a:	230a      	movs	r3, #10
 800998c:	6003      	str	r3, [r0, #0]
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 800998e:	4c89      	ldr	r4, [pc, #548]	; (8009bb4 <mbedtls_aes_setkey_enc+0x248>)
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	4689      	mov	r9, r1
 8009994:	4680      	mov	r8, r0
 8009996:	4616      	mov	r6, r2
 8009998:	b383      	cbz	r3, 80099fc <mbedtls_aes_setkey_enc+0x90>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800999a:	f108 0308 	add.w	r3, r8, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800999e:	ea4f 1c56 	mov.w	ip, r6, lsr #5

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80099a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80099a6:	f1a3 0e04 	sub.w	lr, r3, #4
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80099aa:	2700      	movs	r7, #0
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80099ac:	eb09 0487 	add.w	r4, r9, r7, lsl #2
 80099b0:	f819 1027 	ldrb.w	r1, [r9, r7, lsl #2]
 80099b4:	78a0      	ldrb	r0, [r4, #2]
 80099b6:	7862      	ldrb	r2, [r4, #1]
 80099b8:	78e4      	ldrb	r4, [r4, #3]
 80099ba:	0400      	lsls	r0, r0, #16
 80099bc:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 80099c0:	430a      	orrs	r2, r1
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80099c2:	3701      	adds	r7, #1
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80099c4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80099c8:	4567      	cmp	r7, ip
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80099ca:	f84e 2f04 	str.w	r2, [lr, #4]!
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80099ce:	d3ed      	bcc.n	80099ac <mbedtls_aes_setkey_enc+0x40>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80099d0:	f8d8 2000 	ldr.w	r2, [r8]
 80099d4:	2a0c      	cmp	r2, #12
 80099d6:	d01f      	beq.n	8009a18 <mbedtls_aes_setkey_enc+0xac>
 80099d8:	2a0e      	cmp	r2, #14
 80099da:	f000 8089 	beq.w	8009af0 <mbedtls_aes_setkey_enc+0x184>
 80099de:	2a0a      	cmp	r2, #10
 80099e0:	d05a      	beq.n	8009a98 <mbedtls_aes_setkey_enc+0x12c>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 80099e2:	2000      	movs	r0, #0
}
 80099e4:	b003      	add	sp, #12
 80099e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80099ea:	4c72      	ldr	r4, [pc, #456]	; (8009bb4 <mbedtls_aes_setkey_enc+0x248>)

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
 80099ec:	230e      	movs	r3, #14
 80099ee:	6003      	str	r3, [r0, #0]
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	4689      	mov	r9, r1
 80099f4:	4680      	mov	r8, r0
 80099f6:	4616      	mov	r6, r2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1ce      	bne.n	800999a <mbedtls_aes_setkey_enc+0x2e>
    {
        aes_gen_tables();
 80099fc:	f7ff fe7a 	bl	80096f4 <aes_gen_tables>
        aes_init_done = 1;
 8009a00:	2501      	movs	r5, #1

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8009a02:	f108 0308 	add.w	r3, r8, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8009a06:	ea4f 1c56 	mov.w	ip, r6, lsr #5

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
    {
        aes_gen_tables();
        aes_init_done = 1;
 8009a0a:	6025      	str	r5, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8009a0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a10:	e7c9      	b.n	80099a6 <mbedtls_aes_setkey_enc+0x3a>
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
 8009a12:	230c      	movs	r3, #12
 8009a14:	6003      	str	r3, [r0, #0]
 8009a16:	e7ba      	b.n	800998e <mbedtls_aes_setkey_enc+0x22>
 8009a18:	4967      	ldr	r1, [pc, #412]	; (8009bb8 <mbedtls_aes_setkey_enc+0x24c>)
 8009a1a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8009a1e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8009a22:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8009a26:	685f      	ldr	r7, [r3, #4]
 8009a28:	695d      	ldr	r5, [r3, #20]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8009bbc <mbedtls_aes_setkey_enc+0x250>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 8009a30:	4608      	mov	r0, r1
 8009a32:	2600      	movs	r6, #0
 8009a34:	4661      	mov	r1, ip
 8009a36:	4684      	mov	ip, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009a38:	0e2c      	lsrs	r4, r5, #24
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8009a3a:	f3c5 2007 	ubfx	r0, r5, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009a3e:	f81c a004 	ldrb.w	sl, [ip, r4]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8009a42:	f81c 0000 	ldrb.w	r0, [ip, r0]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009a46:	f859 4026 	ldr.w	r4, [r9, r6, lsl #2]
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8009a4a:	fa5f fb85 	uxtb.w	fp, r5
 8009a4e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8009a52:	f3c5 4a07 	ubfx	sl, r5, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8009a56:	f81c b00b 	ldrb.w	fp, [ip, fp]

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8009a5a:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8009a5e:	4050      	eors	r0, r2
 8009a60:	ea80 620b 	eor.w	r2, r0, fp, lsl #24
 8009a64:	ea82 220a 	eor.w	r2, r2, sl, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009a68:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 8009a6a:	4057      	eors	r7, r2
                RK[8]  = RK[2] ^ RK[7];
 8009a6c:	ea8e 0e07 	eor.w	lr, lr, r7
                RK[9]  = RK[3] ^ RK[8];
 8009a70:	ea81 010e 	eor.w	r1, r1, lr
                RK[10] = RK[4] ^ RK[9];
 8009a74:	ea88 0801 	eor.w	r8, r8, r1
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8009a78:	3601      	adds	r6, #1

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
                RK[11] = RK[5] ^ RK[10];
 8009a7a:	ea85 0508 	eor.w	r5, r5, r8
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8009a7e:	2e08      	cmp	r6, #8

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
                RK[11] = RK[5] ^ RK[10];
 8009a80:	62dd      	str	r5, [r3, #44]	; 0x2c
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
 8009a82:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 8009a86:	6259      	str	r1, [r3, #36]	; 0x24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 8009a88:	f8c3 e020 	str.w	lr, [r3, #32]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 8009a8c:	61df      	str	r7, [r3, #28]

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8009a8e:	619a      	str	r2, [r3, #24]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8009a90:	f103 0318 	add.w	r3, r3, #24
 8009a94:	d1d0      	bne.n	8009a38 <mbedtls_aes_setkey_enc+0xcc>
 8009a96:	e7a4      	b.n	80099e2 <mbedtls_aes_setkey_enc+0x76>
 8009a98:	4698      	mov	r8, r3
 8009a9a:	689f      	ldr	r7, [r3, #8]
 8009a9c:	f858 2ba0 	ldr.w	r2, [r8], #160
 8009aa0:	685e      	ldr	r6, [r3, #4]
 8009aa2:	68dd      	ldr	r5, [r3, #12]
 8009aa4:	f8df e114 	ldr.w	lr, [pc, #276]	; 8009bbc <mbedtls_aes_setkey_enc+0x250>
 8009aa8:	4943      	ldr	r1, [pc, #268]	; (8009bb8 <mbedtls_aes_setkey_enc+0x24c>)
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8009aaa:	f85e cb04 	ldr.w	ip, [lr], #4
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8009aae:	f3c5 2407 	ubfx	r4, r5, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009ab2:	0e28      	lsrs	r0, r5, #24
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8009ab4:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009ab6:	5c08      	ldrb	r0, [r1, r0]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8009ab8:	fa5f f985 	uxtb.w	r9, r5

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8009abc:	f3c5 4a07 	ubfx	sl, r5, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8009ac0:	f811 9009 	ldrb.w	r9, [r1, r9]
 8009ac4:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 8009ac8:	4050      	eors	r0, r2

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8009aca:	f811 400a 	ldrb.w	r4, [r1, sl]
 8009ace:	ea80 6209 	eor.w	r2, r0, r9, lsl #24
 8009ad2:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009ad6:	ea82 020c 	eor.w	r2, r2, ip
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 8009ada:	4056      	eors	r6, r2
                RK[6]  = RK[2] ^ RK[5];
 8009adc:	4077      	eors	r7, r6
                RK[7]  = RK[3] ^ RK[6];
 8009ade:	407d      	eors	r5, r7
 8009ae0:	61dd      	str	r5, [r3, #28]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
                RK[6]  = RK[2] ^ RK[5];
 8009ae2:	619f      	str	r7, [r3, #24]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 8009ae4:	615e      	str	r6, [r3, #20]
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8009ae6:	611a      	str	r2, [r3, #16]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8009ae8:	3310      	adds	r3, #16
 8009aea:	4543      	cmp	r3, r8
 8009aec:	d1dd      	bne.n	8009aaa <mbedtls_aes_setkey_enc+0x13e>
 8009aee:	e778      	b.n	80099e2 <mbedtls_aes_setkey_enc+0x76>
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8009af6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8009bbc <mbedtls_aes_setkey_enc+0x250>
 8009afa:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8009afe:	6918      	ldr	r0, [r3, #16]
 8009b00:	68de      	ldr	r6, [r3, #12]
 8009b02:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8009b06:	69dd      	ldr	r5, [r3, #28]
 8009b08:	492b      	ldr	r1, [pc, #172]	; (8009bb8 <mbedtls_aes_setkey_enc+0x24c>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 8009b0a:	f8cd c000 	str.w	ip, [sp]
 8009b0e:	4614      	mov	r4, r2
 8009b10:	2700      	movs	r7, #0
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b18:	46bc      	mov	ip, r7
 8009b1a:	46a1      	mov	r9, r4
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8009b1c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8009b20:	0e2c      	lsrs	r4, r5, #24
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8009b22:	f811 a00a 	ldrb.w	sl, [r1, sl]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8009b26:	5d0c      	ldrb	r4, [r1, r4]
 8009b28:	9f01      	ldr	r7, [sp, #4]
 8009b2a:	ea4a 4404 	orr.w	r4, sl, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8009b2e:	fa5f fa85 	uxtb.w	sl, r5
 8009b32:	4062      	eors	r2, r4

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8009b34:	f3c5 4407 	ubfx	r4, r5, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8009b38:	f811 a00a 	ldrb.w	sl, [r1, sl]

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8009b3c:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8009b3e:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
 8009b42:	ea82 620a 	eor.w	r2, r2, sl, lsl #24
 8009b46:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
 8009b4a:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 8009b4c:	ea89 0902 	eor.w	r9, r9, r2
                RK[10] = RK[2] ^ RK[9];
 8009b50:	ea8e 0e09 	eor.w	lr, lr, r9
                RK[11] = RK[3] ^ RK[10];
 8009b54:	ea86 060e 	eor.w	r6, r6, lr

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8009b58:	b2f4      	uxtb	r4, r6
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 8009b5a:	62de      	str	r6, [r3, #44]	; 0x2c
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 8009b5c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 8009b60:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8009b64:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8009b66:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8009b68:	ea4f 6a16 	mov.w	sl, r6, lsr #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8009b6c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8009b70:	f811 a00a 	ldrb.w	sl, [r1, sl]
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8009b74:	f811 b00b 	ldrb.w	fp, [r1, fp]
 8009b78:	4044      	eors	r4, r0
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8009b7a:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8009b7e:	ea84 640a 	eor.w	r4, r4, sl, lsl #24
 8009b82:	5c08      	ldrb	r0, [r1, r0]
 8009b84:	ea84 2b0b 	eor.w	fp, r4, fp, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8009b88:	9c00      	ldr	r4, [sp, #0]
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8009b8a:	ea8b 4000 	eor.w	r0, fp, r0, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8009b8e:	4044      	eors	r4, r0
                RK[14] = RK[6] ^ RK[13];
 8009b90:	ea88 0804 	eor.w	r8, r8, r4
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8009b94:	f10c 0c01 	add.w	ip, ip, #1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
                RK[14] = RK[6] ^ RK[13];
                RK[15] = RK[7] ^ RK[14];
 8009b98:	ea85 0508 	eor.w	r5, r5, r8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8009b9c:	f1bc 0f07 	cmp.w	ip, #7
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
                RK[14] = RK[6] ^ RK[13];
                RK[15] = RK[7] ^ RK[14];
 8009ba0:	63dd      	str	r5, [r3, #60]	; 0x3c
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
                RK[14] = RK[6] ^ RK[13];
 8009ba2:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8009ba6:	635c      	str	r4, [r3, #52]	; 0x34

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
 8009ba8:	6318      	str	r0, [r3, #48]	; 0x30
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8009baa:	9400      	str	r4, [sp, #0]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8009bac:	f103 0320 	add.w	r3, r3, #32
 8009bb0:	d1b4      	bne.n	8009b1c <mbedtls_aes_setkey_enc+0x1b0>
 8009bb2:	e716      	b.n	80099e2 <mbedtls_aes_setkey_enc+0x76>
 8009bb4:	1ffefecc 	.word	0x1ffefecc
 8009bb8:	1ffefed0 	.word	0x1ffefed0
 8009bbc:	1ffefea4 	.word	0x1ffefea4

08009bc0 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	b0cb      	sub	sp, #300	; 0x12c
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	460e      	mov	r6, r1
 8009bca:	4614      	mov	r4, r2

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8009bcc:	2100      	movs	r1, #0
 8009bce:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009bd2:	a804      	add	r0, sp, #16
 8009bd4:	f003 fe7d 	bl	800d8d2 <memset>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8009bd8:	f105 0308 	add.w	r3, r5, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4622      	mov	r2, r4

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8009be0:	606b      	str	r3, [r5, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8009be2:	a804      	add	r0, sp, #16
 8009be4:	f7ff fec2 	bl	800996c <mbedtls_aes_setkey_enc>
 8009be8:	9001      	str	r0, [sp, #4]
 8009bea:	2800      	cmp	r0, #0
 8009bec:	f040 80a2 	bne.w	8009d34 <mbedtls_aes_setkey_dec+0x174>
        goto exit;

    ctx->nr = cty.nr;
 8009bf0:	9b04      	ldr	r3, [sp, #16]
 8009bf2:	9302      	str	r3, [sp, #8]
 8009bf4:	461a      	mov	r2, r3
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8009bf6:	0111      	lsls	r1, r2, #4
 8009bf8:	9b05      	ldr	r3, [sp, #20]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 8009bfa:	602a      	str	r2, [r5, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8009bfc:	185e      	adds	r6, r3, r1

    *RK++ = *SK++;
 8009bfe:	585b      	ldr	r3, [r3, r1]
 8009c00:	60ab      	str	r3, [r5, #8]
    *RK++ = *SK++;
 8009c02:	6873      	ldr	r3, [r6, #4]
 8009c04:	60eb      	str	r3, [r5, #12]
    *RK++ = *SK++;
 8009c06:	68b3      	ldr	r3, [r6, #8]
 8009c08:	612b      	str	r3, [r5, #16]
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009c0a:	f102 39ff 	add.w	r9, r2, #4294967295
    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 8009c0e:	68f3      	ldr	r3, [r6, #12]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8009c10:	9103      	str	r1, [sp, #12]
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009c12:	f1b9 0f00 	cmp.w	r9, #0
    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 8009c16:	616b      	str	r3, [r5, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009c18:	f1a6 0b10 	sub.w	fp, r6, #16
    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 8009c1c:	f105 0a18 	add.w	sl, r5, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009c20:	dd78      	ble.n	8009d14 <mbedtls_aes_setkey_dec+0x154>
 8009c22:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8009d50 <mbedtls_aes_setkey_dec+0x190>
 8009c26:	4b48      	ldr	r3, [pc, #288]	; (8009d48 <mbedtls_aes_setkey_dec+0x188>)
 8009c28:	f8df c128 	ldr.w	ip, [pc, #296]	; 8009d54 <mbedtls_aes_setkey_dec+0x194>
 8009c2c:	f8df e128 	ldr.w	lr, [pc, #296]	; 8009d58 <mbedtls_aes_setkey_dec+0x198>
 8009c30:	4f46      	ldr	r7, [pc, #280]	; (8009d4c <mbedtls_aes_setkey_dec+0x18c>)
 8009c32:	3e20      	subs	r6, #32
 8009c34:	3528      	adds	r5, #40	; 0x28
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c36:	6932      	ldr	r2, [r6, #16]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009c38:	0e14      	lsrs	r4, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c3a:	b2d0      	uxtb	r0, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009c3c:	f3c2 2107 	ubfx	r1, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009c40:	5d1c      	ldrb	r4, [r3, r4]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c42:	5c18      	ldrb	r0, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009c44:	5c59      	ldrb	r1, [r3, r1]
 8009c46:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009c4a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8009c4e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009c52:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009c56:	4060      	eors	r0, r4
 8009c58:	5c9a      	ldrb	r2, [r3, r2]
 8009c5a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009c5e:	4041      	eors	r1, r0
 8009c60:	4051      	eors	r1, r2

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c62:	f845 1c10 	str.w	r1, [r5, #-16]
 8009c66:	6972      	ldr	r2, [r6, #20]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009c68:	0e14      	lsrs	r4, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c6a:	b2d0      	uxtb	r0, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009c6c:	f3c2 2107 	ubfx	r1, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009c70:	5d1c      	ldrb	r4, [r3, r4]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c72:	5c18      	ldrb	r0, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009c74:	5c59      	ldrb	r1, [r3, r1]
 8009c76:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009c7a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8009c7e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009c82:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009c86:	4060      	eors	r0, r4
 8009c88:	5c9a      	ldrb	r2, [r3, r2]
 8009c8a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009c8e:	4041      	eors	r1, r0
 8009c90:	4051      	eors	r1, r2

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c92:	f845 1c0c 	str.w	r1, [r5, #-12]
 8009c96:	69b2      	ldr	r2, [r6, #24]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009c98:	0e14      	lsrs	r4, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009c9a:	b2d0      	uxtb	r0, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009c9c:	f3c2 2107 	ubfx	r1, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009ca0:	5d1c      	ldrb	r4, [r3, r4]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009ca2:	5c18      	ldrb	r0, [r3, r0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009ca4:	5c59      	ldrb	r1, [r3, r1]
 8009ca6:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009caa:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8009cae:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009cb2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009cb6:	4060      	eors	r0, r4
 8009cb8:	5c9a      	ldrb	r2, [r3, r2]
 8009cba:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009cbe:	4041      	eors	r1, r0
 8009cc0:	4051      	eors	r1, r2

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009cc2:	f845 1c08 	str.w	r1, [r5, #-8]
 8009cc6:	69f2      	ldr	r2, [r6, #28]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009cc8:	0e10      	lsrs	r0, r2, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009cca:	b2d1      	uxtb	r1, r2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009ccc:	f3c2 2407 	ubfx	r4, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009cd0:	5c18      	ldrb	r0, [r3, r0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009cd2:	5c59      	ldrb	r1, [r3, r1]
 8009cd4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009cd8:	5d1c      	ldrb	r4, [r3, r4]
 8009cda:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8009cde:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009ce2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8009ce6:	4041      	eors	r1, r0
 8009ce8:	5c9a      	ldrb	r2, [r3, r2]
 8009cea:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009cee:	4061      	eors	r1, r4
 8009cf0:	4051      	eors	r1, r2
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009cf2:	f1b9 0901 	subs.w	r9, r9, #1
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009cf6:	f845 1c04 	str.w	r1, [r5, #-4]
 8009cfa:	f1a6 0610 	sub.w	r6, r6, #16
 8009cfe:	f105 0510 	add.w	r5, r5, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009d02:	d198      	bne.n	8009c36 <mbedtls_aes_setkey_dec+0x76>
 8009d04:	9b02      	ldr	r3, [sp, #8]
 8009d06:	9a03      	ldr	r2, [sp, #12]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	f1c3 0310 	rsb	r3, r3, #16
 8009d0e:	3a10      	subs	r2, #16
 8009d10:	449b      	add	fp, r3
 8009d12:	4492      	add	sl, r2
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
 8009d14:	f8db 3000 	ldr.w	r3, [fp]
 8009d18:	f8ca 3000 	str.w	r3, [sl]
    *RK++ = *SK++;
 8009d1c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009d20:	f8ca 3004 	str.w	r3, [sl, #4]
    *RK++ = *SK++;
 8009d24:	f8db 3008 	ldr.w	r3, [fp, #8]
 8009d28:	f8ca 3008 	str.w	r3, [sl, #8]
    *RK++ = *SK++;
 8009d2c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8009d30:	f8ca 300c 	str.w	r3, [sl, #12]
void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8009d34:	a804      	add	r0, sp, #16
 8009d36:	f44f 718c 	mov.w	r1, #280	; 0x118
 8009d3a:	f001 fdbf 	bl	800b8bc <mbedtls_platform_zeroize>

exit:
    mbedtls_aes_free( &cty );

    return( ret );
}
 8009d3e:	9801      	ldr	r0, [sp, #4]
 8009d40:	b04b      	add	sp, #300	; 0x12c
 8009d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d46:	bf00      	nop
 8009d48:	1ffefed0 	.word	0x1ffefed0
 8009d4c:	1fff07d0 	.word	0x1fff07d0
 8009d50:	1fff0cd0 	.word	0x1fff0cd0
 8009d54:	1ffeffd0 	.word	0x1ffeffd0
 8009d58:	1fff03d0 	.word	0x1fff03d0

08009d5c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d60:	b08d      	sub	sp, #52	; 0x34
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8009d62:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009d64:	f891 a00e 	ldrb.w	sl, [r1, #14]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009d68:	6806      	ldr	r6, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009d6a:	f891 8002 	ldrb.w	r8, [r1, #2]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009d6e:	7908      	ldrb	r0, [r1, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009d70:	784c      	ldrb	r4, [r1, #1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009d72:	f891 900d 	ldrb.w	r9, [r1, #13]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009d76:	798d      	ldrb	r5, [r1, #6]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009d78:	f891 e00a 	ldrb.w	lr, [r1, #10]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009d7c:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009d7e:	7a08      	ldrb	r0, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009d80:	794f      	ldrb	r7, [r1, #5]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009d82:	f891 b009 	ldrb.w	fp, [r1, #9]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009d86:	f891 c000 	ldrb.w	ip, [r1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009d8a:	9002      	str	r0, [sp, #8]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009d8c:	ea4f 4808 	mov.w	r8, r8, lsl #16
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009d90:	ea4f 400a 	mov.w	r0, sl, lsl #16
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009d94:	042d      	lsls	r5, r5, #16
 8009d96:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009d9a:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8009d9e:	ea40 2409 	orr.w	r4, r0, r9, lsl #8
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009da2:	f891 9003 	ldrb.w	r9, [r1, #3]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009da6:	7bc8      	ldrb	r0, [r1, #15]
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009da8:	920a      	str	r2, [sp, #40]	; 0x28
 8009daa:	ea45 2a07 	orr.w	sl, r5, r7, lsl #8
 8009dae:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009db2:	7b0d      	ldrb	r5, [r1, #12]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009db4:	79cf      	ldrb	r7, [r1, #7]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009db6:	f891 b00b 	ldrb.w	fp, [r1, #11]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009dba:	681a      	ldr	r2, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009dbc:	1071      	asrs	r1, r6, #1
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009dbe:	ea48 0c0c 	orr.w	ip, r8, ip
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009dc2:	9e01      	ldr	r6, [sp, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009dc4:	910b      	str	r1, [sp, #44]	; 0x2c
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009dc6:	ea4c 6c09 	orr.w	ip, ip, r9, lsl #24
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009dca:	ea4a 0a06 	orr.w	sl, sl, r6
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009dce:	432c      	orrs	r4, r5

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009dd0:	9e02      	ldr	r6, [sp, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009dd2:	68d9      	ldr	r1, [r3, #12]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009dd4:	ea8c 0c02 	eor.w	ip, ip, r2
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009dd8:	685a      	ldr	r2, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009dda:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009dde:	ea4a 6707 	orr.w	r7, sl, r7, lsl #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009de2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009de4:	ea4e 0e06 	orr.w	lr, lr, r6
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009de8:	4057      	eors	r7, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009dea:	689a      	ldr	r2, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009dec:	3c01      	subs	r4, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009dee:	ea4e 660b 	orr.w	r6, lr, fp, lsl #24
 8009df2:	4056      	eors	r6, r2
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009df4:	2c00      	cmp	r4, #0
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009df6:	f103 0210 	add.w	r2, r3, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009dfa:	9405      	str	r4, [sp, #20]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009dfc:	ea80 0901 	eor.w	r9, r0, r1
 8009e00:	9209      	str	r2, [sp, #36]	; 0x24

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009e02:	f340 821d 	ble.w	800a240 <mbedtls_internal_aes_encrypt+0x4e4>
 8009e06:	4ad3      	ldr	r2, [pc, #844]	; (800a154 <mbedtls_internal_aes_encrypt+0x3f8>)
 8009e08:	9203      	str	r2, [sp, #12]
 8009e0a:	f8df 8354 	ldr.w	r8, [pc, #852]	; 800a160 <mbedtls_internal_aes_encrypt+0x404>
 8009e0e:	4ad2      	ldr	r2, [pc, #840]	; (800a158 <mbedtls_internal_aes_encrypt+0x3fc>)
 8009e10:	f8df e350 	ldr.w	lr, [pc, #848]	; 800a164 <mbedtls_internal_aes_encrypt+0x408>
 8009e14:	9201      	str	r2, [sp, #4]
 8009e16:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 8009e1a:	9604      	str	r6, [sp, #16]
 8009e1c:	f8cd 8008 	str.w	r8, [sp, #8]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009e20:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009e24:	9e03      	ldr	r6, [sp, #12]
 8009e26:	fa5f f089 	uxtb.w	r0, r9
 8009e2a:	b2f9      	uxtb	r1, r7
 8009e2c:	fa5f f28a 	uxtb.w	r2, sl
 8009e30:	fa5f f48c 	uxtb.w	r4, ip
 8009e34:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
 8009e38:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8009e3c:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 8009e40:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
 8009e44:	9e01      	ldr	r6, [sp, #4]
 8009e46:	f85b 2c14 	ldr.w	r2, [fp, #-20]
 8009e4a:	ea4f 6319 	mov.w	r3, r9, lsr #24
 8009e4e:	406a      	eors	r2, r5
 8009e50:	f856 8023 	ldr.w	r8, [r6, r3, lsl #2]
 8009e54:	f85b 3c1c 	ldr.w	r3, [fp, #-28]
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	f85b 3c20 	ldr.w	r3, [fp, #-32]
 8009e5e:	405c      	eors	r4, r3
 8009e60:	4653      	mov	r3, sl
 8009e62:	0e1d      	lsrs	r5, r3, #24
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8009e6a:	9601      	str	r6, [sp, #4]
 8009e6c:	4043      	eors	r3, r0
 8009e6e:	0e38      	lsrs	r0, r7, #24
 8009e70:	ea84 0408 	eor.w	r4, r4, r8
 8009e74:	f856 a020 	ldr.w	sl, [r6, r0, lsl #2]
 8009e78:	f85b 0c18 	ldr.w	r0, [fp, #-24]
 8009e7c:	9406      	str	r4, [sp, #24]
 8009e7e:	4041      	eors	r1, r0
 8009e80:	ea4f 601c 	mov.w	r0, ip, lsr #24
 8009e84:	9c02      	ldr	r4, [sp, #8]
 8009e86:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009e8a:	9e04      	ldr	r6, [sp, #16]
 8009e8c:	ea81 010a 	eor.w	r1, r1, sl
 8009e90:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 8009e94:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8009e98:	406a      	eors	r2, r5
 8009e9a:	4043      	eors	r3, r0
 8009e9c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8009ea0:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8009ea4:	f854 602a 	ldr.w	r6, [r4, sl, lsl #2]
 8009ea8:	f854 8028 	ldr.w	r8, [r4, r8, lsl #2]
 8009eac:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8009eb0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009eb4:	f3c9 2a07 	ubfx	sl, r9, #8, #8
 8009eb8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8009ebc:	f854 a02a 	ldr.w	sl, [r4, sl, lsl #2]
 8009ec0:	9c06      	ldr	r4, [sp, #24]
 8009ec2:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009ec6:	ea84 0408 	eor.w	r4, r4, r8
 8009eca:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8009ece:	4044      	eors	r4, r0
 8009ed0:	4073      	eors	r3, r6
 8009ed2:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009ed6:	9404      	str	r4, [sp, #16]
 8009ed8:	0e26      	lsrs	r6, r4, #24
 8009eda:	406a      	eors	r2, r5
 8009edc:	b2e0      	uxtb	r0, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009ede:	f3c9 4907 	ubfx	r9, r9, #16, #8
 8009ee2:	9c03      	ldr	r4, [sp, #12]
 8009ee4:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
 8009ee8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009eec:	9c01      	ldr	r4, [sp, #4]
 8009eee:	407a      	eors	r2, r7
 8009ef0:	ea81 010a 	eor.w	r1, r1, sl
 8009ef4:	ea81 0c0c 	eor.w	ip, r1, ip
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009ef8:	0e11      	lsrs	r1, r2, #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009efa:	ea83 0909 	eor.w	r9, r3, r9
 8009efe:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8009f02:	9c02      	ldr	r4, [sp, #8]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009f04:	f3c9 2807 	ubfx	r8, r9, #8, #8
 8009f08:	46a2      	mov	sl, r4
 8009f0a:	f3cc 4707 	ubfx	r7, ip, #16, #8
 8009f0e:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8009f12:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
 8009f16:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 8009f1a:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8009f1e:	9406      	str	r4, [sp, #24]
 8009f20:	9707      	str	r7, [sp, #28]
 8009f22:	9c03      	ldr	r4, [sp, #12]
 8009f24:	9f01      	ldr	r7, [sp, #4]
 8009f26:	9508      	str	r5, [sp, #32]
 8009f28:	fa5f f389 	uxtb.w	r3, r9
 8009f2c:	f85b 5c10 	ldr.w	r5, [fp, #-16]
 8009f30:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009f34:	4041      	eors	r1, r0
 8009f36:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009f3a:	46b8      	mov	r8, r7
 8009f3c:	f85e a020 	ldr.w	sl, [lr, r0, lsl #2]
 8009f40:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
 8009f44:	4069      	eors	r1, r5
 8009f46:	fa5f f08c 	uxtb.w	r0, ip
 8009f4a:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8009f4e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009f52:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
 8009f56:	9d02      	ldr	r5, [sp, #8]
 8009f58:	405f      	eors	r7, r3
 8009f5a:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8009f5e:	407b      	eors	r3, r7
 8009f60:	4647      	mov	r7, r8
 8009f62:	ea80 0806 	eor.w	r8, r0, r6
 8009f66:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8009f70:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f74:	f85b 4c08 	ldr.w	r4, [fp, #-8]
 8009f78:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 8009f7c:	f857 002c 	ldr.w	r0, [r7, ip, lsl #2]
 8009f80:	9f02      	ldr	r7, [sp, #8]
 8009f82:	ea88 0804 	eor.w	r8, r8, r4
 8009f86:	9c04      	ldr	r4, [sp, #16]
 8009f88:	4042      	eors	r2, r0
 8009f8a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8009f8e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8009f92:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
 8009f96:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8009f9a:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8009f9e:	4042      	eors	r2, r0
 8009fa0:	9806      	ldr	r0, [sp, #24]
 8009fa2:	4041      	eors	r1, r0
 8009fa4:	9808      	ldr	r0, [sp, #32]
 8009fa6:	407a      	eors	r2, r7
 8009fa8:	9f07      	ldr	r7, [sp, #28]
 8009faa:	f3c9 4907 	ubfx	r9, r9, #16, #8
 8009fae:	4043      	eors	r3, r0
 8009fb0:	ea88 0606 	eor.w	r6, r8, r6
 8009fb4:	ea81 0c07 	eor.w	ip, r1, r7
 8009fb8:	ea83 070a 	eor.w	r7, r3, sl
 8009fbc:	ea86 0304 	eor.w	r3, r6, r4
 8009fc0:	f85e 5029 	ldr.w	r5, [lr, r9, lsl #2]
 8009fc4:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009fc6:	9b05      	ldr	r3, [sp, #20]
 8009fc8:	3b01      	subs	r3, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009fca:	ea82 0905 	eor.w	r9, r2, r5
 8009fce:	f10b 0b20 	add.w	fp, fp, #32
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009fd2:	9305      	str	r3, [sp, #20]
 8009fd4:	f47f af24 	bne.w	8009e20 <mbedtls_internal_aes_encrypt+0xc4>
 8009fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fdc:	9e04      	ldr	r6, [sp, #16]
 8009fde:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009fe2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009fec:	9309      	str	r3, [sp, #36]	; 0x24
 8009fee:	9b03      	ldr	r3, [sp, #12]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009ff0:	fa5f f58c 	uxtb.w	r5, ip
 8009ff4:	ea4f 6019 	mov.w	r0, r9, lsr #24
 8009ff8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	fa5f f489 	uxtb.w	r4, r9
 800a002:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a006:	9b03      	ldr	r3, [sp, #12]
 800a008:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800a00c:	9404      	str	r4, [sp, #16]
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	9c03      	ldr	r4, [sp, #12]
 800a012:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 800a016:	0e32      	lsrs	r2, r6, #24
 800a018:	b2f9      	uxtb	r1, r7
 800a01a:	f853 a02b 	ldr.w	sl, [r3, fp, lsl #2]
 800a01e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a022:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800a026:	461c      	mov	r4, r3
 800a028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02a:	ea85 0b00 	eor.w	fp, r5, r0
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	9302      	str	r3, [sp, #8]
 800a032:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800a036:	ea4f 631c 	mov.w	r3, ip, lsr #24
 800a03a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800a03e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a042:	9001      	str	r0, [sp, #4]
 800a044:	f3c7 4707 	ubfx	r7, r7, #16, #8
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800a04e:	9705      	str	r7, [sp, #20]
 800a050:	b2f0      	uxtb	r0, r6
 800a052:	9f04      	ldr	r7, [sp, #16]
 800a054:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a058:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a05a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 800a05e:	407a      	eors	r2, r7
 800a060:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
 800a064:	9703      	str	r7, [sp, #12]
 800a066:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800a06a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 800a06e:	4069      	eors	r1, r5
 800a070:	ea80 0a0a 	eor.w	sl, r0, sl
 800a074:	68e5      	ldr	r5, [r4, #12]
 800a076:	f85e 0026 	ldr.w	r0, [lr, r6, lsl #2]
 800a07a:	6866      	ldr	r6, [r4, #4]
 800a07c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800a080:	4634      	mov	r4, r6
 800a082:	406a      	eors	r2, r5
 800a084:	f3c9 2607 	ubfx	r6, r9, #8, #8
 800a088:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800a08c:	f85e 702c 	ldr.w	r7, [lr, ip, lsl #2]
 800a090:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
 800a094:	f858 c023 	ldr.w	ip, [r8, r3, lsl #2]
 800a098:	9b02      	ldr	r3, [sp, #8]
 800a09a:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800a09e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0a0:	68ad      	ldr	r5, [r5, #8]
 800a0a2:	ea8a 0a05 	eor.w	sl, sl, r5
 800a0a6:	9d01      	ldr	r5, [sp, #4]
 800a0a8:	ea8b 0303 	eor.w	r3, fp, r3
 800a0ac:	406b      	eors	r3, r5
 800a0ae:	9d03      	ldr	r5, [sp, #12]
 800a0b0:	4058      	eors	r0, r3
 800a0b2:	ea8a 0a09 	eor.w	sl, sl, r9
 800a0b6:	9b05      	ldr	r3, [sp, #20]
 800a0b8:	4061      	eors	r1, r4
 800a0ba:	ea8a 0707 	eor.w	r7, sl, r7
 800a0be:	ea81 010c 	eor.w	r1, r1, ip
 800a0c2:	406a      	eors	r2, r5
 800a0c4:	ea82 0503 	eor.w	r5, r2, r3
 800a0c8:	ea81 0306 	eor.w	r3, r1, r6
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800a0cc:	b2f9      	uxtb	r1, r7
 800a0ce:	9107      	str	r1, [sp, #28]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800a0d0:	0e39      	lsrs	r1, r7, #24
 800a0d2:	460c      	mov	r4, r1
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800a0d4:	fa5f fb80 	uxtb.w	fp, r0
 800a0d8:	4920      	ldr	r1, [pc, #128]	; (800a15c <mbedtls_internal_aes_encrypt+0x400>)
 800a0da:	f811 b00b 	ldrb.w	fp, [r1, fp]
 800a0de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0e0:	6909      	ldr	r1, [r1, #16]
 800a0e2:	9101      	str	r1, [sp, #4]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a0e4:	0e2a      	lsrs	r2, r5, #24
 800a0e6:	491d      	ldr	r1, [pc, #116]	; (800a15c <mbedtls_internal_aes_encrypt+0x400>)

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800a0e8:	f3c3 2a07 	ubfx	sl, r3, #8, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a0ec:	5c8a      	ldrb	r2, [r1, r2]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800a0ee:	f811 a00a 	ldrb.w	sl, [r1, sl]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a0f2:	491a      	ldr	r1, [pc, #104]	; (800a15c <mbedtls_internal_aes_encrypt+0x400>)

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800a0f4:	f8cd a008 	str.w	sl, [sp, #8]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a0f8:	f3c7 4907 	ubfx	r9, r7, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800a0fc:	fa5f f883 	uxtb.w	r8, r3
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a100:	f811 9009 	ldrb.w	r9, [r1, r9]
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800a104:	4915      	ldr	r1, [pc, #84]	; (800a15c <mbedtls_internal_aes_encrypt+0x400>)
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a106:	f8cd 900c 	str.w	r9, [sp, #12]

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a10a:	ea4f 6c10 	mov.w	ip, r0, lsr #24
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800a10e:	f811 8008 	ldrb.w	r8, [r1, r8]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a112:	f811 c00c 	ldrb.w	ip, [r1, ip]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a116:	4911      	ldr	r1, [pc, #68]	; (800a15c <mbedtls_internal_aes_encrypt+0x400>)
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a118:	f8cd c010 	str.w	ip, [sp, #16]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a11c:	f3c7 2e07 	ubfx	lr, r7, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a120:	f3c5 4607 	ubfx	r6, r5, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a124:	f811 e00e 	ldrb.w	lr, [r1, lr]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a128:	490c      	ldr	r1, [pc, #48]	; (800a15c <mbedtls_internal_aes_encrypt+0x400>)
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a12a:	f8cd e014 	str.w	lr, [sp, #20]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a12e:	5d8e      	ldrb	r6, [r1, r6]
 800a130:	9606      	str	r6, [sp, #24]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800a132:	9e07      	ldr	r6, [sp, #28]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800a134:	0e1f      	lsrs	r7, r3, #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800a136:	f811 e006 	ldrb.w	lr, [r1, r6]
 800a13a:	9e09      	ldr	r6, [sp, #36]	; 0x24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800a13c:	5dcf      	ldrb	r7, [r1, r7]
 800a13e:	6971      	ldr	r1, [r6, #20]
 800a140:	9e01      	ldr	r6, [sp, #4]
 800a142:	ea8b 0b06 	eor.w	fp, fp, r6
 800a146:	ea8b 6b02 	eor.w	fp, fp, r2, lsl #24
 800a14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a14c:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 800a150:	6996      	ldr	r6, [r2, #24]
 800a152:	e009      	b.n	800a168 <mbedtls_internal_aes_encrypt+0x40c>
 800a154:	1ffeeea4 	.word	0x1ffeeea4
 800a158:	1ffefaa4 	.word	0x1ffefaa4
 800a15c:	1ffefed0 	.word	0x1ffefed0
 800a160:	1ffef2a4 	.word	0x1ffef2a4
 800a164:	1ffef6a4 	.word	0x1ffef6a4
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800a168:	b2ed      	uxtb	r5, r5
 800a16a:	ea88 0101 	eor.w	r1, r8, r1
 800a16e:	4690      	mov	r8, r2
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a170:	4a38      	ldr	r2, [pc, #224]	; (800a254 <mbedtls_internal_aes_encrypt+0x4f8>)
 800a172:	f812 900c 	ldrb.w	r9, [r2, ip]
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800a176:	5d52      	ldrb	r2, [r2, r5]
 800a178:	f8d8 501c 	ldr.w	r5, [r8, #28]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800a17c:	46a4      	mov	ip, r4
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a17e:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800a182:	4c34      	ldr	r4, [pc, #208]	; (800a254 <mbedtls_internal_aes_encrypt+0x4f8>)
 800a184:	4055      	eors	r5, r2
 800a186:	9a04      	ldr	r2, [sp, #16]
 800a188:	f814 a00c 	ldrb.w	sl, [r4, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a18c:	f814 c003 	ldrb.w	ip, [r4, r3]
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a190:	f3c0 2307 	ubfx	r3, r0, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800a194:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800a198:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
 800a19c:	9a02      	ldr	r2, [sp, #8]
 800a19e:	5c20      	ldrb	r0, [r4, r0]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a1a0:	5ce3      	ldrb	r3, [r4, r3]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 800a1a2:	9c03      	ldr	r4, [sp, #12]
 800a1a4:	ea8e 0606 	eor.w	r6, lr, r6
 800a1a8:	ea85 650a 	eor.w	r5, r5, sl, lsl #24
 800a1ac:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
 800a1b0:	ea8b 2202 	eor.w	r2, fp, r2, lsl #8
 800a1b4:	9f05      	ldr	r7, [sp, #20]
 800a1b6:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
 800a1ba:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 800a1be:	9c06      	ldr	r4, [sp, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 800a1c0:	ea83 430c 	eor.w	r3, r3, ip, lsl #16
 800a1c4:	ea81 2107 	eor.w	r1, r1, r7, lsl #8
 800a1c8:	ea86 2609 	eor.w	r6, r6, r9, lsl #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 800a1cc:	ea81 4404 	eor.w	r4, r1, r4, lsl #16
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
 800a1d0:	ea86 4100 	eor.w	r1, r6, r0, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a1d4:	0a18      	lsrs	r0, r3, #8
 800a1d6:	9001      	str	r0, [sp, #4]
 800a1d8:	0c18      	lsrs	r0, r3, #16
 800a1da:	9002      	str	r0, [sp, #8]
 800a1dc:	0e18      	lsrs	r0, r3, #24
 800a1de:	9003      	str	r0, [sp, #12]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a1e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1e2:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 800a1e6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a1ea:	ea4f 6912 	mov.w	r9, r2, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 800a1ee:	0a0f      	lsrs	r7, r1, #8
 800a1f0:	0c0e      	lsrs	r6, r1, #16
 800a1f2:	0e0d      	lsrs	r5, r1, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a1f4:	7002      	strb	r2, [r0, #0]
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 800a1f6:	7201      	strb	r1, [r0, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800a1f8:	7303      	strb	r3, [r0, #12]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 800a1fa:	ea4f 2814 	mov.w	r8, r4, lsr #8
 800a1fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a202:	ea4f 6e14 	mov.w	lr, r4, lsr #24
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a206:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a20a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a20e:	f89d 100c 	ldrb.w	r1, [sp, #12]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 800a212:	7104      	strb	r4, [r0, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a214:	f880 b001 	strb.w	fp, [r0, #1]
 800a218:	f880 a002 	strb.w	sl, [r0, #2]
 800a21c:	f880 9003 	strb.w	r9, [r0, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800a220:	f880 8005 	strb.w	r8, [r0, #5]
 800a224:	f880 c006 	strb.w	ip, [r0, #6]
 800a228:	f880 e007 	strb.w	lr, [r0, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800a22c:	7247      	strb	r7, [r0, #9]
 800a22e:	7286      	strb	r6, [r0, #10]
 800a230:	72c5      	strb	r5, [r0, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800a232:	7342      	strb	r2, [r0, #13]
 800a234:	7383      	strb	r3, [r0, #14]
 800a236:	73c1      	strb	r1, [r0, #15]

    return( 0 );
}
 800a238:	2000      	movs	r0, #0
 800a23a:	b00d      	add	sp, #52	; 0x34
 800a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <mbedtls_internal_aes_encrypt+0x4fc>)
 800a242:	9303      	str	r3, [sp, #12]
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <mbedtls_internal_aes_encrypt+0x500>)
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800a260 <mbedtls_internal_aes_encrypt+0x504>
 800a24c:	f8df e014 	ldr.w	lr, [pc, #20]	; 800a264 <mbedtls_internal_aes_encrypt+0x508>
 800a250:	e6cd      	b.n	8009fee <mbedtls_internal_aes_encrypt+0x292>
 800a252:	bf00      	nop
 800a254:	1ffefed0 	.word	0x1ffefed0
 800a258:	1ffeeea4 	.word	0x1ffeeea4
 800a25c:	1ffefaa4 	.word	0x1ffefaa4
 800a260:	1ffef2a4 	.word	0x1ffef2a4
 800a264:	1ffef6a4 	.word	0x1ffef6a4

0800a268 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a26c:	c841      	ldmia	r0, {r0, r6}
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a26e:	b08d      	sub	sp, #52	; 0x34
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a270:	f891 c00e 	ldrb.w	ip, [r1, #14]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a274:	788b      	ldrb	r3, [r1, #2]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a276:	798f      	ldrb	r7, [r1, #6]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a278:	7a8d      	ldrb	r5, [r1, #10]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a27a:	f891 9005 	ldrb.w	r9, [r1, #5]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a27e:	f891 8009 	ldrb.w	r8, [r1, #9]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a282:	f891 b00d 	ldrb.w	fp, [r1, #13]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a286:	f891 e001 	ldrb.w	lr, [r1, #1]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a28a:	9001      	str	r0, [sp, #4]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a28c:	7908      	ldrb	r0, [r1, #4]
 800a28e:	9000      	str	r0, [sp, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a290:	041b      	lsls	r3, r3, #16
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a292:	043f      	lsls	r7, r7, #16
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a294:	ea4f 400c 	mov.w	r0, ip, lsl #16

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a298:	042d      	lsls	r5, r5, #16
 800a29a:	f891 a008 	ldrb.w	sl, [r1, #8]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a29e:	780c      	ldrb	r4, [r1, #0]
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a2a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a2a2:	ea47 2c09 	orr.w	ip, r7, r9, lsl #8
 800a2a6:	ea43 2e0e 	orr.w	lr, r3, lr, lsl #8
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a2aa:	f891 9003 	ldrb.w	r9, [r1, #3]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a2ae:	7b0b      	ldrb	r3, [r1, #12]

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a2b0:	7acf      	ldrb	r7, [r1, #11]
 800a2b2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800a2b6:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a2ba:	f891 8007 	ldrb.w	r8, [r1, #7]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a2be:	f891 b00f 	ldrb.w	fp, [r1, #15]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a2c2:	9901      	ldr	r1, [sp, #4]
 800a2c4:	1049      	asrs	r1, r1, #1
 800a2c6:	910b      	str	r1, [sp, #44]	; 0x2c
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a2c8:	4318      	orrs	r0, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a2cc:	9900      	ldr	r1, [sp, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a2ce:	3b01      	subs	r3, #1
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a2d0:	ea40 6b0b 	orr.w	fp, r0, fp, lsl #24

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a2d4:	9305      	str	r3, [sp, #20]
 800a2d6:	4618      	mov	r0, r3
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a2d8:	ea4e 0404 	orr.w	r4, lr, r4
 800a2dc:	6833      	ldr	r3, [r6, #0]
 800a2de:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a2e2:	ea4c 0c01 	orr.w	ip, ip, r1
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a2e6:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a2e8:	6873      	ldr	r3, [r6, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a2ea:	68f1      	ldr	r1, [r6, #12]
 800a2ec:	f8df 9364 	ldr.w	r9, [pc, #868]	; 800a654 <mbedtls_internal_aes_decrypt+0x3ec>

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a2f0:	ea45 050a 	orr.w	r5, r5, sl
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a2f4:	f106 0210 	add.w	r2, r6, #16
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a2f8:	ea4c 6a08 	orr.w	sl, ip, r8, lsl #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a2fc:	9209      	str	r2, [sp, #36]	; 0x24
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a2fe:	ea8a 0a03 	eor.w	sl, sl, r3
 800a302:	4ad1      	ldr	r2, [pc, #836]	; (800a648 <mbedtls_internal_aes_decrypt+0x3e0>)
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a304:	68b3      	ldr	r3, [r6, #8]
 800a306:	9202      	str	r2, [sp, #8]
 800a308:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 800a30c:	4acf      	ldr	r2, [pc, #828]	; (800a64c <mbedtls_internal_aes_decrypt+0x3e4>)
 800a30e:	9200      	str	r2, [sp, #0]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a310:	2800      	cmp	r0, #0

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a312:	ea85 0303 	eor.w	r3, r5, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a316:	ea8b 0b01 	eor.w	fp, fp, r1
 800a31a:	f8df 833c 	ldr.w	r8, [pc, #828]	; 800a658 <mbedtls_internal_aes_decrypt+0x3f0>

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a31e:	f340 80f5 	ble.w	800a50c <mbedtls_internal_aes_decrypt+0x2a4>
 800a322:	f106 0c30 	add.w	ip, r6, #48	; 0x30
 800a326:	9403      	str	r4, [sp, #12]
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	f8cd 8004 	str.w	r8, [sp, #4]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a32e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800a338:	f85c 4c20 	ldr.w	r4, [ip, #-32]
 800a33c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800a340:	fa5f f58a 	uxtb.w	r5, sl
 800a344:	fa5f f08b 	uxtb.w	r0, fp
 800a348:	fa5f f188 	uxtb.w	r1, r8
 800a34c:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
 800a350:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800a354:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800a358:	9b00      	ldr	r3, [sp, #0]
 800a35a:	f85c 1c1c 	ldr.w	r1, [ip, #-28]
 800a35e:	ea4f 621a 	mov.w	r2, sl, lsr #24
 800a362:	4066      	eors	r6, r4
 800a364:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
 800a368:	f85c 2c14 	ldr.w	r2, [ip, #-20]
 800a36c:	4644      	mov	r4, r8
 800a36e:	4079      	eors	r1, r7
 800a370:	406a      	eors	r2, r5
 800a372:	0e27      	lsrs	r7, r4, #24
 800a374:	ea4f 651b 	mov.w	r5, fp, lsr #24
 800a378:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800a37c:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
 800a380:	f85c 5c18 	ldr.w	r5, [ip, #-24]
 800a384:	461c      	mov	r4, r3
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	4068      	eors	r0, r5
 800a38a:	0e1d      	lsrs	r5, r3, #24
 800a38c:	ea86 060e 	eor.w	r6, r6, lr
 800a390:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800a394:	9b01      	ldr	r3, [sp, #4]
 800a396:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 800a39a:	406a      	eors	r2, r5
 800a39c:	9d04      	ldr	r5, [sp, #16]
 800a39e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	4079      	eors	r1, r7
 800a3a6:	9106      	str	r1, [sp, #24]
 800a3a8:	ea80 0008 	eor.w	r0, r0, r8
 800a3ac:	9901      	ldr	r1, [sp, #4]
 800a3ae:	f3c5 2807 	ubfx	r8, r5, #8, #8
 800a3b2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800a3b6:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800a3ba:	f3c3 4407 	ubfx	r4, r3, #16, #8
 800a3be:	f851 3028 	ldr.w	r3, [r1, r8, lsl #2]
 800a3c2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800a3c6:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a3ca:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800a3ce:	f3ca 2807 	ubfx	r8, sl, #8, #8
 800a3d2:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 800a3d6:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800a3da:	9906      	ldr	r1, [sp, #24]
 800a3dc:	f859 b02b 	ldr.w	fp, [r9, fp, lsl #2]
 800a3e0:	ea86 060e 	eor.w	r6, r6, lr
 800a3e4:	4075      	eors	r5, r6
 800a3e6:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 800a3ea:	4079      	eors	r1, r7
 800a3ec:	405a      	eors	r2, r3
 800a3ee:	9e02      	ldr	r6, [sp, #8]
 800a3f0:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a3f4:	9503      	str	r5, [sp, #12]
 800a3f6:	b2eb      	uxtb	r3, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a3f8:	ea81 010b 	eor.w	r1, r1, fp
 800a3fc:	ea80 0008 	eor.w	r0, r0, r8
 800a400:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a404:	9e00      	ldr	r6, [sp, #0]
 800a406:	4044      	eors	r4, r0
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a408:	0e08      	lsrs	r0, r1, #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a40a:	ea82 020a 	eor.w	r2, r2, sl
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a40e:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 800a412:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800a416:	9e01      	ldr	r6, [sp, #4]
 800a418:	f3c4 4807 	ubfx	r8, r4, #16, #8
 800a41c:	46b3      	mov	fp, r6
 800a41e:	f856 602a 	ldr.w	r6, [r6, sl, lsl #2]
 800a422:	9606      	str	r6, [sp, #24]
 800a424:	f859 6028 	ldr.w	r6, [r9, r8, lsl #2]
 800a428:	9607      	str	r6, [sp, #28]
 800a42a:	b2cf      	uxtb	r7, r1
 800a42c:	9e02      	ldr	r6, [sp, #8]
 800a42e:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800a432:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800a436:	9e00      	ldr	r6, [sp, #0]
 800a438:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800a43c:	f856 a02e 	ldr.w	sl, [r6, lr, lsl #2]
 800a440:	f85b 8025 	ldr.w	r8, [fp, r5, lsl #2]
 800a444:	f85c 5c10 	ldr.w	r5, [ip, #-16]
 800a448:	9e02      	ldr	r6, [sp, #8]
 800a44a:	4058      	eors	r0, r3
 800a44c:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800a450:	ea87 0a0a 	eor.w	sl, r7, sl
 800a454:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
 800a458:	9708      	str	r7, [sp, #32]
 800a45a:	ea80 0305 	eor.w	r3, r0, r5
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	9800      	ldr	r0, [sp, #0]
 800a462:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
 800a466:	b2e3      	uxtb	r3, r4
 800a468:	0e15      	lsrs	r5, r2, #24
 800a46a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a46e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 800a472:	f85c 0c08 	ldr.w	r0, [ip, #-8]
 800a476:	ea83 0e05 	eor.w	lr, r3, r5
 800a47a:	ea8e 0e00 	eor.w	lr, lr, r0
 800a47e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a482:	9803      	ldr	r0, [sp, #12]
 800a484:	f85b 5023 	ldr.w	r5, [fp, r3, lsl #2]
 800a488:	b2d2      	uxtb	r2, r2
 800a48a:	0e03      	lsrs	r3, r0, #24
 800a48c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a490:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a494:	9800      	ldr	r0, [sp, #0]
 800a496:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800a49a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a49e:	9804      	ldr	r0, [sp, #16]
 800a4a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a4a4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a4a8:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
 800a4ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a4b0:	ea82 0b03 	eor.w	fp, r2, r3
 800a4b4:	9b06      	ldr	r3, [sp, #24]
 800a4b6:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800a4ba:	4058      	eors	r0, r3
 800a4bc:	9b07      	ldr	r3, [sp, #28]
 800a4be:	4043      	eors	r3, r0
 800a4c0:	ea8a 0707 	eor.w	r7, sl, r7
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	9b08      	ldr	r3, [sp, #32]
 800a4c8:	ea87 0708 	eor.w	r7, r7, r8
 800a4cc:	ea8e 0e05 	eor.w	lr, lr, r5
 800a4d0:	ea87 0a03 	eor.w	sl, r7, r3
 800a4d4:	ea8e 0306 	eor.w	r3, lr, r6
 800a4d8:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a4da:	9b05      	ldr	r3, [sp, #20]
 800a4dc:	ea8b 0b02 	eor.w	fp, fp, r2
 800a4e0:	ea8b 0b04 	eor.w	fp, fp, r4
 800a4e4:	3b01      	subs	r3, #1
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a4e6:	ea8b 0b01 	eor.w	fp, fp, r1
 800a4ea:	f10c 0c20 	add.w	ip, ip, #32
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	f47f af1d 	bne.w	800a32e <mbedtls_internal_aes_decrypt+0xc6>
 800a4f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4f8:	9c03      	ldr	r4, [sp, #12]
 800a4fa:	9b04      	ldr	r3, [sp, #16]
 800a4fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a500:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 800a504:	3a01      	subs	r2, #1
 800a506:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 800a50a:	9209      	str	r2, [sp, #36]	; 0x24
 800a50c:	9a02      	ldr	r2, [sp, #8]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a50e:	b2e6      	uxtb	r6, r4
 800a510:	ea4f 611a 	mov.w	r1, sl, lsr #24
 800a514:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 800a518:	9a00      	ldr	r2, [sp, #0]
 800a51a:	fa5f f78a 	uxtb.w	r7, sl
 800a51e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a522:	9a02      	ldr	r2, [sp, #8]
 800a524:	fa5f f08b 	uxtb.w	r0, fp
 800a528:	f852 e027 	ldr.w	lr, [r2, r7, lsl #2]
 800a52c:	9a00      	ldr	r2, [sp, #0]
 800a52e:	9f02      	ldr	r7, [sp, #8]
 800a530:	0e1d      	lsrs	r5, r3, #24
 800a532:	ea4f 6c1b 	mov.w	ip, fp, lsr #24
 800a536:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 800a53a:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
 800a53e:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
 800a542:	4610      	mov	r0, r2
 800a544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a546:	6812      	ldr	r2, [r2, #0]
 800a548:	9200      	str	r2, [sp, #0]
 800a54a:	404e      	eors	r6, r1
 800a54c:	0e22      	lsrs	r2, r4, #24
 800a54e:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800a552:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a556:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800a55a:	9802      	ldr	r0, [sp, #8]
 800a55c:	9101      	str	r1, [sp, #4]
 800a55e:	b2d9      	uxtb	r1, r3
 800a560:	4057      	eors	r7, r2
 800a562:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800a566:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800a56a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800a56e:	9003      	str	r0, [sp, #12]
 800a570:	ea8e 0505 	eor.w	r5, lr, r5
 800a574:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800a578:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a57a:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 800a57e:	6860      	ldr	r0, [r4, #4]
 800a580:	9002      	str	r0, [sp, #8]
 800a582:	ea81 010c 	eor.w	r1, r1, ip
 800a586:	9800      	ldr	r0, [sp, #0]
 800a588:	9104      	str	r1, [sp, #16]
 800a58a:	f3ca 2e07 	ubfx	lr, sl, #8, #8
 800a58e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a592:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 800a596:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a59a:	68e4      	ldr	r4, [r4, #12]
 800a59c:	f859 b02b 	ldr.w	fp, [r9, fp, lsl #2]
 800a5a0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800a5a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a5a8:	9405      	str	r4, [sp, #20]
 800a5aa:	4046      	eors	r6, r0
 800a5ac:	9802      	ldr	r0, [sp, #8]
 800a5ae:	f858 c02e 	ldr.w	ip, [r8, lr, lsl #2]
 800a5b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a5b4:	4045      	eors	r5, r0
 800a5b6:	68a0      	ldr	r0, [r4, #8]
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	9805      	ldr	r0, [sp, #20]
 800a5bc:	4047      	eors	r7, r0
 800a5be:	9804      	ldr	r0, [sp, #16]
 800a5c0:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 800a5c4:	4686      	mov	lr, r0
 800a5c6:	9801      	ldr	r0, [sp, #4]
 800a5c8:	f859 902a 	ldr.w	r9, [r9, sl, lsl #2]
 800a5cc:	4046      	eors	r6, r0
 800a5ce:	9803      	ldr	r0, [sp, #12]
 800a5d0:	404f      	eors	r7, r1
 800a5d2:	ea8e 0804 	eor.w	r8, lr, r4
 800a5d6:	4045      	eors	r5, r0
 800a5d8:	ea87 0409 	eor.w	r4, r7, r9
 800a5dc:	ea86 0103 	eor.w	r1, r6, r3
 800a5e0:	ea85 030b 	eor.w	r3, r5, fp
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800a5e4:	b2e6      	uxtb	r6, r4
 800a5e6:	9605      	str	r6, [sp, #20]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a5e8:	f3c4 2907 	ubfx	r9, r4, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800a5ec:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 800a5f0:	4e17      	ldr	r6, [pc, #92]	; (800a650 <mbedtls_internal_aes_decrypt+0x3e8>)
 800a5f2:	ea88 080c 	eor.w	r8, r8, ip
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800a5f6:	ea88 0202 	eor.w	r2, r8, r2

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800a5fa:	f816 a00a 	ldrb.w	sl, [r6, sl]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a5fe:	f816 6009 	ldrb.w	r6, [r6, r9]
 800a602:	9600      	str	r6, [sp, #0]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a604:	f3c2 4807 	ubfx	r8, r2, #16, #8
 800a608:	4e11      	ldr	r6, [pc, #68]	; (800a650 <mbedtls_internal_aes_decrypt+0x3e8>)
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a60a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800a60e:	9003      	str	r0, [sp, #12]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a610:	f816 6008 	ldrb.w	r6, [r6, r8]
 800a614:	9601      	str	r6, [sp, #4]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a616:	0e20      	lsrs	r0, r4, #24
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800a618:	fa5f fb81 	uxtb.w	fp, r1
 800a61c:	4c0c      	ldr	r4, [pc, #48]	; (800a650 <mbedtls_internal_aes_decrypt+0x3e8>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800a61e:	4e0c      	ldr	r6, [pc, #48]	; (800a650 <mbedtls_internal_aes_decrypt+0x3e8>)
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800a620:	f814 b00b 	ldrb.w	fp, [r4, fp]
 800a624:	9c09      	ldr	r4, [sp, #36]	; 0x24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a626:	f3c1 2707 	ubfx	r7, r1, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800a62a:	b2d5      	uxtb	r5, r2
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a62c:	5df7      	ldrb	r7, [r6, r7]
 800a62e:	9702      	str	r7, [sp, #8]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800a630:	fa5f fc83 	uxtb.w	ip, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a634:	9f03      	ldr	r7, [sp, #12]
 800a636:	6924      	ldr	r4, [r4, #16]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800a638:	f816 c00c 	ldrb.w	ip, [r6, ip]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a63c:	5df7      	ldrb	r7, [r6, r7]
 800a63e:	9703      	str	r7, [sp, #12]
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800a640:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800a644:	e00a      	b.n	800a65c <mbedtls_internal_aes_decrypt+0x3f4>
 800a646:	bf00      	nop
 800a648:	1ffeffd0 	.word	0x1ffeffd0
 800a64c:	1fff0cd0 	.word	0x1fff0cd0
 800a650:	1fff0bd0 	.word	0x1fff0bd0
 800a654:	1fff07d0 	.word	0x1fff07d0
 800a658:	1fff03d0 	.word	0x1fff03d0
 800a65c:	ea8b 0404 	eor.w	r4, fp, r4
 800a660:	f816 e00e 	ldrb.w	lr, [r6, lr]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800a664:	5d76      	ldrb	r6, [r6, r5]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a666:	4d3b      	ldr	r5, [pc, #236]	; (800a754 <mbedtls_internal_aes_decrypt+0x4ec>)
 800a668:	ea84 6a0a 	eor.w	sl, r4, sl, lsl #24
 800a66c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a66e:	5c2d      	ldrb	r5, [r5, r0]
 800a670:	9504      	str	r5, [sp, #16]
 800a672:	6965      	ldr	r5, [r4, #20]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800a674:	4837      	ldr	r0, [pc, #220]	; (800a754 <mbedtls_internal_aes_decrypt+0x4ec>)
 800a676:	69a4      	ldr	r4, [r4, #24]
 800a678:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800a67c:	ea8c 0505 	eor.w	r5, ip, r5
 800a680:	f810 9007 	ldrb.w	r9, [r0, r7]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800a684:	9805      	ldr	r0, [sp, #20]
 800a686:	ea85 6e0e 	eor.w	lr, r5, lr, lsl #24
 800a68a:	4d32      	ldr	r5, [pc, #200]	; (800a754 <mbedtls_internal_aes_decrypt+0x4ec>)
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a68c:	ea4f 6811 	mov.w	r8, r1, lsr #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800a690:	5c2d      	ldrb	r5, [r5, r0]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a692:	4830      	ldr	r0, [pc, #192]	; (800a754 <mbedtls_internal_aes_decrypt+0x4ec>)
 800a694:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a696:	f810 c008 	ldrb.w	ip, [r0, r8]
 800a69a:	69ff      	ldr	r7, [r7, #28]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a69c:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a6a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a6a4:	f810 8003 	ldrb.w	r8, [r0, r3]
 800a6a8:	9b00      	ldr	r3, [sp, #0]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a6aa:	f810 b002 	ldrb.w	fp, [r0, r2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 800a6ae:	9a01      	ldr	r2, [sp, #4]
 800a6b0:	ea8a 2a03 	eor.w	sl, sl, r3, lsl #8
 800a6b4:	406f      	eors	r7, r5
 800a6b6:	9b02      	ldr	r3, [sp, #8]
 800a6b8:	9d04      	ldr	r5, [sp, #16]
 800a6ba:	ea87 670c 	eor.w	r7, r7, ip, lsl #24
 800a6be:	ea8e 2e03 	eor.w	lr, lr, r3, lsl #8
 800a6c2:	ea87 230b 	eor.w	r3, r7, fp, lsl #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 800a6c6:	ea83 4308 	eor.w	r3, r3, r8, lsl #16
 800a6ca:	4066      	eors	r6, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800a6cc:	f3c1 4107 	ubfx	r1, r1, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a6d0:	0a1c      	lsrs	r4, r3, #8
 800a6d2:	9400      	str	r4, [sp, #0]
 800a6d4:	0c1c      	lsrs	r4, r3, #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800a6d6:	5c41      	ldrb	r1, [r0, r1]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a6d8:	9401      	str	r4, [sp, #4]
 800a6da:	ea86 6605 	eor.w	r6, r6, r5, lsl #24
 800a6de:	0e1c      	lsrs	r4, r3, #24
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 800a6e0:	9f03      	ldr	r7, [sp, #12]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a6e2:	9402      	str	r4, [sp, #8]
 800a6e4:	ea86 2609 	eor.w	r6, r6, r9, lsl #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a6e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
 800a6ea:	ea86 4101 	eor.w	r1, r6, r1, lsl #16
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 800a6ee:	ea8e 4007 	eor.w	r0, lr, r7, lsl #16
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 800a6f2:	ea8a 4202 	eor.w	r2, sl, r2, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 800a6f6:	0a0f      	lsrs	r7, r1, #8
 800a6f8:	0c0e      	lsrs	r6, r1, #16
 800a6fa:	0e0d      	lsrs	r5, r1, #24
 800a6fc:	7221      	strb	r1, [r4, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800a6fe:	f89d 1000 	ldrb.w	r1, [sp]
 800a702:	7361      	strb	r1, [r4, #13]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 800a704:	ea4f 2810 	mov.w	r8, r0, lsr #8
 800a708:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800a70c:	ea4f 6e10 	mov.w	lr, r0, lsr #24
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a710:	f89d 1004 	ldrb.w	r1, [sp, #4]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 800a714:	7120      	strb	r0, [r4, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a716:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 800a71a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a71e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 800a722:	7022      	strb	r2, [r4, #0]
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800a724:	7323      	strb	r3, [r4, #12]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800a726:	f884 b001 	strb.w	fp, [r4, #1]
 800a72a:	f884 a002 	strb.w	sl, [r4, #2]
 800a72e:	f884 9003 	strb.w	r9, [r4, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800a732:	f884 8005 	strb.w	r8, [r4, #5]
 800a736:	f884 c006 	strb.w	ip, [r4, #6]
 800a73a:	f884 e007 	strb.w	lr, [r4, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800a73e:	7267      	strb	r7, [r4, #9]
 800a740:	72a6      	strb	r6, [r4, #10]
 800a742:	72e5      	strb	r5, [r4, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800a744:	73a1      	strb	r1, [r4, #14]
 800a746:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800a74a:	73e1      	strb	r1, [r4, #15]

    return( 0 );
}
 800a74c:	2000      	movs	r0, #0
 800a74e:	b00d      	add	sp, #52	; 0x34
 800a750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a754:	1fff0bd0 	.word	0x1fff0bd0

0800a758 <mbedtls_aes_crypt_ecb>:
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800a758:	2901      	cmp	r1, #1
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800a75a:	4611      	mov	r1, r2
 800a75c:	461a      	mov	r2, r3
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800a75e:	d001      	beq.n	800a764 <mbedtls_aes_crypt_ecb+0xc>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800a760:	f7ff bd82 	b.w	800a268 <mbedtls_internal_aes_decrypt>
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800a764:	f7ff bafa 	b.w	8009d5c <mbedtls_internal_aes_encrypt>

0800a768 <ccm_auth_crypt.constprop.0>:
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	b099      	sub	sp, #100	; 0x64
 800a76e:	9305      	str	r3, [sp, #20]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800a770:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800a772:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800a774:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 800a778:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800a77a:	9002      	str	r0, [sp, #8]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800a77c:	2b02      	cmp	r3, #2
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800a77e:	9204      	str	r2, [sp, #16]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800a780:	f000 81c2 	beq.w	800ab08 <ccm_auth_crypt.constprop.0+0x3a0>
 800a784:	2b10      	cmp	r3, #16
 800a786:	f200 81bf 	bhi.w	800ab08 <ccm_auth_crypt.constprop.0+0x3a0>
 800a78a:	f013 0901 	ands.w	r9, r3, #1
 800a78e:	f040 81bb 	bne.w	800ab08 <ccm_auth_crypt.constprop.0+0x3a0>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
 800a792:	9d05      	ldr	r5, [sp, #20]
 800a794:	1feb      	subs	r3, r5, #7
 800a796:	2b06      	cmp	r3, #6
 800a798:	f200 81b6 	bhi.w	800ab08 <ccm_auth_crypt.constprop.0+0x3a0>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
 800a79c:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 800a7a0:	f200 81b2 	bhi.w	800ab08 <ccm_auth_crypt.constprop.0+0x3a0>
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a7a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800a7a6:	2c00      	cmp	r4, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a7a8:	f1a3 0202 	sub.w	r2, r3, #2
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800a7ac:	b2ef      	uxtb	r7, r5
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800a7ae:	bf14      	ite	ne
 800a7b0:	2340      	movne	r3, #64	; 0x40
 800a7b2:	2300      	moveq	r3, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800a7b4:	f1c7 000e 	rsb	r0, r7, #14
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a7b8:	0852      	lsrs	r2, r2, #1
    b[0] |= q - 1;
 800a7ba:	9007      	str	r0, [sp, #28]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800a7bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    b[0] |= q - 1;
 800a7c0:	b2c0      	uxtb	r0, r0
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800a7c2:	f1c7 070f 	rsb	r7, r7, #15
 800a7c6:	4688      	mov	r8, r1
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800a7c8:	4303      	orrs	r3, r0
 800a7ca:	9006      	str	r0, [sp, #24]

    memcpy( b + 1, iv, iv_len );
 800a7cc:	9904      	ldr	r1, [sp, #16]
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800a7ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

    memcpy( b + 1, iv, iv_len );
 800a7d2:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800a7d6:	462a      	mov	r2, r5
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800a7d8:	b2ff      	uxtb	r7, r7
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );
 800a7da:	f003 f86f 	bl	800d8bc <memcpy>

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a7de:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800a7e2:	2f02      	cmp	r7, #2
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a7e4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 800a7e8:	f88d 803f 	strb.w	r8, [sp, #63]	; 0x3f
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a7ec:	ea4f 4318 	mov.w	r3, r8, lsr #16
 800a7f0:	f000 8187 	beq.w	800ab02 <ccm_auth_crypt.constprop.0+0x39a>
 800a7f4:	2f03      	cmp	r7, #3
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a7f6:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a7fa:	ea4f 6318 	mov.w	r3, r8, lsr #24
 800a7fe:	f000 8180 	beq.w	800ab02 <ccm_auth_crypt.constprop.0+0x39a>
 800a802:	2f04      	cmp	r7, #4
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a804:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a808:	d00d      	beq.n	800a826 <ccm_auth_crypt.constprop.0+0xbe>
 800a80a:	2f05      	cmp	r7, #5
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a80c:	f88d 903b 	strb.w	r9, [sp, #59]	; 0x3b
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a810:	d009      	beq.n	800a826 <ccm_auth_crypt.constprop.0+0xbe>
 800a812:	2f06      	cmp	r7, #6
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a814:	f88d 903a 	strb.w	r9, [sp, #58]	; 0x3a
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a818:	d005      	beq.n	800a826 <ccm_auth_crypt.constprop.0+0xbe>
 800a81a:	2f08      	cmp	r7, #8
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a81c:	f88d 9039 	strb.w	r9, [sp, #57]	; 0x39
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800a820:	d101      	bne.n	800a826 <ccm_auth_crypt.constprop.0+0xbe>
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800a822:	f88d 9038 	strb.w	r9, [sp, #56]	; 0x38
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
    UPDATE_CBC_MAC;
 800a826:	aa0b      	add	r2, sp, #44	; 0x2c
 800a828:	9200      	str	r2, [sp, #0]
 800a82a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a82c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a82e:	9211      	str	r2, [sp, #68]	; 0x44
 800a830:	a910      	add	r1, sp, #64	; 0x40
 800a832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a834:	9010      	str	r0, [sp, #64]	; 0x40
 800a836:	460b      	mov	r3, r1
 800a838:	9212      	str	r2, [sp, #72]	; 0x48
 800a83a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a83c:	9802      	ldr	r0, [sp, #8]
 800a83e:	9513      	str	r5, [sp, #76]	; 0x4c
 800a840:	2210      	movs	r2, #16
 800a842:	f000 fddb 	bl	800b3fc <mbedtls_cipher_update>
 800a846:	4603      	mov	r3, r0
 800a848:	2800      	cmp	r0, #0
 800a84a:	f040 8157 	bne.w	800aafc <ccm_auth_crypt.constprop.0+0x394>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
 800a84e:	2c00      	cmp	r4, #0
 800a850:	f040 815f 	bne.w	800ab12 <ccm_auth_crypt.constprop.0+0x3aa>
 800a854:	f10d 0930 	add.w	r9, sp, #48	; 0x30
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a858:	ab18      	add	r3, sp, #96	; 0x60
 800a85a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    memcpy( ctr + 1, iv, iv_len );
 800a85e:	9d05      	ldr	r5, [sp, #20]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a860:	f803 2d10 	strb.w	r2, [r3, #-16]!
    memcpy( ctr + 1, iv, iv_len );
 800a864:	9904      	ldr	r1, [sp, #16]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a866:	9304      	str	r3, [sp, #16]
    memcpy( ctr + 1, iv, iv_len );
 800a868:	462a      	mov	r2, r5
 800a86a:	f10d 0051 	add.w	r0, sp, #81	; 0x51
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800a86e:	461c      	mov	r4, r3
    memcpy( ctr + 1, iv, iv_len );
 800a870:	f003 f824 	bl	800d8bc <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 800a874:	4628      	mov	r0, r5
 800a876:	3001      	adds	r0, #1
 800a878:	4420      	add	r0, r4
 800a87a:	2100      	movs	r1, #0
 800a87c:	463a      	mov	r2, r7
 800a87e:	f003 f828 	bl	800d8d2 <memset>
    ctr[15] = 1;
 800a882:	2301      	movs	r3, #1
 800a884:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	f000 810a 	beq.w	800aaa4 <ccm_auth_crypt.constprop.0+0x33c>
 800a890:	ab0d      	add	r3, sp, #52	; 0x34
 800a892:	9303      	str	r3, [sp, #12]
 800a894:	ab0e      	add	r3, sp, #56	; 0x38
 800a896:	9305      	str	r3, [sp, #20]
 800a898:	ab0f      	add	r3, sp, #60	; 0x3c
 800a89a:	9306      	str	r3, [sp, #24]
    {
        size_t use_len = len_left > 16 ? 16 : len_left;

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
 800a89c:	f04f 0a00 	mov.w	sl, #0
 800a8a0:	465d      	mov	r5, fp
 800a8a2:	9b03      	ldr	r3, [sp, #12]
 800a8a4:	f8c9 a000 	str.w	sl, [r9]
 800a8a8:	f8c3 a000 	str.w	sl, [r3]
 800a8ac:	9b05      	ldr	r3, [sp, #20]
    src = input;
    dst = output;

    while( len_left > 0 )
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 800a8ae:	4644      	mov	r4, r8
 800a8b0:	2c10      	cmp	r4, #16

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
 800a8b2:	f8c3 a000 	str.w	sl, [r3]
 800a8b6:	9b06      	ldr	r3, [sp, #24]
    src = input;
    dst = output;

    while( len_left > 0 )
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 800a8b8:	bf28      	it	cs
 800a8ba:	2410      	movcs	r4, #16

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
            memcpy( b, src, use_len );
 800a8bc:	4622      	mov	r2, r4
 800a8be:	4629      	mov	r1, r5
    {
        size_t use_len = len_left > 16 ? 16 : len_left;

        if( mode == CCM_ENCRYPT )
        {
            memset( b, 0, 16 );
 800a8c0:	f8c3 a000 	str.w	sl, [r3]
            memcpy( b, src, use_len );
 800a8c4:	4648      	mov	r0, r9
 800a8c6:	f002 fff9 	bl	800d8bc <memcpy>
            UPDATE_CBC_MAC;
 800a8ca:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800a8ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a8d2:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
 800a8d6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800a8da:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800a8de:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a8e2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800a8e6:	ea8e 0303 	eor.w	r3, lr, r3
 800a8ea:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800a8ee:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800a8f2:	ea8b 0101 	eor.w	r1, fp, r1
 800a8f6:	ea8c 0202 	eor.w	r2, ip, r2
 800a8fa:	ea80 000e 	eor.w	r0, r0, lr
 800a8fe:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800a902:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800a906:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800a90a:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a90e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800a912:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800a916:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800a91a:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800a91e:	ea8c 0c01 	eor.w	ip, ip, r1
 800a922:	ea8e 0e02 	eor.w	lr, lr, r2
 800a926:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800a92a:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800a92e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800a932:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800a936:	4051      	eors	r1, r2
 800a938:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800a93c:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800a940:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800a944:	405a      	eors	r2, r3
 800a946:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800a94a:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800a94e:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800a952:	4058      	eors	r0, r3
 800a954:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800a958:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800a95c:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800a960:	ea8c 0303 	eor.w	r3, ip, r3
 800a964:	ea8e 0e01 	eor.w	lr, lr, r1
 800a968:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800a96c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800a970:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800a974:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800a978:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800a97c:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800a980:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800a984:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800a988:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800a98c:	ab0b      	add	r3, sp, #44	; 0x2c
 800a98e:	ea8c 0000 	eor.w	r0, ip, r0
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800a998:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800a99c:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800a9a0:	ea81 010b 	eor.w	r1, r1, fp
 800a9a4:	ea8e 0202 	eor.w	r2, lr, r2
 800a9a8:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800a9ac:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800a9b0:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a9b4:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800a9b8:	ea8c 0303 	eor.w	r3, ip, r3
 800a9bc:	a910      	add	r1, sp, #64	; 0x40
 800a9be:	ea8e 0e00 	eor.w	lr, lr, r0
 800a9c2:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800a9c6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800a9ca:	4658      	mov	r0, fp
 800a9cc:	2210      	movs	r2, #16
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800a9d4:	f000 fd12 	bl	800b3fc <mbedtls_cipher_update>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	f040 808f 	bne.w	800aafc <ccm_auth_crypt.constprop.0+0x394>
        }

        CTR_CRYPT( dst, src, use_len );
 800a9de:	ab0b      	add	r3, sp, #44	; 0x2c
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	4658      	mov	r0, fp
 800a9e4:	9904      	ldr	r1, [sp, #16]
 800a9e6:	2210      	movs	r2, #16
 800a9e8:	464b      	mov	r3, r9
 800a9ea:	f000 fd07 	bl	800b3fc <mbedtls_cipher_update>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	f040 8084 	bne.w	800aafc <ccm_auth_crypt.constprop.0+0x394>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	aa18      	add	r2, sp, #96	; 0x60
 800a9f8:	18d1      	adds	r1, r2, r3
 800a9fa:	5c2a      	ldrb	r2, [r5, r0]
 800a9fc:	f811 1c30 	ldrb.w	r1, [r1, #-48]
 800aa00:	3301      	adds	r3, #1
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	404a      	eors	r2, r1
 800aa06:	429c      	cmp	r4, r3
 800aa08:	5432      	strb	r2, [r6, r0]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	d8f3      	bhi.n	800a9f6 <ccm_auth_crypt.constprop.0+0x28e>
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800aa0e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800aa12:	3301      	adds	r3, #1
 800aa14:	b2db      	uxtb	r3, r3
            memset( b, 0, 16 );
            memcpy( b, dst, use_len );
            UPDATE_CBC_MAC;
        }

        dst += use_len;
 800aa16:	4426      	add	r6, r4
        src += use_len;
 800aa18:	4425      	add	r5, r4
        len_left -= use_len;
 800aa1a:	ebc4 0808 	rsb	r8, r4, r8
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800aa1e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d13a      	bne.n	800aa9c <ccm_auth_crypt.constprop.0+0x334>
 800aa26:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 800aa32:	bb9b      	cbnz	r3, 800aa9c <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800aa34:	2f02      	cmp	r7, #2
 800aa36:	d031      	beq.n	800aa9c <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800aa38:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800aa44:	bb53      	cbnz	r3, 800aa9c <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800aa46:	2f03      	cmp	r7, #3
 800aa48:	d028      	beq.n	800aa9c <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800aa4a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800aa4e:	3301      	adds	r3, #1
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800aa56:	bb0b      	cbnz	r3, 800aa9c <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800aa58:	2f04      	cmp	r7, #4
 800aa5a:	d01f      	beq.n	800aa9c <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800aa5c:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800aa60:	3301      	adds	r3, #1
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800aa68:	b9c3      	cbnz	r3, 800aa9c <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800aa6a:	2f05      	cmp	r7, #5
 800aa6c:	d016      	beq.n	800aa9c <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800aa6e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800aa72:	3301      	adds	r3, #1
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 800aa7a:	b97b      	cbnz	r3, 800aa9c <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800aa7c:	2f06      	cmp	r7, #6
 800aa7e:	d00d      	beq.n	800aa9c <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800aa80:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800aa84:	3301      	adds	r3, #1
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 800aa8c:	b933      	cbnz	r3, 800aa9c <ccm_auth_crypt.constprop.0+0x334>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800aa8e:	2f08      	cmp	r7, #8
 800aa90:	d104      	bne.n	800aa9c <ccm_auth_crypt.constprop.0+0x334>
            if( ++ctr[15-i] != 0 )
 800aa92:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800aa96:	3301      	adds	r3, #1
 800aa98:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800aa9c:	f1b8 0f00 	cmp.w	r8, #0
 800aaa0:	f47f aeff 	bne.w	800a8a2 <ccm_auth_crypt.constprop.0+0x13a>

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
 800aaa4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800aaa8:	9c04      	ldr	r4, [sp, #16]
 800aaaa:	f1c2 000f 	rsb	r0, r2, #15
 800aaae:	2100      	movs	r1, #0
 800aab0:	3201      	adds	r2, #1
 800aab2:	4420      	add	r0, r4
 800aab4:	f002 ff0d 	bl	800d8d2 <memset>

    CTR_CRYPT( y, y, 16 );
 800aab8:	ab0b      	add	r3, sp, #44	; 0x2c
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	9802      	ldr	r0, [sp, #8]
 800aabe:	4621      	mov	r1, r4
 800aac0:	464b      	mov	r3, r9
 800aac2:	2210      	movs	r2, #16
 800aac4:	f000 fc9a 	bl	800b3fc <mbedtls_cipher_update>
 800aac8:	4680      	mov	r8, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f040 8110 	bne.w	800acf0 <ccm_auth_crypt.constprop.0+0x588>
 800aad0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800aad2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aad4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800aad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aad8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800aada:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    memcpy( tag, y, tag_len );
 800aadc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800aade:	4046      	eors	r6, r0
 800aae0:	405d      	eors	r5, r3
 800aae2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aae6:	9611      	str	r6, [sp, #68]	; 0x44
 800aae8:	4043      	eors	r3, r0
    memcpy( tag, y, tag_len );
 800aaea:	a910      	add	r1, sp, #64	; 0x40
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800aaec:	407c      	eors	r4, r7
    memcpy( tag, y, tag_len );
 800aaee:	9826      	ldr	r0, [sp, #152]	; 0x98
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800aaf0:	9410      	str	r4, [sp, #64]	; 0x40
 800aaf2:	9512      	str	r5, [sp, #72]	; 0x48
 800aaf4:	9313      	str	r3, [sp, #76]	; 0x4c
    memcpy( tag, y, tag_len );
 800aaf6:	f002 fee1 	bl	800d8bc <memcpy>

    return( 0 );
 800aafa:	4640      	mov	r0, r8
}
 800aafc:	b019      	add	sp, #100	; 0x64
 800aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
        b[15-i] = (unsigned char)( len_left & 0xFF );

    if( len_left > 0 )
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f43f ae8f 	beq.w	800a826 <ccm_auth_crypt.constprop.0+0xbe>
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800ab08:	f06f 000c 	mvn.w	r0, #12

    CTR_CRYPT( y, y, 16 );
    memcpy( tag, y, tag_len );

    return( 0 );
}
 800ab0c:	b019      	add	sp, #100	; 0x64
 800ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 800ab12:	2c0e      	cmp	r4, #14
 800ab14:	46a1      	mov	r9, r4
 800ab16:	bf28      	it	cs
 800ab18:	f04f 090e 	movcs.w	r9, #14
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800ab1c:	ea4f 2e14 	mov.w	lr, r4, lsr #8
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800ab20:	464a      	mov	r2, r9
 800ab22:	9922      	ldr	r1, [sp, #136]	; 0x88
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800ab24:	930c      	str	r3, [sp, #48]	; 0x30
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800ab26:	f10d 0032 	add.w	r0, sp, #50	; 0x32
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800ab2a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab2e:	930f      	str	r3, [sp, #60]	; 0x3c
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800ab30:	f88d e030 	strb.w	lr, [sp, #48]	; 0x30
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 800ab34:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800ab38:	f002 fec0 	bl	800d8bc <memcpy>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;
 800ab3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab40:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab44:	4043      	eors	r3, r0
 800ab46:	ad0b      	add	r5, sp, #44	; 0x2c
 800ab48:	404a      	eors	r2, r1
 800ab4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ab4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab4e:	9500      	str	r5, [sp, #0]
 800ab50:	9310      	str	r3, [sp, #64]	; 0x40
 800ab52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ab54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab56:	9211      	str	r2, [sp, #68]	; 0x44
 800ab58:	ea80 0e01 	eor.w	lr, r0, r1
 800ab5c:	406b      	eors	r3, r5
 800ab5e:	a910      	add	r1, sp, #64	; 0x40
 800ab60:	9312      	str	r3, [sp, #72]	; 0x48
 800ab62:	9802      	ldr	r0, [sp, #8]
 800ab64:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 800ab68:	2210      	movs	r2, #16
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	f000 fc46 	bl	800b3fc <mbedtls_cipher_update>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d1c3      	bne.n	800aafc <ccm_auth_crypt.constprop.0+0x394>

        while( len_left > 0 )
 800ab74:	ebb4 0309 	subs.w	r3, r4, r9
 800ab78:	461d      	mov	r5, r3
 800ab7a:	f43f ae6b 	beq.w	800a854 <ccm_auth_crypt.constprop.0+0xec>
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
        src += use_len;
 800ab7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab80:	9708      	str	r7, [sp, #32]
 800ab82:	aa0d      	add	r2, sp, #52	; 0x34
 800ab84:	444b      	add	r3, r9
 800ab86:	9203      	str	r2, [sp, #12]
 800ab88:	a90f      	add	r1, sp, #60	; 0x3c
 800ab8a:	aa0e      	add	r2, sp, #56	; 0x38
 800ab8c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800ab90:	9625      	str	r6, [sp, #148]	; 0x94

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800ab92:	4604      	mov	r4, r0
 800ab94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ab98:	461f      	mov	r7, r3
 800ab9a:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 800ab9e:	462e      	mov	r6, r5
 800aba0:	4690      	mov	r8, r2
 800aba2:	468a      	mov	sl, r1
 800aba4:	e002      	b.n	800abac <ccm_auth_crypt.constprop.0+0x444>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;

        while( len_left > 0 )
 800aba6:	1b76      	subs	r6, r6, r5
 800aba8:	f000 809b 	beq.w	800ace2 <ccm_auth_crypt.constprop.0+0x57a>
        {
            use_len = len_left > 16 ? 16 : len_left;
 800abac:	2e10      	cmp	r6, #16

            memset( b, 0, 16 );
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	f8c9 4000 	str.w	r4, [r9]

        UPDATE_CBC_MAC;

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;
 800abb4:	4635      	mov	r5, r6
 800abb6:	bf28      	it	cs
 800abb8:	2510      	movcs	r5, #16

            memset( b, 0, 16 );
 800abba:	601c      	str	r4, [r3, #0]
            memcpy( b, src, use_len );
 800abbc:	4639      	mov	r1, r7
 800abbe:	462a      	mov	r2, r5

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800abc0:	f8c8 4000 	str.w	r4, [r8]
            memcpy( b, src, use_len );
 800abc4:	4648      	mov	r0, r9

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800abc6:	f8ca 4000 	str.w	r4, [sl]
            memcpy( b, src, use_len );
 800abca:	f002 fe77 	bl	800d8bc <memcpy>
            UPDATE_CBC_MAC;
 800abce:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800abd2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800abd6:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
 800abda:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800abde:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800abe2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800abe6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800abea:	ea8e 0303 	eor.w	r3, lr, r3
 800abee:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800abf2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800abf6:	ea8b 0101 	eor.w	r1, fp, r1
 800abfa:	ea8c 0202 	eor.w	r2, ip, r2
 800abfe:	ea80 000e 	eor.w	r0, r0, lr
 800ac02:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800ac06:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800ac0a:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800ac0e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800ac12:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800ac16:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800ac1a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800ac1e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800ac22:	ea8c 0c01 	eor.w	ip, ip, r1
 800ac26:	ea8e 0e02 	eor.w	lr, lr, r2
 800ac2a:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800ac2e:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800ac32:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800ac36:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800ac3a:	4051      	eors	r1, r2
 800ac3c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800ac40:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800ac44:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800ac48:	405a      	eors	r2, r3
 800ac4a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ac4e:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800ac52:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800ac56:	4058      	eors	r0, r3
 800ac58:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800ac5c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800ac60:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800ac64:	ea8c 0303 	eor.w	r3, ip, r3
 800ac68:	ea8e 0e01 	eor.w	lr, lr, r1
 800ac6c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800ac70:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800ac74:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800ac78:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800ac7c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800ac80:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800ac84:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800ac88:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800ac8c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800ac90:	ab0b      	add	r3, sp, #44	; 0x2c
 800ac92:	ea8c 0000 	eor.w	r0, ip, r0
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800ac9c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800aca0:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800aca4:	ea8e 0202 	eor.w	r2, lr, r2
 800aca8:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800acac:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800acb0:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800acb4:	ea81 010b 	eor.w	r1, r1, fp
 800acb8:	ea8c 0303 	eor.w	r3, ip, r3
 800acbc:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800acc0:	a910      	add	r1, sp, #64	; 0x40
 800acc2:	ea8e 0e00 	eor.w	lr, lr, r0
 800acc6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800acca:	9802      	ldr	r0, [sp, #8]
 800accc:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800acd0:	2210      	movs	r2, #16
 800acd2:	460b      	mov	r3, r1
 800acd4:	f000 fb92 	bl	800b3fc <mbedtls_cipher_update>

            len_left -= use_len;
            src += use_len;
 800acd8:	442f      	add	r7, r5
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
 800acda:	2800      	cmp	r0, #0
 800acdc:	f43f af63 	beq.w	800aba6 <ccm_auth_crypt.constprop.0+0x43e>
 800ace0:	e70c      	b.n	800aafc <ccm_auth_crypt.constprop.0+0x394>
 800ace2:	9f08      	ldr	r7, [sp, #32]
 800ace4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800ace8:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
 800acec:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800acee:	e5b3      	b.n	800a858 <ccm_auth_crypt.constprop.0+0xf0>
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800acf0:	4640      	mov	r0, r8
 800acf2:	e703      	b.n	800aafc <ccm_auth_crypt.constprop.0+0x394>

0800acf4 <ccm_auth_crypt.constprop.1>:
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	b099      	sub	sp, #100	; 0x64
 800acfa:	9305      	str	r3, [sp, #20]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800acfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800acfe:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800ad00:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ad02:	9003      	str	r0, [sp, #12]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800ad04:	2b02      	cmp	r3, #2
        dst[i] = src[i] ^ b[i];

/*
 * Authenticated encryption or decryption
 */
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
 800ad06:	9204      	str	r2, [sp, #16]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800ad08:	f000 81b6 	beq.w	800b078 <ccm_auth_crypt.constprop.1+0x384>
 800ad0c:	2b10      	cmp	r3, #16
 800ad0e:	f200 81b3 	bhi.w	800b078 <ccm_auth_crypt.constprop.1+0x384>
 800ad12:	f013 0901 	ands.w	r9, r3, #1
 800ad16:	f040 81af 	bne.w	800b078 <ccm_auth_crypt.constprop.1+0x384>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
 800ad1a:	9d05      	ldr	r5, [sp, #20]
 800ad1c:	1feb      	subs	r3, r5, #7
 800ad1e:	2b06      	cmp	r3, #6
 800ad20:	f200 81aa 	bhi.w	800b078 <ccm_auth_crypt.constprop.1+0x384>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
 800ad24:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 800ad28:	f200 81a6 	bhi.w	800b078 <ccm_auth_crypt.constprop.1+0x384>
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800ad2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800ad2e:	2c00      	cmp	r4, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800ad30:	f1a3 0202 	sub.w	r2, r3, #2
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800ad34:	b2ef      	uxtb	r7, r5
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800ad36:	bf14      	ite	ne
 800ad38:	2340      	movne	r3, #64	; 0x40
 800ad3a:	2300      	moveq	r3, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800ad3c:	f1c7 000e 	rsb	r0, r7, #14
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800ad40:	0852      	lsrs	r2, r2, #1
    b[0] |= q - 1;
 800ad42:	9007      	str	r0, [sp, #28]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800ad44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    b[0] |= q - 1;
 800ad48:	b2c0      	uxtb	r0, r0
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800ad4a:	f1c7 070f 	rsb	r7, r7, #15
 800ad4e:	4688      	mov	r8, r1
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800ad50:	4303      	orrs	r3, r0
 800ad52:	9006      	str	r0, [sp, #24]

    memcpy( b + 1, iv, iv_len );
 800ad54:	9904      	ldr	r1, [sp, #16]
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 800ad56:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

    memcpy( b + 1, iv, iv_len );
 800ad5a:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800ad5e:	462a      	mov	r2, r5
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800ad60:	b2ff      	uxtb	r7, r7
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );
 800ad62:	f002 fdab 	bl	800d8bc <memcpy>

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ad66:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800ad6a:	2f02      	cmp	r7, #2
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ad6c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 800ad70:	f88d 803f 	strb.w	r8, [sp, #63]	; 0x3f
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ad74:	ea4f 4318 	mov.w	r3, r8, lsr #16
 800ad78:	f000 817b 	beq.w	800b072 <ccm_auth_crypt.constprop.1+0x37e>
 800ad7c:	2f03      	cmp	r7, #3
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ad7e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ad82:	ea4f 6318 	mov.w	r3, r8, lsr #24
 800ad86:	f000 8174 	beq.w	800b072 <ccm_auth_crypt.constprop.1+0x37e>
 800ad8a:	2f04      	cmp	r7, #4
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ad8c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ad90:	d00d      	beq.n	800adae <ccm_auth_crypt.constprop.1+0xba>
 800ad92:	2f05      	cmp	r7, #5
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ad94:	f88d 903b 	strb.w	r9, [sp, #59]	; 0x3b
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ad98:	d009      	beq.n	800adae <ccm_auth_crypt.constprop.1+0xba>
 800ad9a:	2f06      	cmp	r7, #6
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ad9c:	f88d 903a 	strb.w	r9, [sp, #58]	; 0x3a
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ada0:	d005      	beq.n	800adae <ccm_auth_crypt.constprop.1+0xba>
 800ada2:	2f08      	cmp	r7, #8
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800ada4:	f88d 9039 	strb.w	r9, [sp, #57]	; 0x39
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800ada8:	d101      	bne.n	800adae <ccm_auth_crypt.constprop.1+0xba>
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800adaa:	f88d 9038 	strb.w	r9, [sp, #56]	; 0x38
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
    UPDATE_CBC_MAC;
 800adae:	aa0b      	add	r2, sp, #44	; 0x2c
 800adb0:	9200      	str	r2, [sp, #0]
 800adb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800adb6:	9211      	str	r2, [sp, #68]	; 0x44
 800adb8:	a910      	add	r1, sp, #64	; 0x40
 800adba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adbc:	9010      	str	r0, [sp, #64]	; 0x40
 800adbe:	460b      	mov	r3, r1
 800adc0:	9212      	str	r2, [sp, #72]	; 0x48
 800adc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800adc4:	9803      	ldr	r0, [sp, #12]
 800adc6:	9513      	str	r5, [sp, #76]	; 0x4c
 800adc8:	2210      	movs	r2, #16
 800adca:	f000 fb17 	bl	800b3fc <mbedtls_cipher_update>
 800adce:	4603      	mov	r3, r0
 800add0:	2800      	cmp	r0, #0
 800add2:	f040 814b 	bne.w	800b06c <ccm_auth_crypt.constprop.1+0x378>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
 800add6:	2c00      	cmp	r4, #0
 800add8:	f040 8153 	bne.w	800b082 <ccm_auth_crypt.constprop.1+0x38e>
 800addc:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800ade0:	ab18      	add	r3, sp, #96	; 0x60
 800ade2:	f89d 2018 	ldrb.w	r2, [sp, #24]
    memcpy( ctr + 1, iv, iv_len );
 800ade6:	9d05      	ldr	r5, [sp, #20]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800ade8:	f803 2d10 	strb.w	r2, [r3, #-16]!
    memcpy( ctr + 1, iv, iv_len );
 800adec:	9904      	ldr	r1, [sp, #16]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800adee:	9304      	str	r3, [sp, #16]
    memcpy( ctr + 1, iv, iv_len );
 800adf0:	462a      	mov	r2, r5
 800adf2:	f10d 0051 	add.w	r0, sp, #81	; 0x51
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800adf6:	461c      	mov	r4, r3
    memcpy( ctr + 1, iv, iv_len );
 800adf8:	f002 fd60 	bl	800d8bc <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 800adfc:	4628      	mov	r0, r5
 800adfe:	3001      	adds	r0, #1
 800ae00:	4420      	add	r0, r4
 800ae02:	2100      	movs	r1, #0
 800ae04:	463a      	mov	r2, r7
 800ae06:	f002 fd64 	bl	800d8d2 <memset>
    ctr[15] = 1;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800ae10:	f1b8 0f00 	cmp.w	r8, #0
 800ae14:	f000 80fe 	beq.w	800b014 <ccm_auth_crypt.constprop.1+0x320>
            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
        }

        CTR_CRYPT( dst, src, use_len );
 800ae18:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ae1a:	f04f 0900 	mov.w	r9, #0
 800ae1e:	ab0b      	add	r3, sp, #44	; 0x2c
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	9803      	ldr	r0, [sp, #12]
 800ae24:	9904      	ldr	r1, [sp, #16]
 800ae26:	2210      	movs	r2, #16
 800ae28:	4653      	mov	r3, sl
 800ae2a:	f000 fae7 	bl	800b3fc <mbedtls_cipher_update>
    src = input;
    dst = output;

    while( len_left > 0 )
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 800ae2e:	4644      	mov	r4, r8
 800ae30:	2c10      	cmp	r4, #16
 800ae32:	bf28      	it	cs
 800ae34:	2410      	movcs	r4, #16
            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
        }

        CTR_CRYPT( dst, src, use_len );
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f040 8118 	bne.w	800b06c <ccm_auth_crypt.constprop.1+0x378>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	aa18      	add	r2, sp, #96	; 0x60
 800ae40:	18d1      	adds	r1, r2, r3
 800ae42:	5c32      	ldrb	r2, [r6, r0]
 800ae44:	f811 1c30 	ldrb.w	r1, [r1, #-48]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	404a      	eors	r2, r1
 800ae4e:	429c      	cmp	r4, r3
 800ae50:	542a      	strb	r2, [r5, r0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	d8f3      	bhi.n	800ae3e <ccm_auth_crypt.constprop.1+0x14a>

        if( mode == CCM_DECRYPT )
        {
            memset( b, 0, 16 );
            memcpy( b, dst, use_len );
 800ae56:	4629      	mov	r1, r5
 800ae58:	4622      	mov	r2, r4
 800ae5a:	4650      	mov	r0, sl

        CTR_CRYPT( dst, src, use_len );

        if( mode == CCM_DECRYPT )
        {
            memset( b, 0, 16 );
 800ae5c:	f8ca 9000 	str.w	r9, [sl]
 800ae60:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800ae64:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ae68:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
            memcpy( b, dst, use_len );
 800ae6c:	f002 fd26 	bl	800d8bc <memcpy>
            UPDATE_CBC_MAC;
 800ae70:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800ae74:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800ae78:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
 800ae7c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800ae80:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800ae84:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800ae88:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800ae8c:	ea8e 0303 	eor.w	r3, lr, r3
 800ae90:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800ae94:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800ae98:	ea8b 0101 	eor.w	r1, fp, r1
 800ae9c:	ea8c 0202 	eor.w	r2, ip, r2
 800aea0:	ea80 000e 	eor.w	r0, r0, lr
 800aea4:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800aea8:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800aeac:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800aeb0:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800aeb4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800aeb8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800aebc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800aec0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800aec4:	ea8c 0c01 	eor.w	ip, ip, r1
 800aec8:	ea8e 0e02 	eor.w	lr, lr, r2
 800aecc:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800aed0:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800aed4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800aed8:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800aedc:	4051      	eors	r1, r2
 800aede:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800aee2:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800aee6:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800aeea:	405a      	eors	r2, r3
 800aeec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800aef0:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800aef4:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800aef8:	4058      	eors	r0, r3
 800aefa:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800aefe:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800af02:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800af06:	ea8c 0303 	eor.w	r3, ip, r3
 800af0a:	ea8e 0e01 	eor.w	lr, lr, r1
 800af0e:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800af12:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800af16:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800af1a:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800af1e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800af22:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800af26:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800af2a:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800af2e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800af32:	ab0b      	add	r3, sp, #44	; 0x2c
 800af34:	ea8c 0000 	eor.w	r0, ip, r0
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800af3e:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800af42:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800af46:	ea8e 0202 	eor.w	r2, lr, r2
 800af4a:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800af4e:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800af52:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800af56:	ea81 010b 	eor.w	r1, r1, fp
 800af5a:	ea8c 0303 	eor.w	r3, ip, r3
 800af5e:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800af62:	a910      	add	r1, sp, #64	; 0x40
 800af64:	ea8e 0e00 	eor.w	lr, lr, r0
 800af68:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800af6c:	9803      	ldr	r0, [sp, #12]
 800af6e:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800af72:	2210      	movs	r2, #16
 800af74:	460b      	mov	r3, r1
 800af76:	f000 fa41 	bl	800b3fc <mbedtls_cipher_update>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d176      	bne.n	800b06c <ccm_auth_crypt.constprop.1+0x378>
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800af7e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800af82:	3301      	adds	r3, #1
 800af84:	b2db      	uxtb	r3, r3
            memset( b, 0, 16 );
            memcpy( b, dst, use_len );
            UPDATE_CBC_MAC;
        }

        dst += use_len;
 800af86:	4425      	add	r5, r4
        src += use_len;
 800af88:	4426      	add	r6, r4
        len_left -= use_len;
 800af8a:	ebc4 0808 	rsb	r8, r4, r8
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 800af8e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800af92:	2b00      	cmp	r3, #0
 800af94:	d13a      	bne.n	800b00c <ccm_auth_crypt.constprop.1+0x318>
 800af96:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
 800af9a:	3301      	adds	r3, #1
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 800afa2:	bb9b      	cbnz	r3, 800b00c <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800afa4:	2f02      	cmp	r7, #2
 800afa6:	d031      	beq.n	800b00c <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800afa8:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 800afac:	3301      	adds	r3, #1
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
 800afb4:	bb53      	cbnz	r3, 800b00c <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800afb6:	2f03      	cmp	r7, #3
 800afb8:	d028      	beq.n	800b00c <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800afba:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800afbe:	3301      	adds	r3, #1
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 800afc6:	bb0b      	cbnz	r3, 800b00c <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800afc8:	2f04      	cmp	r7, #4
 800afca:	d01f      	beq.n	800b00c <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800afcc:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 800afd0:	3301      	adds	r3, #1
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800afd8:	b9c3      	cbnz	r3, 800b00c <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800afda:	2f05      	cmp	r7, #5
 800afdc:	d016      	beq.n	800b00c <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800afde:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800afe2:	3301      	adds	r3, #1
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 800afea:	b97b      	cbnz	r3, 800b00c <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800afec:	2f06      	cmp	r7, #6
 800afee:	d00d      	beq.n	800b00c <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800aff0:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800aff4:	3301      	adds	r3, #1
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 800affc:	b933      	cbnz	r3, 800b00c <ccm_auth_crypt.constprop.1+0x318>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800affe:	2f08      	cmp	r7, #8
 800b000:	d104      	bne.n	800b00c <ccm_auth_crypt.constprop.1+0x318>
            if( ++ctr[15-i] != 0 )
 800b002:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b006:	3301      	adds	r3, #1
 800b008:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800b00c:	f1b8 0f00 	cmp.w	r8, #0
 800b010:	f47f af05 	bne.w	800ae1e <ccm_auth_crypt.constprop.1+0x12a>

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
 800b014:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800b018:	9c04      	ldr	r4, [sp, #16]
 800b01a:	f1c2 000f 	rsb	r0, r2, #15
 800b01e:	2100      	movs	r1, #0
 800b020:	3201      	adds	r2, #1
 800b022:	4420      	add	r0, r4
 800b024:	f002 fc55 	bl	800d8d2 <memset>

    CTR_CRYPT( y, y, 16 );
 800b028:	ab0b      	add	r3, sp, #44	; 0x2c
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	9803      	ldr	r0, [sp, #12]
 800b02e:	4621      	mov	r1, r4
 800b030:	4653      	mov	r3, sl
 800b032:	2210      	movs	r2, #16
 800b034:	f000 f9e2 	bl	800b3fc <mbedtls_cipher_update>
 800b038:	4680      	mov	r8, r0
 800b03a:	2800      	cmp	r0, #0
 800b03c:	f040 8107 	bne.w	800b24e <ccm_auth_crypt.constprop.1+0x55a>
 800b040:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b042:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b044:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b048:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b04a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    memcpy( tag, y, tag_len );
 800b04c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800b04e:	4046      	eors	r6, r0
 800b050:	405d      	eors	r5, r3
 800b052:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b056:	9611      	str	r6, [sp, #68]	; 0x44
 800b058:	4043      	eors	r3, r0
    memcpy( tag, y, tag_len );
 800b05a:	a910      	add	r1, sp, #64	; 0x40
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800b05c:	407c      	eors	r4, r7
    memcpy( tag, y, tag_len );
 800b05e:	9826      	ldr	r0, [sp, #152]	; 0x98
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800b060:	9410      	str	r4, [sp, #64]	; 0x40
 800b062:	9512      	str	r5, [sp, #72]	; 0x48
 800b064:	9313      	str	r3, [sp, #76]	; 0x4c
    memcpy( tag, y, tag_len );
 800b066:	f002 fc29 	bl	800d8bc <memcpy>

    return( 0 );
 800b06a:	4640      	mov	r0, r8
}
 800b06c:	b019      	add	sp, #100	; 0x64
 800b06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
        b[15-i] = (unsigned char)( len_left & 0xFF );

    if( len_left > 0 )
 800b072:	2b00      	cmp	r3, #0
 800b074:	f43f ae9b 	beq.w	800adae <ccm_auth_crypt.constprop.1+0xba>
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800b078:	f06f 000c 	mvn.w	r0, #12

    CTR_CRYPT( y, y, 16 );
    memcpy( tag, y, tag_len );

    return( 0 );
}
 800b07c:	b019      	add	sp, #100	; 0x64
 800b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 800b082:	2c0e      	cmp	r4, #14
 800b084:	46a1      	mov	r9, r4
 800b086:	bf28      	it	cs
 800b088:	f04f 090e 	movcs.w	r9, #14
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800b08c:	ea4f 2e14 	mov.w	lr, r4, lsr #8
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800b090:	464a      	mov	r2, r9
 800b092:	9922      	ldr	r1, [sp, #136]	; 0x88
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800b094:	930c      	str	r3, [sp, #48]	; 0x30
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800b096:	f10d 0032 	add.w	r0, sp, #50	; 0x32
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800b09a:	930d      	str	r3, [sp, #52]	; 0x34
 800b09c:	930e      	str	r3, [sp, #56]	; 0x38
 800b09e:	930f      	str	r3, [sp, #60]	; 0x3c
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800b0a0:	f88d e030 	strb.w	lr, [sp, #48]	; 0x30
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 800b0a4:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 800b0a8:	f002 fc08 	bl	800d8bc <memcpy>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;
 800b0ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b0b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0b4:	4043      	eors	r3, r0
 800b0b6:	ad0b      	add	r5, sp, #44	; 0x2c
 800b0b8:	404a      	eors	r2, r1
 800b0ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b0bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b0be:	9500      	str	r5, [sp, #0]
 800b0c0:	9310      	str	r3, [sp, #64]	; 0x40
 800b0c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b0c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0c6:	9211      	str	r2, [sp, #68]	; 0x44
 800b0c8:	ea80 0e01 	eor.w	lr, r0, r1
 800b0cc:	406b      	eors	r3, r5
 800b0ce:	a910      	add	r1, sp, #64	; 0x40
 800b0d0:	9312      	str	r3, [sp, #72]	; 0x48
 800b0d2:	9803      	ldr	r0, [sp, #12]
 800b0d4:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 800b0d8:	2210      	movs	r2, #16
 800b0da:	460b      	mov	r3, r1
 800b0dc:	f000 f98e 	bl	800b3fc <mbedtls_cipher_update>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d1c3      	bne.n	800b06c <ccm_auth_crypt.constprop.1+0x378>

        while( len_left > 0 )
 800b0e4:	ebb4 0309 	subs.w	r3, r4, r9
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f43f ae77 	beq.w	800addc <ccm_auth_crypt.constprop.1+0xe8>
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
        src += use_len;
 800b0ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0f0:	9708      	str	r7, [sp, #32]
 800b0f2:	444b      	add	r3, r9
 800b0f4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800b0f8:	9624      	str	r6, [sp, #144]	; 0x90

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800b0fa:	4683      	mov	fp, r0
 800b0fc:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800b100:	461f      	mov	r7, r3
 800b102:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b106:	4616      	mov	r6, r2
 800b108:	e002      	b.n	800b110 <ccm_auth_crypt.constprop.1+0x41c>
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;

        while( len_left > 0 )
 800b10a:	1b36      	subs	r6, r6, r4
 800b10c:	f000 809a 	beq.w	800b244 <ccm_auth_crypt.constprop.1+0x550>
        {
            use_len = len_left > 16 ? 16 : len_left;
 800b110:	2e10      	cmp	r6, #16
 800b112:	4634      	mov	r4, r6
 800b114:	bf28      	it	cs
 800b116:	2410      	movcs	r4, #16

            memset( b, 0, 16 );
            memcpy( b, src, use_len );
 800b118:	4639      	mov	r1, r7
 800b11a:	4622      	mov	r2, r4
 800b11c:	4650      	mov	r0, sl

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
 800b11e:	f8ca b000 	str.w	fp, [sl]
 800b122:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b126:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b12a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
            memcpy( b, src, use_len );
 800b12e:	f002 fbc5 	bl	800d8bc <memcpy>
            UPDATE_CBC_MAC;
 800b132:	f89d e032 	ldrb.w	lr, [sp, #50]	; 0x32
 800b136:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800b13a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 800b13e:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 800b142:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800b146:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 800b14a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800b14e:	ea8e 0303 	eor.w	r3, lr, r3
 800b152:	f89d e043 	ldrb.w	lr, [sp, #67]	; 0x43
 800b156:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 800b15a:	ea8c 0202 	eor.w	r2, ip, r2
 800b15e:	ea89 0101 	eor.w	r1, r9, r1
 800b162:	ea80 000e 	eor.w	r0, r0, lr
 800b166:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 800b16a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800b16e:	f89d e035 	ldrb.w	lr, [sp, #53]	; 0x35
 800b172:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800b176:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800b17a:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800b17e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800b182:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
 800b186:	ea8c 0c01 	eor.w	ip, ip, r1
 800b18a:	ea8e 0e02 	eor.w	lr, lr, r2
 800b18e:	f89d 1036 	ldrb.w	r1, [sp, #54]	; 0x36
 800b192:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800b196:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 800b19a:	f88d c044 	strb.w	ip, [sp, #68]	; 0x44
 800b19e:	4051      	eors	r1, r2
 800b1a0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800b1a4:	f89d c039 	ldrb.w	ip, [sp, #57]	; 0x39
 800b1a8:	f88d e045 	strb.w	lr, [sp, #69]	; 0x45
 800b1ac:	405a      	eors	r2, r3
 800b1ae:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800b1b2:	f89d e03a 	ldrb.w	lr, [sp, #58]	; 0x3a
 800b1b6:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 800b1ba:	4058      	eors	r0, r3
 800b1bc:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
 800b1c0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
 800b1c4:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800b1c8:	ea8c 0303 	eor.w	r3, ip, r3
 800b1cc:	ea8e 0e01 	eor.w	lr, lr, r1
 800b1d0:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
 800b1d4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800b1d8:	f88d e04a 	strb.w	lr, [sp, #74]	; 0x4a
 800b1dc:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800b1e0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b1e4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800b1e8:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800b1ec:	f89d e03d 	ldrb.w	lr, [sp, #61]	; 0x3d
 800b1f0:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800b1f4:	ea8c 0000 	eor.w	r0, ip, r0
 800b1f8:	4059      	eors	r1, r3
 800b1fa:	f89d c03e 	ldrb.w	ip, [sp, #62]	; 0x3e
 800b1fe:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800b202:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
 800b206:	ea8e 0202 	eor.w	r2, lr, r2
 800b20a:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
 800b20e:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
 800b212:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 800b216:	ea8c 0303 	eor.w	r3, ip, r3
 800b21a:	a910      	add	r1, sp, #64	; 0x40
 800b21c:	ad0b      	add	r5, sp, #44	; 0x2c
 800b21e:	ea8e 0e00 	eor.w	lr, lr, r0
 800b222:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
 800b226:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 800b22a:	9500      	str	r5, [sp, #0]
 800b22c:	4640      	mov	r0, r8
 800b22e:	2210      	movs	r2, #16
 800b230:	460b      	mov	r3, r1
 800b232:	f88d e04f 	strb.w	lr, [sp, #79]	; 0x4f
 800b236:	f000 f8e1 	bl	800b3fc <mbedtls_cipher_update>

            len_left -= use_len;
            src += use_len;
 800b23a:	4427      	add	r7, r4
        {
            use_len = len_left > 16 ? 16 : len_left;

            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f43f af64 	beq.w	800b10a <ccm_auth_crypt.constprop.1+0x416>
 800b242:	e713      	b.n	800b06c <ccm_auth_crypt.constprop.1+0x378>
 800b244:	9f08      	ldr	r7, [sp, #32]
 800b246:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800b24a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b24c:	e5c8      	b.n	800ade0 <ccm_auth_crypt.constprop.1+0xec>
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 800b24e:	4640      	mov	r0, r8
 800b250:	e70c      	b.n	800b06c <ccm_auth_crypt.constprop.1+0x378>
 800b252:	bf00      	nop

0800b254 <mbedtls_ccm_init>:
 * Initialize context
 */
void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
{
    CCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
 800b254:	2100      	movs	r1, #0
 800b256:	2238      	movs	r2, #56	; 0x38
 800b258:	f002 bb3b 	b.w	800d8d2 <memset>

0800b25c <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	4605      	mov	r5, r0
 800b262:	4617      	mov	r7, r2
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 800b264:	4608      	mov	r0, r1
 800b266:	2201      	movs	r2, #1
 800b268:	4619      	mov	r1, r3

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800b26a:	461e      	mov	r6, r3
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 800b26c:	f000 f866 	bl	800b33c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 800b270:	4604      	mov	r4, r0
 800b272:	b1a0      	cbz	r0, 800b29e <mbedtls_ccm_setkey+0x42>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 800b274:	6943      	ldr	r3, [r0, #20]
 800b276:	2b10      	cmp	r3, #16
 800b278:	d111      	bne.n	800b29e <mbedtls_ccm_setkey+0x42>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800b27a:	4628      	mov	r0, r5
 800b27c:	f000 f874 	bl	800b368 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800b280:	4628      	mov	r0, r5
 800b282:	4621      	mov	r1, r4
 800b284:	f000 f880 	bl	800b388 <mbedtls_cipher_setup>
 800b288:	b108      	cbz	r0, 800b28e <mbedtls_ccm_setkey+0x32>
    {
        return( ret );
    }

    return( 0 );
}
 800b28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mbedtls_cipher_free( &ctx->cipher_ctx );

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800b28e:	4628      	mov	r0, r5
 800b290:	4639      	mov	r1, r7
 800b292:	4632      	mov	r2, r6
 800b294:	2301      	movs	r3, #1
    {
        return( ret );
    }

    return( 0 );
}
 800b296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_cipher_free( &ctx->cipher_ctx );

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800b29a:	f000 b88d 	b.w	800b3b8 <mbedtls_cipher_setkey>
    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800b29e:	f06f 000c 	mvn.w	r0, #12
    {
        return( ret );
    }

    return( 0 );
}
 800b2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a6:	bf00      	nop

0800b2a8 <mbedtls_ccm_free>:
/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
    if( ctx == NULL )
 800b2a8:	b148      	cbz	r0, 800b2be <mbedtls_ccm_free+0x16>

/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	4604      	mov	r4, r0
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800b2ae:	f000 f85b 	bl	800b368 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	2138      	movs	r1, #56	; 0x38
}
 800b2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 800b2ba:	f000 baff 	b.w	800b8bc <mbedtls_platform_zeroize>
 800b2be:	4770      	bx	lr

0800b2c0 <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 800b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2c4:	f8dd e018 	ldr.w	lr, [sp, #24]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
 800b2c8:	b11c      	cbz	r4, 800b2d2 <mbedtls_ccm_encrypt_and_tag+0x12>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800b2ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 800b2ce:	f7ff ba4b 	b.w	800a768 <ccm_auth_crypt.constprop.0>
    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800b2d2:	f06f 000c 	mvn.w	r0, #12
 800b2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2d8 <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 800b2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	b08a      	sub	sp, #40	; 0x28
 800b2de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b2e0:	9e14      	ldr	r6, [sp, #80]	; 0x50
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
 800b2e2:	b30c      	cbz	r4, 800b328 <mbedtls_ccm_auth_decrypt+0x50>
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 800b2e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b2e6:	9500      	str	r5, [sp, #0]
 800b2e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b2ea:	9501      	str	r5, [sp, #4]
 800b2ec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b2ee:	9502      	str	r5, [sp, #8]
 800b2f0:	af06      	add	r7, sp, #24
 800b2f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800b2f4:	9503      	str	r5, [sp, #12]
 800b2f6:	9405      	str	r4, [sp, #20]
 800b2f8:	9704      	str	r7, [sp, #16]
 800b2fa:	4688      	mov	r8, r1
 800b2fc:	f7ff fcfa 	bl	800acf4 <ccm_auth_crypt.constprop.1>
 800b300:	b978      	cbnz	r0, 800b322 <mbedtls_ccm_auth_decrypt+0x4a>
 800b302:	4603      	mov	r3, r0
 800b304:	4602      	mov	r2, r0
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
        diff |= tag[i] ^ check_tag[i];
 800b306:	a90a      	add	r1, sp, #40	; 0x28
 800b308:	4419      	add	r1, r3
 800b30a:	5cb2      	ldrb	r2, [r6, r2]
 800b30c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800b310:	3301      	adds	r3, #1
 800b312:	b2db      	uxtb	r3, r3
        diff |= tag[i] ^ check_tag[i];
 800b314:	404a      	eors	r2, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800b316:	429c      	cmp	r4, r3
        diff |= tag[i] ^ check_tag[i];
 800b318:	ea40 0002 	orr.w	r0, r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800b31c:	461a      	mov	r2, r3
 800b31e:	d8f2      	bhi.n	800b306 <mbedtls_ccm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 800b320:	b928      	cbnz	r0, 800b32e <mbedtls_ccm_auth_decrypt+0x56>
    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800b322:	b00a      	add	sp, #40	; 0x28
 800b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800b328:	f06f 000c 	mvn.w	r0, #12
 800b32c:	e7f9      	b.n	800b322 <mbedtls_ccm_auth_decrypt+0x4a>
    for( diff = 0, i = 0; i < tag_len; i++ )
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_platform_zeroize( output, length );
 800b32e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b330:	4641      	mov	r1, r8
 800b332:	f000 fac3 	bl	800b8bc <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
 800b336:	f06f 000e 	mvn.w	r0, #14
 800b33a:	e7f2      	b.n	800b322 <mbedtls_ccm_auth_decrypt+0x4a>

0800b33c <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 800b33c:	b430      	push	{r4, r5}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b33e:	4c09      	ldr	r4, [pc, #36]	; (800b364 <mbedtls_cipher_info_from_values+0x28>)
 800b340:	6863      	ldr	r3, [r4, #4]
 800b342:	b15b      	cbz	r3, 800b35c <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 800b344:	699d      	ldr	r5, [r3, #24]
 800b346:	782d      	ldrb	r5, [r5, #0]
 800b348:	4285      	cmp	r5, r0
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800b34a:	f104 0408 	add.w	r4, r4, #8
        if( def->info->base->cipher == cipher_id &&
 800b34e:	d1f7      	bne.n	800b340 <mbedtls_cipher_info_from_values+0x4>
 800b350:	685d      	ldr	r5, [r3, #4]
 800b352:	428d      	cmp	r5, r1
 800b354:	d1f4      	bne.n	800b340 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800b356:	785d      	ldrb	r5, [r3, #1]
 800b358:	4295      	cmp	r5, r2
 800b35a:	d1f1      	bne.n	800b340 <mbedtls_cipher_info_from_values+0x4>
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	bc30      	pop	{r4, r5}
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	0800de84 	.word	0x0800de84

0800b368 <mbedtls_cipher_free>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
    if( ctx == NULL )
 800b368:	b168      	cbz	r0, 800b386 <mbedtls_cipher_free+0x1e>
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 800b36a:	b510      	push	{r4, lr}
 800b36c:	4604      	mov	r4, r0
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 800b36e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b370:	b118      	cbz	r0, 800b37a <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	695b      	ldr	r3, [r3, #20]
 800b378:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800b37a:	4620      	mov	r0, r4
 800b37c:	2138      	movs	r1, #56	; 0x38
}
 800b37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

    if( ctx->cipher_ctx )
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800b382:	f000 ba9b 	b.w	800b8bc <mbedtls_platform_zeroize>
 800b386:	4770      	bx	lr

0800b388 <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 800b388:	b171      	cbz	r1, 800b3a8 <mbedtls_cipher_setup+0x20>

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 800b38a:	b538      	push	{r3, r4, r5, lr}
 800b38c:	460c      	mov	r4, r1
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800b38e:	2238      	movs	r2, #56	; 0x38
 800b390:	2100      	movs	r1, #0
 800b392:	4605      	mov	r5, r0
 800b394:	f002 fa9d 	bl	800d8d2 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800b398:	69a3      	ldr	r3, [r4, #24]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	4798      	blx	r3
 800b39e:	6368      	str	r0, [r5, #52]	; 0x34
 800b3a0:	b120      	cbz	r0, 800b3ac <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 800b3a2:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b3a8:	4801      	ldr	r0, [pc, #4]	; (800b3b0 <mbedtls_cipher_setup+0x28>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 800b3aa:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800b3ac:	4801      	ldr	r0, [pc, #4]	; (800b3b4 <mbedtls_cipher_setup+0x2c>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	ffff9f00 	.word	0xffff9f00
 800b3b4:	ffff9e80 	.word	0xffff9e80

0800b3b8 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 800b3b8:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 800b3ba:	6804      	ldr	r4, [r0, #0]
 800b3bc:	b1c4      	cbz	r4, 800b3f0 <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b3be:	6925      	ldr	r5, [r4, #16]
 800b3c0:	07ad      	lsls	r5, r5, #30
 800b3c2:	d512      	bpl.n	800b3ea <mbedtls_cipher_setkey+0x32>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800b3c4:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 800b3c6:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 800b3c8:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800b3ca:	d009      	beq.n	800b3e0 <mbedtls_cipher_setkey+0x28>
 800b3cc:	7865      	ldrb	r5, [r4, #1]
 800b3ce:	3d03      	subs	r5, #3
 800b3d0:	2d02      	cmp	r5, #2
 800b3d2:	d905      	bls.n	800b3e0 <mbedtls_cipher_setkey+0x28>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
 800b3d4:	b963      	cbnz	r3, 800b3f0 <mbedtls_cipher_setkey+0x38>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b3d6:	69a3      	ldr	r3, [r4, #24]
 800b3d8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b3da:	68db      	ldr	r3, [r3, #12]
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 800b3dc:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800b3de:	4718      	bx	r3
    if( MBEDTLS_ENCRYPT == operation ||
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b3e0:	69a3      	ldr	r3, [r4, #24]
 800b3e2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b3e4:	689b      	ldr	r3, [r3, #8]
    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 800b3e6:	bc30      	pop	{r4, r5}
    if( MBEDTLS_ENCRYPT == operation ||
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800b3e8:	4718      	bx	r3
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800b3ea:	6865      	ldr	r5, [r4, #4]
 800b3ec:	4295      	cmp	r5, r2
 800b3ee:	d0e9      	beq.n	800b3c4 <mbedtls_cipher_setkey+0xc>
    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 800b3f0:	4801      	ldr	r0, [pc, #4]	; (800b3f8 <mbedtls_cipher_setkey+0x40>)
 800b3f2:	bc30      	pop	{r4, r5}
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	ffff9f00 	.word	0xffff9f00

0800b3fc <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800b3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fe:	460f      	mov	r7, r1

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 800b400:	6801      	ldr	r1, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 800b402:	9d05      	ldr	r5, [sp, #20]
 800b404:	4604      	mov	r4, r0

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 800b406:	b181      	cbz	r1, 800b42a <mbedtls_cipher_update+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800b408:	784e      	ldrb	r6, [r1, #1]
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 800b40a:	2000      	movs	r0, #0
 800b40c:	6028      	str	r0, [r5, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800b40e:	2e01      	cmp	r6, #1
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 800b410:	6948      	ldr	r0, [r1, #20]
 800b412:	d00e      	beq.n	800b432 <mbedtls_cipher_update+0x36>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 800b414:	b1e0      	cbz	r0, 800b450 <mbedtls_cipher_update+0x54>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
 800b416:	429f      	cmp	r7, r3
 800b418:	469e      	mov	lr, r3
 800b41a:	d108      	bne.n	800b42e <mbedtls_cipher_update+0x32>
 800b41c:	69e3      	ldr	r3, [r4, #28]
 800b41e:	b923      	cbnz	r3, 800b42a <mbedtls_cipher_update+0x2e>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800b420:	fbb2 f3f0 	udiv	r3, r2, r0
 800b424:	fb00 2213 	mls	r2, r0, r3, r2
 800b428:	b10a      	cbz	r2, 800b42e <mbedtls_cipher_update+0x32>
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800b42a:	480a      	ldr	r0, [pc, #40]	; (800b454 <mbedtls_cipher_update+0x58>)
 800b42c:	bdf0      	pop	{r4, r5, r6, r7, pc}

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800b42e:	480a      	ldr	r0, [pc, #40]	; (800b458 <mbedtls_cipher_update+0x5c>)
}
 800b430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
 800b432:	4282      	cmp	r2, r0
 800b434:	d10a      	bne.n	800b44c <mbedtls_cipher_update+0x50>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b436:	6989      	ldr	r1, [r1, #24]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 800b438:	602a      	str	r2, [r5, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b43a:	684d      	ldr	r5, [r1, #4]
 800b43c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b43e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800b442:	463a      	mov	r2, r7
 800b444:	46ac      	mov	ip, r5
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 800b446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800b44a:	4760      	bx	ip
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800b44c:	4803      	ldr	r0, [pc, #12]	; (800b45c <mbedtls_cipher_update+0x60>)
 800b44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 800b450:	4803      	ldr	r0, [pc, #12]	; (800b460 <mbedtls_cipher_update+0x64>)
 800b452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b454:	ffff9f00 	.word	0xffff9f00
 800b458:	ffff9f80 	.word	0xffff9f80
 800b45c:	ffff9d80 	.word	0xffff9d80
 800b460:	ffff9c80 	.word	0xffff9c80

0800b464 <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
 800b464:	b510      	push	{r4, lr}
 800b466:	4604      	mov	r4, r0
    mbedtls_ccm_free( ctx );
 800b468:	f7ff ff1e 	bl	800b2a8 <mbedtls_ccm_free>
    mbedtls_free( ctx );
 800b46c:	4620      	mov	r0, r4
}
 800b46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void ccm_ctx_free( void *ctx )
{
    mbedtls_ccm_free( ctx );
    mbedtls_free( ctx );
 800b472:	f002 ba0b 	b.w	800d88c <free>
 800b476:	bf00      	nop

0800b478 <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc( void )
{
 800b478:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 800b47a:	2001      	movs	r0, #1
 800b47c:	2138      	movs	r1, #56	; 0x38
 800b47e:	f002 f9cf 	bl	800d820 <calloc>

    if( ctx != NULL )
 800b482:	4604      	mov	r4, r0
 800b484:	b108      	cbz	r0, 800b48a <ccm_ctx_alloc+0x12>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 800b486:	f7ff fee5 	bl	800b254 <mbedtls_ccm_init>

    return( ctx );
}
 800b48a:	4620      	mov	r0, r4
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	bf00      	nop

0800b490 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b490:	4613      	mov	r3, r2
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800b492:	460a      	mov	r2, r1
 800b494:	2102      	movs	r1, #2
 800b496:	f7ff bee1 	b.w	800b25c <mbedtls_ccm_setkey>
 800b49a:	bf00      	nop

0800b49c <aes_ctx_free>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800b4a0:	f7fe fa5e 	bl	8009960 <mbedtls_aes_free>
    mbedtls_free( ctx );
 800b4a4:	4620      	mov	r0, r4
}
 800b4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 800b4aa:	f002 b9ef 	b.w	800d88c <free>
 800b4ae:	bf00      	nop

0800b4b0 <aes_ctx_alloc>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 800b4b0:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b4b8:	f002 f9b2 	bl	800d820 <calloc>

    if( aes == NULL )
 800b4bc:	4604      	mov	r4, r0
 800b4be:	b108      	cbz	r0, 800b4c4 <aes_ctx_alloc+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 800b4c0:	f7fe fa48 	bl	8009954 <mbedtls_aes_init>

    return( aes );
}
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b4c8:	f7fe bb7a 	b.w	8009bc0 <mbedtls_aes_setkey_dec>

0800b4cc <aes_setkey_enc_wrap>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800b4cc:	f7fe ba4e 	b.w	800996c <mbedtls_aes_setkey_enc>

0800b4d0 <aes_crypt_ecb_wrap>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800b4d0:	f7ff b942 	b.w	800a758 <mbedtls_aes_crypt_ecb>

0800b4d4 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 800b4d4:	2805      	cmp	r0, #5
 800b4d6:	d005      	beq.n	800b4e4 <mbedtls_md_info_from_type+0x10>
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800b4d8:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <mbedtls_md_info_from_type+0x14>)
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 800b4da:	2806      	cmp	r0, #6
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 800b4dc:	bf0c      	ite	eq
 800b4de:	4618      	moveq	r0, r3
 800b4e0:	2000      	movne	r0, #0
 800b4e2:	4770      	bx	lr
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <mbedtls_md_info_from_type+0x18>)
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 800b4e6:	4770      	bx	lr
 800b4e8:	0800dfe8 	.word	0x0800dfe8
 800b4ec:	0800dfa8 	.word	0x0800dfa8

0800b4f0 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f803 2b01 	strb.w	r2, [r3], #1
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	7042      	strb	r2, [r0, #1]
 800b4fc:	f803 2b01 	strb.w	r2, [r3], #1
 800b500:	f803 2b01 	strb.w	r2, [r3], #1
 800b504:	f803 2b01 	strb.w	r2, [r3], #1
 800b508:	f803 2b01 	strb.w	r2, [r3], #1
 800b50c:	f803 2b01 	strb.w	r2, [r3], #1
 800b510:	f803 2b01 	strb.w	r2, [r3], #1
 800b514:	f803 2b01 	strb.w	r2, [r3], #1
 800b518:	f803 2b01 	strb.w	r2, [r3], #1
 800b51c:	f803 2b01 	strb.w	r2, [r3], #1
 800b520:	701a      	strb	r2, [r3, #0]
 800b522:	4770      	bx	lr

0800b524 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 800b524:	b1b8      	cbz	r0, 800b556 <mbedtls_md_free+0x32>
 800b526:	6803      	ldr	r3, [r0, #0]
 800b528:	b1ab      	cbz	r3, 800b556 <mbedtls_md_free+0x32>
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 800b52a:	b510      	push	{r4, lr}
 800b52c:	4604      	mov	r4, r0
    if( ctx == NULL || ctx->md_info == NULL )
        return;

    if( ctx->md_ctx != NULL )
 800b52e:	6840      	ldr	r0, [r0, #4]
 800b530:	b108      	cbz	r0, 800b536 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 800b536:	68a0      	ldr	r0, [r4, #8]
 800b538:	b138      	cbz	r0, 800b54a <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	68d9      	ldr	r1, [r3, #12]
    if( ctx->md_ctx != NULL )
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 800b53e:	0049      	lsls	r1, r1, #1
 800b540:	f000 f9bc 	bl	800b8bc <mbedtls_platform_zeroize>
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 800b544:	68a0      	ldr	r0, [r4, #8]
 800b546:	f002 f9a1 	bl	800d88c <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 800b54a:	4620      	mov	r0, r4
 800b54c:	210c      	movs	r1, #12
}
 800b54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 800b552:	f000 b9b3 	b.w	800b8bc <mbedtls_platform_zeroize>
 800b556:	4770      	bx	lr

0800b558 <mbedtls_md_setup>:
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
 800b558:	b1c9      	cbz	r1, 800b58e <mbedtls_md_setup+0x36>
 800b55a:	b1c0      	cbz	r0, 800b58e <mbedtls_md_setup+0x36>
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 800b55e:	6a0b      	ldr	r3, [r1, #32]
 800b560:	4605      	mov	r5, r0
 800b562:	460c      	mov	r4, r1
 800b564:	4616      	mov	r6, r2
 800b566:	4798      	blx	r3
 800b568:	4607      	mov	r7, r0
 800b56a:	6068      	str	r0, [r5, #4]
 800b56c:	b188      	cbz	r0, 800b592 <mbedtls_md_setup+0x3a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 800b56e:	b916      	cbnz	r6, 800b576 <mbedtls_md_setup+0x1e>
            md_info->ctx_free_func( ctx->md_ctx );
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 800b570:	602c      	str	r4, [r5, #0]

    return( 0 );
 800b572:	2000      	movs	r0, #0
 800b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 800b576:	2002      	movs	r0, #2
 800b578:	68e1      	ldr	r1, [r4, #12]
 800b57a:	f002 f951 	bl	800d820 <calloc>
 800b57e:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 800b580:	2800      	cmp	r0, #0
 800b582:	d1f5      	bne.n	800b570 <mbedtls_md_setup+0x18>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 800b584:	4638      	mov	r0, r7
 800b586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b588:	4798      	blx	r3
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800b58a:	4803      	ldr	r0, [pc, #12]	; (800b598 <mbedtls_md_setup+0x40>)
 800b58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b58e:	4803      	ldr	r0, [pc, #12]	; (800b59c <mbedtls_md_setup+0x44>)
 800b590:	4770      	bx	lr

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 800b592:	4801      	ldr	r0, [pc, #4]	; (800b598 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 800b594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b596:	bf00      	nop
 800b598:	ffffae80 	.word	0xffffae80
 800b59c:	ffffaf00 	.word	0xffffaf00

0800b5a0 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b5a4:	4606      	mov	r6, r0
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 800b5a6:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	f000 80ed 	beq.w	800b788 <mbedtls_md_hmac_starts+0x1e8>
 800b5ae:	6803      	ldr	r3, [r0, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 80e9 	beq.w	800b788 <mbedtls_md_hmac_starts+0x1e8>
 800b5b6:	6885      	ldr	r5, [r0, #8]
 800b5b8:	2d00      	cmp	r5, #0
 800b5ba:	f000 80e5 	beq.w	800b788 <mbedtls_md_hmac_starts+0x1e8>
 800b5be:	4617      	mov	r7, r2
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 800b5c0:	68da      	ldr	r2, [r3, #12]
 800b5c2:	42ba      	cmp	r2, r7
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	f0c0 80a3 	bcc.w	800b710 <mbedtls_md_hmac_starts+0x170>
 800b5ca:	4691      	mov	r9, r2
 800b5cc:	f10d 0810 	add.w	r8, sp, #16
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
 800b5d0:	2136      	movs	r1, #54	; 0x36
 800b5d2:	464a      	mov	r2, r9
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f002 f97c 	bl	800d8d2 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 800b5da:	6832      	ldr	r2, [r6, #0]
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800b5dc:	eb05 0309 	add.w	r3, r5, r9

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	68d2      	ldr	r2, [r2, #12]
 800b5e4:	215c      	movs	r1, #92	; 0x5c
 800b5e6:	f002 f974 	bl	800d8d2 <memset>
 800b5ea:	4603      	mov	r3, r0

    for( i = 0; i < keylen; i++ )
 800b5ec:	2f00      	cmp	r7, #0
 800b5ee:	f000 8081 	beq.w	800b6f4 <mbedtls_md_hmac_starts+0x154>
 800b5f2:	1d29      	adds	r1, r5, #4
 800b5f4:	1d20      	adds	r0, r4, #4
 800b5f6:	428c      	cmp	r4, r1
 800b5f8:	bf38      	it	cc
 800b5fa:	4285      	cmpcc	r5, r0
 800b5fc:	bf2c      	ite	cs
 800b5fe:	f04f 0e01 	movcs.w	lr, #1
 800b602:	f04f 0e00 	movcc.w	lr, #0
 800b606:	428b      	cmp	r3, r1
 800b608:	bf34      	ite	cc
 800b60a:	2100      	movcc	r1, #0
 800b60c:	2101      	movcs	r1, #1
 800b60e:	f109 0204 	add.w	r2, r9, #4
 800b612:	2a00      	cmp	r2, #0
 800b614:	bfd8      	it	le
 800b616:	f041 0101 	orrle.w	r1, r1, #1
 800b61a:	442a      	add	r2, r5
 800b61c:	2f05      	cmp	r7, #5
 800b61e:	bf94      	ite	ls
 800b620:	f04f 0e00 	movls.w	lr, #0
 800b624:	f00e 0e01 	andhi.w	lr, lr, #1
 800b628:	4283      	cmp	r3, r0
 800b62a:	bf38      	it	cc
 800b62c:	4294      	cmpcc	r4, r2
 800b62e:	ea0e 0101 	and.w	r1, lr, r1
 800b632:	bf2c      	ite	cs
 800b634:	2201      	movcs	r2, #1
 800b636:	2200      	movcc	r2, #0
 800b638:	4211      	tst	r1, r2
 800b63a:	f000 8092 	beq.w	800b762 <mbedtls_md_hmac_starts+0x1c2>
 800b63e:	ea45 0203 	orr.w	r2, r5, r3
 800b642:	4322      	orrs	r2, r4
 800b644:	0792      	lsls	r2, r2, #30
 800b646:	f040 808c 	bne.w	800b762 <mbedtls_md_hmac_starts+0x1c2>
 800b64a:	1f3a      	subs	r2, r7, #4
 800b64c:	0892      	lsrs	r2, r2, #2
 800b64e:	3201      	adds	r2, #1
 800b650:	f1a5 0904 	sub.w	r9, r5, #4
 800b654:	f1a4 0c04 	sub.w	ip, r4, #4
 800b658:	0091      	lsls	r1, r2, #2
 800b65a:	9102      	str	r1, [sp, #8]
 800b65c:	46cb      	mov	fp, r9
 800b65e:	f8cd c004 	str.w	ip, [sp, #4]
 800b662:	f1a3 0a04 	sub.w	sl, r3, #4
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	f04f 0e00 	mov.w	lr, #0
 800b66c:	9303      	str	r3, [sp, #12]
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b66e:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800b672:	f85c 1f04 	ldr.w	r1, [ip, #4]!
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b676:	9b01      	ldr	r3, [sp, #4]
    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b678:	4041      	eors	r1, r0
 800b67a:	f84b 1f04 	str.w	r1, [fp, #4]!
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b67e:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800b682:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 800b686:	9301      	str	r3, [sp, #4]
 800b688:	9b00      	ldr	r3, [sp, #0]
 800b68a:	4041      	eors	r1, r0
 800b68c:	f10e 0e01 	add.w	lr, lr, #1
 800b690:	f843 1b04 	str.w	r1, [r3], #4
 800b694:	4596      	cmp	lr, r2
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	d3e9      	bcc.n	800b66e <mbedtls_md_hmac_starts+0xce>
 800b69a:	9902      	ldr	r1, [sp, #8]
 800b69c:	9b03      	ldr	r3, [sp, #12]
 800b69e:	428f      	cmp	r7, r1
 800b6a0:	d028      	beq.n	800b6f4 <mbedtls_md_hmac_starts+0x154>
    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b6a2:	f814 0022 	ldrb.w	r0, [r4, r2, lsl #2]
 800b6a6:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
 800b6aa:	4041      	eors	r1, r0
 800b6ac:	f805 1022 	strb.w	r1, [r5, r2, lsl #2]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6b0:	9902      	ldr	r1, [sp, #8]
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b6b2:	f814 e022 	ldrb.w	lr, [r4, r2, lsl #2]
 800b6b6:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6ba:	3101      	adds	r1, #1
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b6bc:	ea8e 0000 	eor.w	r0, lr, r0
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6c0:	428f      	cmp	r7, r1
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b6c2:	f803 0022 	strb.w	r0, [r3, r2, lsl #2]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6c6:	d915      	bls.n	800b6f4 <mbedtls_md_hmac_starts+0x154>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b6c8:	5c60      	ldrb	r0, [r4, r1]
 800b6ca:	5c6a      	ldrb	r2, [r5, r1]
 800b6cc:	4042      	eors	r2, r0
 800b6ce:	546a      	strb	r2, [r5, r1]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6d0:	9a02      	ldr	r2, [sp, #8]
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b6d2:	f814 e001 	ldrb.w	lr, [r4, r1]
 800b6d6:	5c58      	ldrb	r0, [r3, r1]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6d8:	3202      	adds	r2, #2
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b6da:	ea8e 0000 	eor.w	r0, lr, r0
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6de:	4297      	cmp	r7, r2
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b6e0:	5458      	strb	r0, [r3, r1]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b6e2:	d907      	bls.n	800b6f4 <mbedtls_md_hmac_starts+0x154>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b6e4:	5ca0      	ldrb	r0, [r4, r2]
 800b6e6:	5ca9      	ldrb	r1, [r5, r2]
 800b6e8:	4041      	eors	r1, r0
 800b6ea:	54a9      	strb	r1, [r5, r2]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b6ec:	5ca0      	ldrb	r0, [r4, r2]
 800b6ee:	5c99      	ldrb	r1, [r3, r2]
 800b6f0:	4041      	eors	r1, r0
 800b6f2:	5499      	strb	r1, [r3, r2]
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b6f4:	6833      	ldr	r3, [r6, #0]
 800b6f6:	6870      	ldr	r0, [r6, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	4798      	blx	r3
 800b6fc:	4681      	mov	r9, r0
 800b6fe:	b970      	cbnz	r0, 800b71e <mbedtls_md_hmac_starts+0x17e>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 800b700:	6833      	ldr	r3, [r6, #0]
 800b702:	6870      	ldr	r0, [r6, #4]
 800b704:	695c      	ldr	r4, [r3, #20]
 800b706:	68da      	ldr	r2, [r3, #12]
 800b708:	4629      	mov	r1, r5
 800b70a:	47a0      	blx	r4
 800b70c:	4681      	mov	r9, r0
 800b70e:	e006      	b.n	800b71e <mbedtls_md_hmac_starts+0x17e>
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	6840      	ldr	r0, [r0, #4]
 800b714:	4798      	blx	r3
 800b716:	4681      	mov	r9, r0
 800b718:	b148      	cbz	r0, 800b72e <mbedtls_md_hmac_starts+0x18e>
 800b71a:	f10d 0810 	add.w	r8, sp, #16
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 800b71e:	4640      	mov	r0, r8
 800b720:	2120      	movs	r1, #32
 800b722:	f000 f8cb 	bl	800b8bc <mbedtls_platform_zeroize>

    return( ret );
 800b726:	4648      	mov	r0, r9
}
 800b728:	b00d      	add	sp, #52	; 0x34
 800b72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    if( keylen > (size_t) ctx->md_info->block_size )
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 800b72e:	6833      	ldr	r3, [r6, #0]
 800b730:	6870      	ldr	r0, [r6, #4]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	4621      	mov	r1, r4
 800b736:	463a      	mov	r2, r7
 800b738:	4798      	blx	r3
 800b73a:	4681      	mov	r9, r0
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d1ec      	bne.n	800b71a <mbedtls_md_hmac_starts+0x17a>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 800b740:	6833      	ldr	r3, [r6, #0]
 800b742:	6870      	ldr	r0, [r6, #4]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	f10d 0810 	add.w	r8, sp, #16
 800b74a:	4641      	mov	r1, r8
 800b74c:	4798      	blx	r3
 800b74e:	4681      	mov	r9, r0
 800b750:	2800      	cmp	r0, #0
 800b752:	d1e4      	bne.n	800b71e <mbedtls_md_hmac_starts+0x17e>
            goto cleanup;

        keylen = ctx->md_info->size;
 800b754:	6833      	ldr	r3, [r6, #0]
 800b756:	68b5      	ldr	r5, [r6, #8]
 800b758:	689f      	ldr	r7, [r3, #8]
 800b75a:	f8d3 900c 	ldr.w	r9, [r3, #12]
        key = sum;
 800b75e:	4644      	mov	r4, r8
 800b760:	e736      	b.n	800b5d0 <mbedtls_md_hmac_starts+0x30>
 800b762:	3c01      	subs	r4, #1
 800b764:	3b01      	subs	r3, #1
 800b766:	442f      	add	r7, r5
 800b768:	4628      	mov	r0, r5
    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 800b76a:	7801      	ldrb	r1, [r0, #0]
 800b76c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800b770:	404a      	eors	r2, r1
 800b772:	f800 2b01 	strb.w	r2, [r0], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b776:	7821      	ldrb	r1, [r4, #0]
 800b778:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b77c:	42b8      	cmp	r0, r7
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 800b77e:	ea82 0201 	eor.w	r2, r2, r1
 800b782:	701a      	strb	r2, [r3, #0]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 800b784:	d1f1      	bne.n	800b76a <mbedtls_md_hmac_starts+0x1ca>
 800b786:	e7b5      	b.n	800b6f4 <mbedtls_md_hmac_starts+0x154>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b788:	4800      	ldr	r0, [pc, #0]	; (800b78c <mbedtls_md_hmac_starts+0x1ec>)
 800b78a:	e7cd      	b.n	800b728 <mbedtls_md_hmac_starts+0x188>
 800b78c:	ffffaf00 	.word	0xffffaf00

0800b790 <mbedtls_md_hmac_update>:
    return( ret );
}

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b790:	b168      	cbz	r0, 800b7ae <mbedtls_md_hmac_update+0x1e>
 800b792:	6803      	ldr	r3, [r0, #0]
 800b794:	b15b      	cbz	r3, 800b7ae <mbedtls_md_hmac_update+0x1e>

    return( ret );
}

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 800b796:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b798:	6884      	ldr	r4, [r0, #8]
 800b79a:	b124      	cbz	r4, 800b7a6 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	6840      	ldr	r0, [r0, #4]
}
 800b7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 800b7a4:	4718      	bx	r3
}
 800b7a6:	4803      	ldr	r0, [pc, #12]	; (800b7b4 <mbedtls_md_hmac_update+0x24>)
 800b7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	4801      	ldr	r0, [pc, #4]	; (800b7b4 <mbedtls_md_hmac_update+0x24>)
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	ffffaf00 	.word	0xffffaf00

0800b7b8 <mbedtls_md_hmac_finish>:
{
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d030      	beq.n	800b81e <mbedtls_md_hmac_finish+0x66>
 800b7bc:	6803      	ldr	r3, [r0, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d02d      	beq.n	800b81e <mbedtls_md_hmac_finish+0x66>

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
}

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 800b7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b7c4:	6886      	ldr	r6, [r0, #8]

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
}

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 800b7c6:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b7c8:	2e00      	cmp	r6, #0
 800b7ca:	d026      	beq.n	800b81a <mbedtls_md_hmac_finish+0x62>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 800b7d0:	699a      	ldr	r2, [r3, #24]
 800b7d2:	6840      	ldr	r0, [r0, #4]
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 800b7d4:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 800b7d6:	4669      	mov	r1, sp
 800b7d8:	4790      	blx	r2
 800b7da:	b108      	cbz	r0, 800b7e0 <mbedtls_md_hmac_finish+0x28>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 800b7dc:	b009      	add	sp, #36	; 0x24
 800b7de:	bdf0      	pop	{r4, r5, r6, r7, pc}

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	6860      	ldr	r0, [r4, #4]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	4798      	blx	r3
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d1f7      	bne.n	800b7dc <mbedtls_md_hmac_finish+0x24>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	6860      	ldr	r0, [r4, #4]
 800b7f0:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800b7f4:	68da      	ldr	r2, [r3, #12]
 800b7f6:	19f1      	adds	r1, r6, r7
 800b7f8:	47e0      	blx	ip
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d1ee      	bne.n	800b7dc <mbedtls_md_hmac_finish+0x24>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	6860      	ldr	r0, [r4, #4]
 800b802:	695e      	ldr	r6, [r3, #20]
 800b804:	689a      	ldr	r2, [r3, #8]
 800b806:	4669      	mov	r1, sp
 800b808:	47b0      	blx	r6
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1e6      	bne.n	800b7dc <mbedtls_md_hmac_finish+0x24>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	6860      	ldr	r0, [r4, #4]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	4629      	mov	r1, r5
 800b816:	4798      	blx	r3
 800b818:	e7e0      	b.n	800b7dc <mbedtls_md_hmac_finish+0x24>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b81a:	4802      	ldr	r0, [pc, #8]	; (800b824 <mbedtls_md_hmac_finish+0x6c>)
 800b81c:	e7de      	b.n	800b7dc <mbedtls_md_hmac_finish+0x24>
 800b81e:	4801      	ldr	r0, [pc, #4]	; (800b824 <mbedtls_md_hmac_finish+0x6c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	ffffaf00 	.word	0xffffaf00

0800b828 <mbedtls_md_hmac_reset>:
int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b828:	b1a8      	cbz	r0, 800b856 <mbedtls_md_hmac_reset+0x2e>
 800b82a:	6803      	ldr	r3, [r0, #0]
 800b82c:	b19b      	cbz	r3, 800b856 <mbedtls_md_hmac_reset+0x2e>
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 800b82e:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 800b830:	6885      	ldr	r5, [r0, #8]
 800b832:	b175      	cbz	r5, 800b852 <mbedtls_md_hmac_reset+0x2a>
 800b834:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	6840      	ldr	r0, [r0, #4]
 800b83a:	4798      	blx	r3
 800b83c:	b100      	cbz	r0, 800b840 <mbedtls_md_hmac_reset+0x18>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 800b83e:	bd70      	pop	{r4, r5, r6, pc}

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	6860      	ldr	r0, [r4, #4]
 800b844:	695c      	ldr	r4, [r3, #20]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	4629      	mov	r1, r5
 800b84a:	4623      	mov	r3, r4
                                       ctx->md_info->block_size ) );
}
 800b84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 800b850:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 800b852:	4802      	ldr	r0, [pc, #8]	; (800b85c <mbedtls_md_hmac_reset+0x34>)
 800b854:	e7f3      	b.n	800b83e <mbedtls_md_hmac_reset+0x16>
 800b856:	4801      	ldr	r0, [pc, #4]	; (800b85c <mbedtls_md_hmac_reset+0x34>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	ffffaf00 	.word	0xffffaf00

0800b860 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 800b860:	f000 b88c 	b.w	800b97c <mbedtls_internal_sha256_process>

0800b864 <sha224_clone_wrap>:
    mbedtls_free( ctx );
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 800b864:	f000 b83c 	b.w	800b8e0 <mbedtls_sha256_clone>

0800b868 <sha224_ctx_free>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 800b868:	b510      	push	{r4, lr}
 800b86a:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 800b86c:	f000 f832 	bl	800b8d4 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 800b870:	4620      	mov	r0, r4
}
 800b872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 800b876:	f002 b809 	b.w	800d88c <free>
 800b87a:	bf00      	nop

0800b87c <sha224_ctx_alloc>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 800b87c:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 800b87e:	2001      	movs	r0, #1
 800b880:	216c      	movs	r1, #108	; 0x6c
 800b882:	f001 ffcd 	bl	800d820 <calloc>

    if( ctx != NULL )
 800b886:	4604      	mov	r4, r0
 800b888:	b108      	cbz	r0, 800b88e <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 800b88a:	f000 f81f 	bl	800b8cc <mbedtls_sha256_init>

    return( ctx );
}
 800b88e:	4620      	mov	r0, r4
 800b890:	bd10      	pop	{r4, pc}
 800b892:	bf00      	nop

0800b894 <sha224_wrap>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 800b894:	2301      	movs	r3, #1
 800b896:	f000 bd6b 	b.w	800c370 <mbedtls_sha256_ret>
 800b89a:	bf00      	nop

0800b89c <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 800b89c:	2300      	movs	r3, #0
 800b89e:	f000 bd67 	b.w	800c370 <mbedtls_sha256_ret>
 800b8a2:	bf00      	nop

0800b8a4 <sha224_finish_wrap>:
                                       input, ilen ) );
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 800b8a4:	f000 bcc0 	b.w	800c228 <mbedtls_sha256_finish_ret>

0800b8a8 <sha224_update_wrap>:
}

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 800b8a8:	f000 bc78 	b.w	800c19c <mbedtls_sha256_update_ret>

0800b8ac <sha224_starts_wrap>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	f000 b81d 	b.w	800b8ec <mbedtls_sha256_starts_ret>
 800b8b2:	bf00      	nop

0800b8b4 <sha256_starts_wrap>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	f000 b819 	b.w	800b8ec <mbedtls_sha256_starts_ret>
 800b8ba:	bf00      	nop

0800b8bc <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 800b8bc:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <mbedtls_platform_zeroize+0xc>)
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 800b8be:	460a      	mov	r2, r1
    memset_func( buf, 0, len );
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	4718      	bx	r3
 800b8c6:	bf00      	nop
 800b8c8:	1ffed704 	.word	0x1ffed704

0800b8cc <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	226c      	movs	r2, #108	; 0x6c
 800b8d0:	f001 bfff 	b.w	800d8d2 <memset>

0800b8d4 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 800b8d4:	b110      	cbz	r0, 800b8dc <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 800b8d6:	216c      	movs	r1, #108	; 0x6c
 800b8d8:	f7ff bff0 	b.w	800b8bc <mbedtls_platform_zeroize>
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop

0800b8e0 <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 800b8e0:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 800b8e2:	226c      	movs	r2, #108	; 0x6c
 800b8e4:	f001 ffea 	bl	800d8bc <memcpy>
 800b8e8:	bd08      	pop	{r3, pc}
 800b8ea:	bf00      	nop

0800b8ec <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 800b8ec:	2300      	movs	r3, #0

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 800b8ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 800b8f0:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 800b8f2:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 800b8f4:	b1b1      	cbz	r1, 800b924 <mbedtls_sha256_starts_ret+0x38>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800b8f6:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b96c <mbedtls_sha256_starts_ret+0x80>
        ctx->state[1] = 0x367CD507;
 800b8fa:	f8df e074 	ldr.w	lr, [pc, #116]	; 800b970 <mbedtls_sha256_starts_ret+0x84>
        ctx->state[2] = 0x3070DD17;
 800b8fe:	4f0f      	ldr	r7, [pc, #60]	; (800b93c <mbedtls_sha256_starts_ret+0x50>)
        ctx->state[3] = 0xF70E5939;
 800b900:	4e0f      	ldr	r6, [pc, #60]	; (800b940 <mbedtls_sha256_starts_ret+0x54>)
        ctx->state[4] = 0xFFC00B31;
 800b902:	4d10      	ldr	r5, [pc, #64]	; (800b944 <mbedtls_sha256_starts_ret+0x58>)
        ctx->state[5] = 0x68581511;
 800b904:	4c10      	ldr	r4, [pc, #64]	; (800b948 <mbedtls_sha256_starts_ret+0x5c>)
        ctx->state[6] = 0x64F98FA7;
 800b906:	4a11      	ldr	r2, [pc, #68]	; (800b94c <mbedtls_sha256_starts_ret+0x60>)
        ctx->state[7] = 0xBEFA4FA4;
 800b908:	4b11      	ldr	r3, [pc, #68]	; (800b950 <mbedtls_sha256_starts_ret+0x64>)
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800b90a:	f8c0 c008 	str.w	ip, [r0, #8]
        ctx->state[1] = 0x367CD507;
 800b90e:	f8c0 e00c 	str.w	lr, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 800b912:	6107      	str	r7, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 800b914:	6146      	str	r6, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 800b916:	6185      	str	r5, [r0, #24]
        ctx->state[5] = 0x68581511;
 800b918:	61c4      	str	r4, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 800b91a:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 800b91c:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 800b91e:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 800b920:	2000      	movs	r0, #0
 800b922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ctx->total[1] = 0;

    if( is224 == 0 )
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 800b924:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800b974 <mbedtls_sha256_starts_ret+0x88>
        ctx->state[1] = 0xBB67AE85;
 800b928:	f8df e04c 	ldr.w	lr, [pc, #76]	; 800b978 <mbedtls_sha256_starts_ret+0x8c>
        ctx->state[2] = 0x3C6EF372;
 800b92c:	4f09      	ldr	r7, [pc, #36]	; (800b954 <mbedtls_sha256_starts_ret+0x68>)
        ctx->state[3] = 0xA54FF53A;
 800b92e:	4e0a      	ldr	r6, [pc, #40]	; (800b958 <mbedtls_sha256_starts_ret+0x6c>)
        ctx->state[4] = 0x510E527F;
 800b930:	4d0a      	ldr	r5, [pc, #40]	; (800b95c <mbedtls_sha256_starts_ret+0x70>)
        ctx->state[5] = 0x9B05688C;
 800b932:	4c0b      	ldr	r4, [pc, #44]	; (800b960 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[6] = 0x1F83D9AB;
 800b934:	4a0b      	ldr	r2, [pc, #44]	; (800b964 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[7] = 0x5BE0CD19;
 800b936:	4b0c      	ldr	r3, [pc, #48]	; (800b968 <mbedtls_sha256_starts_ret+0x7c>)
 800b938:	e7e7      	b.n	800b90a <mbedtls_sha256_starts_ret+0x1e>
 800b93a:	bf00      	nop
 800b93c:	3070dd17 	.word	0x3070dd17
 800b940:	f70e5939 	.word	0xf70e5939
 800b944:	ffc00b31 	.word	0xffc00b31
 800b948:	68581511 	.word	0x68581511
 800b94c:	64f98fa7 	.word	0x64f98fa7
 800b950:	befa4fa4 	.word	0xbefa4fa4
 800b954:	3c6ef372 	.word	0x3c6ef372
 800b958:	a54ff53a 	.word	0xa54ff53a
 800b95c:	510e527f 	.word	0x510e527f
 800b960:	9b05688c 	.word	0x9b05688c
 800b964:	1f83d9ab 	.word	0x1f83d9ab
 800b968:	5be0cd19 	.word	0x5be0cd19
 800b96c:	c1059ed8 	.word	0xc1059ed8
 800b970:	367cd507 	.word	0x367cd507
 800b974:	6a09e667 	.word	0x6a09e667
 800b978:	bb67ae85 	.word	0xbb67ae85

0800b97c <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 800b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
 800b980:	4606      	mov	r6, r0
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 800b982:	b0e5      	sub	sp, #404	; 0x194
 800b984:	460c      	mov	r4, r1
 800b986:	901b      	str	r0, [sp, #108]	; 0x6c
 800b988:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800b98c:	6871      	ldr	r1, [r6, #4]
 800b98e:	68b2      	ldr	r2, [r6, #8]
 800b990:	68f3      	ldr	r3, [r6, #12]
 800b992:	ad1c      	add	r5, sp, #112	; 0x70
 800b994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b996:	6971      	ldr	r1, [r6, #20]
 800b998:	6930      	ldr	r0, [r6, #16]
 800b99a:	69b2      	ldr	r2, [r6, #24]
 800b99c:	69f3      	ldr	r3, [r6, #28]
 800b99e:	ae33      	add	r6, sp, #204	; 0xcc
 800b9a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b9a2:	1c61      	adds	r1, r4, #1
 800b9a4:	ad23      	add	r5, sp, #140	; 0x8c
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 800b9a6:	7808      	ldrb	r0, [r1, #0]
 800b9a8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 800b9ac:	788a      	ldrb	r2, [r1, #2]
 800b9ae:	784c      	ldrb	r4, [r1, #1]
 800b9b0:	0400      	lsls	r0, r0, #16
 800b9b2:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b9bc:	f845 3f04 	str.w	r3, [r5, #4]!

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 800b9c0:	42b5      	cmp	r5, r6
 800b9c2:	f101 0104 	add.w	r1, r1, #4
 800b9c6:	d1ee      	bne.n	800b9a6 <mbedtls_internal_sha256_process+0x2a>
 800b9c8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b9ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9cc:	f8df e2f0 	ldr.w	lr, [pc, #752]	; 800bcc0 <mbedtls_internal_sha256_process+0x344>
 800b9d0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b9d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b9d6:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b9d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9da:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800b9de:	f8cd e008 	str.w	lr, [sp, #8]
 800b9e2:	4626      	mov	r6, r4
 800b9e4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b9e6:	4625      	mov	r5, r4
 800b9e8:	ac24      	add	r4, sp, #144	; 0x90
 800b9ea:	4627      	mov	r7, r4
 800b9ec:	9404      	str	r4, [sp, #16]
 800b9ee:	2400      	movs	r4, #0
 800b9f0:	9401      	str	r4, [sp, #4]
 800b9f2:	4614      	mov	r4, r2
 800b9f4:	9a01      	ldr	r2, [sp, #4]
 800b9f6:	46f4      	mov	ip, lr
 800b9f8:	46b8      	mov	r8, r7
 800b9fa:	46ae      	mov	lr, r5
 800b9fc:	f10d 0990 	add.w	r9, sp, #144	; 0x90
 800ba00:	4daf      	ldr	r5, [pc, #700]	; (800bcc0 <mbedtls_internal_sha256_process+0x344>)
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800ba02:	ea4f 17b3 	mov.w	r7, r3, ror #6
 800ba06:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800ba0a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800ba0e:	ea87 27f3 	eor.w	r7, r7, r3, ror #11
 800ba12:	ea80 0904 	eor.w	r9, r0, r4
 800ba16:	442a      	add	r2, r5
 800ba18:	ea87 6773 	eor.w	r7, r7, r3, ror #25
 800ba1c:	ea09 0903 	and.w	r9, r9, r3
 800ba20:	ea89 0900 	eor.w	r9, r9, r0
 800ba24:	4417      	add	r7, r2
 800ba26:	ea46 0501 	orr.w	r5, r6, r1
 800ba2a:	444f      	add	r7, r9
 800ba2c:	ea4f 02b1 	mov.w	r2, r1, ror #2
 800ba30:	44bb      	add	fp, r7
 800ba32:	ea05 050e 	and.w	r5, r5, lr
 800ba36:	ea06 0701 	and.w	r7, r6, r1
 800ba3a:	ea82 3271 	eor.w	r2, r2, r1, ror #13
 800ba3e:	433d      	orrs	r5, r7
 800ba40:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 800ba44:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800ba48:	442a      	add	r2, r5
 800ba4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba4e:	445a      	add	r2, fp
 800ba50:	44da      	add	sl, fp
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 800ba52:	ea84 0b03 	eor.w	fp, r4, r3
 800ba56:	443d      	add	r5, r7
 800ba58:	ea0a 0b0b 	and.w	fp, sl, fp
 800ba5c:	ea4f 17ba 	mov.w	r7, sl, ror #6
 800ba60:	ea8b 0b04 	eor.w	fp, fp, r4
 800ba64:	4428      	add	r0, r5
 800ba66:	ea87 27fa 	eor.w	r7, r7, sl, ror #11
 800ba6a:	ea42 0901 	orr.w	r9, r2, r1
 800ba6e:	4458      	add	r0, fp
 800ba70:	ea4f 05b2 	mov.w	r5, r2, ror #2
 800ba74:	ea87 677a 	eor.w	r7, r7, sl, ror #25
 800ba78:	4407      	add	r7, r0
 800ba7a:	ea09 0906 	and.w	r9, r9, r6
 800ba7e:	ea02 0001 	and.w	r0, r2, r1
 800ba82:	ea85 3572 	eor.w	r5, r5, r2, ror #13
 800ba86:	ea85 55b2 	eor.w	r5, r5, r2, ror #22
 800ba8a:	ea49 0000 	orr.w	r0, r9, r0
 800ba8e:	4428      	add	r0, r5
 800ba90:	4438      	add	r0, r7
 800ba92:	44be      	add	lr, r7
 800ba94:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ba98:	f8dc 7008 	ldr.w	r7, [ip, #8]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 800ba9c:	ea8a 0b03 	eor.w	fp, sl, r3
 800baa0:	443d      	add	r5, r7
 800baa2:	ea0e 0b0b 	and.w	fp, lr, fp
 800baa6:	ea4f 17be 	mov.w	r7, lr, ror #6
 800baaa:	ea8b 0b03 	eor.w	fp, fp, r3
 800baae:	442c      	add	r4, r5
 800bab0:	ea87 27fe 	eor.w	r7, r7, lr, ror #11
 800bab4:	ea40 0902 	orr.w	r9, r0, r2
 800bab8:	445c      	add	r4, fp
 800baba:	ea4f 05b0 	mov.w	r5, r0, ror #2
 800babe:	ea87 677e 	eor.w	r7, r7, lr, ror #25
 800bac2:	4427      	add	r7, r4
 800bac4:	ea09 0901 	and.w	r9, r9, r1
 800bac8:	ea00 0402 	and.w	r4, r0, r2
 800bacc:	ea85 3570 	eor.w	r5, r5, r0, ror #13
 800bad0:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
 800bad4:	ea49 0404 	orr.w	r4, r9, r4
 800bad8:	442c      	add	r4, r5
 800bada:	443c      	add	r4, r7
 800badc:	443e      	add	r6, r7
 800bade:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800bae2:	f8dc 700c 	ldr.w	r7, [ip, #12]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 800bae6:	ea8e 0b0a 	eor.w	fp, lr, sl
 800baea:	443d      	add	r5, r7
 800baec:	ea06 0b0b 	and.w	fp, r6, fp
 800baf0:	ea4f 17b6 	mov.w	r7, r6, ror #6
 800baf4:	ea8b 0b0a 	eor.w	fp, fp, sl
 800baf8:	442b      	add	r3, r5
 800bafa:	ea87 27f6 	eor.w	r7, r7, r6, ror #11
 800bafe:	ea44 0900 	orr.w	r9, r4, r0
 800bb02:	445b      	add	r3, fp
 800bb04:	ea87 6776 	eor.w	r7, r7, r6, ror #25
 800bb08:	ea4f 0bb4 	mov.w	fp, r4, ror #2
 800bb0c:	19dd      	adds	r5, r3, r7
 800bb0e:	ea09 0902 	and.w	r9, r9, r2
 800bb12:	ea04 0300 	and.w	r3, r4, r0
 800bb16:	ea8b 3b74 	eor.w	fp, fp, r4, ror #13
 800bb1a:	ea8b 5bb4 	eor.w	fp, fp, r4, ror #22
 800bb1e:	ea49 0303 	orr.w	r3, r9, r3
 800bb22:	445b      	add	r3, fp
 800bb24:	442b      	add	r3, r5
 800bb26:	4429      	add	r1, r5
 800bb28:	f8dc 7010 	ldr.w	r7, [ip, #16]
 800bb2c:	f8d8 5010 	ldr.w	r5, [r8, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 800bb30:	ea86 0b0e 	eor.w	fp, r6, lr
 800bb34:	442f      	add	r7, r5
 800bb36:	ea01 0b0b 	and.w	fp, r1, fp
 800bb3a:	ea4f 15b1 	mov.w	r5, r1, ror #6
 800bb3e:	ea8b 0b0e 	eor.w	fp, fp, lr
 800bb42:	44ba      	add	sl, r7
 800bb44:	ea85 25f1 	eor.w	r5, r5, r1, ror #11
 800bb48:	ea43 0904 	orr.w	r9, r3, r4
 800bb4c:	44da      	add	sl, fp
 800bb4e:	ea85 6571 	eor.w	r5, r5, r1, ror #25
 800bb52:	ea4f 0bb3 	mov.w	fp, r3, ror #2
 800bb56:	eb0a 0705 	add.w	r7, sl, r5
 800bb5a:	ea09 0900 	and.w	r9, r9, r0
 800bb5e:	ea03 0a04 	and.w	sl, r3, r4
 800bb62:	ea8b 3b73 	eor.w	fp, fp, r3, ror #13
 800bb66:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 800bb6a:	ea49 0a0a 	orr.w	sl, r9, sl
 800bb6e:	44da      	add	sl, fp
 800bb70:	44ba      	add	sl, r7
 800bb72:	eb07 0b02 	add.w	fp, r7, r2
 800bb76:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800bb7a:	f8d8 7014 	ldr.w	r7, [r8, #20]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 800bb7e:	ea81 0906 	eor.w	r9, r1, r6
 800bb82:	443d      	add	r5, r7
 800bb84:	ea0b 0909 	and.w	r9, fp, r9
 800bb88:	ea4f 12bb 	mov.w	r2, fp, ror #6
 800bb8c:	ea89 0906 	eor.w	r9, r9, r6
 800bb90:	44ae      	add	lr, r5
 800bb92:	ea82 22fb 	eor.w	r2, r2, fp, ror #11
 800bb96:	44ce      	add	lr, r9
 800bb98:	ea4a 0703 	orr.w	r7, sl, r3
 800bb9c:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 800bba0:	ea4f 09ba 	mov.w	r9, sl, ror #2
 800bba4:	eb0e 0502 	add.w	r5, lr, r2
 800bba8:	4027      	ands	r7, r4
 800bbaa:	ea0a 0e03 	and.w	lr, sl, r3
 800bbae:	ea89 397a 	eor.w	r9, r9, sl, ror #13
 800bbb2:	ea89 59ba 	eor.w	r9, r9, sl, ror #22
 800bbb6:	ea47 0e0e 	orr.w	lr, r7, lr
 800bbba:	44ce      	add	lr, r9
 800bbbc:	44ae      	add	lr, r5
 800bbbe:	4428      	add	r0, r5
 800bbc0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800bbc4:	f8d8 5018 	ldr.w	r5, [r8, #24]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800bbc8:	ea8b 0901 	eor.w	r9, fp, r1
 800bbcc:	442a      	add	r2, r5
 800bbce:	ea00 0909 	and.w	r9, r0, r9
 800bbd2:	ea4f 15b0 	mov.w	r5, r0, ror #6
 800bbd6:	ea89 0901 	eor.w	r9, r9, r1
 800bbda:	4416      	add	r6, r2
 800bbdc:	ea85 25f0 	eor.w	r5, r5, r0, ror #11
 800bbe0:	444e      	add	r6, r9
 800bbe2:	ea4e 070a 	orr.w	r7, lr, sl
 800bbe6:	ea4f 02be 	mov.w	r2, lr, ror #2
 800bbea:	ea85 6570 	eor.w	r5, r5, r0, ror #25
 800bbee:	4435      	add	r5, r6
 800bbf0:	401f      	ands	r7, r3
 800bbf2:	ea82 327e 	eor.w	r2, r2, lr, ror #13
 800bbf6:	ea0e 060a 	and.w	r6, lr, sl
 800bbfa:	ea82 52be 	eor.w	r2, r2, lr, ror #22
 800bbfe:	433e      	orrs	r6, r7
 800bc00:	4416      	add	r6, r2
 800bc02:	442e      	add	r6, r5
 800bc04:	442c      	add	r4, r5
 800bc06:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800bc0a:	f8d8 501c 	ldr.w	r5, [r8, #28]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800bc0e:	ea80 090b 	eor.w	r9, r0, fp
 800bc12:	18af      	adds	r7, r5, r2
 800bc14:	ea04 0909 	and.w	r9, r4, r9
 800bc18:	4439      	add	r1, r7
 800bc1a:	ea89 090b 	eor.w	r9, r9, fp
 800bc1e:	ea46 020e 	orr.w	r2, r6, lr
 800bc22:	ea02 020a 	and.w	r2, r2, sl
 800bc26:	4449      	add	r1, r9
 800bc28:	ea06 090e 	and.w	r9, r6, lr
 800bc2c:	ea42 0909 	orr.w	r9, r2, r9
 800bc30:	ea4f 15b4 	mov.w	r5, r4, ror #6
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800bc34:	9a01      	ldr	r2, [sp, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800bc36:	ea4f 07b6 	mov.w	r7, r6, ror #2
 800bc3a:	ea85 25f4 	eor.w	r5, r5, r4, ror #11
 800bc3e:	ea87 3776 	eor.w	r7, r7, r6, ror #13
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800bc42:	3208      	adds	r2, #8
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800bc44:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 800bc48:	ea87 57b6 	eor.w	r7, r7, r6, ror #22
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800bc4c:	9201      	str	r2, [sp, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800bc4e:	4429      	add	r1, r5
 800bc50:	eb09 0207 	add.w	r2, r9, r7
 800bc54:	440b      	add	r3, r1
 800bc56:	4411      	add	r1, r2
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 800bc58:	9a01      	ldr	r2, [sp, #4]
 800bc5a:	2a10      	cmp	r2, #16
 800bc5c:	f108 0820 	add.w	r8, r8, #32
 800bc60:	f10c 0c20 	add.w	ip, ip, #32
 800bc64:	f47f aeca 	bne.w	800b9fc <mbedtls_internal_sha256_process+0x80>
 800bc68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800bc6a:	920e      	str	r2, [sp, #56]	; 0x38
 800bc6c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800bc6e:	9214      	str	r2, [sp, #80]	; 0x50
 800bc70:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800bc72:	920f      	str	r2, [sp, #60]	; 0x3c
 800bc74:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800bc76:	9215      	str	r2, [sp, #84]	; 0x54
 800bc78:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800bc7a:	9210      	str	r2, [sp, #64]	; 0x40
 800bc7c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800bc7e:	9216      	str	r2, [sp, #88]	; 0x58
 800bc80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800bc82:	9218      	str	r2, [sp, #96]	; 0x60
 800bc84:	4627      	mov	r7, r4
 800bc86:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800bc88:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800bc8a:	f8cd e014 	str.w	lr, [sp, #20]
 800bc8e:	920d      	str	r2, [sp, #52]	; 0x34
 800bc90:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bc94:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800bc96:	9417      	str	r4, [sp, #92]	; 0x5c
 800bc98:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800bc9a:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc9c:	460d      	mov	r5, r1
 800bc9e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bca0:	9412      	str	r4, [sp, #72]	; 0x48
 800bca2:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800bca4:	960a      	str	r6, [sp, #40]	; 0x28
 800bca6:	9211      	str	r2, [sp, #68]	; 0x44
 800bca8:	f8cd b018 	str.w	fp, [sp, #24]
 800bcac:	9926      	ldr	r1, [sp, #152]	; 0x98
 800bcae:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bcb0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800bcb2:	940c      	str	r4, [sp, #48]	; 0x30
 800bcb4:	46f3      	mov	fp, lr
 800bcb6:	9702      	str	r7, [sp, #8]
 800bcb8:	9303      	str	r3, [sp, #12]
 800bcba:	9501      	str	r5, [sp, #4]
 800bcbc:	e002      	b.n	800bcc4 <mbedtls_internal_sha256_process+0x348>
 800bcbe:	bf00      	nop
 800bcc0:	0800e018 	.word	0x0800e018
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bcc4:	9b03      	ldr	r3, [sp, #12]
 800bcc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcc8:	9f03      	ldr	r7, [sp, #12]
 800bcca:	f8db 4040 	ldr.w	r4, [fp, #64]	; 0x40
 800bcce:	ea4f 18b3 	mov.w	r8, r3, ror #6
 800bcd2:	ea4f 4c75 	mov.w	ip, r5, ror #17
 800bcd6:	ea88 28f3 	eor.w	r8, r8, r3, ror #11
 800bcda:	9b02      	ldr	r3, [sp, #8]
 800bcdc:	ea8c 4cf5 	eor.w	ip, ip, r5, ror #19
 800bce0:	ea80 0e03 	eor.w	lr, r0, r3
 800bce4:	ea8c 2c95 	eor.w	ip, ip, r5, lsr #10
 800bce8:	9d03      	ldr	r5, [sp, #12]
 800bcea:	ea0e 0e07 	and.w	lr, lr, r7
 800bcee:	ea8e 0e00 	eor.w	lr, lr, r0
 800bcf2:	ea88 6875 	eor.w	r8, r8, r5, ror #25
 800bcf6:	44f0      	add	r8, lr
 800bcf8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800bcfa:	44a0      	add	r8, r4
 800bcfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bcfe:	ea4f 19f2 	mov.w	r9, r2, ror #7
 800bd02:	46a6      	mov	lr, r4
 800bd04:	443e      	add	r6, r7
 800bd06:	9c01      	ldr	r4, [sp, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd0a:	ea89 49b2 	eor.w	r9, r9, r2, ror #18
 800bd0e:	ea89 09d2 	eor.w	r9, r9, r2, lsr #3
 800bd12:	4466      	add	r6, ip
 800bd14:	444e      	add	r6, r9
 800bd16:	ea4e 0904 	orr.w	r9, lr, r4
 800bd1a:	9c05      	ldr	r4, [sp, #20]
 800bd1c:	ea09 0904 	and.w	r9, r9, r4
 800bd20:	9c01      	ldr	r4, [sp, #4]
 800bd22:	ea4f 0cb4 	mov.w	ip, r4, ror #2
 800bd26:	ea8c 3c74 	eor.w	ip, ip, r4, ror #13
 800bd2a:	9c01      	ldr	r4, [sp, #4]
 800bd2c:	ea8c 5cb4 	eor.w	ip, ip, r4, ror #22
 800bd30:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800bd32:	4635      	mov	r5, r6
 800bd34:	4422      	add	r2, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd36:	ea4f 4677 	mov.w	r6, r7, ror #17
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd3a:	9c06      	ldr	r4, [sp, #24]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bd3c:	9519      	str	r5, [sp, #100]	; 0x64
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd3e:	ea86 46f7 	eor.w	r6, r6, r7, ror #19
 800bd42:	44a8      	add	r8, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd44:	44a0      	add	r8, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd46:	ea86 2697 	eor.w	r6, r6, r7, lsr #10
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd4a:	9c01      	ldr	r4, [sp, #4]
 800bd4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd4e:	ea4f 1ef1 	mov.w	lr, r1, ror #7
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd52:	403c      	ands	r4, r7
 800bd54:	ea49 0404 	orr.w	r4, r9, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd58:	ea8e 4eb1 	eor.w	lr, lr, r1, ror #18
 800bd5c:	4416      	add	r6, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd5e:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd60:	ea8e 0ed1 	eor.w	lr, lr, r1, lsr #3
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd64:	44c4      	add	ip, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd66:	9a03      	ldr	r2, [sp, #12]
 800bd68:	44b6      	add	lr, r6
 800bd6a:	f8db 6044 	ldr.w	r6, [fp, #68]	; 0x44
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd6e:	4664      	mov	r4, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd70:	9406      	str	r4, [sp, #24]
 800bd72:	ea83 0c02 	eor.w	ip, r3, r2
 800bd76:	4672      	mov	r2, lr
 800bd78:	eb00 0e06 	add.w	lr, r0, r6
 800bd7c:	4626      	mov	r6, r4
 800bd7e:	9c01      	ldr	r4, [sp, #4]
 800bd80:	9213      	str	r2, [sp, #76]	; 0x4c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bd82:	44c2      	add	sl, r8
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd84:	ea46 0804 	orr.w	r8, r6, r4
 800bd88:	ea08 0807 	and.w	r8, r8, r7
 800bd8c:	9f06      	ldr	r7, [sp, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bd8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bd90:	ea0a 0c0c 	and.w	ip, sl, ip
 800bd94:	4496      	add	lr, r2
 800bd96:	ea4f 02b7 	mov.w	r2, r7, ror #2
 800bd9a:	ea8c 0c03 	eor.w	ip, ip, r3
 800bd9e:	ea82 3277 	eor.w	r2, r2, r7, ror #13
 800bda2:	44e6      	add	lr, ip
 800bda4:	ea82 5cb7 	eor.w	ip, r2, r7, ror #22
 800bda8:	9a16      	ldr	r2, [sp, #88]	; 0x58
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bdaa:	9b04      	ldr	r3, [sp, #16]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bdac:	ea4f 16f4 	mov.w	r6, r4, ror #7
 800bdb0:	4411      	add	r1, r2
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	ea4f 10ba 	mov.w	r0, sl, ror #6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bdb8:	ea86 46b4 	eor.w	r6, r6, r4, ror #18
 800bdbc:	ea86 06d4 	eor.w	r6, r6, r4, lsr #3
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bdc0:	ea80 20fa 	eor.w	r0, r0, sl, ror #11
 800bdc4:	403a      	ands	r2, r7
 800bdc6:	4431      	add	r1, r6
 800bdc8:	ea80 607a 	eor.w	r0, r0, sl, ror #25
 800bdcc:	ea48 0202 	orr.w	r2, r8, r2
 800bdd0:	9e05      	ldr	r6, [sp, #20]
 800bdd2:	4470      	add	r0, lr
 800bdd4:	4462      	add	r2, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bdd6:	ea4f 4e75 	mov.w	lr, r5, ror #17
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800bdda:	4402      	add	r2, r0
 800bddc:	1986      	adds	r6, r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bdde:	ea8e 4ef5 	eor.w	lr, lr, r5, ror #19
 800bde2:	9803      	ldr	r0, [sp, #12]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bde4:	469c      	mov	ip, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bde6:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
 800bdea:	ea8a 0900 	eor.w	r9, sl, r0
 800bdee:	eb01 000e 	add.w	r0, r1, lr
 800bdf2:	4601      	mov	r1, r0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800bdf4:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
 800bdf8:	f8db 0048 	ldr.w	r0, [fp, #72]	; 0x48
 800bdfc:	9d02      	ldr	r5, [sp, #8]
 800bdfe:	4405      	add	r5, r0
 800be00:	4628      	mov	r0, r5
 800be02:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be04:	9d06      	ldr	r5, [sp, #24]
 800be06:	9c03      	ldr	r4, [sp, #12]
 800be08:	9107      	str	r1, [sp, #28]
 800be0a:	ea4f 01b2 	mov.w	r1, r2, ror #2
 800be0e:	ea81 3172 	eor.w	r1, r1, r2, ror #13
 800be12:	ea06 0909 	and.w	r9, r6, r9
 800be16:	ea81 5eb2 	eor.w	lr, r1, r2, ror #22
 800be1a:	ea42 0805 	orr.w	r8, r2, r5
 800be1e:	ea89 0904 	eor.w	r9, r9, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800be22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be24:	9c01      	ldr	r4, [sp, #4]
 800be26:	9915      	ldr	r1, [sp, #84]	; 0x54
 800be28:	ea4f 17b6 	mov.w	r7, r6, ror #6
 800be2c:	ea87 27f6 	eor.w	r7, r7, r6, ror #11
 800be30:	ea08 0804 	and.w	r8, r8, r4
 800be34:	4448      	add	r0, r9
 800be36:	4674      	mov	r4, lr
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800be38:	ea4f 1cf5 	mov.w	ip, r5, ror #7
 800be3c:	468e      	mov	lr, r1

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be3e:	ea87 6776 	eor.w	r7, r7, r6, ror #25
 800be42:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be44:	4407      	add	r7, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800be46:	ea8c 4cb5 	eor.w	ip, ip, r5, ror #18

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be4a:	9806      	ldr	r0, [sp, #24]
 800be4c:	eb0e 0901 	add.w	r9, lr, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800be50:	ea8c 0ed5 	eor.w	lr, ip, r5, lsr #3
 800be54:	9d13      	ldr	r5, [sp, #76]	; 0x4c

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be56:	ea02 0100 	and.w	r1, r2, r0
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800be5a:	469c      	mov	ip, r3
 800be5c:	f8db 004c 	ldr.w	r0, [fp, #76]	; 0x4c
 800be60:	9b03      	ldr	r3, [sp, #12]
 800be62:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be66:	ea48 0101 	orr.w	r1, r8, r1
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800be6a:	ea4f 4875 	mov.w	r8, r5, ror #17
 800be6e:	ea88 48f5 	eor.w	r8, r8, r5, ror #19

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be72:	4421      	add	r1, r4
 800be74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800be76:	4439      	add	r1, r7
 800be78:	eb09 0c0e 	add.w	ip, r9, lr
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800be7c:	ea88 2895 	eor.w	r8, r8, r5, lsr #10
 800be80:	4418      	add	r0, r3
 800be82:	9b06      	ldr	r3, [sp, #24]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800be84:	9d0e      	ldr	r5, [sp, #56]	; 0x38

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800be86:	eb07 0e04 	add.w	lr, r7, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800be8a:	ea86 090a 	eor.w	r9, r6, sl
 800be8e:	44c4      	add	ip, r8
 800be90:	ea41 0802 	orr.w	r8, r1, r2
 800be94:	4664      	mov	r4, ip
 800be96:	ea08 0803 	and.w	r8, r8, r3
 800be9a:	ea0e 0909 	and.w	r9, lr, r9
 800be9e:	ea4f 03b1 	mov.w	r3, r1, ror #2
 800bea2:	ea89 090a 	eor.w	r9, r9, sl
 800bea6:	ea83 3371 	eor.w	r3, r3, r1, ror #13
 800beaa:	4420      	add	r0, r4
 800beac:	4448      	add	r0, r9
 800beae:	ea83 59b1 	eor.w	r9, r3, r1, ror #22
 800beb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800beb4:	9403      	str	r4, [sp, #12]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800beb6:	ea4f 1cf5 	mov.w	ip, r5, ror #7
 800beba:	462c      	mov	r4, r5
 800bebc:	ea8c 4cb5 	eor.w	ip, ip, r5, ror #18
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bec0:	464d      	mov	r5, r9
 800bec2:	4699      	mov	r9, r3
 800bec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bec6:	ea8c 0cd4 	eor.w	ip, ip, r4, lsr #3
 800beca:	9c07      	ldr	r4, [sp, #28]
 800becc:	4499      	add	r9, r3
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bece:	ea01 0302 	and.w	r3, r1, r2
 800bed2:	ea48 0303 	orr.w	r3, r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bed6:	ea4f 4874 	mov.w	r8, r4, ror #17
 800beda:	ea88 48f4 	eor.w	r8, r8, r4, ror #19

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bede:	9c04      	ldr	r4, [sp, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bee0:	442b      	add	r3, r5
 800bee2:	ea4f 17be 	mov.w	r7, lr, ror #6

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800bee6:	4625      	mov	r5, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bee8:	ea87 27fe 	eor.w	r7, r7, lr, ror #11

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 800beec:	9c07      	ldr	r4, [sp, #28]
 800beee:	64ac      	str	r4, [r5, #72]	; 0x48
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bef0:	ea87 677e 	eor.w	r7, r7, lr, ror #25
 800bef4:	9d01      	ldr	r5, [sp, #4]
 800bef6:	4407      	add	r7, r0
 800bef8:	443d      	add	r5, r7
 800befa:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
 800befe:	9501      	str	r5, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bf00:	ea88 2894 	eor.w	r8, r8, r4, lsr #10
 800bf04:	44cc      	add	ip, r9
 800bf06:	4482      	add	sl, r0
 800bf08:	9801      	ldr	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bf0a:	19dc      	adds	r4, r3, r7
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bf0c:	44c4      	add	ip, r8
 800bf0e:	ea8e 0706 	eor.w	r7, lr, r6
 800bf12:	4665      	mov	r5, ip
 800bf14:	4007      	ands	r7, r0
 800bf16:	4623      	mov	r3, r4
 800bf18:	44aa      	add	sl, r5
 800bf1a:	4077      	eors	r7, r6
 800bf1c:	4457      	add	r7, sl
 800bf1e:	9509      	str	r5, [sp, #36]	; 0x24
 800bf20:	ea4f 0ab3 	mov.w	sl, r3, ror #2
 800bf24:	9d01      	ldr	r5, [sp, #4]
 800bf26:	9308      	str	r3, [sp, #32]
 800bf28:	ea8a 3a73 	eor.w	sl, sl, r3, ror #13
 800bf2c:	ea4f 19b0 	mov.w	r9, r0, ror #6
 800bf30:	ea89 29f5 	eor.w	r9, r9, r5, ror #11
 800bf34:	ea8a 55b3 	eor.w	r5, sl, r3, ror #22
 800bf38:	9801      	ldr	r0, [sp, #4]
 800bf3a:	9502      	str	r5, [sp, #8]
 800bf3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bf3e:	ea44 0c01 	orr.w	ip, r4, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bf42:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800bf44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bf46:	ea89 6070 	eor.w	r0, r9, r0, ror #25
 800bf4a:	46a9      	mov	r9, r5
 800bf4c:	4499      	add	r9, r3
 800bf4e:	9b08      	ldr	r3, [sp, #32]
 800bf50:	9d02      	ldr	r5, [sp, #8]
 800bf52:	ea03 0a01 	and.w	sl, r3, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bf56:	9b03      	ldr	r3, [sp, #12]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bf58:	ea0c 0c02 	and.w	ip, ip, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bf5c:	ea4f 18f4 	mov.w	r8, r4, ror #7
 800bf60:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bf64:	ea4c 0a0a 	orr.w	sl, ip, sl
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bf68:	ea4f 4c73 	mov.w	ip, r3, ror #17
 800bf6c:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
 800bf70:	ea8c 4cf3 	eor.w	ip, ip, r3, ror #19
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bf74:	9c03      	ldr	r4, [sp, #12]
 800bf76:	9b04      	ldr	r3, [sp, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bf78:	ea8c 2c94 	eor.w	ip, ip, r4, lsr #10
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800bf7c:	64dc      	str	r4, [r3, #76]	; 0x4c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bf7e:	9c06      	ldr	r4, [sp, #24]
 800bf80:	4438      	add	r0, r7
 800bf82:	4404      	add	r4, r0
 800bf84:	44aa      	add	sl, r5
 800bf86:	4625      	mov	r5, r4
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bf88:	9c01      	ldr	r4, [sp, #4]
 800bf8a:	f8db 7054 	ldr.w	r7, [fp, #84]	; 0x54
 800bf8e:	9506      	str	r5, [sp, #24]
 800bf90:	44c8      	add	r8, r9
 800bf92:	ea84 040e 	eor.w	r4, r4, lr
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bf96:	4482      	add	sl, r0
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bf98:	44c4      	add	ip, r8
 800bf9a:	9808      	ldr	r0, [sp, #32]
 800bf9c:	443e      	add	r6, r7
 800bf9e:	402c      	ands	r4, r5
 800bfa0:	462f      	mov	r7, r5
 800bfa2:	ea4f 18b5 	mov.w	r8, r5, ror #6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bfa6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bfa8:	ea4a 0900 	orr.w	r9, sl, r0
 800bfac:	4466      	add	r6, ip
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bfae:	ea4f 10f5 	mov.w	r0, r5, ror #7
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bfb2:	ea84 040e 	eor.w	r4, r4, lr
 800bfb6:	ea88 28f7 	eor.w	r8, r8, r7, ror #11
 800bfba:	4434      	add	r4, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bfbc:	ea80 40b5 	eor.w	r0, r0, r5, ror #18
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bfc0:	ea88 6777 	eor.w	r7, r8, r7, ror #25
 800bfc4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bfc6:	4427      	add	r7, r4
 800bfc8:	9c08      	ldr	r4, [sp, #32]
 800bfca:	46a8      	mov	r8, r5
 800bfcc:	ea4f 06ba 	mov.w	r6, sl, ror #2
 800bfd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bfd2:	ea09 0901 	and.w	r9, r9, r1
 800bfd6:	ea86 367a 	eor.w	r6, r6, sl, ror #13
 800bfda:	ea0a 0404 	and.w	r4, sl, r4
 800bfde:	ea49 0404 	orr.w	r4, r9, r4
 800bfe2:	44a8      	add	r8, r5
 800bfe4:	ea86 56ba 	eor.w	r6, r6, sl, ror #22
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bfe8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bfea:	4426      	add	r6, r4
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bfec:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bff0:	443e      	add	r6, r7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bff2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 800bff4:	651d      	str	r5, [r3, #80]	; 0x50
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800bff6:	4633      	mov	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800bff8:	9e06      	ldr	r6, [sp, #24]
 800bffa:	9305      	str	r3, [sp, #20]
 800bffc:	ea4f 4975 	mov.w	r9, r5, ror #17
 800c000:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
 800c004:	4480      	add	r8, r0
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800c006:	18b8      	adds	r0, r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c008:	4632      	mov	r2, r6
 800c00a:	9e01      	ldr	r6, [sp, #4]
 800c00c:	f8db 4058 	ldr.w	r4, [fp, #88]	; 0x58
 800c010:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 800c014:	44c8      	add	r8, r9
 800c016:	9d01      	ldr	r5, [sp, #4]
 800c018:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c01c:	4056      	eors	r6, r2
 800c01e:	ea43 070a 	orr.w	r7, r3, sl
 800c022:	ea4f 09b3 	mov.w	r9, r3, ror #2
 800c026:	9b08      	ldr	r3, [sp, #32]
 800c028:	4006      	ands	r6, r0
 800c02a:	406e      	eors	r6, r5
 800c02c:	401f      	ands	r7, r3
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c02e:	9d11      	ldr	r5, [sp, #68]	; 0x44
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c030:	9b05      	ldr	r3, [sp, #20]
 800c032:	4474      	add	r4, lr
 800c034:	ea4f 12b0 	mov.w	r2, r0, ror #6
 800c038:	4444      	add	r4, r8
 800c03a:	ea89 3973 	eor.w	r9, r9, r3, ror #13
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c03e:	ea4f 18f5 	mov.w	r8, r5, ror #7
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c042:	ea03 0e0a 	and.w	lr, r3, sl
 800c046:	ea82 22f0 	eor.w	r2, r2, r0, ror #11
 800c04a:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 800c04e:	4434      	add	r4, r6
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c050:	ea88 48b5 	eor.w	r8, r8, r5, ror #18
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c054:	ea82 6270 	eor.w	r2, r2, r0, ror #25
 800c058:	ea47 0e0e 	orr.w	lr, r7, lr
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800c05c:	9b04      	ldr	r3, [sp, #16]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c05e:	4414      	add	r4, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c060:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c064:	44ce      	add	lr, r9
 800c066:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c068:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800c06c:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c070:	1867      	adds	r7, r4, r1
 800c072:	44a6      	add	lr, r4
 800c074:	44a8      	add	r8, r5
 800c076:	9702      	str	r7, [sp, #8]
 800c078:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800c07c:	9d01      	ldr	r5, [sp, #4]
 800c07e:	9919      	ldr	r1, [sp, #100]	; 0x64
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c080:	9c06      	ldr	r4, [sp, #24]
 800c082:	ea4f 467c 	mov.w	r6, ip, ror #17
 800c086:	4415      	add	r5, r2
 800c088:	ea86 46fc 	eor.w	r6, r6, ip, ror #19
 800c08c:	9a02      	ldr	r2, [sp, #8]
 800c08e:	ea86 269c 	eor.w	r6, r6, ip, lsr #10
 800c092:	4488      	add	r8, r1
 800c094:	4044      	eors	r4, r0
 800c096:	44b0      	add	r8, r6
 800c098:	4014      	ands	r4, r2
 800c09a:	ea4f 16b2 	mov.w	r6, r2, ror #6
 800c09e:	9a06      	ldr	r2, [sp, #24]
 800c0a0:	9905      	ldr	r1, [sp, #20]
 800c0a2:	4054      	eors	r4, r2
 800c0a4:	4445      	add	r5, r8
 800c0a6:	442c      	add	r4, r5
 800c0a8:	9d05      	ldr	r5, [sp, #20]
 800c0aa:	9a02      	ldr	r2, [sp, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c0ac:	4677      	mov	r7, lr
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c0ae:	ea07 0905 	and.w	r9, r7, r5
 800c0b2:	9d02      	ldr	r5, [sp, #8]
 800c0b4:	ea86 26f2 	eor.w	r6, r6, r2, ror #11
 800c0b8:	ea47 0e01 	orr.w	lr, r7, r1
 800c0bc:	ea86 6675 	eor.w	r6, r6, r5, ror #25
 800c0c0:	ea4f 01b7 	mov.w	r1, r7, ror #2
 800c0c4:	4434      	add	r4, r6
 800c0c6:	ea81 3177 	eor.w	r1, r1, r7, ror #13
 800c0ca:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800c0cc:	9610      	str	r6, [sp, #64]	; 0x40
 800c0ce:	ea0e 0e0a 	and.w	lr, lr, sl
 800c0d2:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c0d4:	960f      	str	r6, [sp, #60]	; 0x3c
 800c0d6:	ea4e 0e09 	orr.w	lr, lr, r9
 800c0da:	ea81 55b7 	eor.w	r5, r1, r7, ror #22
 800c0de:	46b9      	mov	r9, r7
 800c0e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c0e2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c0e4:	9712      	str	r7, [sp, #72]	; 0x48
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c0e6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c0e8:	659f      	str	r7, [r3, #88]	; 0x58
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c0ea:	4475      	add	r5, lr
 800c0ec:	960e      	str	r6, [sp, #56]	; 0x38
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800c0ee:	469e      	mov	lr, r3
 800c0f0:	461e      	mov	r6, r3
 800c0f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0f8:	9b07      	ldr	r3, [sp, #28]
 800c0fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0fc:	9318      	str	r3, [sp, #96]	; 0x60
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	9316      	str	r3, [sp, #88]	; 0x58
 800c102:	970c      	str	r7, [sp, #48]	; 0x30
 800c104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c106:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c108:	9315      	str	r3, [sp, #84]	; 0x54
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c10a:	f8c6 805c 	str.w	r8, [r6, #92]	; 0x5c
 800c10e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800c112:	970d      	str	r7, [sp, #52]	; 0x34
 800c114:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c116:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c118:	9311      	str	r3, [sp, #68]	; 0x44
 800c11a:	4673      	mov	r3, lr
 800c11c:	3320      	adds	r3, #32
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	9b08      	ldr	r3, [sp, #32]
 800c122:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800c126:	4423      	add	r3, r4
 800c128:	9303      	str	r3, [sp, #12]
 800c12a:	192b      	adds	r3, r5, r4
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 800c12c:	4c1a      	ldr	r4, [pc, #104]	; (800c198 <mbedtls_internal_sha256_process+0x81c>)
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800c12e:	9301      	str	r3, [sp, #4]
 800c130:	f10b 0b20 	add.w	fp, fp, #32
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 800c134:	45a3      	cmp	fp, r4
 800c136:	f47f adc5 	bne.w	800bcc4 <mbedtls_internal_sha256_process+0x348>
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 800c13a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c13c:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c140:	68b5      	ldr	r5, [r6, #8]
 800c142:	68f1      	ldr	r1, [r6, #12]
 800c144:	6932      	ldr	r2, [r6, #16]
 800c146:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c14a:	4634      	mov	r4, r6
 800c14c:	6976      	ldr	r6, [r6, #20]
 800c14e:	9601      	str	r6, [sp, #4]
 800c150:	4626      	mov	r6, r4
 800c152:	69a4      	ldr	r4, [r4, #24]
 800c154:	9402      	str	r4, [sp, #8]
 800c156:	6a34      	ldr	r4, [r6, #32]
 800c158:	69f7      	ldr	r7, [r6, #28]
 800c15a:	469e      	mov	lr, r3
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	9403      	str	r4, [sp, #12]
 800c160:	9c05      	ldr	r4, [sp, #20]
 800c162:	4475      	add	r5, lr
 800c164:	4422      	add	r2, r4
 800c166:	60b5      	str	r5, [r6, #8]
 800c168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c16a:	9e02      	ldr	r6, [sp, #8]
 800c16c:	9d01      	ldr	r5, [sp, #4]
 800c16e:	4433      	add	r3, r6
 800c170:	9e03      	ldr	r6, [sp, #12]
 800c172:	4430      	add	r0, r6
 800c174:	46b6      	mov	lr, r6
 800c176:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c178:	4449      	add	r1, r9
 800c17a:	4455      	add	r5, sl
 800c17c:	4467      	add	r7, ip
 800c17e:	445c      	add	r4, fp
 800c180:	6230      	str	r0, [r6, #32]

    return( 0 );
}
 800c182:	2000      	movs	r0, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 800c184:	60f1      	str	r1, [r6, #12]
 800c186:	6132      	str	r2, [r6, #16]
 800c188:	6175      	str	r5, [r6, #20]
 800c18a:	61b3      	str	r3, [r6, #24]
 800c18c:	61f7      	str	r7, [r6, #28]
 800c18e:	6274      	str	r4, [r6, #36]	; 0x24

    return( 0 );
}
 800c190:	b065      	add	sp, #404	; 0x194
 800c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c196:	bf00      	nop
 800c198:	0800e0d8 	.word	0x0800e0d8

0800c19c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 800c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	b332      	cbz	r2, 800c1f2 <mbedtls_sha256_update_ret+0x56>
 800c1a4:	4606      	mov	r6, r0
        return( 0 );

    left = ctx->total[0] & 0x3F;
 800c1a6:	6800      	ldr	r0, [r0, #0]
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 800c1a8:	1813      	adds	r3, r2, r0
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	460d      	mov	r5, r1
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 800c1ae:	6033      	str	r3, [r6, #0]
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
 800c1b0:	f000 073f 	and.w	r7, r0, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 800c1b4:	d902      	bls.n	800c1bc <mbedtls_sha256_update_ret+0x20>
        ctx->total[1]++;
 800c1b6:	6873      	ldr	r3, [r6, #4]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	6073      	str	r3, [r6, #4]

    if( left && ilen >= fill )
 800c1bc:	b977      	cbnz	r7, 800c1dc <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800c1be:	2c3f      	cmp	r4, #63	; 0x3f
 800c1c0:	d802      	bhi.n	800c1c8 <mbedtls_sha256_update_ret+0x2c>
 800c1c2:	e00f      	b.n	800c1e4 <mbedtls_sha256_update_ret+0x48>
 800c1c4:	2c3f      	cmp	r4, #63	; 0x3f
 800c1c6:	d917      	bls.n	800c1f8 <mbedtls_sha256_update_ret+0x5c>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f7ff fbd6 	bl	800b97c <mbedtls_internal_sha256_process>
            return( ret );

        input += 64;
        ilen  -= 64;
 800c1d0:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
            return( ret );

        input += 64;
 800c1d2:	3540      	adds	r5, #64	; 0x40
        left = 0;
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d0f5      	beq.n	800c1c4 <mbedtls_sha256_update_ret+0x28>

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
}
 800c1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 800c1dc:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 800c1e0:	4544      	cmp	r4, r8
 800c1e2:	d20e      	bcs.n	800c202 <mbedtls_sha256_update_ret+0x66>
        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800c1e4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c1e8:	4430      	add	r0, r6
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	f001 fb65 	bl	800d8bc <memcpy>

    return( 0 );
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 800c1f8:	2c00      	cmp	r4, #0
 800c1fa:	d1f3      	bne.n	800c1e4 <mbedtls_sha256_update_ret+0x48>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800c202:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c206:	4629      	mov	r1, r5
 800c208:	4430      	add	r0, r6
 800c20a:	4642      	mov	r2, r8
 800c20c:	f001 fb56 	bl	800d8bc <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c210:	4630      	mov	r0, r6
 800c212:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800c216:	f7ff fbb1 	bl	800b97c <mbedtls_internal_sha256_process>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d1dc      	bne.n	800c1d8 <mbedtls_sha256_update_ret+0x3c>
            return( ret );

        input += fill;
        ilen  -= fill;
 800c21e:	ebc8 0404 	rsb	r4, r8, r4
        memcpy( (void *) (ctx->buffer + left), input, fill );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        input += fill;
 800c222:	4445      	add	r5, r8
        ilen  -= fill;
        left = 0;
 800c224:	4607      	mov	r7, r0
 800c226:	e7cd      	b.n	800c1c4 <mbedtls_sha256_update_ret+0x28>

0800c228 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 800c228:	6802      	ldr	r2, [r0, #0]
 800c22a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 800c22e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c232:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 800c234:	4410      	add	r0, r2
 800c236:	2680      	movs	r6, #128	; 0x80
 800c238:	1c53      	adds	r3, r2, #1
 800c23a:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28

    if( used <= 56 )
 800c23e:	2b38      	cmp	r3, #56	; 0x38
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800c240:	f102 0029 	add.w	r0, r2, #41	; 0x29
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 800c244:	460d      	mov	r5, r1
    ctx->buffer[used++] = 0x80;

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800c246:	4420      	add	r0, r4
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;

    if( used <= 56 )
 800c248:	d87b      	bhi.n	800c342 <mbedtls_sha256_finish_ret+0x11a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800c24a:	f1c2 0237 	rsb	r2, r2, #55	; 0x37
 800c24e:	2100      	movs	r1, #0
 800c250:	f001 fb3f 	bl	800d8d2 <memset>
 800c254:	f104 0628 	add.w	r6, r4, #40	; 0x28
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800c258:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 800c25a:	6861      	ldr	r1, [r4, #4]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800c25c:	0f5a      	lsrs	r2, r3, #29
 800c25e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 800c262:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800c264:	0a18      	lsrs	r0, r3, #8
 800c266:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800c26a:	0c1f      	lsrs	r7, r3, #16
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800c26c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 800c270:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800c274:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800c278:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c27c:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c280:	4631      	mov	r1, r6
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800c282:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 800c286:	f884 9060 	strb.w	r9, [r4, #96]	; 0x60
 800c28a:	f884 8061 	strb.w	r8, [r4, #97]	; 0x61
 800c28e:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800c292:	f884 e064 	strb.w	lr, [r4, #100]	; 0x64
 800c296:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff fb6e 	bl	800b97c <mbedtls_internal_sha256_process>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d15b      	bne.n	800c35e <mbedtls_sha256_finish_ret+0x136>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 800c2a6:	7ae2      	ldrb	r2, [r4, #11]
 800c2a8:	702a      	strb	r2, [r5, #0]
 800c2aa:	8962      	ldrh	r2, [r4, #10]
 800c2ac:	706a      	strb	r2, [r5, #1]
 800c2ae:	68a2      	ldr	r2, [r4, #8]
 800c2b0:	0a12      	lsrs	r2, r2, #8
 800c2b2:	70aa      	strb	r2, [r5, #2]
 800c2b4:	68a2      	ldr	r2, [r4, #8]
 800c2b6:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 800c2b8:	7be2      	ldrb	r2, [r4, #15]
 800c2ba:	712a      	strb	r2, [r5, #4]
 800c2bc:	89e2      	ldrh	r2, [r4, #14]
 800c2be:	716a      	strb	r2, [r5, #5]
 800c2c0:	68e2      	ldr	r2, [r4, #12]
 800c2c2:	0a12      	lsrs	r2, r2, #8
 800c2c4:	71aa      	strb	r2, [r5, #6]
 800c2c6:	68e2      	ldr	r2, [r4, #12]
 800c2c8:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 800c2ca:	7ce2      	ldrb	r2, [r4, #19]
 800c2cc:	722a      	strb	r2, [r5, #8]
 800c2ce:	8a62      	ldrh	r2, [r4, #18]
 800c2d0:	726a      	strb	r2, [r5, #9]
 800c2d2:	6922      	ldr	r2, [r4, #16]
 800c2d4:	0a12      	lsrs	r2, r2, #8
 800c2d6:	72aa      	strb	r2, [r5, #10]
 800c2d8:	6922      	ldr	r2, [r4, #16]
 800c2da:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 800c2dc:	7de2      	ldrb	r2, [r4, #23]
 800c2de:	732a      	strb	r2, [r5, #12]
 800c2e0:	8ae2      	ldrh	r2, [r4, #22]
 800c2e2:	736a      	strb	r2, [r5, #13]
 800c2e4:	6962      	ldr	r2, [r4, #20]
 800c2e6:	0a12      	lsrs	r2, r2, #8
 800c2e8:	73aa      	strb	r2, [r5, #14]
 800c2ea:	6962      	ldr	r2, [r4, #20]
 800c2ec:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 800c2ee:	7ee2      	ldrb	r2, [r4, #27]
 800c2f0:	742a      	strb	r2, [r5, #16]
 800c2f2:	8b62      	ldrh	r2, [r4, #26]
 800c2f4:	746a      	strb	r2, [r5, #17]
 800c2f6:	69a2      	ldr	r2, [r4, #24]
 800c2f8:	0a12      	lsrs	r2, r2, #8
 800c2fa:	74aa      	strb	r2, [r5, #18]
 800c2fc:	69a2      	ldr	r2, [r4, #24]
 800c2fe:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 800c300:	7fe2      	ldrb	r2, [r4, #31]
 800c302:	752a      	strb	r2, [r5, #20]
 800c304:	8be2      	ldrh	r2, [r4, #30]
 800c306:	756a      	strb	r2, [r5, #21]
 800c308:	69e2      	ldr	r2, [r4, #28]
 800c30a:	0a12      	lsrs	r2, r2, #8
 800c30c:	75aa      	strb	r2, [r5, #22]
 800c30e:	69e2      	ldr	r2, [r4, #28]
 800c310:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 800c312:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800c316:	762a      	strb	r2, [r5, #24]
 800c318:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800c31a:	766a      	strb	r2, [r5, #25]
 800c31c:	6a22      	ldr	r2, [r4, #32]
 800c31e:	0a12      	lsrs	r2, r2, #8
 800c320:	76aa      	strb	r2, [r5, #26]
 800c322:	6a22      	ldr	r2, [r4, #32]
 800c324:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 800c326:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800c328:	b9c8      	cbnz	r0, 800c35e <mbedtls_sha256_finish_ret+0x136>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 800c32a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800c32e:	772b      	strb	r3, [r5, #28]
 800c330:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c332:	776b      	strb	r3, [r5, #29]
 800c334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c336:	0a1b      	lsrs	r3, r3, #8
 800c338:	77ab      	strb	r3, [r5, #30]
 800c33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c33c:	77eb      	strb	r3, [r5, #31]
 800c33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memset( ctx->buffer + used, 0, 56 - used );
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 800c342:	2100      	movs	r1, #0
 800c344:	f1c2 023f 	rsb	r2, r2, #63	; 0x3f

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c348:	f104 0628 	add.w	r6, r4, #40	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 800c34c:	f001 fac1 	bl	800d8d2 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800c350:	4631      	mov	r1, r6
 800c352:	4620      	mov	r0, r4
 800c354:	f7ff fb12 	bl	800b97c <mbedtls_internal_sha256_process>
 800c358:	b120      	cbz	r0, 800c364 <mbedtls_sha256_finish_ret+0x13c>

    if( ctx->is224 == 0 )
        PUT_UINT32_BE( ctx->state[7], output, 28 );

    return( 0 );
}
 800c35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    PUT_UINT32_BE( ctx->state[6], output, 24 );

    if( ctx->is224 == 0 )
        PUT_UINT32_BE( ctx->state[7], output, 28 );

    return( 0 );
 800c35e:	4618      	mov	r0, r3
}
 800c360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 800c364:	4601      	mov	r1, r0
 800c366:	2238      	movs	r2, #56	; 0x38
 800c368:	4630      	mov	r0, r6
 800c36a:	f001 fab2 	bl	800d8d2 <memset>
 800c36e:	e773      	b.n	800c258 <mbedtls_sha256_finish_ret+0x30>

0800c370 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 800c370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c374:	b09d      	sub	sp, #116	; 0x74
 800c376:	4605      	mov	r5, r0
 800c378:	460c      	mov	r4, r1
 800c37a:	4617      	mov	r7, r2
 800c37c:	461e      	mov	r6, r3

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 800c37e:	a801      	add	r0, sp, #4
 800c380:	2100      	movs	r1, #0
 800c382:	226c      	movs	r2, #108	; 0x6c
 800c384:	f001 faa5 	bl	800d8d2 <memset>
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
 800c388:	bb36      	cbnz	r6, 800c3d8 <mbedtls_sha256_ret+0x68>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 800c38a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800c440 <mbedtls_sha256_ret+0xd0>
        ctx->state[1] = 0xBB67AE85;
 800c38e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800c444 <mbedtls_sha256_ret+0xd4>
        ctx->state[2] = 0x3C6EF372;
 800c392:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c448 <mbedtls_sha256_ret+0xd8>
        ctx->state[3] = 0xA54FF53A;
 800c396:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800c44c <mbedtls_sha256_ret+0xdc>
        ctx->state[4] = 0x510E527F;
 800c39a:	4821      	ldr	r0, [pc, #132]	; (800c420 <mbedtls_sha256_ret+0xb0>)
        ctx->state[5] = 0x9B05688C;
 800c39c:	4921      	ldr	r1, [pc, #132]	; (800c424 <mbedtls_sha256_ret+0xb4>)
        ctx->state[6] = 0x1F83D9AB;
 800c39e:	4a22      	ldr	r2, [pc, #136]	; (800c428 <mbedtls_sha256_ret+0xb8>)
        ctx->state[7] = 0x5BE0CD19;
 800c3a0:	4b22      	ldr	r3, [pc, #136]	; (800c42c <mbedtls_sha256_ret+0xbc>)
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800c3a2:	f8cd 900c 	str.w	r9, [sp, #12]
        ctx->state[1] = 0x367CD507;
 800c3a6:	f8cd 8010 	str.w	r8, [sp, #16]
        ctx->state[2] = 0x3070DD17;
 800c3aa:	f8cd c014 	str.w	ip, [sp, #20]
        ctx->state[3] = 0xF70E5939;
 800c3ae:	f8cd e018 	str.w	lr, [sp, #24]
        ctx->state[4] = 0xFFC00B31;
 800c3b2:	9007      	str	r0, [sp, #28]
        ctx->state[5] = 0x68581511;
 800c3b4:	9108      	str	r1, [sp, #32]
        ctx->state[6] = 0x64F98FA7;
 800c3b6:	9209      	str	r2, [sp, #36]	; 0x24
        ctx->state[7] = 0xBEFA4FA4;
 800c3b8:	930a      	str	r3, [sp, #40]	; 0x28
    }

    ctx->is224 = is224;
 800c3ba:	961b      	str	r6, [sp, #108]	; 0x6c
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800c3bc:	b9cc      	cbnz	r4, 800c3f2 <mbedtls_sha256_ret+0x82>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 800c3be:	4639      	mov	r1, r7
 800c3c0:	a801      	add	r0, sp, #4
 800c3c2:	f7ff ff31 	bl	800c228 <mbedtls_sha256_finish_ret>
 800c3c6:	4606      	mov	r6, r0
void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 800c3c8:	a801      	add	r0, sp, #4
 800c3ca:	216c      	movs	r1, #108	; 0x6c
 800c3cc:	f7ff fa76 	bl	800b8bc <mbedtls_platform_zeroize>

exit:
    mbedtls_sha256_free( &ctx );

    return( ret );
}
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	b01d      	add	sp, #116	; 0x74
 800c3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800c3d8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800c450 <mbedtls_sha256_ret+0xe0>
        ctx->state[1] = 0x367CD507;
 800c3dc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800c454 <mbedtls_sha256_ret+0xe4>
        ctx->state[2] = 0x3070DD17;
 800c3e0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c458 <mbedtls_sha256_ret+0xe8>
        ctx->state[3] = 0xF70E5939;
 800c3e4:	f8df e074 	ldr.w	lr, [pc, #116]	; 800c45c <mbedtls_sha256_ret+0xec>
        ctx->state[4] = 0xFFC00B31;
 800c3e8:	4811      	ldr	r0, [pc, #68]	; (800c430 <mbedtls_sha256_ret+0xc0>)
        ctx->state[5] = 0x68581511;
 800c3ea:	4912      	ldr	r1, [pc, #72]	; (800c434 <mbedtls_sha256_ret+0xc4>)
        ctx->state[6] = 0x64F98FA7;
 800c3ec:	4a12      	ldr	r2, [pc, #72]	; (800c438 <mbedtls_sha256_ret+0xc8>)
        ctx->state[7] = 0xBEFA4FA4;
 800c3ee:	4b13      	ldr	r3, [pc, #76]	; (800c43c <mbedtls_sha256_ret+0xcc>)
 800c3f0:	e7d7      	b.n	800c3a2 <mbedtls_sha256_ret+0x32>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800c3f2:	2c3f      	cmp	r4, #63	; 0x3f
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 800c3f4:	9401      	str	r4, [sp, #4]
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800c3f6:	d90c      	bls.n	800c412 <mbedtls_sha256_ret+0xa2>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	a801      	add	r0, sp, #4
 800c3fc:	f7ff fabe 	bl	800b97c <mbedtls_internal_sha256_process>
            return( ret );

        input += 64;
        ilen  -= 64;
 800c400:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c402:	4606      	mov	r6, r0
            return( ret );

        input += 64;
 800c404:	3540      	adds	r5, #64	; 0x40
        left = 0;
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800c406:	2800      	cmp	r0, #0
 800c408:	d1de      	bne.n	800c3c8 <mbedtls_sha256_ret+0x58>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 800c40a:	2c3f      	cmp	r4, #63	; 0x3f
 800c40c:	d8f4      	bhi.n	800c3f8 <mbedtls_sha256_ret+0x88>

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 800c40e:	2c00      	cmp	r4, #0
 800c410:	d0d5      	beq.n	800c3be <mbedtls_sha256_ret+0x4e>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800c412:	4629      	mov	r1, r5
 800c414:	4622      	mov	r2, r4
 800c416:	a80b      	add	r0, sp, #44	; 0x2c
 800c418:	f001 fa50 	bl	800d8bc <memcpy>
 800c41c:	e7cf      	b.n	800c3be <mbedtls_sha256_ret+0x4e>
 800c41e:	bf00      	nop
 800c420:	510e527f 	.word	0x510e527f
 800c424:	9b05688c 	.word	0x9b05688c
 800c428:	1f83d9ab 	.word	0x1f83d9ab
 800c42c:	5be0cd19 	.word	0x5be0cd19
 800c430:	ffc00b31 	.word	0xffc00b31
 800c434:	68581511 	.word	0x68581511
 800c438:	64f98fa7 	.word	0x64f98fa7
 800c43c:	befa4fa4 	.word	0xbefa4fa4
 800c440:	6a09e667 	.word	0x6a09e667
 800c444:	bb67ae85 	.word	0xbb67ae85
 800c448:	3c6ef372 	.word	0x3c6ef372
 800c44c:	a54ff53a 	.word	0xa54ff53a
 800c450:	c1059ed8 	.word	0xc1059ed8
 800c454:	367cd507 	.word	0x367cd507
 800c458:	3070dd17 	.word	0x3070dd17
 800c45c:	f70e5939 	.word	0xf70e5939

0800c460 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c460:	4b01      	ldr	r3, [pc, #4]	; (800c468 <optiga_lib_callback+0x8>)
 800c462:	8019      	strh	r1, [r3, #0]
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	1fff10d6 	.word	0x1fff10d6

0800c46c <example_optiga_init>:
}

optiga_util_t * me_util_instance = NULL;

void example_optiga_init(void)
{
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop

0800c470 <example_optiga_init_true>:

}

void example_optiga_init_true(void)
{
 800c470:	b510      	push	{r4, lr}
#endif
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);

    do
    {
        if (NULL == me_util_instance)
 800c472:	4c13      	ldr	r4, [pc, #76]	; (800c4c0 <example_optiga_init_true+0x50>)
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	b1d8      	cbz	r0, 800c4b0 <example_optiga_init_true+0x40>

        /**
         * Open the application on OPTIGA which is a precondition to perform any other operations
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c478:	4c12      	ldr	r4, [pc, #72]	; (800c4c4 <example_optiga_init_true+0x54>)
 800c47a:	2301      	movs	r3, #1
        return_status = optiga_util_open_application(me_util_instance, 0);
 800c47c:	2100      	movs	r1, #0

        /**
         * Open the application on OPTIGA which is a precondition to perform any other operations
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c47e:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_open_application(me_util_instance, 0);
 800c480:	f7f9 f872 	bl	8005568 <optiga_util_open_application>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c484:	b950      	cbnz	r0, 800c49c <example_optiga_init_true+0x2c>
 800c486:	8823      	ldrh	r3, [r4, #0]
 800c488:	4a0e      	ldr	r2, [pc, #56]	; (800c4c4 <example_optiga_init_true+0x54>)
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d0fa      	beq.n	800c486 <example_optiga_init_true+0x16>
 800c490:	8813      	ldrh	r3, [r2, #0]
 800c492:	b29b      	uxth	r3, r3
 800c494:	b91b      	cbnz	r3, 800c49e <example_optiga_init_true+0x2e>

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if(FALSE == host_optiga_pairing_completed)
 800c496:	4c0c      	ldr	r4, [pc, #48]	; (800c4c8 <example_optiga_init_true+0x58>)
 800c498:	7823      	ldrb	r3, [r4, #0]
 800c49a:	b113      	cbz	r3, 800c4a2 <example_optiga_init_true+0x32>
 800c49c:	bd10      	pop	{r4, pc}
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_open_application(me_util_instance, 0);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c49e:	8813      	ldrh	r3, [r2, #0]
 800c4a0:	bd10      	pop	{r4, pc}
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if(FALSE == host_optiga_pairing_completed)
        {
            OPTIGA_EXAMPLE_LOG_MESSAGE("pair_host_and_optiga_using_pre_shared_secret");
            // Generate the pre-shared secret on host and write it to OPTIGA
            return_status = pair_host_and_optiga_using_pre_shared_secret();
 800c4a2:	f000 f81d 	bl	800c4e0 <pair_host_and_optiga_using_pre_shared_secret>
            if (OPTIGA_LIB_SUCCESS != return_status)
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d1f8      	bne.n	800c49c <example_optiga_init_true+0x2c>
            {
                //pairing of host and optiga failed
                break;
            }
            host_optiga_pairing_completed = TRUE;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	7023      	strb	r3, [r4, #0]
 800c4ae:	e7f5      	b.n	800c49c <example_optiga_init_true+0x2c>
    do
    {
        if (NULL == me_util_instance)
        {
            //Create an instance of optiga_util to open the application on OPTIGA.
            me_util_instance = optiga_util_create(0, optiga_lib_callback, NULL);
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	4906      	ldr	r1, [pc, #24]	; (800c4cc <example_optiga_init_true+0x5c>)
 800c4b4:	f7f9 f818 	bl	80054e8 <optiga_util_create>
 800c4b8:	6020      	str	r0, [r4, #0]
            if (NULL == me_util_instance)
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d1dc      	bne.n	800c478 <example_optiga_init_true+0x8>
 800c4be:	e7ed      	b.n	800c49c <example_optiga_init_true+0x2c>
 800c4c0:	1fff10d0 	.word	0x1fff10d0
 800c4c4:	1fff10d6 	.word	0x1fff10d6
 800c4c8:	1fff10d4 	.word	0x1fff10d4
 800c4cc:	0800c461 	.word	0x0800c461

0800c4d0 <example_optiga_deinit>:
    }while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
}

void example_optiga_deinit(void)
{
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop

0800c4d4 <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c4d4:	4b01      	ldr	r3, [pc, #4]	; (800c4dc <optiga_lib_callback+0x8>)
 800c4d6:	8019      	strh	r1, [r3, #0]
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	1fff10dc 	.word	0x1fff10dc

0800c4e0 <pair_host_and_optiga_using_pre_shared_secret>:
        // callback to upper layer here
    }
}

optiga_lib_status_t pair_host_and_optiga_using_pre_shared_secret(void)
{
 800c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    do
    {
        /**
         * 1. Create OPTIGA Util and Crypt Instances
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
 800c4e4:	2000      	movs	r0, #0
        // callback to upper layer here
    }
}

optiga_lib_status_t pair_host_and_optiga_using_pre_shared_secret(void)
{
 800c4e6:	b09e      	sub	sp, #120	; 0x78
    do
    {
        /**
         * 1. Create OPTIGA Util and Crypt Instances
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	4957      	ldr	r1, [pc, #348]	; (800c648 <pair_host_and_optiga_using_pre_shared_secret+0x168>)
 800c4ec:	f7f8 fffc 	bl	80054e8 <optiga_util_create>
        if (NULL == me_util)
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d046      	beq.n	800c584 <pair_host_and_optiga_using_pre_shared_secret+0xa4>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	4953      	ldr	r1, [pc, #332]	; (800c648 <pair_host_and_optiga_using_pre_shared_secret+0x168>)
 800c4fc:	f7f9 fa00 	bl	8005900 <optiga_crypt_create>
        if (NULL == me_crypt)
 800c500:	4607      	mov	r7, r0
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800c502:	4620      	mov	r0, r4
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
        if (NULL == me_crypt)
 800c504:	2f00      	cmp	r7, #0
 800c506:	d038      	beq.n	800c57a <pair_host_and_optiga_using_pre_shared_secret+0x9a>
        }

        /**
         * 2. Initialize the protection level and protocol version for the instances
         */
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c508:	2101      	movs	r1, #1
 800c50a:	2200      	movs	r2, #0
 800c50c:	f7f8 ffe0 	bl	80054d0 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me_util,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800c510:	4620      	mov	r0, r4
 800c512:	2102      	movs	r1, #2
 800c514:	2201      	movs	r2, #1
 800c516:	f7f8 ffdb 	bl	80054d0 <optiga_util_set_comms_params>

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt,OPTIGA_COMMS_NO_PROTECTION);
 800c51a:	4638      	mov	r0, r7
 800c51c:	2101      	movs	r1, #1
 800c51e:	2200      	movs	r2, #0
 800c520:	f7f9 f9e2 	bl	80058e8 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me_crypt,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800c524:	4638      	mov	r0, r7
 800c526:	2102      	movs	r1, #2
 800c528:	2201      	movs	r2, #1
 800c52a:	f7f9 f9dd 	bl	80058e8 <optiga_crypt_set_comms_params>
        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c52e:	4d47      	ldr	r5, [pc, #284]	; (800c64c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
        
        START_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c530:	4847      	ldr	r0, [pc, #284]	; (800c650 <pair_host_and_optiga_using_pre_shared_secret+0x170>)
        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c532:	2301      	movs	r3, #1
        
        START_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c534:	4619      	mov	r1, r3

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
 800c536:	222c      	movs	r2, #44	; 0x2c
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c538:	802b      	strh	r3, [r5, #0]

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
 800c53a:	f8ad 200a 	strh.w	r2, [sp, #10]
        optiga_lib_status = OPTIGA_LIB_BUSY;
        
        START_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c53e:	f000 f959 	bl	800c7f4 <example_performance_measurement>
        
        return_status = optiga_util_read_metadata(me_util,
 800c542:	4620      	mov	r0, r4
 800c544:	f24e 1140 	movw	r1, #57664	; 0xe140
 800c548:	aa03      	add	r2, sp, #12
 800c54a:	f10d 030a 	add.w	r3, sp, #10
 800c54e:	f7f9 f893 	bl	8005678 <optiga_util_read_metadata>
                                                  0xE140,
                                                  platform_binding_secret_metadata,
                                                  &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c552:	b140      	cbz	r0, 800c566 <pair_host_and_optiga_using_pre_shared_secret+0x86>
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800c554:	4620      	mov	r0, r4
 800c556:	f7f8 ffef 	bl	8005538 <optiga_util_destroy>
        }
    }
    if(me_crypt)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
 800c55a:	4638      	mov	r0, r7
 800c55c:	f7f9 f9f8 	bl	8005950 <optiga_crypt_destroy>
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
    return return_status;
}
 800c560:	b01e      	add	sp, #120	; 0x78
 800c562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return_status = optiga_util_read_metadata(me_util,
                                                  0xE140,
                                                  platform_binding_secret_metadata,
                                                  &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c566:	882b      	ldrh	r3, [r5, #0]
 800c568:	4e38      	ldr	r6, [pc, #224]	; (800c64c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d0fa      	beq.n	800c566 <pair_host_and_optiga_using_pre_shared_secret+0x86>
 800c570:	8831      	ldrh	r1, [r6, #0]
 800c572:	b289      	uxth	r1, r1
 800c574:	b151      	cbz	r1, 800c58c <pair_host_and_optiga_using_pre_shared_secret+0xac>
                                               0xE140,
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               platform_binding_secret,
                                               sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c576:	8833      	ldrh	r3, [r6, #0]
 800c578:	e7ec      	b.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800c57a:	f7f8 ffdd 	bl	8005538 <optiga_util_destroy>
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
    return return_status;
}
 800c57e:	b01e      	add	sp, #120	; 0x78
 800c580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
optiga_lib_status_t pair_host_and_optiga_using_pre_shared_secret(void)
{
    uint16_t bytes_to_read;
    uint8_t platform_binding_secret[64];
    uint8_t platform_binding_secret_metadata[44];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 800c584:	2001      	movs	r0, #1
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
    return return_status;
}
 800c586:	b01e      	add	sp, #120	; 0x78
 800c588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        /**
         * 4. Validate LcsO in the metadata.
         *    Skip the rest of the procedure if LcsO is greater than or equal to operational state(0x07)
         */
        if (platform_binding_secret_metadata[4] >= LCSO_STATE_OPERATIONAL)
 800c58c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c590:	2b06      	cmp	r3, #6
 800c592:	d8df      	bhi.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generated by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c594:	f04f 0e01 	mov.w	lr, #1
        return_status = optiga_crypt_random(me_crypt,
 800c598:	aa0e      	add	r2, sp, #56	; 0x38
 800c59a:	4638      	mov	r0, r7
 800c59c:	2340      	movs	r3, #64	; 0x40
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generated by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c59e:	f8a6 e000 	strh.w	lr, [r6]
        return_status = optiga_crypt_random(me_crypt,
 800c5a2:	f7f9 f9ed 	bl	8005980 <optiga_crypt_random>
                                            OPTIGA_RNG_TYPE_TRNG,
                                            platform_binding_secret,
                                            sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d1d4      	bne.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c5aa:	882b      	ldrh	r3, [r5, #0]
 800c5ac:	4e27      	ldr	r6, [pc, #156]	; (800c64c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d0fa      	beq.n	800c5aa <pair_host_and_optiga_using_pre_shared_secret+0xca>
 800c5b4:	f8b6 8000 	ldrh.w	r8, [r6]
 800c5b8:	fa1f f888 	uxth.w	r8, r8
 800c5bc:	f1b8 0f00 	cmp.w	r8, #0
 800c5c0:	d1d9      	bne.n	800c576 <pair_host_and_optiga_using_pre_shared_secret+0x96>


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c5c2:	2301      	movs	r3, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4642      	mov	r2, r8


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c5ca:	8033      	strh	r3, [r6, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c5cc:	f7f8 ff80 	bl	80054d0 <optiga_util_set_comms_params>
        return_status = optiga_util_write_data(me_util,
 800c5d0:	ab0e      	add	r3, sp, #56	; 0x38
 800c5d2:	2240      	movs	r2, #64	; 0x40
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	9201      	str	r2, [sp, #4]
 800c5d8:	4643      	mov	r3, r8
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f24e 1140 	movw	r1, #57664	; 0xe140
 800c5e0:	f7f9 f896 	bl	8005710 <optiga_util_write_data>
                                               0xE140,
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               platform_binding_secret,
                                               sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d1b5      	bne.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c5e8:	882b      	ldrh	r3, [r5, #0]
 800c5ea:	4e18      	ldr	r6, [pc, #96]	; (800c64c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d0fa      	beq.n	800c5e8 <pair_host_and_optiga_using_pre_shared_secret+0x108>
 800c5f2:	8833      	ldrh	r3, [r6, #0]
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1bd      	bne.n	800c576 <pair_host_and_optiga_using_pre_shared_secret+0x96>

        /**
         * 8. Write/store the random(secret) on the Host platform
         *
         */
        pal_return_status = pal_os_datastore_write(OPTIGA_PLATFORM_BINDING_SHARED_SECRET_ID,
 800c5fa:	2240      	movs	r2, #64	; 0x40
 800c5fc:	a90e      	add	r1, sp, #56	; 0x38
 800c5fe:	2011      	movs	r0, #17
 800c600:	f7f8 fe78 	bl	80052f4 <pal_os_datastore_write>
                                                   platform_binding_secret,
                                                   sizeof(platform_binding_secret));

        if (PAL_STATUS_SUCCESS != pal_return_status)
 800c604:	4602      	mov	r2, r0
 800c606:	b108      	cbz	r0, 800c60c <pair_host_and_optiga_using_pre_shared_secret+0x12c>
        {
            //Storing of Pre-shared secret on Host failed.
            optiga_lib_status = pal_return_status;
 800c608:	8030      	strh	r0, [r6, #0]
            break;
 800c60a:	e7a3      	b.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c60c:	2301      	movs	r3, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c60e:	4619      	mov	r1, r3
 800c610:	4620      	mov	r0, r4


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c612:	8033      	strh	r3, [r6, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800c614:	f7f8 ff5c 	bl	80054d0 <optiga_util_set_comms_params>
        return_status = optiga_util_write_metadata(me_util,
 800c618:	4620      	mov	r0, r4
 800c61a:	f24e 1140 	movw	r1, #57664	; 0xe140
 800c61e:	4a0d      	ldr	r2, [pc, #52]	; (800c654 <pair_host_and_optiga_using_pre_shared_secret+0x174>)
 800c620:	2319      	movs	r3, #25
 800c622:	f7f9 f8cb 	bl	80057bc <optiga_util_write_metadata>
                                                   0xE140,
                                                   platform_binding_shared_secret_metadata_final,
                                                   sizeof(platform_binding_shared_secret_metadata_final));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c626:	2800      	cmp	r0, #0
 800c628:	d194      	bne.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c62a:	882b      	ldrh	r3, [r5, #0]
 800c62c:	4a07      	ldr	r2, [pc, #28]	; (800c64c <pair_host_and_optiga_using_pre_shared_secret+0x16c>)
 800c62e:	b29b      	uxth	r3, r3
 800c630:	2b01      	cmp	r3, #1
 800c632:	d0fa      	beq.n	800c62a <pair_host_and_optiga_using_pre_shared_secret+0x14a>
 800c634:	8811      	ldrh	r1, [r2, #0]
 800c636:	b289      	uxth	r1, r1
 800c638:	b109      	cbz	r1, 800c63e <pair_host_and_optiga_using_pre_shared_secret+0x15e>
 800c63a:	8813      	ldrh	r3, [r2, #0]
 800c63c:	e78a      	b.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>
        
        READ_PERFORMANCE_MEASUREMENT(time_taken_for_pairing);
 800c63e:	4804      	ldr	r0, [pc, #16]	; (800c650 <pair_host_and_optiga_using_pre_shared_secret+0x170>)
 800c640:	f000 f8d8 	bl	800c7f4 <example_performance_measurement>
 800c644:	e786      	b.n	800c554 <pair_host_and_optiga_using_pre_shared_secret+0x74>
 800c646:	bf00      	nop
 800c648:	0800c4d5 	.word	0x0800c4d5
 800c64c:	1fff10dc 	.word	0x1fff10dc
 800c650:	1fff10d8 	.word	0x1fff10d8
 800c654:	0800e118 	.word	0x0800e118

0800c658 <example_util_encode_rsa_public_key_in_bit_string_format>:
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c65c:	f890 a000 	ldrb.w	sl, [r0]
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c660:	b091      	sub	sp, #68	; 0x44
 800c662:	460d      	mov	r5, r1
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c664:	ea4f 1ada 	mov.w	sl, sl, lsr #7
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c668:	461f      	mov	r7, r3

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);
 800c66a:	2dff      	cmp	r5, #255	; 0xff
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c66c:	fa1f f38a 	uxth.w	r3, sl
                                                        uint16_t n_length,
                                                        const uint8_t * e_buffer,
                                                        uint16_t e_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800c670:	900a      	str	r0, [sp, #40]	; 0x28
 800c672:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c674:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t index = 0;
    uint16_t modulus_signed_bit_len = 0;
    uint8_t length_field_in_bytes = 0;

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);
 800c676:	9303      	str	r3, [sp, #12]

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);
 800c678:	f200 80b4 	bhi.w	800c7e4 <example_util_encode_rsa_public_key_in_bit_string_format+0x18c>
 800c67c:	2002      	movs	r0, #2
 800c67e:	f04f 0b01 	mov.w	fp, #1
 800c682:	4602      	mov	r2, r0
 800c684:	f8cd b008 	str.w	fp, [sp, #8]
 800c688:	2681      	movs	r6, #129	; 0x81
    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c68a:	1deb      	adds	r3, r5, #7
 800c68c:	4453      	add	r3, sl
 800c68e:	443b      	add	r3, r7
 800c690:	4413      	add	r3, r2
 800c692:	2bff      	cmp	r3, #255	; 0xff

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);

    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
 800c694:	f04f 0203 	mov.w	r2, #3
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c698:	7066      	strb	r6, [r4, #1]

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);

    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
 800c69a:	7022      	strb	r2, [r4, #0]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c69c:	f340 808a 	ble.w	800c7b4 <example_util_encode_rsa_public_key_in_bit_string_format+0x15c>
 800c6a0:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800c6a4:	230b      	movs	r3, #11
 800c6a6:	930e      	str	r3, [sp, #56]	; 0x38
 800c6a8:	930d      	str	r3, [sp, #52]	; 0x34
 800c6aa:	2306      	movs	r3, #6
 800c6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ae:	2305      	movs	r3, #5
 800c6b0:	210a      	movs	r1, #10
 800c6b2:	f04f 0e08 	mov.w	lr, #8
 800c6b6:	f04f 0807 	mov.w	r8, #7
 800c6ba:	9308      	str	r3, [sp, #32]
 800c6bc:	2304      	movs	r3, #4
 800c6be:	f884 c002 	strb.w	ip, [r4, #2]
 800c6c2:	910f      	str	r1, [sp, #60]	; 0x3c
 800c6c4:	9206      	str	r2, [sp, #24]
 800c6c6:	468c      	mov	ip, r1
 800c6c8:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800c6cc:	f8cd 8004 	str.w	r8, [sp, #4]
 800c6d0:	f04f 0909 	mov.w	r9, #9
 800c6d4:	9307      	str	r3, [sp, #28]
 800c6d6:	eb0a 0305 	add.w	r3, sl, r5
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	b2f9      	uxtb	r1, r7
 800c6de:	9105      	str	r1, [sp, #20]
 800c6e0:	1851      	adds	r1, r2, r1
 800c6e2:	b2c9      	uxtb	r1, r1
 800c6e4:	9204      	str	r2, [sp, #16]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c6e6:	1d2a      	adds	r2, r5, #4
 800c6e8:	4452      	add	r2, sl
 800c6ea:	f101 0a07 	add.w	sl, r1, #7
    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c6ee:	9100      	str	r1, [sp, #0]
 800c6f0:	eb00 010a 	add.w	r1, r0, sl
 800c6f4:	9806      	ldr	r0, [sp, #24]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c6f6:	443a      	add	r2, r7
    // RSA public key formation according to DER encoded format
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 7 bytes = Unused Bits(1 byte) + Sequence Tag (1 byte) +
    //           Length tag (1 byte) * 3 occurrence + Integer tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
 800c6f8:	5421      	strb	r1, [r4, r0]
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   (2 * length_field_in_bytes)))
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
 800c6fa:	9807      	ldr	r0, [sp, #28]

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c6fc:	445a      	add	r2, fp
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x07 +
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   (2 * length_field_in_bytes)))
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
 800c6fe:	f04f 0b00 	mov.w	fp, #0
 800c702:	f804 b000 	strb.w	fp, [r4, r0]

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
 800c706:	9808      	ldr	r0, [sp, #32]
 800c708:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800c70c:	f804 a000 	strb.w	sl, [r4, r0]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c710:	9809      	ldr	r0, [sp, #36]	; 0x24
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c712:	2aff      	cmp	r2, #255	; 0xff
                                                   e_length +
                                                   (2 * length_field_in_bytes)))
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c714:	5426      	strb	r6, [r4, r0]
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c716:	dd4b      	ble.n	800c7b0 <example_util_encode_rsa_public_key_in_bit_string_format+0x158>
 800c718:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c71c:	f804 2008 	strb.w	r2, [r4, r8]
 800c720:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c724:	9001      	str	r0, [sp, #4]
 800c726:	46f0      	mov	r8, lr
 800c728:	46ce      	mov	lr, r9
 800c72a:	46e1      	mov	r9, ip
 800c72c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800c730:	9900      	ldr	r1, [sp, #0]
 800c732:	9802      	ldr	r0, [sp, #8]
 800c734:	3104      	adds	r1, #4
 800c736:	4408      	add	r0, r1
 800c738:	4601      	mov	r1, r0
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
 800c73a:	2bff      	cmp	r3, #255	; 0xff
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c73c:	f04f 0002 	mov.w	r0, #2
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    // 4 bytes = Integer tag (1 byte) * 2 occurrence + Length tag (1 byte) * 2 occurrence
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (0x04 +
 800c740:	f804 1008 	strb.w	r1, [r4, r8]
                                                   n_length +
                                                   modulus_signed_bit_len +
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c744:	f804 000e 	strb.w	r0, [r4, lr]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
 800c748:	f804 6009 	strb.w	r6, [r4, r9]
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
 800c74c:	dd07      	ble.n	800c75e <example_util_encode_rsa_public_key_in_bit_string_format+0x106>
 800c74e:	9a01      	ldr	r2, [sp, #4]
 800c750:	3204      	adds	r2, #4
 800c752:	b292      	uxth	r2, r2
 800c754:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800c758:	f804 300c 	strb.w	r3, [r4, ip]
 800c75c:	4694      	mov	ip, r2
 800c75e:	9b03      	ldr	r3, [sp, #12]
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c760:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c762:	f103 0901 	add.w	r9, r3, #1
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
 800c766:	444a      	add	r2, r9
 800c768:	fa1f f982 	uxth.w	r9, r2
                                                   e_length +
                                                   length_field_in_bytes))

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
 800c76c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c770:	f804 300c 	strb.w	r3, [r4, ip]
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c774:	462a      	mov	r2, r5
    index += n_length;
 800c776:	444d      	add	r5, r9

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c778:	eb04 0009 	add.w	r0, r4, r9
    index += n_length;
 800c77c:	b2ad      	uxth	r5, r5

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD + length_field_in_bytes;
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
 800c77e:	f7f8 fe73 	bl	8005468 <pal_os_memcpy>
    index += n_length;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c782:	1c6b      	adds	r3, r5, #1
    pub_key_buffer[index++] = (uint8_t)e_length;
 800c784:	b29b      	uxth	r3, r3
 800c786:	f105 0902 	add.w	r9, r5, #2
    OPTIGA_EXAMPLE_UTIL_SET_DER_LENGTH(pub_key_buffer, &index, (n_length  + modulus_signed_bit_len))
    index += modulus_signed_bit_len;
    pal_os_memcpy(&pub_key_buffer[index], n_buffer, n_length);
    index += n_length;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
 800c78a:	2202      	movs	r2, #2
 800c78c:	5562      	strb	r2, [r4, r5]
    pub_key_buffer[index++] = (uint8_t)e_length;
 800c78e:	fa1f f989 	uxth.w	r9, r9
 800c792:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c796:	54e2      	strb	r2, [r4, r3]
    pal_os_memcpy(&pub_key_buffer[index], e_buffer, e_length);
 800c798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c79a:	463a      	mov	r2, r7
 800c79c:	eb04 0009 	add.w	r0, r4, r9
 800c7a0:	f7f8 fe62 	bl	8005468 <pal_os_memcpy>
    index += e_length;

    *pub_key_length = index;
 800c7a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    index += n_length;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG;
    pub_key_buffer[index++] = (uint8_t)e_length;
    pal_os_memcpy(&pub_key_buffer[index], e_buffer, e_length);
    index += e_length;
 800c7a6:	444f      	add	r7, r9

    *pub_key_length = index;
 800c7a8:	801f      	strh	r7, [r3, #0]

#undef OPTIGA_EXAMPLE_UTIL_RSA_DER_MIN_LEN_FIELD
#undef OPTIGA_EXAMPLE_UTIL_RSA_DER_SEQUENCE_TAG
#undef OPTIGA_EXAMPLE_UTIL_RSA_DER_INTEGER_TAG
}
 800c7aa:	b011      	add	sp, #68	; 0x44
 800c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7b2:	e7bd      	b.n	800c730 <example_util_encode_rsa_public_key_in_bit_string_format+0xd8>
 800c7b4:	2309      	movs	r3, #9
 800c7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7b8:	469c      	mov	ip, r3
 800c7ba:	2305      	movs	r3, #5
 800c7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7be:	2304      	movs	r3, #4
 800c7c0:	210a      	movs	r1, #10
 800c7c2:	f04f 0e07 	mov.w	lr, #7
 800c7c6:	f04f 0806 	mov.w	r8, #6
 800c7ca:	9308      	str	r3, [sp, #32]
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	910e      	str	r1, [sp, #56]	; 0x38
 800c7d0:	9207      	str	r2, [sp, #28]
 800c7d2:	910d      	str	r1, [sp, #52]	; 0x34
 800c7d4:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800c7d8:	f8cd 8004 	str.w	r8, [sp, #4]
 800c7dc:	f04f 0908 	mov.w	r9, #8
 800c7e0:	9306      	str	r3, [sp, #24]
 800c7e2:	e778      	b.n	800c6d6 <example_util_encode_rsa_public_key_in_bit_string_format+0x7e>
 800c7e4:	2004      	movs	r0, #4
 800c7e6:	f04f 0b02 	mov.w	fp, #2
 800c7ea:	4602      	mov	r2, r0

    // Check if the first byte of modulus is a negative integer
    modulus_signed_bit_len = ((OPTIGA_EXAMPLE_UTIL_RSA_NEGATIVE_INTEGER < n_buffer[0]) ? 0x01 : 0x00);

    // Check the number of bytes required to represent the length field
    length_field_in_bytes = ((n_length > 0xFF)? 0x02 : 0x01);
 800c7ec:	f8cd b008 	str.w	fp, [sp, #8]
 800c7f0:	2682      	movs	r6, #130	; 0x82
 800c7f2:	e74a      	b.n	800c68a <example_util_encode_rsa_public_key_in_bit_string_format+0x32>

0800c7f4 <example_performance_measurement>:
    return (return_status);
}

void example_performance_measurement(uint32_t* time_value, uint8_t time_reset_flag)
{
    if(TRUE == time_reset_flag)
 800c7f4:	2901      	cmp	r1, #1
    } while (FALSE);
    return (return_status);
}

void example_performance_measurement(uint32_t* time_value, uint8_t time_reset_flag)
{
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	4604      	mov	r4, r0
    if(TRUE == time_reset_flag)
 800c7fa:	d006      	beq.n	800c80a <example_performance_measurement+0x16>
    {
        *time_value = pal_os_timer_get_time_in_milliseconds();
    }
    else if(FALSE == time_reset_flag)
 800c7fc:	b921      	cbnz	r1, 800c808 <example_performance_measurement+0x14>
    {
        *time_value = pal_os_timer_get_time_in_milliseconds() - *time_value;
 800c7fe:	f7f8 fe51 	bl	80054a4 <pal_os_timer_get_time_in_milliseconds>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	1ac0      	subs	r0, r0, r3
 800c806:	6020      	str	r0, [r4, #0]
 800c808:	bd10      	pop	{r4, pc}

void example_performance_measurement(uint32_t* time_value, uint8_t time_reset_flag)
{
    if(TRUE == time_reset_flag)
    {
        *time_value = pal_os_timer_get_time_in_milliseconds();
 800c80a:	f7f8 fe4b 	bl	80054a4 <pal_os_timer_get_time_in_milliseconds>
 800c80e:	6020      	str	r0, [r4, #0]
 800c810:	bd10      	pop	{r4, pc}
 800c812:	bf00      	nop

0800c814 <optiga_crypt_callback>:
volatile optiga_lib_status_t optiga_lib_status;


static void optiga_crypt_callback(void * const context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c814:	4b01      	ldr	r3, [pc, #4]	; (800c81c <optiga_crypt_callback+0x8>)
 800c816:	8019      	strh	r1, [r3, #0]
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	1fff181a 	.word	0x1fff181a

0800c820 <optiga_util_callback>:
}


static void optiga_util_callback(void * const context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800c820:	4b01      	ldr	r3, [pc, #4]	; (800c828 <optiga_util_callback+0x8>)
 800c822:	8019      	strh	r1, [r3, #0]
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	1fff181a 	.word	0x1fff181a

0800c82c <optiga_crypt_create_wrapper>:


optiga_crypt_t * optiga_crypt_create_wrapper(void)
{
	optiga_crypt_t * me;
	me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 800c82c:	2000      	movs	r0, #0
}



optiga_crypt_t * optiga_crypt_create_wrapper(void)
{
 800c82e:	b510      	push	{r4, lr}
	optiga_crypt_t * me;
	me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 800c830:	4602      	mov	r2, r0
 800c832:	4905      	ldr	r1, [pc, #20]	; (800c848 <optiga_crypt_create_wrapper+0x1c>)
 800c834:	f7f9 f864 	bl	8005900 <optiga_crypt_create>
#if LIFECYCLE==PRODUCTION
	OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
 800c838:	2101      	movs	r1, #1


optiga_crypt_t * optiga_crypt_create_wrapper(void)
{
	optiga_crypt_t * me;
	me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 800c83a:	4604      	mov	r4, r0
#if LIFECYCLE==PRODUCTION
	OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
 800c83c:	2203      	movs	r2, #3
 800c83e:	f7f9 f853 	bl	80058e8 <optiga_crypt_set_comms_params>
#else
	OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
#endif

	return me;
}
 800c842:	4620      	mov	r0, r4
 800c844:	bd10      	pop	{r4, pc}
 800c846:	bf00      	nop
 800c848:	0800c815 	.word	0x0800c815

0800c84c <optiga_util_create_wrapper>:


optiga_util_t * optiga_util_create_wrapper(void)
{
	optiga_util_t * me;
	me = optiga_util_create(0, optiga_util_callback, NULL);
 800c84c:	2000      	movs	r0, #0
	return me;
}


optiga_util_t * optiga_util_create_wrapper(void)
{
 800c84e:	b510      	push	{r4, lr}
	optiga_util_t * me;
	me = optiga_util_create(0, optiga_util_callback, NULL);
 800c850:	4602      	mov	r2, r0
 800c852:	4905      	ldr	r1, [pc, #20]	; (800c868 <optiga_util_create_wrapper+0x1c>)
 800c854:	f7f8 fe48 	bl	80054e8 <optiga_util_create>

#if LIFECYCLE==PRODUCTION
	OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
 800c858:	2101      	movs	r1, #1


optiga_util_t * optiga_util_create_wrapper(void)
{
	optiga_util_t * me;
	me = optiga_util_create(0, optiga_util_callback, NULL);
 800c85a:	4604      	mov	r4, r0

#if LIFECYCLE==PRODUCTION
	OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_FULL_PROTECTION);
 800c85c:	2203      	movs	r2, #3
 800c85e:	f7f8 fe37 	bl	80054d0 <optiga_util_set_comms_params>
#else
	OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
#endif

	return me;
}
 800c862:	4620      	mov	r0, r4
 800c864:	bd10      	pop	{r4, pc}
 800c866:	bf00      	nop
 800c868:	0800c821 	.word	0x0800c821

0800c86c <decode_req>:
#include "../SEMS_Headers/Decoder.h"

req_type decode_req(uint8_t command[32])
{
 800c86c:	b510      	push	{r4, lr}
	// Activate secure unlock
	if(0 == strcmp((char *)command, "Unlock"))
 800c86e:	4912      	ldr	r1, [pc, #72]	; (800c8b8 <decode_req+0x4c>)
#include "../SEMS_Headers/Decoder.h"

req_type decode_req(uint8_t command[32])
{
 800c870:	4604      	mov	r4, r0
	// Activate secure unlock
	if(0 == strcmp((char *)command, "Unlock"))
 800c872:	f001 f8ef 	bl	800da54 <strcmp>
 800c876:	b188      	cbz	r0, 800c89c <decode_req+0x30>
	{
		return SEC_UNLOCK;
	}

	// Activate secure communication
	if(0 == strcmp((char *)command, "SecCom"))
 800c878:	4620      	mov	r0, r4
 800c87a:	4910      	ldr	r1, [pc, #64]	; (800c8bc <decode_req+0x50>)
 800c87c:	f001 f8ea 	bl	800da54 <strcmp>
 800c880:	b168      	cbz	r0, 800c89e <decode_req+0x32>
	{
		return SEC_COM;
	}

	// Lock
	if(0 == strcmp((char *)command, "Lock"))
 800c882:	4620      	mov	r0, r4
 800c884:	490e      	ldr	r1, [pc, #56]	; (800c8c0 <decode_req+0x54>)
 800c886:	f001 f8e5 	bl	800da54 <strcmp>
 800c88a:	b908      	cbnz	r0, 800c890 <decode_req+0x24>
	{
		return SEC_LOCK;
 800c88c:	2002      	movs	r0, #2
 800c88e:	bd10      	pop	{r4, pc}

	}

	// Usual command
	if(0 == strcmp((char *)command, "Command"))
 800c890:	4620      	mov	r0, r4
 800c892:	490c      	ldr	r1, [pc, #48]	; (800c8c4 <decode_req+0x58>)
 800c894:	f001 f8de 	bl	800da54 <strcmp>
 800c898:	b918      	cbnz	r0, 800c8a2 <decode_req+0x36>
	{
		return EXAMPLE;
 800c89a:	2003      	movs	r0, #3
	{
		return REQUEST;
	}

	return UNKNOWN;
}
 800c89c:	bd10      	pop	{r4, pc}
	}

	// Activate secure communication
	if(0 == strcmp((char *)command, "SecCom"))
	{
		return SEC_COM;
 800c89e:	2001      	movs	r0, #1
 800c8a0:	bd10      	pop	{r4, pc}
	{
		return EXAMPLE;
	}

	// Usual command
	if(0 == strncmp((char *)command, "Req", strlen("Req")))
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	4908      	ldr	r1, [pc, #32]	; (800c8c8 <decode_req+0x5c>)
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	f001 f8de 	bl	800da68 <strncmp>
 800c8ac:	2800      	cmp	r0, #0
	{
		return REQUEST;
	}

	return UNKNOWN;
 800c8ae:	bf0c      	ite	eq
 800c8b0:	2004      	moveq	r0, #4
 800c8b2:	2005      	movne	r0, #5
 800c8b4:	bd10      	pop	{r4, pc}
 800c8b6:	bf00      	nop
 800c8b8:	0800e134 	.word	0x0800e134
 800c8bc:	0800e13c 	.word	0x0800e13c
 800c8c0:	0800e144 	.word	0x0800e144
 800c8c4:	0800e14c 	.word	0x0800e14c
 800c8c8:	0800e154 	.word	0x0800e154

0800c8cc <optiga_crypt_hash_data_wrapper>:

#include "../SEMS_Headers/Util.h"


void optiga_crypt_hash_data_wrapper(uint8_t data_to_hash[], uint8_t size_of_data, uint8_t digest[])
{
 800c8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
    hash_data_host.length = size_of_data;
    optiga_lib_status = OPTIGA_LIB_BUSY;
 800c8ce:	4c15      	ldr	r4, [pc, #84]	; (800c924 <optiga_crypt_hash_data_wrapper+0x58>)

#include "../SEMS_Headers/Util.h"


void optiga_crypt_hash_data_wrapper(uint8_t data_to_hash[], uint8_t size_of_data, uint8_t digest[])
{
 800c8d0:	b085      	sub	sp, #20
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
    hash_data_host.length = size_of_data;
    optiga_lib_status = OPTIGA_LIB_BUSY;
 800c8d2:	2501      	movs	r5, #1
{
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
 800c8d4:	9002      	str	r0, [sp, #8]

#include "../SEMS_Headers/Util.h"


void optiga_crypt_hash_data_wrapper(uint8_t data_to_hash[], uint8_t size_of_data, uint8_t digest[])
{
 800c8d6:	4617      	mov	r7, r2
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    hash_data_from_host_t hash_data_host;

    hash_data_host.buffer = data_to_hash;
    hash_data_host.length = size_of_data;
 800c8d8:	9103      	str	r1, [sp, #12]
    optiga_lib_status = OPTIGA_LIB_BUSY;
 800c8da:	8025      	strh	r5, [r4, #0]

    do
    {
        example_optiga_init();
 800c8dc:	f7ff fdc6 	bl	800c46c <example_optiga_init>

        me = optiga_crypt_create_wrapper();
 800c8e0:	f7ff ffa4 	bl	800c82c <optiga_crypt_create_wrapper>

        if (NULL == me)
 800c8e4:	b1c8      	cbz	r0, 800c91a <optiga_crypt_hash_data_wrapper+0x4e>
        {
            break;
        }

        return_status = optiga_crypt_hash(me,
 800c8e6:	9700      	str	r7, [sp, #0]
 800c8e8:	462a      	mov	r2, r5
 800c8ea:	21e2      	movs	r1, #226	; 0xe2
 800c8ec:	ab02      	add	r3, sp, #8
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	f7f9 f888 	bl	8005a04 <optiga_crypt_hash>
										OPTIGA_HASH_TYPE_SHA_256,
										OPTIGA_CRYPT_HOST_DATA,
										&hash_data_host,
										digest);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c8f4:	b130      	cbz	r0, 800c904 <optiga_crypt_hash_data_wrapper+0x38>


    } while (FALSE);

    example_optiga_deinit();
 800c8f6:	f7ff fdeb 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_crypt_destroy(me);
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f7f9 f828 	bl	8005950 <optiga_crypt_destroy>
    }
}
 800c900:	b005      	add	sp, #20
 800c902:	bdf0      	pop	{r4, r5, r6, r7, pc}
										OPTIGA_HASH_TYPE_SHA_256,
										OPTIGA_CRYPT_HOST_DATA,
										&hash_data_host,
										digest);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c904:	8823      	ldrh	r3, [r4, #0]
 800c906:	4a07      	ldr	r2, [pc, #28]	; (800c924 <optiga_crypt_hash_data_wrapper+0x58>)
 800c908:	b29b      	uxth	r3, r3
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d0fa      	beq.n	800c904 <optiga_crypt_hash_data_wrapper+0x38>
 800c90e:	8813      	ldrh	r3, [r2, #0]
 800c910:	b29b      	uxth	r3, r3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0ef      	beq.n	800c8f6 <optiga_crypt_hash_data_wrapper+0x2a>
 800c916:	8813      	ldrh	r3, [r2, #0]
 800c918:	e7ed      	b.n	800c8f6 <optiga_crypt_hash_data_wrapper+0x2a>


    } while (FALSE);

    example_optiga_deinit();
 800c91a:	f7ff fdd9 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_crypt_destroy(me);
    }
}
 800c91e:	b005      	add	sp, #20
 800c920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c922:	bf00      	nop
 800c924:	1fff181a 	.word	0x1fff181a

0800c928 <init_SEMS>:
#include "../SEMS_Headers/Timer.h"
#include "../SEMS_Headers/SecNvM.h"


void init_SEMS(void)
{
 800c928:	b508      	push	{r3, lr}
	// Init communication with Optiga
	example_optiga_init_true();
 800c92a:	f7ff fda1 	bl	800c470 <example_optiga_init_true>

	// Start timer for cooldown
	start_cooldown_timer();
 800c92e:	f000 fc75 	bl	800d21c <start_cooldown_timer>

	// Read from SecNvM
	read_sec_config();

}
 800c932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Start timer for cooldown
	start_cooldown_timer();

	// Read from SecNvM
	read_sec_config();
 800c936:	f000 ba37 	b.w	800cda8 <read_sec_config>
 800c93a:	bf00      	nop

0800c93c <optiga_util_read_nonce>:

#include "../SEMS_Headers/Util.h"


void optiga_util_read_nonce(uint16_t optiga_oid, uint8_t read_data_buffer[], uint16_t bytes_to_read)
{
 800c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93e:	b085      	sub	sp, #20
 800c940:	4607      	mov	r7, r0
 800c942:	460e      	mov	r6, r1
 800c944:	f8ad 200e 	strh.w	r2, [sp, #14]
    uint16_t offset = 0x00;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;
    do
    {
        example_optiga_init();
 800c948:	f7ff fd90 	bl	800c46c <example_optiga_init>

        me = optiga_util_create_wrapper();
 800c94c:	f7ff ff7e 	bl	800c84c <optiga_util_create_wrapper>
        if (NULL == me)
 800c950:	b1f0      	cbz	r0, 800c990 <optiga_util_read_nonce+0x54>

        optiga_lib_status = OPTIGA_LIB_BUSY;



        return_status = optiga_util_read_data(me,
 800c952:	f10d 020e 	add.w	r2, sp, #14
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c956:	4c10      	ldr	r4, [pc, #64]	; (800c998 <optiga_util_read_nonce+0x5c>)



        return_status = optiga_util_read_data(me,
 800c958:	9200      	str	r2, [sp, #0]
 800c95a:	4633      	mov	r3, r6
 800c95c:	4639      	mov	r1, r7
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c95e:	2601      	movs	r6, #1



        return_status = optiga_util_read_data(me,
 800c960:	2200      	movs	r2, #0
 800c962:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c964:	8026      	strh	r6, [r4, #0]



        return_status = optiga_util_read_data(me,
 800c966:	f7f8 fe39 	bl	80055dc <optiga_util_read_data>
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c96a:	b130      	cbz	r0, 800c97a <optiga_util_read_nonce+0x3e>

    } while (FALSE);

    example_optiga_deinit();
 800c96c:	f7ff fdb0 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
 800c970:	4628      	mov	r0, r5
 800c972:	f7f8 fde1 	bl	8005538 <optiga_util_destroy>
    }
}
 800c976:	b005      	add	sp, #20
 800c978:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c97a:	8823      	ldrh	r3, [r4, #0]
 800c97c:	4a06      	ldr	r2, [pc, #24]	; (800c998 <optiga_util_read_nonce+0x5c>)
 800c97e:	b29b      	uxth	r3, r3
 800c980:	2b01      	cmp	r3, #1
 800c982:	d0fa      	beq.n	800c97a <optiga_util_read_nonce+0x3e>
 800c984:	8813      	ldrh	r3, [r2, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0ef      	beq.n	800c96c <optiga_util_read_nonce+0x30>
 800c98c:	8813      	ldrh	r3, [r2, #0]
 800c98e:	e7ed      	b.n	800c96c <optiga_util_read_nonce+0x30>

    } while (FALSE);

    example_optiga_deinit();
 800c990:	f7ff fd9e 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
    }
}
 800c994:	b005      	add	sp, #20
 800c996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c998:	1fff181a 	.word	0x1fff181a

0800c99c <optiga_util_update_count_wrapper>:


void optiga_util_update_count_wrapper(uint16_t optiga_counter_oid, uint8_t ticks)
{
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	4607      	mov	r7, r0
 800c9a0:	460e      	mov	r6, r1
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;

    do
    {
        example_optiga_init();
 800c9a2:	f7ff fd63 	bl	800c46c <example_optiga_init>

        me = optiga_util_create_wrapper();
 800c9a6:	f7ff ff51 	bl	800c84c <optiga_util_create_wrapper>
        if (NULL == me)
 800c9aa:	b300      	cbz	r0, 800c9ee <optiga_util_update_count_wrapper+0x52>
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c9ac:	4c12      	ldr	r4, [pc, #72]	; (800c9f8 <optiga_util_update_count_wrapper+0x5c>)
 800c9ae:	2301      	movs	r3, #1
        return_status = optiga_util_update_count(me,
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	4632      	mov	r2, r6
 800c9b4:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800c9b6:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_update_count(me,
 800c9b8:	f7f8 ff48 	bl	800584c <optiga_util_update_count>
                                                 optiga_counter_oid,
												 ticks);


        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c9bc:	b130      	cbz	r0, 800c9cc <optiga_util_update_count_wrapper+0x30>

    } while (FALSE);

    example_optiga_deinit();
 800c9be:	f7ff fd87 	bl	800c4d0 <example_optiga_deinit>


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c9c2:	4628      	mov	r0, r5

    }
}
 800c9c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    example_optiga_deinit();


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c9c8:	f7f8 bdb6 	b.w	8005538 <optiga_util_destroy>
        return_status = optiga_util_update_count(me,
                                                 optiga_counter_oid,
												 ticks);


        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800c9cc:	8823      	ldrh	r3, [r4, #0]
 800c9ce:	4a0a      	ldr	r2, [pc, #40]	; (800c9f8 <optiga_util_update_count_wrapper+0x5c>)
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d0fa      	beq.n	800c9cc <optiga_util_update_count_wrapper+0x30>
 800c9d6:	8813      	ldrh	r3, [r2, #0]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0ef      	beq.n	800c9be <optiga_util_update_count_wrapper+0x22>
 800c9de:	8813      	ldrh	r3, [r2, #0]

    } while (FALSE);

    example_optiga_deinit();
 800c9e0:	f7ff fd76 	bl	800c4d0 <example_optiga_deinit>


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c9e4:	4628      	mov	r0, r5

    }
}
 800c9e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    example_optiga_deinit();


    if (NULL != me)
    {
    	optiga_util_destroy(me);
 800c9ea:	f7f8 bda5 	b.w	8005538 <optiga_util_destroy>

    }
}
 800c9ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

    } while (FALSE);

    example_optiga_deinit();
 800c9f2:	f7ff bd6d 	b.w	800c4d0 <example_optiga_deinit>
 800c9f6:	bf00      	nop
 800c9f8:	1fff181a 	.word	0x1fff181a

0800c9fc <read_and_verify_req>:
extern pal_logger_t logger_console;
extern uint32_t user_token;


uint8_t read_and_verify_req(uint8_t command[], uint8_t is_secure_unlock, uint8_t is_secure_com)
{
 800c9fc:	b570      	push	{r4, r5, r6, lr}
	uint8_t is_invalid_req = false;


	if (0u == pal_logger_read(&logger_console, command, 32))
 800c9fe:	4601      	mov	r1, r0
extern pal_logger_t logger_console;
extern uint32_t user_token;


uint8_t read_and_verify_req(uint8_t command[], uint8_t is_secure_unlock, uint8_t is_secure_com)
{
 800ca00:	b092      	sub	sp, #72	; 0x48
 800ca02:	4605      	mov	r5, r0
 800ca04:	4614      	mov	r4, r2
	uint8_t is_invalid_req = false;


	if (0u == pal_logger_read(&logger_console, command, 32))
 800ca06:	4831      	ldr	r0, [pc, #196]	; (800cacc <read_and_verify_req+0xd0>)
 800ca08:	2220      	movs	r2, #32
 800ca0a:	f7f8 fc53 	bl	80052b4 <pal_logger_read>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d146      	bne.n	800caa0 <read_and_verify_req+0xa4>
	{
		if('U' == command[0])
 800ca12:	782b      	ldrb	r3, [r5, #0]
 800ca14:	2b55      	cmp	r3, #85	; 0x55
 800ca16:	d00f      	beq.n	800ca38 <read_and_verify_req+0x3c>
			// sec unlock function will be called

		}
		else
		{
			if (0u == is_secure_com) // we have only secure unlock
 800ca18:	b984      	cbnz	r4, 800ca3c <read_and_verify_req+0x40>
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800ca1a:	7c69      	ldrb	r1, [r5, #17]
			if (0u == is_secure_com) // we have only secure unlock
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800ca1c:	7c2b      	ldrb	r3, [r5, #16]
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
 800ca1e:	7cac      	ldrb	r4, [r5, #18]
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800ca20:	482b      	ldr	r0, [pc, #172]	; (800cad0 <read_and_verify_req+0xd4>)
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);
 800ca22:	7cea      	ldrb	r2, [r5, #19]

				if(received_user_token != user_token)
 800ca24:	6800      	ldr	r0, [r0, #0]
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800ca26:	0409      	lsls	r1, r1, #16
			if (0u == is_secure_com) // we have only secure unlock
			{
				uint8_t *received_user_token_start;
				uint32_t received_user_token;
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800ca28:	eb01 6303 	add.w	r3, r1, r3, lsl #24
							 (received_user_token_start[1] << 16u)+
 800ca2c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
							 (received_user_token_start[2] <<  8u)+
 800ca30:	4413      	add	r3, r2
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
				{
					is_invalid_req = true;
 800ca32:	1a18      	subs	r0, r3, r0
 800ca34:	bf18      	it	ne
 800ca36:	2001      	movne	r0, #1
	else
	{
		is_invalid_req = true;
	}
	return is_invalid_req;
}
 800ca38:	b012      	add	sp, #72	; 0x48
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}

				// Extract Hash
				received_digest_start = command + 24u;  // last 8 bytes of the SHA256(Ciphertext)

				// Calculate Hash
				optiga_crypt_hash_data_wrapper(command, 24u, calculated_digest); // SHA-2 256(Ciphertext)
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	2118      	movs	r1, #24
 800ca40:	aa0a      	add	r2, sp, #40	; 0x28
 800ca42:	f7ff ff43 	bl	800c8cc <optiga_crypt_hash_data_wrapper>

				// Compare digests
				if(0 != memcmp(received_digest_start, calculated_digest + 24u, 8u))  // compare 8 bytes
 800ca46:	a910      	add	r1, sp, #64	; 0x40
 800ca48:	2208      	movs	r2, #8
 800ca4a:	f105 0018 	add.w	r0, r5, #24
 800ca4e:	f000 ff25 	bl	800d89c <memcmp>
				{
					is_invalid_req = true;
				}

				// Retrive Session Key
				optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // session key from Secure Comm activation
 800ca52:	a902      	add	r1, sp, #8
 800ca54:	2220      	movs	r2, #32

				// Calculate Hash
				optiga_crypt_hash_data_wrapper(command, 24u, calculated_digest); // SHA-2 256(Ciphertext)

				// Compare digests
				if(0 != memcmp(received_digest_start, calculated_digest + 24u, 8u))  // compare 8 bytes
 800ca56:	4604      	mov	r4, r0
				{
					is_invalid_req = true;
				}

				// Retrive Session Key
				optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // session key from Secure Comm activation
 800ca58:	f24f 10d6 	movw	r0, #61910	; 0xf1d6
 800ca5c:	f000 fa66 	bl	800cf2c <optiga_util_read_shared_key>

				// Decrypt ciphertext
				stream_enc(command, key, 24u);
 800ca60:	4628      	mov	r0, r5
 800ca62:	a902      	add	r1, sp, #8
 800ca64:	2218      	movs	r2, #24
 800ca66:	f000 fa91 	bl	800cf8c <stream_enc>

				// Extract Token
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800ca6a:	7c6a      	ldrb	r2, [r5, #17]
				// Decrypt ciphertext
				stream_enc(command, key, 24u);

				// Extract Token
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800ca6c:	7c2b      	ldrb	r3, [r5, #16]
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
 800ca6e:	7cae      	ldrb	r6, [r5, #18]
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800ca70:	4817      	ldr	r0, [pc, #92]	; (800cad0 <read_and_verify_req+0xd4>)
				// Extract Token
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);
 800ca72:	7ce9      	ldrb	r1, [r5, #19]

				if(received_user_token != user_token)
 800ca74:	6800      	ldr	r0, [r0, #0]
				stream_enc(command, key, 24u);

				// Extract Token
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
 800ca76:	0412      	lsls	r2, r2, #16
				// Decrypt ciphertext
				stream_enc(command, key, 24u);

				// Extract Token
				received_user_token_start = command + 16u;
				received_user_token = (received_user_token_start[0] << 24u)+
 800ca78:	eb02 6203 	add.w	r2, r2, r3, lsl #24
							 (received_user_token_start[1] << 16u)+
 800ca7c:	eb02 2306 	add.w	r3, r2, r6, lsl #8
							 (received_user_token_start[2] <<  8u)+
 800ca80:	440b      	add	r3, r1
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800ca82:	4283      	cmp	r3, r0
				// Extract Nonce
				received_user_nonce_start = command + 20u;


				// Read Nonce from Optiga
				optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800ca84:	a901      	add	r1, sp, #4
 800ca86:	f24e 1020 	movw	r0, #57632	; 0xe120
 800ca8a:	f04f 0204 	mov.w	r2, #4
				received_user_token = (received_user_token_start[0] << 24u)+
							 (received_user_token_start[1] << 16u)+
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
 800ca8e:	d00a      	beq.n	800caa6 <read_and_verify_req+0xaa>
				// Extract Nonce
				received_user_nonce_start = command + 20u;


				// Read Nonce from Optiga
				optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800ca90:	f7ff ff54 	bl	800c93c <optiga_util_read_nonce>

				// Compare Nonces, bot BE
				// recv_nonced trebuie sa fie mai mare decat nonce
				// daca e mai mare sau egal, invalid
				if(0 >= memcmp(received_user_nonce_start, nonce, sizeof(nonce)))
 800ca94:	a901      	add	r1, sp, #4
 800ca96:	f105 0014 	add.w	r0, r5, #20
 800ca9a:	2204      	movs	r2, #4
 800ca9c:	f000 fefe 	bl	800d89c <memcmp>
							 (received_user_token_start[2] <<  8u)+
							 (received_user_token_start[3] <<  0u);

				if(received_user_token != user_token)
				{
					is_invalid_req = true;
 800caa0:	2001      	movs	r0, #1
	else
	{
		is_invalid_req = true;
	}
	return is_invalid_req;
}
 800caa2:	b012      	add	sp, #72	; 0x48
 800caa4:	bd70      	pop	{r4, r5, r6, pc}
				// Extract Nonce
				received_user_nonce_start = command + 20u;


				// Read Nonce from Optiga
				optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800caa6:	f7ff ff49 	bl	800c93c <optiga_util_read_nonce>

				// Compare Nonces, bot BE
				// recv_nonced trebuie sa fie mai mare decat nonce
				// daca e mai mare sau egal, invalid
				if(0 >= memcmp(received_user_nonce_start, nonce, sizeof(nonce)))
 800caaa:	a901      	add	r1, sp, #4
 800caac:	f105 0014 	add.w	r0, r5, #20
 800cab0:	2204      	movs	r2, #4
 800cab2:	f000 fef3 	bl	800d89c <memcmp>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	ddf2      	ble.n	800caa0 <read_and_verify_req+0xa4>
				{
					is_invalid_req = true;
				}

				if(false == is_invalid_req)
 800caba:	2c00      	cmp	r4, #0
 800cabc:	d1f0      	bne.n	800caa0 <read_and_verify_req+0xa4>
				{
					optiga_util_update_count_wrapper(optiga_counter_oid, 1u);
 800cabe:	f24e 1020 	movw	r0, #57632	; 0xe120
 800cac2:	2101      	movs	r1, #1
 800cac4:	f7ff ff6a 	bl	800c99c <optiga_util_update_count_wrapper>
 800cac8:	4620      	mov	r0, r4
 800caca:	e7b5      	b.n	800ca38 <read_and_verify_req+0x3c>
 800cacc:	1ffed1c4 	.word	0x1ffed1c4
 800cad0:	1fff117c 	.word	0x1fff117c

0800cad4 <write_and_pack_request>:




uint8_t write_and_pack_request(uint8_t msg[], uint8_t is_secure_com)
{
 800cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cad6:	4604      	mov	r4, r0
 800cad8:	b09b      	sub	sp, #108	; 0x6c
	if(0u == is_secure_com)
 800cada:	2900      	cmp	r1, #0
 800cadc:	d037      	beq.n	800cb4e <write_and_pack_request+0x7a>
		uint16_t optiga_key_oid = OPTIGA_SESKEY_OID;
		uint16_t optiga_counter_oid = OPTIGA_NONCE_OID;


		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800cade:	a901      	add	r1, sp, #4
 800cae0:	f24e 1020 	movw	r0, #57632	; 0xe120
 800cae4:	2204      	movs	r2, #4
 800cae6:	f7ff ff29 	bl	800c93c <optiga_util_read_nonce>

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800caea:	4b26      	ldr	r3, [pc, #152]	; (800cb84 <write_and_pack_request+0xb0>)
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;


		// First Pack
		memcpy(response, msg, 16u);
 800caec:	6820      	ldr	r0, [r4, #0]


		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800caee:	681d      	ldr	r5, [r3, #0]
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;


		// First Pack
		memcpy(response, msg, 16u);
 800caf0:	6861      	ldr	r1, [r4, #4]
 800caf2:	68a2      	ldr	r2, [r4, #8]
 800caf4:	68e3      	ldr	r3, [r4, #12]
		memcpy(response + 16u, send_user_token, 4u);
		memcpy(response + 20u, nonce, 4u);
 800caf6:	9e01      	ldr	r6, [sp, #4]
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;


		// First Pack
		memcpy(response, msg, 16u);
 800caf8:	ac02      	add	r4, sp, #8
 800cafa:	c40f      	stmia	r4!, {r0, r1, r2, r3}


		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cafc:	0e2f      	lsrs	r7, r5, #24
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cafe:	0a2b      	lsrs	r3, r5, #8
		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);
		memcpy(response + 20u, nonce, 4u);

		// Retrive Session Key
		optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800cb00:	a912      	add	r1, sp, #72	; 0x48

		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cb02:	0c2c      	lsrs	r4, r5, #16
		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);
		memcpy(response + 20u, nonce, 4u);

		// Retrive Session Key
		optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800cb04:	f24f 10d6 	movw	r0, #61910	; 0xf1d6
 800cb08:	2220      	movs	r2, #32
		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cb0a:	f88d 301a 	strb.w	r3, [sp, #26]


		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb0e:	f88d 7018 	strb.w	r7, [sp, #24]
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
		send_user_token[2] = (user_token >>  8u) & 0xFFu;
		send_user_token[3] = (user_token >>  0u) & 0xFFu;
 800cb12:	f88d 501b 	strb.w	r5, [sp, #27]

		// Read nonce
		optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));

		send_user_token[0] = (user_token >> 24u) & 0xFFu;
		send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cb16:	f88d 4019 	strb.w	r4, [sp, #25]


		// First Pack
		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);
		memcpy(response + 20u, nonce, 4u);
 800cb1a:	9607      	str	r6, [sp, #28]

		// Retrive Session Key
		optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));  // sesion key from Secure Comm activation
 800cb1c:	f000 fa06 	bl	800cf2c <optiga_util_read_shared_key>

		// Encrypt ciphertext
		stream_enc(response, key, 24u);
 800cb20:	a802      	add	r0, sp, #8
 800cb22:	a912      	add	r1, sp, #72	; 0x48
 800cb24:	2218      	movs	r2, #24
 800cb26:	f000 fa31 	bl	800cf8c <stream_enc>

		// Calculate Hash
		optiga_crypt_hash_data_wrapper(response, 24u, calculated_digest); // SHA256(Ciphertext)
 800cb2a:	a802      	add	r0, sp, #8
 800cb2c:	aa0a      	add	r2, sp, #40	; 0x28
 800cb2e:	2118      	movs	r1, #24
 800cb30:	f7ff fecc 	bl	800c8cc <optiga_crypt_hash_data_wrapper>

		// Pack the message
		memcpy(response + 24u, calculated_digest + 24u, 8u);
 800cb34:	ab10      	add	r3, sp, #64	; 0x40
 800cb36:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb3a:	ab08      	add	r3, sp, #32
 800cb3c:	e883 0003 	stmia.w	r3, {r0, r1}

		optiga_lib_print_bytes(response, 32u);
 800cb40:	a802      	add	r0, sp, #8
 800cb42:	2120      	movs	r1, #32
 800cb44:	f7fb f98a 	bl	8007e5c <optiga_lib_print_bytes>
	}

	return true;
}
 800cb48:	2001      	movs	r0, #1
 800cb4a:	b01b      	add	sp, #108	; 0x6c
 800cb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb4e:	4b0d      	ldr	r3, [pc, #52]	; (800cb84 <write_and_pack_request+0xb0>)
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
 800cb50:	6861      	ldr	r1, [r4, #4]
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb52:	681d      	ldr	r5, [r3, #0]
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
 800cb54:	68a2      	ldr	r2, [r4, #8]
 800cb56:	68e3      	ldr	r3, [r4, #12]
 800cb58:	6800      	ldr	r0, [r0, #0]
 800cb5a:	ac12      	add	r4, sp, #72	; 0x48
 800cb5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb5e:	0e2e      	lsrs	r6, r5, #24
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cb60:	0c2a      	lsrs	r2, r5, #16
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);

		optiga_lib_print_bytes(response, 32u);
 800cb62:	a812      	add	r0, sp, #72	; 0x48
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cb64:	0a2b      	lsrs	r3, r5, #8
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);

		optiga_lib_print_bytes(response, 32u);
 800cb66:	2120      	movs	r1, #32
	{
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
 800cb68:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
				send_user_token[3] = (user_token >>  0u) & 0xFFu;
 800cb6c:	f88d 505b 	strb.w	r5, [sp, #91]	; 0x5b
		uint8_t response[32];
		uint8_t send_user_token[4];


		send_user_token[0] = (user_token >> 24u) & 0xFFu;
				send_user_token[1] = (user_token >> 16u) & 0xFFu;
 800cb70:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
				send_user_token[2] = (user_token >>  8u) & 0xFFu;
 800cb74:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
				send_user_token[3] = (user_token >>  0u) & 0xFFu;

		memcpy(response, msg, 16u);
		memcpy(response + 16u, send_user_token, 4u);

		optiga_lib_print_bytes(response, 32u);
 800cb78:	f7fb f970 	bl	8007e5c <optiga_lib_print_bytes>

		optiga_lib_print_bytes(response, 32u);
	}

	return true;
}
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	b01b      	add	sp, #108	; 0x6c
 800cb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb82:	bf00      	nop
 800cb84:	1fff117c 	.word	0x1fff117c

0800cb88 <optiga_crypt_rsa_encrypt_message_wrapper>:
static uint8_t rsa_public_key[150] = {0x00};
static uint16_t rsa_public_key_length = 0;


void optiga_crypt_rsa_encrypt_message_wrapper(uint8_t message[], uint8_t message_length, uint8_t encrypted_message[], uint16_t* encrypted_message_length)
{
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	b089      	sub	sp, #36	; 0x24
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cb8e:	4d24      	ldr	r5, [pc, #144]	; (800cc20 <optiga_crypt_rsa_encrypt_message_wrapper+0x98>)
 800cb90:	4e24      	ldr	r6, [pc, #144]	; (800cc24 <optiga_crypt_rsa_encrypt_message_wrapper+0x9c>)
 800cb92:	9500      	str	r5, [sp, #0]
static uint8_t rsa_public_key[150] = {0x00};
static uint16_t rsa_public_key_length = 0;


void optiga_crypt_rsa_encrypt_message_wrapper(uint8_t message[], uint8_t message_length, uint8_t encrypted_message[], uint16_t* encrypted_message_length)
{
 800cb94:	4680      	mov	r8, r0
 800cb96:	460f      	mov	r7, r1
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cb98:	4823      	ldr	r0, [pc, #140]	; (800cc28 <optiga_crypt_rsa_encrypt_message_wrapper+0xa0>)
 800cb9a:	9601      	str	r6, [sp, #4]
 800cb9c:	2180      	movs	r1, #128	; 0x80
static uint8_t rsa_public_key[150] = {0x00};
static uint16_t rsa_public_key_length = 0;


void optiga_crypt_rsa_encrypt_message_wrapper(uint8_t message[], uint8_t message_length, uint8_t encrypted_message[], uint16_t* encrypted_message_length)
{
 800cb9e:	4692      	mov	sl, r2
 800cba0:	4699      	mov	r9, r3
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cba2:	4a22      	ldr	r2, [pc, #136]	; (800cc2c <optiga_crypt_rsa_encrypt_message_wrapper+0xa4>)

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
	public_key_from_host.length = rsa_public_key_length;
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
	optiga_lib_status = OPTIGA_LIB_BUSY;
 800cba4:	4c22      	ldr	r4, [pc, #136]	; (800cc30 <optiga_crypt_rsa_encrypt_message_wrapper+0xa8>)
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_rsa_encryption_scheme_t encryption_scheme;
    public_key_from_host_t public_key_from_host;

    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cba6:	2304      	movs	r3, #4
 800cba8:	f7ff fd56 	bl	800c658 <example_util_encode_rsa_public_key_in_bit_string_format>
                                                               rsa_public_key,
                                                               &rsa_public_key_length);

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
	public_key_from_host.length = rsa_public_key_length;
 800cbac:	8833      	ldrh	r3, [r6, #0]
 800cbae:	f8ad 301c 	strh.w	r3, [sp, #28]
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
	optiga_lib_status = OPTIGA_LIB_BUSY;
 800cbb2:	f04f 0b01 	mov.w	fp, #1
                                                               &rsa_public_key_length);

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
	public_key_from_host.length = rsa_public_key_length;
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
 800cbb6:	2341      	movs	r3, #65	; 0x41
 800cbb8:	f88d 301e 	strb.w	r3, [sp, #30]
                                                               sizeof(rsa_public_key_exponent),
                                                               rsa_public_key,
                                                               &rsa_public_key_length);

	encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
	public_key_from_host.public_key = rsa_public_key;
 800cbbc:	9506      	str	r5, [sp, #24]
	public_key_from_host.length = rsa_public_key_length;
	public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
	optiga_lib_status = OPTIGA_LIB_BUSY;
 800cbbe:	f8a4 b000 	strh.w	fp, [r4]


    do
    {
        example_optiga_init();
 800cbc2:	f7ff fc53 	bl	800c46c <example_optiga_init>

        me = optiga_crypt_create_wrapper();
 800cbc6:	f7ff fe31 	bl	800c82c <optiga_crypt_create_wrapper>
        if (NULL == me)
 800cbca:	b320      	cbz	r0, 800cc16 <optiga_crypt_rsa_encrypt_message_wrapper+0x8e>
        {
            break;
        }

        return_status = optiga_crypt_rsa_encrypt_message(me,
 800cbcc:	2100      	movs	r1, #0
 800cbce:	ae06      	add	r6, sp, #24
 800cbd0:	9100      	str	r1, [sp, #0]
 800cbd2:	9101      	str	r1, [sp, #4]
 800cbd4:	f8cd b008 	str.w	fp, [sp, #8]
 800cbd8:	f8cd a010 	str.w	sl, [sp, #16]
 800cbdc:	f8cd 9014 	str.w	r9, [sp, #20]
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	463b      	mov	r3, r7
 800cbe4:	9603      	str	r6, [sp, #12]
 800cbe6:	2111      	movs	r1, #17
 800cbe8:	4605      	mov	r5, r0
 800cbea:	f7f8 ffa9 	bl	8005b40 <optiga_crypt_rsa_encrypt_message>
                                                            OPTIGA_CRYPT_HOST_DATA,
                                                            &public_key_from_host,
                                                            encrypted_message,
                                                            encrypted_message_length);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cbee:	b138      	cbz	r0, 800cc00 <optiga_crypt_rsa_encrypt_message_wrapper+0x78>


    } while (FALSE);

    example_optiga_deinit();
 800cbf0:	f7ff fc6e 	bl	800c4d0 <example_optiga_deinit>


    if (NULL != me)
    {
       optiga_crypt_destroy(me);
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	f7f8 feab 	bl	8005950 <optiga_crypt_destroy>
    }
}
 800cbfa:	b009      	add	sp, #36	; 0x24
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                                            OPTIGA_CRYPT_HOST_DATA,
                                                            &public_key_from_host,
                                                            encrypted_message,
                                                            encrypted_message_length);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cc00:	8823      	ldrh	r3, [r4, #0]
 800cc02:	4a0b      	ldr	r2, [pc, #44]	; (800cc30 <optiga_crypt_rsa_encrypt_message_wrapper+0xa8>)
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d0fa      	beq.n	800cc00 <optiga_crypt_rsa_encrypt_message_wrapper+0x78>
 800cc0a:	8813      	ldrh	r3, [r2, #0]
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d0ee      	beq.n	800cbf0 <optiga_crypt_rsa_encrypt_message_wrapper+0x68>
 800cc12:	8813      	ldrh	r3, [r2, #0]
 800cc14:	e7ec      	b.n	800cbf0 <optiga_crypt_rsa_encrypt_message_wrapper+0x68>


    } while (FALSE);

    example_optiga_deinit();
 800cc16:	f7ff fc5b 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
       optiga_crypt_destroy(me);
    }
}
 800cc1a:	b009      	add	sp, #36	; 0x24
 800cc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc20:	1fff10e0 	.word	0x1fff10e0
 800cc24:	1fff1178 	.word	0x1fff1178
 800cc28:	0800e15c 	.word	0x0800e15c
 800cc2c:	0800e158 	.word	0x0800e158
 800cc30:	1fff181a 	.word	0x1fff181a

0800cc34 <optiga_crypt_rsa_verify_wrapper>:


uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
 800cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_crypt_t * me = NULL;


    // Form rsa public key in bit string format
    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cc38:	4c25      	ldr	r4, [pc, #148]	; (800ccd0 <optiga_crypt_rsa_verify_wrapper+0x9c>)
 800cc3a:	4d26      	ldr	r5, [pc, #152]	; (800ccd4 <optiga_crypt_rsa_verify_wrapper+0xa0>)
    }
}


uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
 800cc3c:	b090      	sub	sp, #64	; 0x40
 800cc3e:	4616      	mov	r6, r2
	uint8_t success = false;
	uint8_t hashed_digest[32];

	optiga_crypt_hash_data_wrapper(message, message_length, hashed_digest);
 800cc40:	aa08      	add	r2, sp, #32
    }
}


uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
 800cc42:	4698      	mov	r8, r3
	uint8_t success = false;
	uint8_t hashed_digest[32];

	optiga_crypt_hash_data_wrapper(message, message_length, hashed_digest);
 800cc44:	f7ff fe42 	bl	800c8cc <optiga_crypt_hash_data_wrapper>
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_crypt_t * me = NULL;


    // Form rsa public key in bit string format
    example_util_encode_rsa_public_key_in_bit_string_format(rsa_public_key_modulus,
 800cc48:	4823      	ldr	r0, [pc, #140]	; (800ccd8 <optiga_crypt_rsa_verify_wrapper+0xa4>)
 800cc4a:	4a24      	ldr	r2, [pc, #144]	; (800ccdc <optiga_crypt_rsa_verify_wrapper+0xa8>)
 800cc4c:	2180      	movs	r1, #128	; 0x80
 800cc4e:	2304      	movs	r3, #4
 800cc50:	e88d 0030 	stmia.w	sp, {r4, r5}
 800cc54:	f7ff fd00 	bl	800c658 <example_util_encode_rsa_public_key_in_bit_string_format>
                                                       rsa_public_key_exponent,
                                                       sizeof(rsa_public_key_exponent),
                                                       rsa_public_key,
                                                       &rsa_public_key_length);

    public_key_from_host_t public_key_details =
 800cc58:	882b      	ldrh	r3, [r5, #0]
 800cc5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cc5e:	2341      	movs	r3, #65	; 0x41
 800cc60:	f88d 301e 	strb.w	r3, [sp, #30]
 800cc64:	9406      	str	r4, [sp, #24]
    };

    do
    {

        example_optiga_init();
 800cc66:	f7ff fc01 	bl	800c46c <example_optiga_init>

        me = optiga_crypt_create_wrapper();
 800cc6a:	f7ff fddf 	bl	800c82c <optiga_crypt_create_wrapper>
        if (NULL == me)
 800cc6e:	4607      	mov	r7, r0
 800cc70:	b320      	cbz	r0, 800ccbc <optiga_crypt_rsa_verify_wrapper+0x88>
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cc72:	4c1b      	ldr	r4, [pc, #108]	; (800cce0 <optiga_crypt_rsa_verify_wrapper+0xac>)


        return_status = optiga_crypt_rsa_verify (me,
 800cc74:	9600      	str	r6, [sp, #0]
 800cc76:	ab06      	add	r3, sp, #24
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cc78:	2601      	movs	r6, #1


        return_status = optiga_crypt_rsa_verify (me,
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	9303      	str	r3, [sp, #12]
 800cc7e:	f8cd 8004 	str.w	r8, [sp, #4]
 800cc82:	9602      	str	r6, [sp, #8]
 800cc84:	9504      	str	r5, [sp, #16]
 800cc86:	aa08      	add	r2, sp, #32
 800cc88:	4631      	mov	r1, r6
 800cc8a:	2320      	movs	r3, #32
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cc8c:	8026      	strh	r6, [r4, #0]


        return_status = optiga_crypt_rsa_verify (me,
 800cc8e:	f7f8 ff05 	bl	8005a9c <optiga_crypt_rsa_verify>
												 signature_length,
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &public_key_details,
                                                 0x0000);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cc92:	b148      	cbz	r0, 800cca8 <optiga_crypt_rsa_verify_wrapper+0x74>
}


uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
	uint8_t success = false;
 800cc94:	2400      	movs	r4, #0
        	success = true;
        }

    } while (FALSE);

    example_optiga_deinit();
 800cc96:	f7ff fc1b 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
         optiga_crypt_destroy(me);
 800cc9a:	4638      	mov	r0, r7
 800cc9c:	f7f8 fe58 	bl	8005950 <optiga_crypt_destroy>
    }

    return success;
}
 800cca0:	4620      	mov	r0, r4
 800cca2:	b010      	add	sp, #64	; 0x40
 800cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
												 signature_length,
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &public_key_details,
                                                 0x0000);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cca8:	8823      	ldrh	r3, [r4, #0]
 800ccaa:	4a0d      	ldr	r2, [pc, #52]	; (800cce0 <optiga_crypt_rsa_verify_wrapper+0xac>)
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d0fa      	beq.n	800cca8 <optiga_crypt_rsa_verify_wrapper+0x74>
 800ccb2:	8813      	ldrh	r3, [r2, #0]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	b143      	cbz	r3, 800ccca <optiga_crypt_rsa_verify_wrapper+0x96>
 800ccb8:	8813      	ldrh	r3, [r2, #0]
 800ccba:	e7eb      	b.n	800cc94 <optiga_crypt_rsa_verify_wrapper+0x60>
        	success = true;
        }

    } while (FALSE);

    example_optiga_deinit();
 800ccbc:	f7ff fc08 	bl	800c4d0 <example_optiga_deinit>
}


uint8_t optiga_crypt_rsa_verify_wrapper(uint8_t message[], uint8_t message_length, uint8_t signature[], uint16_t signature_length)
{
	uint8_t success = false;
 800ccc0:	463c      	mov	r4, r7
    {
         optiga_crypt_destroy(me);
    }

    return success;
}
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	b010      	add	sp, #64	; 0x40
 800ccc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         * 0x0000 -> signature match
         * 0x082c -> signature doesn't match
         */
        if(0 == return_status)
        {
        	success = true;
 800ccca:	2401      	movs	r4, #1
 800cccc:	e7e3      	b.n	800cc96 <optiga_crypt_rsa_verify_wrapper+0x62>
 800ccce:	bf00      	nop
 800ccd0:	1fff10e0 	.word	0x1fff10e0
 800ccd4:	1fff1178 	.word	0x1fff1178
 800ccd8:	0800e15c 	.word	0x0800e15c
 800ccdc:	0800e158 	.word	0x0800e158
 800cce0:	1fff181a 	.word	0x1fff181a

0800cce4 <optiga_crypt_random_wrapper>:




void optiga_crypt_random_wrapper(uint8_t random_buff[], uint8_t size)
{
 800cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce6:	4607      	mov	r7, r0
 800cce8:	460e      	mov	r6, r1
	optiga_crypt_t * me = NULL;
	optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

	do
	{
		example_optiga_init();
 800ccea:	f7ff fbbf 	bl	800c46c <example_optiga_init>

		me = optiga_crypt_create_wrapper();
 800ccee:	f7ff fd9d 	bl	800c82c <optiga_crypt_create_wrapper>
		if (NULL == me)
 800ccf2:	b308      	cbz	r0, 800cd38 <optiga_crypt_random_wrapper+0x54>
		{
			break;
		}

		optiga_lib_status = OPTIGA_LIB_BUSY;
 800ccf4:	4c12      	ldr	r4, [pc, #72]	; (800cd40 <optiga_crypt_random_wrapper+0x5c>)
		return_status = optiga_crypt_random(me,
 800ccf6:	4633      	mov	r3, r6
 800ccf8:	463a      	mov	r2, r7
		if (NULL == me)
		{
			break;
		}

		optiga_lib_status = OPTIGA_LIB_BUSY;
 800ccfa:	2601      	movs	r6, #1
		return_status = optiga_crypt_random(me,
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	4605      	mov	r5, r0
		if (NULL == me)
		{
			break;
		}

		optiga_lib_status = OPTIGA_LIB_BUSY;
 800cd00:	8026      	strh	r6, [r4, #0]
		return_status = optiga_crypt_random(me,
 800cd02:	f7f8 fe3d 	bl	8005980 <optiga_crypt_random>
											OPTIGA_RNG_TYPE_TRNG,
											random_buff,
											size);

		WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cd06:	b130      	cbz	r0, 800cd16 <optiga_crypt_random_wrapper+0x32>

	} while (FALSE);

	example_optiga_deinit();
 800cd08:	f7ff fbe2 	bl	800c4d0 <example_optiga_deinit>

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800cd0c:	4628      	mov	r0, r5
	}
}
 800cd0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	example_optiga_deinit();

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800cd12:	f7f8 be1d 	b.w	8005950 <optiga_crypt_destroy>
		return_status = optiga_crypt_random(me,
											OPTIGA_RNG_TYPE_TRNG,
											random_buff,
											size);

		WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cd16:	8823      	ldrh	r3, [r4, #0]
 800cd18:	4a09      	ldr	r2, [pc, #36]	; (800cd40 <optiga_crypt_random_wrapper+0x5c>)
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d0fa      	beq.n	800cd16 <optiga_crypt_random_wrapper+0x32>
 800cd20:	8813      	ldrh	r3, [r2, #0]
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0ef      	beq.n	800cd08 <optiga_crypt_random_wrapper+0x24>
 800cd28:	8813      	ldrh	r3, [r2, #0]

	} while (FALSE);

	example_optiga_deinit();
 800cd2a:	f7ff fbd1 	bl	800c4d0 <example_optiga_deinit>

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800cd2e:	4628      	mov	r0, r5
	}
}
 800cd30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	example_optiga_deinit();

	if (NULL != me)
	{
		optiga_crypt_destroy(me);
 800cd34:	f7f8 be0c 	b.w	8005950 <optiga_crypt_destroy>
	}
}
 800cd38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

	} while (FALSE);

	example_optiga_deinit();
 800cd3c:	f7ff bbc8 	b.w	800c4d0 <example_optiga_deinit>
 800cd40:	1fff181a 	.word	0x1fff181a

0800cd44 <secure_communication>:


extern void example_optiga_util_update_count(void);

uint8_t secure_communication(void)
{
 800cd44:	b570      	push	{r4, r5, r6, lr}
 800cd46:	b0b4      	sub	sp, #208	; 0xd0
    uint8_t random_buf[32];
    uint8_t ciphertext[129];
    uint16_t ciphertext_len = 128;
 800cd48:	2380      	movs	r3, #128	; 0x80
	uint16_t optiga_counter_oid = OPTIGA_NONCE_OID;
	uint16_t optiga_key_oid = OPTIGA_SESKEY_OID;


	// Generate random number using Optiga for session key
	optiga_crypt_random_wrapper(random_buf, 32);
 800cd4a:	a802      	add	r0, sp, #8
 800cd4c:	2120      	movs	r1, #32

uint8_t secure_communication(void)
{
    uint8_t random_buf[32];
    uint8_t ciphertext[129];
    uint16_t ciphertext_len = 128;
 800cd4e:	f8ad 3002 	strh.w	r3, [sp, #2]
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
	memcpy(plaintext, random_buf, 32);
 800cd52:	ad02      	add	r5, sp, #8
	uint16_t optiga_counter_oid = OPTIGA_NONCE_OID;
	uint16_t optiga_key_oid = OPTIGA_SESKEY_OID;


	// Generate random number using Optiga for session key
	optiga_crypt_random_wrapper(random_buf, 32);
 800cd54:	f7ff ffc6 	bl	800cce4 <optiga_crypt_random_wrapper>

	// Get Nonce
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));
 800cd58:	a901      	add	r1, sp, #4
 800cd5a:	f24e 1020 	movw	r0, #57632	; 0xe120
 800cd5e:	2204      	movs	r2, #4
 800cd60:	f7ff fdec 	bl	800c93c <optiga_util_read_nonce>


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
	memcpy(plaintext, random_buf, 32);
 800cd64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	// Get Nonce
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
 800cd66:	2600      	movs	r6, #0
	memcpy(plaintext, random_buf, 32);
 800cd68:	ac0a      	add	r4, sp, #40	; 0x28
	// Get Nonce
	optiga_util_read_nonce(optiga_counter_oid, nonce, sizeof(nonce));


	// Encrypt the session key with RSA
	uint8_t plaintext[32 + 4] = {0};
 800cd6a:	960f      	str	r6, [sp, #60]	; 0x3c
 800cd6c:	9610      	str	r6, [sp, #64]	; 0x40
 800cd6e:	9611      	str	r6, [sp, #68]	; 0x44
	memcpy(plaintext, random_buf, 32);
 800cd70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cd76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&plaintext[32], nonce, 4);
 800cd7a:	9b01      	ldr	r3, [sp, #4]
 800cd7c:	9312      	str	r3, [sp, #72]	; 0x48
	optiga_crypt_rsa_encrypt_message_wrapper(plaintext, sizeof(plaintext), ciphertext, &ciphertext_len);
 800cd7e:	aa13      	add	r2, sp, #76	; 0x4c
 800cd80:	f10d 0302 	add.w	r3, sp, #2
 800cd84:	a80a      	add	r0, sp, #40	; 0x28
 800cd86:	2124      	movs	r1, #36	; 0x24
 800cd88:	f7ff fefe 	bl	800cb88 <optiga_crypt_rsa_encrypt_message_wrapper>

	// Send session key to the App
	if(ciphertext_len == 128u)
	{
		// Pana la 127 merge ok
		optiga_lib_print_bytes(ciphertext, 129); // TODO: TREBUIE SA TRIMIT CU UNUL IN PLUS ALTFEL RAMAN BLOCAT
 800cd8c:	a813      	add	r0, sp, #76	; 0x4c
 800cd8e:	2181      	movs	r1, #129	; 0x81
 800cd90:	f7fb f864 	bl	8007e5c <optiga_lib_print_bytes>
		// Send 128 0s, encrypt nu a functionat
		optiga_lib_print_bytes(ciphertext, 129);
	}

	// Store session key
	optiga_util_write_shared_key(optiga_key_oid, random_buf, sizeof(random_buf));
 800cd94:	a902      	add	r1, sp, #8
 800cd96:	f24f 10d6 	movw	r0, #61910	; 0xf1d6
 800cd9a:	2220      	movs	r2, #32
 800cd9c:	f000 f894 	bl	800cec8 <optiga_util_write_shared_key>
	/* For testing */
//	uint8_t key[32] = {0x01, 0x01, 0x01, 0x01};
//	optiga_util_read_shared_key(optiga_key_oid, key, sizeof(key));
//	ciphertext_len = ciphertext_len; // BR
	return true;
}
 800cda0:	2001      	movs	r0, #1
 800cda2:	b034      	add	sp, #208	; 0xd0
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
 800cda6:	bf00      	nop

0800cda8 <read_sec_config>:
	flash_status = flash_status;
}


void read_sec_config(void)
{
 800cda8:	b530      	push	{r4, r5, lr}
 800cdaa:	b0d3      	sub	sp, #332	; 0x14c
volatile uint8_t bb;
uint8_t read_sec_nvm(uint8_t block_id, uint8_t data_buffer[], uint32_t size)
{
	volatile uint8_t success;
	uint8_t block_buffer[160] = {0};
	uint8_t digest_calc[32] = {0};
 800cdac:	2400      	movs	r4, #0

volatile uint8_t bb;
uint8_t read_sec_nvm(uint8_t block_id, uint8_t data_buffer[], uint32_t size)
{
	volatile uint8_t success;
	uint8_t block_buffer[160] = {0};
 800cdae:	2100      	movs	r1, #0
 800cdb0:	22a0      	movs	r2, #160	; 0xa0
 800cdb2:	a82a      	add	r0, sp, #168	; 0xa8
 800cdb4:	f000 fd8d 	bl	800d8d2 <memset>
	uint8_t digest_calc[32] = {0};
	uint8_t key[128] = {0};
 800cdb8:	4621      	mov	r1, r4
 800cdba:	2280      	movs	r2, #128	; 0x80
 800cdbc:	a80a      	add	r0, sp, #40	; 0x28
volatile uint8_t bb;
uint8_t read_sec_nvm(uint8_t block_id, uint8_t data_buffer[], uint32_t size)
{
	volatile uint8_t success;
	uint8_t block_buffer[160] = {0};
	uint8_t digest_calc[32] = {0};
 800cdbe:	9403      	str	r4, [sp, #12]
 800cdc0:	9404      	str	r4, [sp, #16]
 800cdc2:	9405      	str	r4, [sp, #20]
 800cdc4:	9406      	str	r4, [sp, #24]
 800cdc6:	9407      	str	r4, [sp, #28]
 800cdc8:	9408      	str	r4, [sp, #32]
 800cdca:	9402      	str	r4, [sp, #8]
 800cdcc:	9409      	str	r4, [sp, #36]	; 0x24
	uint8_t key[128] = {0};
 800cdce:	f000 fd80 	bl	800d8d2 <memset>

	E_EEPROM_XMC4_ReadArray(0, block_buffer, sizeof(block_buffer));
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	a92a      	add	r1, sp, #168	; 0xa8
 800cdd6:	22a0      	movs	r2, #160	; 0xa0
 800cdd8:	f7f7 fea6 	bl	8004b28 <E_EEPROM_XMC4_ReadArray>

	optiga_crypt_hash_data_wrapper(block_buffer, sizeof(key), digest_calc);
 800cddc:	a82a      	add	r0, sp, #168	; 0xa8
 800cdde:	aa02      	add	r2, sp, #8
 800cde0:	2180      	movs	r1, #128	; 0x80
 800cde2:	f7ff fd73 	bl	800c8cc <optiga_crypt_hash_data_wrapper>

	if(0 == memcmp(digest_calc, block_buffer + 128, sizeof(digest_calc)))
 800cde6:	a802      	add	r0, sp, #8
 800cde8:	a94a      	add	r1, sp, #296	; 0x128
 800cdea:	2220      	movs	r2, #32
 800cdec:	f000 fd56 	bl	800d89c <memcmp>
	{
		success = true;
 800cdf0:	f10d 0507 	add.w	r5, sp, #7

	E_EEPROM_XMC4_ReadArray(0, block_buffer, sizeof(block_buffer));

	optiga_crypt_hash_data_wrapper(block_buffer, sizeof(key), digest_calc);

	if(0 == memcmp(digest_calc, block_buffer + 128, sizeof(digest_calc)))
 800cdf4:	b180      	cbz	r0, 800ce18 <read_sec_config+0x70>
		stream_enc(block_buffer, key, sizeof(key));

	}
	else
	{
		success = false;
 800cdf6:	f88d 4007 	strb.w	r4, [sp, #7]
	}

	bb = block_buffer[4];
 800cdfa:	4b0e      	ldr	r3, [pc, #56]	; (800ce34 <read_sec_config+0x8c>)
 800cdfc:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800ce00:	701a      	strb	r2, [r3, #0]

	return success;
 800ce02:	782b      	ldrb	r3, [r5, #0]
 800ce04:	b2db      	uxtb	r3, r3
void read_sec_config(void)
{
	volatile E_EEPROM_XMC4_STATUS_t flash_status;
	uint8_t data_buffer[128];

	flash_status = read_sec_nvm(0, data_buffer, sizeof(data_buffer));
 800ce06:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	flash_status = flash_status;
 800ce0a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8

}
 800ce14:	b053      	add	sp, #332	; 0x14c
 800ce16:	bd30      	pop	{r4, r5, pc}

	optiga_crypt_hash_data_wrapper(block_buffer, sizeof(key), digest_calc);

	if(0 == memcmp(digest_calc, block_buffer + 128, sizeof(digest_calc)))
	{
		success = true;
 800ce18:	2301      	movs	r3, #1

		optiga_util_read_shared_key(OPTIGA_NVMKEY_OID, key, sizeof(key));
 800ce1a:	a90a      	add	r1, sp, #40	; 0x28
 800ce1c:	f24f 10d8 	movw	r0, #61912	; 0xf1d8
 800ce20:	2280      	movs	r2, #128	; 0x80

	optiga_crypt_hash_data_wrapper(block_buffer, sizeof(key), digest_calc);

	if(0 == memcmp(digest_calc, block_buffer + 128, sizeof(digest_calc)))
	{
		success = true;
 800ce22:	702b      	strb	r3, [r5, #0]

		optiga_util_read_shared_key(OPTIGA_NVMKEY_OID, key, sizeof(key));
 800ce24:	f000 f882 	bl	800cf2c <optiga_util_read_shared_key>
		stream_enc(block_buffer, key, sizeof(key));
 800ce28:	a82a      	add	r0, sp, #168	; 0xa8
 800ce2a:	a90a      	add	r1, sp, #40	; 0x28
 800ce2c:	2280      	movs	r2, #128	; 0x80
 800ce2e:	f000 f8ad 	bl	800cf8c <stream_enc>
 800ce32:	e7e2      	b.n	800cdfa <read_sec_config+0x52>
 800ce34:	1fff181c 	.word	0x1fff181c

0800ce38 <secure_unlock>:

uint32_t user_token = 0;


uint8_t secure_unlock(void)
{
 800ce38:	b530      	push	{r4, r5, lr}
 800ce3a:	b0ab      	sub	sp, #172	; 0xac
    uint8_t signature[128];

    uint8_t success = false;

	// Generate random number using Optiga
	optiga_crypt_random_wrapper(random_buf, 32u);
 800ce3c:	a802      	add	r0, sp, #8
 800ce3e:	2120      	movs	r1, #32
 800ce40:	f7ff ff50 	bl	800cce4 <optiga_crypt_random_wrapper>

	// Send seed to App
	optiga_lib_print_bytes(random_buf, 32u);
 800ce44:	a802      	add	r0, sp, #8
 800ce46:	2120      	movs	r1, #32
 800ce48:	f7fb f808 	bl	8007e5c <optiga_lib_print_bytes>


	// Receive signature
	if (0u == pal_logger_read(&logger_console, (uint8_t *)signature, 128u))
 800ce4c:	a90a      	add	r1, sp, #40	; 0x28
 800ce4e:	481b      	ldr	r0, [pc, #108]	; (800cebc <secure_unlock+0x84>)
 800ce50:	2280      	movs	r2, #128	; 0x80
 800ce52:	f7f8 fa2f 	bl	80052b4 <pal_logger_read>
 800ce56:	b118      	cbz	r0, 800ce60 <secure_unlock+0x28>
uint8_t secure_unlock(void)
{
    uint8_t random_buf[32];
    uint8_t signature[128];

    uint8_t success = false;
 800ce58:	2400      	movs	r4, #0
		// Send response
		optiga_lib_print_bytes(response, 5u);
	}

	return success;
}
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	b02b      	add	sp, #172	; 0xac
 800ce5e:	bd30      	pop	{r4, r5, pc}


	// Receive signature
	if (0u == pal_logger_read(&logger_console, (uint8_t *)signature, 128u))
	{
	    uint8_t response[1 + 4] = {0x00, 0x01, 0x02, 0x03, 0x04};
 800ce60:	4b17      	ldr	r3, [pc, #92]	; (800cec0 <secure_unlock+0x88>)
 800ce62:	6818      	ldr	r0, [r3, #0]
 800ce64:	791b      	ldrb	r3, [r3, #4]
 800ce66:	9000      	str	r0, [sp, #0]
 800ce68:	f88d 3004 	strb.w	r3, [sp, #4]
		// Compare enc and enc'
		success = optiga_crypt_rsa_verify_wrapper(random_buf, sizeof(random_buf), signature, sizeof(signature));
 800ce6c:	aa0a      	add	r2, sp, #40	; 0x28
 800ce6e:	a802      	add	r0, sp, #8
 800ce70:	2120      	movs	r1, #32
 800ce72:	2380      	movs	r3, #128	; 0x80
 800ce74:	f7ff fede 	bl	800cc34 <optiga_crypt_rsa_verify_wrapper>
		if(success)
 800ce78:	4604      	mov	r4, r0
 800ce7a:	b930      	cbnz	r0, 800ce8a <secure_unlock+0x52>
						 (response[3] <<  8u)+
						 (response[4] <<  0u);

		}
		// Send response
		optiga_lib_print_bytes(response, 5u);
 800ce7c:	4668      	mov	r0, sp
 800ce7e:	2105      	movs	r1, #5
 800ce80:	f7fa ffec 	bl	8007e5c <optiga_lib_print_bytes>
	}

	return success;
}
 800ce84:	4620      	mov	r0, r4
 800ce86:	b02b      	add	sp, #172	; 0xac
 800ce88:	bd30      	pop	{r4, r5, pc}
		{

			// Assign response
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6
 800ce8a:	f10d 0001 	add.w	r0, sp, #1
 800ce8e:	2108      	movs	r1, #8
		success = optiga_crypt_rsa_verify_wrapper(random_buf, sizeof(random_buf), signature, sizeof(signature));
		if(success)
		{

			// Assign response
			response[0] = success;
 800ce90:	f88d 4000 	strb.w	r4, [sp]
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6
 800ce94:	f7ff ff26 	bl	800cce4 <optiga_crypt_random_wrapper>

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
						 (response[2] << 16u)+
 800ce98:	f89d 2002 	ldrb.w	r2, [sp, #2]
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800ce9c:	f89d 3001 	ldrb.w	r3, [sp, #1]
						 (response[2] << 16u)+
						 (response[3] <<  8u)+
 800cea0:	f89d 5003 	ldrb.w	r5, [sp, #3]
						 (response[4] <<  0u);
 800cea4:	f89d 1004 	ldrb.w	r1, [sp, #4]
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800cea8:	4806      	ldr	r0, [pc, #24]	; (800cec4 <secure_unlock+0x8c>)
						 (response[2] << 16u)+
 800ceaa:	0412      	lsls	r2, r2, #16
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800ceac:	eb02 6203 	add.w	r2, r2, r3, lsl #24
						 (response[2] << 16u)+
 800ceb0:	eb02 2305 	add.w	r3, r2, r5, lsl #8
						 (response[3] <<  8u)+
 800ceb4:	440b      	add	r3, r1
			response[0] = success;
			// Generate random number using Optiga
			optiga_crypt_random_wrapper(response + 1, 8u);  // nu pot genera doar 6

			// Adauga intr-o structura
			user_token = (response[1] << 24u)+
 800ceb6:	6003      	str	r3, [r0, #0]
 800ceb8:	e7e0      	b.n	800ce7c <secure_unlock+0x44>
 800ceba:	bf00      	nop
 800cebc:	1ffed1c4 	.word	0x1ffed1c4
 800cec0:	0800e1dc 	.word	0x0800e1dc
 800cec4:	1fff117c 	.word	0x1fff117c

0800cec8 <optiga_util_write_shared_key>:
#include "../SEMS_Headers/Constructor.h"



void optiga_util_write_shared_key(uint16_t optiga_oid, const uint8_t key[], uint16_t bytes_to_write)
{
 800cec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	4606      	mov	r6, r0
 800ced0:	4688      	mov	r8, r1
 800ced2:	4617      	mov	r7, r2
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;

    do
    {
        example_optiga_init();
 800ced4:	f7ff faca 	bl	800c46c <example_optiga_init>


        me = optiga_util_create_wrapper();
 800ced8:	f7ff fcb8 	bl	800c84c <optiga_util_create_wrapper>
        if (NULL == me)
 800cedc:	b1f8      	cbz	r0, 800cf1e <optiga_util_write_shared_key+0x56>
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cede:	4c12      	ldr	r4, [pc, #72]	; (800cf28 <optiga_util_write_shared_key+0x60>)

        return_status = optiga_util_write_data(me,
 800cee0:	f8cd 8000 	str.w	r8, [sp]
 800cee4:	4631      	mov	r1, r6
 800cee6:	9701      	str	r7, [sp, #4]
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cee8:	2601      	movs	r6, #1

        return_status = optiga_util_write_data(me,
 800ceea:	2240      	movs	r2, #64	; 0x40
 800ceec:	2300      	movs	r3, #0
 800ceee:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cef0:	8026      	strh	r6, [r4, #0]

        return_status = optiga_util_write_data(me,
 800cef2:	f7f8 fc0d 	bl	8005710 <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               key,
											   bytes_to_write);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cef6:	b138      	cbz	r0, 800cf08 <optiga_util_write_shared_key+0x40>

    } while (FALSE);


    example_optiga_deinit();
 800cef8:	f7ff faea 	bl	800c4d0 <example_optiga_deinit>



    if (NULL != me)
    {
        optiga_util_destroy(me);
 800cefc:	4628      	mov	r0, r5
    }
}
 800cefe:	b002      	add	sp, #8
 800cf00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}



    if (NULL != me)
    {
        optiga_util_destroy(me);
 800cf04:	f7f8 bb18 	b.w	8005538 <optiga_util_destroy>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               key,
											   bytes_to_write);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cf08:	8823      	ldrh	r3, [r4, #0]
 800cf0a:	4a07      	ldr	r2, [pc, #28]	; (800cf28 <optiga_util_write_shared_key+0x60>)
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d0fa      	beq.n	800cf08 <optiga_util_write_shared_key+0x40>
 800cf12:	8813      	ldrh	r3, [r2, #0]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d0ee      	beq.n	800cef8 <optiga_util_write_shared_key+0x30>
 800cf1a:	8813      	ldrh	r3, [r2, #0]
 800cf1c:	e7ec      	b.n	800cef8 <optiga_util_write_shared_key+0x30>

    if (NULL != me)
    {
        optiga_util_destroy(me);
    }
}
 800cf1e:	b002      	add	sp, #8
 800cf20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

    } while (FALSE);


    example_optiga_deinit();
 800cf24:	f7ff bad4 	b.w	800c4d0 <example_optiga_deinit>
 800cf28:	1fff181a 	.word	0x1fff181a

0800cf2c <optiga_util_read_shared_key>:
    }
}


void optiga_util_read_shared_key(uint16_t optiga_oid, uint8_t read_data_buffer[], uint16_t bytes_to_read)
{
 800cf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	4607      	mov	r7, r0
 800cf32:	460e      	mov	r6, r1
 800cf34:	f8ad 200e 	strh.w	r2, [sp, #14]
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;

    do
    {
        example_optiga_init();
 800cf38:	f7ff fa98 	bl	800c46c <example_optiga_init>

        me = optiga_util_create_wrapper();
 800cf3c:	f7ff fc86 	bl	800c84c <optiga_util_create_wrapper>
        if (NULL == me)
 800cf40:	b1f0      	cbz	r0, 800cf80 <optiga_util_read_shared_key+0x54>
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;

        return_status = optiga_util_read_data(me,
 800cf42:	f10d 020e 	add.w	r2, sp, #14
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cf46:	4c10      	ldr	r4, [pc, #64]	; (800cf88 <optiga_util_read_shared_key+0x5c>)

        return_status = optiga_util_read_data(me,
 800cf48:	9200      	str	r2, [sp, #0]
 800cf4a:	4633      	mov	r3, r6
 800cf4c:	4639      	mov	r1, r7
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cf4e:	2601      	movs	r6, #1

        return_status = optiga_util_read_data(me,
 800cf50:	2200      	movs	r2, #0
 800cf52:	4605      	mov	r5, r0
        if (NULL == me)
        {
            break;
        }

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800cf54:	8026      	strh	r6, [r4, #0]

        return_status = optiga_util_read_data(me,
 800cf56:	f7f8 fb41 	bl	80055dc <optiga_util_read_data>
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cf5a:	b130      	cbz	r0, 800cf6a <optiga_util_read_shared_key+0x3e>

    } while (FALSE);

    example_optiga_deinit();
 800cf5c:	f7ff fab8 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
 800cf60:	4628      	mov	r0, r5
 800cf62:	f7f8 fae9 	bl	8005538 <optiga_util_destroy>
    }
}
 800cf66:	b005      	add	sp, #20
 800cf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800cf6a:	8823      	ldrh	r3, [r4, #0]
 800cf6c:	4a06      	ldr	r2, [pc, #24]	; (800cf88 <optiga_util_read_shared_key+0x5c>)
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d0fa      	beq.n	800cf6a <optiga_util_read_shared_key+0x3e>
 800cf74:	8813      	ldrh	r3, [r2, #0]
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d0ef      	beq.n	800cf5c <optiga_util_read_shared_key+0x30>
 800cf7c:	8813      	ldrh	r3, [r2, #0]
 800cf7e:	e7ed      	b.n	800cf5c <optiga_util_read_shared_key+0x30>

    } while (FALSE);

    example_optiga_deinit();
 800cf80:	f7ff faa6 	bl	800c4d0 <example_optiga_deinit>

    if (NULL != me)
    {
        optiga_util_destroy(me);
    }
}
 800cf84:	b005      	add	sp, #20
 800cf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf88:	1fff181a 	.word	0x1fff181a

0800cf8c <stream_enc>:


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cf8c:	2a00      	cmp	r2, #0
 800cf8e:	d04c      	beq.n	800d02a <stream_enc+0x9e>
 800cf90:	1d03      	adds	r3, r0, #4

#include "../SEMS_Headers/Util.h"


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
 800cf92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf94:	1d0c      	adds	r4, r1, #4
 800cf96:	42a0      	cmp	r0, r4
 800cf98:	bf38      	it	cc
 800cf9a:	4299      	cmpcc	r1, r3
 800cf9c:	bf2c      	ite	cs
 800cf9e:	2301      	movcs	r3, #1
 800cfa0:	2300      	movcc	r3, #0
 800cfa2:	2a06      	cmp	r2, #6
 800cfa4:	bf94      	ite	ls
 800cfa6:	2300      	movls	r3, #0
 800cfa8:	f003 0301 	andhi.w	r3, r3, #1
 800cfac:	b383      	cbz	r3, 800d010 <stream_enc+0x84>
 800cfae:	ea41 0300 	orr.w	r3, r1, r0
 800cfb2:	079b      	lsls	r3, r3, #30
 800cfb4:	d12c      	bne.n	800d010 <stream_enc+0x84>
 800cfb6:	1f14      	subs	r4, r2, #4
 800cfb8:	08a4      	lsrs	r4, r4, #2
 800cfba:	1e55      	subs	r5, r2, #1
 800cfbc:	3401      	adds	r4, #1
 800cfbe:	2d02      	cmp	r5, #2
 800cfc0:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800cfc4:	d922      	bls.n	800d00c <stream_enc+0x80>
 800cfc6:	f1a1 0c04 	sub.w	ip, r1, #4
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cfca:	4686      	mov	lr, r0
 800cfcc:	2600      	movs	r6, #0
    {
        r1[i] = r1[i] ^ r2[i];
 800cfce:	f8de 7000 	ldr.w	r7, [lr]
 800cfd2:	f85c 5f04 	ldr.w	r5, [ip, #4]!
 800cfd6:	3601      	adds	r6, #1
 800cfd8:	407d      	eors	r5, r7
 800cfda:	42a6      	cmp	r6, r4
 800cfdc:	f84e 5b04 	str.w	r5, [lr], #4
 800cfe0:	d3f5      	bcc.n	800cfce <stream_enc+0x42>
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d01f      	beq.n	800d026 <stream_enc+0x9a>
 800cfe6:	5cce      	ldrb	r6, [r1, r3]
 800cfe8:	5cc5      	ldrb	r5, [r0, r3]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cfea:	1c5c      	adds	r4, r3, #1
    {
        r1[i] = r1[i] ^ r2[i];
 800cfec:	4075      	eors	r5, r6


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cfee:	4294      	cmp	r4, r2
    {
        r1[i] = r1[i] ^ r2[i];
 800cff0:	54c5      	strb	r5, [r0, r3]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cff2:	d217      	bcs.n	800d024 <stream_enc+0x98>
    {
        r1[i] = r1[i] ^ r2[i];
 800cff4:	5d0e      	ldrb	r6, [r1, r4]
 800cff6:	5d05      	ldrb	r5, [r0, r4]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cff8:	3302      	adds	r3, #2
    {
        r1[i] = r1[i] ^ r2[i];
 800cffa:	4075      	eors	r5, r6


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800cffc:	429a      	cmp	r2, r3
    {
        r1[i] = r1[i] ^ r2[i];
 800cffe:	5505      	strb	r5, [r0, r4]


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800d000:	d912      	bls.n	800d028 <stream_enc+0x9c>
    {
        r1[i] = r1[i] ^ r2[i];
 800d002:	5cc9      	ldrb	r1, [r1, r3]
 800d004:	5cc2      	ldrb	r2, [r0, r3]
 800d006:	404a      	eors	r2, r1
 800d008:	54c2      	strb	r2, [r0, r3]
 800d00a:	bdf0      	pop	{r4, r5, r6, r7, pc}


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800d00c:	2300      	movs	r3, #0
 800d00e:	e7ea      	b.n	800cfe6 <stream_enc+0x5a>
 800d010:	4402      	add	r2, r0
 800d012:	3901      	subs	r1, #1
    {
        r1[i] = r1[i] ^ r2[i];
 800d014:	7804      	ldrb	r4, [r0, #0]
 800d016:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d01a:	4063      	eors	r3, r4
 800d01c:	f800 3b01 	strb.w	r3, [r0], #1


void stream_enc(uint8_t r1[], const uint8_t r2[], uint8_t len)
{
    unsigned int i;
    for (i = 0; i < len; ++i)
 800d020:	4290      	cmp	r0, r2
 800d022:	d1f7      	bne.n	800d014 <stream_enc+0x88>
 800d024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d02a:	4770      	bx	lr

0800d02c <terminal_main>:
volatile uint8_t failed_req = 0;
volatile uint8_t cooldowned = false;


void terminal_main(void)
{
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	b091      	sub	sp, #68	; 0x44
 800d032:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800d208 <terminal_main+0x1dc>
 800d036:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800d20c <terminal_main+0x1e0>

	uint8_t is_sec_unlocked = false;
	uint8_t is_sec_comm = false;
	uint8_t received_request[32];  // Toate comenzile au 32 de bytes

	init_SEMS();
 800d03a:	f7ff fc75 	bl	800c928 <init_SEMS>

void terminal_main(void)
{

	uint8_t is_sec_unlocked = false;
	uint8_t is_sec_comm = false;
 800d03e:	2600      	movs	r6, #0
		else
		{
			// Request before unlock or invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
 800d040:	46cb      	mov	fp, r9
		}
		else
		{
			// Request before unlock or invalid Token, Nonce, Hash

			failed_req++;
 800d042:	46c2      	mov	sl, r8


void terminal_main(void)
{

	uint8_t is_sec_unlocked = false;
 800d044:	4637      	mov	r7, r6
 800d046:	ac08      	add	r4, sp, #32

	while(true)
	{

		// Wrapper for serial read, verifies token, nonce, hash
		if(0u == read_and_verify_req(received_request, is_sec_unlocked, is_sec_comm))
 800d048:	4668      	mov	r0, sp
 800d04a:	4639      	mov	r1, r7
 800d04c:	4632      	mov	r2, r6
 800d04e:	f7ff fcd5 	bl	800c9fc <read_and_verify_req>
 800d052:	4605      	mov	r5, r0
 800d054:	2800      	cmp	r0, #0
 800d056:	d137      	bne.n	800d0c8 <terminal_main+0x9c>
		{
			// Valid request
			req_type request_type;
			if(true == cooldowned)
 800d058:	f899 3000 	ldrb.w	r3, [r9]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	f000 8097 	beq.w	800d190 <terminal_main+0x164>
				uint8_t buff[32] = "Denied by cooldown.";
				optiga_lib_print_bytes(buff, 32);
				continue;
			}

			request_type = decode_req(received_request);
 800d062:	4668      	mov	r0, sp
 800d064:	f7ff fc02 	bl	800c86c <decode_req>

			switch(request_type){
 800d068:	2804      	cmp	r0, #4
 800d06a:	f200 80b6 	bhi.w	800d1da <terminal_main+0x1ae>
 800d06e:	e8df f000 	tbb	[pc, r0]
 800d072:	787c      	.short	0x787c
 800d074:	4e62      	.short	0x4e62
 800d076:	03          	.byte	0x03
 800d077:	00          	.byte	0x00
					write_and_pack_request(buff, is_sec_comm);
					break;
				}
				case REQUEST:
				{
					uint8_t buff[32] = "Req  response";
 800d078:	4b5f      	ldr	r3, [pc, #380]	; (800d1f8 <terminal_main+0x1cc>)

					// default behaviour, there would be some processing
					buff[3] = received_request[3];
 800d07a:	f89d e003 	ldrb.w	lr, [sp, #3]
					write_and_pack_request(buff, is_sec_comm);
					break;
				}
				case REQUEST:
				{
					uint8_t buff[32] = "Req  response";
 800d07e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d080:	4625      	mov	r5, r4
 800d082:	c507      	stmia	r5!, {r0, r1, r2}
 800d084:	2200      	movs	r2, #0

					// default behaviour, there would be some processing
					buff[3] = received_request[3];
					write_and_pack_request(buff, is_sec_comm);
 800d086:	4631      	mov	r1, r6
 800d088:	4620      	mov	r0, r4
					write_and_pack_request(buff, is_sec_comm);
					break;
				}
				case REQUEST:
				{
					uint8_t buff[32] = "Req  response";
 800d08a:	802b      	strh	r3, [r5, #0]
 800d08c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800d090:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800d094:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800d098:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d09c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 800d0a0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 800d0a4:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800d0a8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800d0ac:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e

					// default behaviour, there would be some processing
					buff[3] = received_request[3];
 800d0b0:	f88d e023 	strb.w	lr, [sp, #35]	; 0x23
					write_and_pack_request(buff, is_sec_comm);
 800d0b4:	f7ff fd0e 	bl	800cad4 <write_and_pack_request>

	while(true)
	{

		// Wrapper for serial read, verifies token, nonce, hash
		if(0u == read_and_verify_req(received_request, is_sec_unlocked, is_sec_comm))
 800d0b8:	4668      	mov	r0, sp
 800d0ba:	4639      	mov	r1, r7
 800d0bc:	4632      	mov	r2, r6
 800d0be:	f7ff fc9d 	bl	800c9fc <read_and_verify_req>
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d0c7      	beq.n	800d058 <terminal_main+0x2c>
		}
		else
		{
			// Request before unlock or invalid Token, Nonce, Hash

			failed_req++;
 800d0c8:	f898 3000 	ldrb.w	r3, [r8]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	f888 3000 	strb.w	r3, [r8]
			if(true == cooldowned)
 800d0d4:	f899 3000 	ldrb.w	r3, [r9]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d06c      	beq.n	800d1b6 <terminal_main+0x18a>
				uint8_t buff[32] = "Denied by cooldown.";
				optiga_lib_print_bytes(buff, 32);
			}
			else
			{
				if(failed_req >= MAX_FAILED_REQ)
 800d0dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e0:	2b09      	cmp	r3, #9
 800d0e2:	d947      	bls.n	800d174 <terminal_main+0x148>
				{
					uint8_t buff[32] = "Cooldown activated.";
 800d0e4:	f8df e128 	ldr.w	lr, [pc, #296]	; 800d210 <terminal_main+0x1e4>
 800d0e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d0ec:	4625      	mov	r5, r4
 800d0ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d0f0:	f8de 3000 	ldr.w	r3, [lr]
 800d0f4:	602b      	str	r3, [r5, #0]
					optiga_lib_print_bytes(buff, 32);
 800d0f6:	4620      	mov	r0, r4
			}
			else
			{
				if(failed_req >= MAX_FAILED_REQ)
				{
					uint8_t buff[32] = "Cooldown activated.";
 800d0f8:	2300      	movs	r3, #0
					optiga_lib_print_bytes(buff, 32);
 800d0fa:	2120      	movs	r1, #32
			}
			else
			{
				if(failed_req >= MAX_FAILED_REQ)
				{
					uint8_t buff[32] = "Cooldown activated.";
 800d0fc:	930d      	str	r3, [sp, #52]	; 0x34
 800d0fe:	930e      	str	r3, [sp, #56]	; 0x38
 800d100:	930f      	str	r3, [sp, #60]	; 0x3c
					optiga_lib_print_bytes(buff, 32);
 800d102:	f7fa feab 	bl	8007e5c <optiga_lib_print_bytes>
					cooldowned = true;
 800d106:	2301      	movs	r3, #1
 800d108:	f88b 3000 	strb.w	r3, [fp]
 800d10c:	e79c      	b.n	800d048 <terminal_main+0x1c>
					write_and_pack_request(buff, is_sec_comm);
					break;
				}
				case EXAMPLE:
				{
					uint8_t buff[32] = "Command response";
 800d10e:	f8df e104 	ldr.w	lr, [pc, #260]	; 800d214 <terminal_main+0x1e8>
 800d112:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d116:	4625      	mov	r5, r4
 800d118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d11a:	f8de 3000 	ldr.w	r3, [lr]
 800d11e:	702b      	strb	r3, [r5, #0]
 800d120:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800d124:	2100      	movs	r1, #0
 800d126:	220f      	movs	r2, #15
 800d128:	f000 fbd3 	bl	800d8d2 <memset>

					// default behaviour, there would be some processing
					write_and_pack_request(buff, is_sec_comm);
 800d12c:	4620      	mov	r0, r4
 800d12e:	4631      	mov	r1, r6
 800d130:	f7ff fcd0 	bl	800cad4 <write_and_pack_request>
 800d134:	e788      	b.n	800d048 <terminal_main+0x1c>
					is_sec_comm = secure_communication();
					break;
				}
				case SEC_LOCK:
				{
					uint8_t buff[32] = "Locked";
 800d136:	4b31      	ldr	r3, [pc, #196]	; (800d1fc <terminal_main+0x1d0>)
 800d138:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d13c:	2219      	movs	r2, #25
 800d13e:	0c0b      	lsrs	r3, r1, #16
 800d140:	6020      	str	r0, [r4, #0]
 800d142:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800d146:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800d14a:	2100      	movs	r1, #0
					is_sec_unlocked = 0;
					write_and_pack_request(buff, is_sec_comm);
 800d14c:	ac08      	add	r4, sp, #32
					is_sec_comm = secure_communication();
					break;
				}
				case SEC_LOCK:
				{
					uint8_t buff[32] = "Locked";
 800d14e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800d152:	f000 fbbe 	bl	800d8d2 <memset>
					is_sec_unlocked = 0;
					write_and_pack_request(buff, is_sec_comm);
 800d156:	4620      	mov	r0, r4
 800d158:	4631      	mov	r1, r6
 800d15a:	f7ff fcbb 	bl	800cad4 <write_and_pack_request>
					break;
				}
				case SEC_LOCK:
				{
					uint8_t buff[32] = "Locked";
					is_sec_unlocked = 0;
 800d15e:	2700      	movs	r7, #0
 800d160:	e772      	b.n	800d048 <terminal_main+0x1c>
					is_sec_comm = 0;  // reset sec_comm flag
					break;
				}
				case SEC_COM: // momentan nu pot da 2 cereri de sec com
				{
					is_sec_comm = secure_communication();
 800d162:	f7ff fdef 	bl	800cd44 <secure_communication>
 800d166:	4606      	mov	r6, r0
					break;
 800d168:	e76e      	b.n	800d048 <terminal_main+0x1c>
			request_type = decode_req(received_request);

			switch(request_type){
				case SEC_UNLOCK:
				{
					is_sec_unlocked = secure_unlock();
 800d16a:	f7ff fe65 	bl	800ce38 <secure_unlock>
					is_sec_comm = 0;  // reset sec_comm flag
 800d16e:	2600      	movs	r6, #0
			request_type = decode_req(received_request);

			switch(request_type){
				case SEC_UNLOCK:
				{
					is_sec_unlocked = secure_unlock();
 800d170:	4607      	mov	r7, r0
					is_sec_comm = 0;  // reset sec_comm flag
					break;
 800d172:	e769      	b.n	800d048 <terminal_main+0x1c>
					cooldowned = true;
				}
				else
				{
					// Just a wrong request
					uint8_t buff[32] = "Request denied.";
 800d174:	4b22      	ldr	r3, [pc, #136]	; (800d200 <terminal_main+0x1d4>)
 800d176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d178:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d17c:	2300      	movs	r3, #0
					optiga_lib_print_bytes(buff, 32);
 800d17e:	4620      	mov	r0, r4
 800d180:	2120      	movs	r1, #32
					cooldowned = true;
				}
				else
				{
					// Just a wrong request
					uint8_t buff[32] = "Request denied.";
 800d182:	930c      	str	r3, [sp, #48]	; 0x30
 800d184:	930d      	str	r3, [sp, #52]	; 0x34
 800d186:	930e      	str	r3, [sp, #56]	; 0x38
 800d188:	930f      	str	r3, [sp, #60]	; 0x3c
					optiga_lib_print_bytes(buff, 32);
 800d18a:	f7fa fe67 	bl	8007e5c <optiga_lib_print_bytes>
 800d18e:	e75b      	b.n	800d048 <terminal_main+0x1c>
		{
			// Valid request
			req_type request_type;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800d190:	f8df c084 	ldr.w	ip, [pc, #132]	; 800d218 <terminal_main+0x1ec>
 800d194:	900d      	str	r0, [sp, #52]	; 0x34
 800d196:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d19a:	46a6      	mov	lr, r4
 800d19c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d1a0:	f8dc 3000 	ldr.w	r3, [ip]
 800d1a4:	950e      	str	r5, [sp, #56]	; 0x38
				optiga_lib_print_bytes(buff, 32);
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	2120      	movs	r1, #32
		{
			// Valid request
			req_type request_type;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800d1aa:	950f      	str	r5, [sp, #60]	; 0x3c
 800d1ac:	f8ce 3000 	str.w	r3, [lr]
				optiga_lib_print_bytes(buff, 32);
 800d1b0:	f7fa fe54 	bl	8007e5c <optiga_lib_print_bytes>
 800d1b4:	e748      	b.n	800d048 <terminal_main+0x1c>
			// Request before unlock or invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800d1b6:	f8df e060 	ldr.w	lr, [pc, #96]	; 800d218 <terminal_main+0x1ec>
 800d1ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d1be:	4625      	mov	r5, r4
 800d1c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d1c2:	f8de 3000 	ldr.w	r3, [lr]
 800d1c6:	602b      	str	r3, [r5, #0]
				optiga_lib_print_bytes(buff, 32);
 800d1c8:	4620      	mov	r0, r4
			// Request before unlock or invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800d1ca:	2300      	movs	r3, #0
				optiga_lib_print_bytes(buff, 32);
 800d1cc:	2120      	movs	r1, #32
			// Request before unlock or invalid Token, Nonce, Hash

			failed_req++;
			if(true == cooldowned)
			{
				uint8_t buff[32] = "Denied by cooldown.";
 800d1ce:	930d      	str	r3, [sp, #52]	; 0x34
 800d1d0:	930e      	str	r3, [sp, #56]	; 0x38
 800d1d2:	930f      	str	r3, [sp, #60]	; 0x3c
				optiga_lib_print_bytes(buff, 32);
 800d1d4:	f7fa fe42 	bl	8007e5c <optiga_lib_print_bytes>
 800d1d8:	e736      	b.n	800d048 <terminal_main+0x1c>
					break;
				}
				case UNKNOWN:
				default:
				{
					uint8_t buff[32] = "Unknown request";
 800d1da:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <terminal_main+0x1d8>)
 800d1dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d1e2:	2300      	movs	r3, #0
					write_and_pack_request(buff, is_sec_comm);
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4631      	mov	r1, r6
					break;
				}
				case UNKNOWN:
				default:
				{
					uint8_t buff[32] = "Unknown request";
 800d1e8:	930c      	str	r3, [sp, #48]	; 0x30
 800d1ea:	930d      	str	r3, [sp, #52]	; 0x34
 800d1ec:	930e      	str	r3, [sp, #56]	; 0x38
 800d1ee:	930f      	str	r3, [sp, #60]	; 0x3c
					write_and_pack_request(buff, is_sec_comm);
 800d1f0:	f7ff fc70 	bl	800cad4 <write_and_pack_request>
 800d1f4:	e728      	b.n	800d048 <terminal_main+0x1c>
 800d1f6:	bf00      	nop
 800d1f8:	0800e244 	.word	0x0800e244
 800d1fc:	0800e204 	.word	0x0800e204
 800d200:	0800e2a4 	.word	0x0800e2a4
 800d204:	0800e264 	.word	0x0800e264
 800d208:	1fff1181 	.word	0x1fff1181
 800d20c:	1fff1180 	.word	0x1fff1180
 800d210:	0800e284 	.word	0x0800e284
 800d214:	0800e224 	.word	0x0800e224
 800d218:	0800e1e4 	.word	0x0800e1e4

0800d21c <start_cooldown_timer>:
extern volatile uint8_t failed_req;
extern volatile uint8_t cooldowned;


void start_cooldown_timer(void)
{
 800d21c:	b510      	push	{r4, lr}
	uint32_t timeout = TIMEOUT_IN_SECONDS * 100u * 1000u * 1000u ;
	TIMER_SetTimeInterval(&TIMER_Cooldwon, timeout);
 800d21e:	4c05      	ldr	r4, [pc, #20]	; (800d234 <start_cooldown_timer+0x18>)
 800d220:	4905      	ldr	r1, [pc, #20]	; (800d238 <start_cooldown_timer+0x1c>)
 800d222:	4620      	mov	r0, r4
 800d224:	f7f6 fcbc 	bl	8003ba0 <TIMER_SetTimeInterval>
	TIMER_Start(&TIMER_Cooldwon);
 800d228:	4620      	mov	r0, r4
}
 800d22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void start_cooldown_timer(void)
{
	uint32_t timeout = TIMEOUT_IN_SECONDS * 100u * 1000u * 1000u ;
	TIMER_SetTimeInterval(&TIMER_Cooldwon, timeout);
	TIMER_Start(&TIMER_Cooldwon);
 800d22e:	f7f6 bc7f 	b.w	8003b30 <TIMER_Start>
 800d232:	bf00      	nop
 800d234:	1ffed0d0 	.word	0x1ffed0d0
 800d238:	05f5e100 	.word	0x05f5e100

0800d23c <CCU80_3_IRQHandler>:
}


void TimerInterval_ISR(void)
{
	if(failed_req > 0u)
 800d23c:	4b06      	ldr	r3, [pc, #24]	; (800d258 <CCU80_3_IRQHandler+0x1c>)
 800d23e:	781a      	ldrb	r2, [r3, #0]
 800d240:	b14a      	cbz	r2, 800d256 <CCU80_3_IRQHandler+0x1a>
	{
		failed_req--;
 800d242:	781a      	ldrb	r2, [r3, #0]
 800d244:	3a01      	subs	r2, #1
 800d246:	b2d2      	uxtb	r2, r2
 800d248:	701a      	strb	r2, [r3, #0]

		if(failed_req == 0)
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d250:	b90b      	cbnz	r3, 800d256 <CCU80_3_IRQHandler+0x1a>
		{
			cooldowned = false;
 800d252:	4b02      	ldr	r3, [pc, #8]	; (800d25c <CCU80_3_IRQHandler+0x20>)
 800d254:	701a      	strb	r2, [r3, #0]
 800d256:	4770      	bx	lr
 800d258:	1fff1180 	.word	0x1fff1180
 800d25c:	1fff1181 	.word	0x1fff1181

0800d260 <main>:

extern pal_logger_t logger_console;


int main(void)
{
 800d260:	b508      	push	{r3, lr}
    DAVE_STATUS_t status;
    uint8_t return_value = 0;

    // Initialization of DAVE Apps
    status = DAVE_Init(); /* Initialization of DAVE APPs  */
 800d262:	f7f7 fd2d 	bl	8004cc0 <DAVE_Init>
    if (status == DAVE_STATUS_FAILURE)
 800d266:	2801      	cmp	r0, #1
 800d268:	d005      	beq.n	800d276 <main+0x16>
    }


    do
    {
        if(PAL_STATUS_SUCCESS != pal_logger_init(&logger_console))
 800d26a:	4806      	ldr	r0, [pc, #24]	; (800d284 <main+0x24>)
 800d26c:	f7f7 fff2 	bl	8005254 <pal_logger_init>
 800d270:	b110      	cbz	r0, 800d278 <main+0x18>
        terminal_main();

    }while (FALSE);

    return return_value;
}
 800d272:	2000      	movs	r0, #0
 800d274:	bd08      	pop	{r3, pc}
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while (1U)
        {

        }
 800d276:	e7fe      	b.n	800d276 <main+0x16>
        if(PAL_STATUS_SUCCESS != pal_logger_init(&logger_console))
        {
            break;
        }

        pal_os_timer_delay_in_milliseconds(100);
 800d278:	2064      	movs	r0, #100	; 0x64
 800d27a:	f7f8 f919 	bl	80054b0 <pal_os_timer_delay_in_milliseconds>
        terminal_main();
 800d27e:	f7ff fed5 	bl	800d02c <terminal_main>
 800d282:	e7f6      	b.n	800d272 <main+0x12>
 800d284:	1ffed1c4 	.word	0x1ffed1c4

0800d288 <__aeabi_uldivmod>:
 800d288:	b94b      	cbnz	r3, 800d29e <__aeabi_uldivmod+0x16>
 800d28a:	b942      	cbnz	r2, 800d29e <__aeabi_uldivmod+0x16>
 800d28c:	2900      	cmp	r1, #0
 800d28e:	bf08      	it	eq
 800d290:	2800      	cmpeq	r0, #0
 800d292:	d002      	beq.n	800d29a <__aeabi_uldivmod+0x12>
 800d294:	f04f 31ff 	mov.w	r1, #4294967295
 800d298:	4608      	mov	r0, r1
 800d29a:	f000 b83b 	b.w	800d314 <__aeabi_idiv0>
 800d29e:	b082      	sub	sp, #8
 800d2a0:	46ec      	mov	ip, sp
 800d2a2:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d2a6:	f000 f81d 	bl	800d2e4 <__gnu_uldivmod_helper>
 800d2aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d2ae:	b002      	add	sp, #8
 800d2b0:	bc0c      	pop	{r2, r3}
 800d2b2:	4770      	bx	lr

0800d2b4 <__gnu_ldivmod_helper>:
 800d2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b8:	9c06      	ldr	r4, [sp, #24]
 800d2ba:	4615      	mov	r5, r2
 800d2bc:	4606      	mov	r6, r0
 800d2be:	460f      	mov	r7, r1
 800d2c0:	4698      	mov	r8, r3
 800d2c2:	f000 f829 	bl	800d318 <__divdi3>
 800d2c6:	fb05 f301 	mul.w	r3, r5, r1
 800d2ca:	fb00 3808 	mla	r8, r0, r8, r3
 800d2ce:	fba5 2300 	umull	r2, r3, r5, r0
 800d2d2:	1ab2      	subs	r2, r6, r2
 800d2d4:	4443      	add	r3, r8
 800d2d6:	eb67 0303 	sbc.w	r3, r7, r3
 800d2da:	e9c4 2300 	strd	r2, r3, [r4]
 800d2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e2:	bf00      	nop

0800d2e4 <__gnu_uldivmod_helper>:
 800d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e8:	9c06      	ldr	r4, [sp, #24]
 800d2ea:	4690      	mov	r8, r2
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	460f      	mov	r7, r1
 800d2f0:	461d      	mov	r5, r3
 800d2f2:	f000 f95f 	bl	800d5b4 <__udivdi3>
 800d2f6:	fb00 f505 	mul.w	r5, r0, r5
 800d2fa:	fba0 2308 	umull	r2, r3, r0, r8
 800d2fe:	fb08 5501 	mla	r5, r8, r1, r5
 800d302:	1ab2      	subs	r2, r6, r2
 800d304:	442b      	add	r3, r5
 800d306:	eb67 0303 	sbc.w	r3, r7, r3
 800d30a:	e9c4 2300 	strd	r2, r3, [r4]
 800d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d312:	bf00      	nop

0800d314 <__aeabi_idiv0>:
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop

0800d318 <__divdi3>:
 800d318:	2900      	cmp	r1, #0
 800d31a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d31e:	f2c0 80a6 	blt.w	800d46e <__divdi3+0x156>
 800d322:	2600      	movs	r6, #0
 800d324:	2b00      	cmp	r3, #0
 800d326:	f2c0 809c 	blt.w	800d462 <__divdi3+0x14a>
 800d32a:	4688      	mov	r8, r1
 800d32c:	4694      	mov	ip, r2
 800d32e:	469e      	mov	lr, r3
 800d330:	4615      	mov	r5, r2
 800d332:	4604      	mov	r4, r0
 800d334:	460f      	mov	r7, r1
 800d336:	2b00      	cmp	r3, #0
 800d338:	d13d      	bne.n	800d3b6 <__divdi3+0x9e>
 800d33a:	428a      	cmp	r2, r1
 800d33c:	d959      	bls.n	800d3f2 <__divdi3+0xda>
 800d33e:	fab2 f382 	clz	r3, r2
 800d342:	b13b      	cbz	r3, 800d354 <__divdi3+0x3c>
 800d344:	f1c3 0220 	rsb	r2, r3, #32
 800d348:	409f      	lsls	r7, r3
 800d34a:	fa20 f202 	lsr.w	r2, r0, r2
 800d34e:	409d      	lsls	r5, r3
 800d350:	4317      	orrs	r7, r2
 800d352:	409c      	lsls	r4, r3
 800d354:	0c29      	lsrs	r1, r5, #16
 800d356:	0c22      	lsrs	r2, r4, #16
 800d358:	fbb7 fef1 	udiv	lr, r7, r1
 800d35c:	b2a8      	uxth	r0, r5
 800d35e:	fb01 771e 	mls	r7, r1, lr, r7
 800d362:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800d366:	fb00 f30e 	mul.w	r3, r0, lr
 800d36a:	42bb      	cmp	r3, r7
 800d36c:	d90a      	bls.n	800d384 <__divdi3+0x6c>
 800d36e:	197f      	adds	r7, r7, r5
 800d370:	f10e 32ff 	add.w	r2, lr, #4294967295
 800d374:	f080 8105 	bcs.w	800d582 <__divdi3+0x26a>
 800d378:	42bb      	cmp	r3, r7
 800d37a:	f240 8102 	bls.w	800d582 <__divdi3+0x26a>
 800d37e:	f1ae 0e02 	sub.w	lr, lr, #2
 800d382:	442f      	add	r7, r5
 800d384:	1aff      	subs	r7, r7, r3
 800d386:	b2a4      	uxth	r4, r4
 800d388:	fbb7 f3f1 	udiv	r3, r7, r1
 800d38c:	fb01 7713 	mls	r7, r1, r3, r7
 800d390:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800d394:	fb00 f003 	mul.w	r0, r0, r3
 800d398:	42b8      	cmp	r0, r7
 800d39a:	d908      	bls.n	800d3ae <__divdi3+0x96>
 800d39c:	197f      	adds	r7, r7, r5
 800d39e:	f103 32ff 	add.w	r2, r3, #4294967295
 800d3a2:	f080 80f0 	bcs.w	800d586 <__divdi3+0x26e>
 800d3a6:	42b8      	cmp	r0, r7
 800d3a8:	f240 80ed 	bls.w	800d586 <__divdi3+0x26e>
 800d3ac:	3b02      	subs	r3, #2
 800d3ae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	e003      	b.n	800d3be <__divdi3+0xa6>
 800d3b6:	428b      	cmp	r3, r1
 800d3b8:	d90f      	bls.n	800d3da <__divdi3+0xc2>
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	4613      	mov	r3, r2
 800d3be:	1c34      	adds	r4, r6, #0
 800d3c0:	bf18      	it	ne
 800d3c2:	2401      	movne	r4, #1
 800d3c4:	4260      	negs	r0, r4
 800d3c6:	f04f 0500 	mov.w	r5, #0
 800d3ca:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800d3ce:	4058      	eors	r0, r3
 800d3d0:	4051      	eors	r1, r2
 800d3d2:	1900      	adds	r0, r0, r4
 800d3d4:	4169      	adcs	r1, r5
 800d3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3da:	fab3 f283 	clz	r2, r3
 800d3de:	2a00      	cmp	r2, #0
 800d3e0:	f040 8086 	bne.w	800d4f0 <__divdi3+0x1d8>
 800d3e4:	428b      	cmp	r3, r1
 800d3e6:	d302      	bcc.n	800d3ee <__divdi3+0xd6>
 800d3e8:	4584      	cmp	ip, r0
 800d3ea:	f200 80db 	bhi.w	800d5a4 <__divdi3+0x28c>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7e5      	b.n	800d3be <__divdi3+0xa6>
 800d3f2:	b912      	cbnz	r2, 800d3fa <__divdi3+0xe2>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	fbb3 f5f2 	udiv	r5, r3, r2
 800d3fa:	fab5 f085 	clz	r0, r5
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d13b      	bne.n	800d47a <__divdi3+0x162>
 800d402:	1b78      	subs	r0, r7, r5
 800d404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d408:	fa1f fc85 	uxth.w	ip, r5
 800d40c:	2201      	movs	r2, #1
 800d40e:	fbb0 f8fe 	udiv	r8, r0, lr
 800d412:	0c21      	lsrs	r1, r4, #16
 800d414:	fb0e 0718 	mls	r7, lr, r8, r0
 800d418:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800d41c:	fb0c f308 	mul.w	r3, ip, r8
 800d420:	42bb      	cmp	r3, r7
 800d422:	d907      	bls.n	800d434 <__divdi3+0x11c>
 800d424:	197f      	adds	r7, r7, r5
 800d426:	f108 31ff 	add.w	r1, r8, #4294967295
 800d42a:	d202      	bcs.n	800d432 <__divdi3+0x11a>
 800d42c:	42bb      	cmp	r3, r7
 800d42e:	f200 80bd 	bhi.w	800d5ac <__divdi3+0x294>
 800d432:	4688      	mov	r8, r1
 800d434:	1aff      	subs	r7, r7, r3
 800d436:	b2a4      	uxth	r4, r4
 800d438:	fbb7 f3fe 	udiv	r3, r7, lr
 800d43c:	fb0e 7713 	mls	r7, lr, r3, r7
 800d440:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800d444:	fb0c fc03 	mul.w	ip, ip, r3
 800d448:	45bc      	cmp	ip, r7
 800d44a:	d907      	bls.n	800d45c <__divdi3+0x144>
 800d44c:	197f      	adds	r7, r7, r5
 800d44e:	f103 31ff 	add.w	r1, r3, #4294967295
 800d452:	d202      	bcs.n	800d45a <__divdi3+0x142>
 800d454:	45bc      	cmp	ip, r7
 800d456:	f200 80a7 	bhi.w	800d5a8 <__divdi3+0x290>
 800d45a:	460b      	mov	r3, r1
 800d45c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800d460:	e7ad      	b.n	800d3be <__divdi3+0xa6>
 800d462:	4252      	negs	r2, r2
 800d464:	ea6f 0606 	mvn.w	r6, r6
 800d468:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d46c:	e75d      	b.n	800d32a <__divdi3+0x12>
 800d46e:	4240      	negs	r0, r0
 800d470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d474:	f04f 36ff 	mov.w	r6, #4294967295
 800d478:	e754      	b.n	800d324 <__divdi3+0xc>
 800d47a:	f1c0 0220 	rsb	r2, r0, #32
 800d47e:	fa24 f102 	lsr.w	r1, r4, r2
 800d482:	fa07 f300 	lsl.w	r3, r7, r0
 800d486:	4085      	lsls	r5, r0
 800d488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d48c:	40d7      	lsrs	r7, r2
 800d48e:	4319      	orrs	r1, r3
 800d490:	fbb7 f2fe 	udiv	r2, r7, lr
 800d494:	0c0b      	lsrs	r3, r1, #16
 800d496:	fb0e 7712 	mls	r7, lr, r2, r7
 800d49a:	fa1f fc85 	uxth.w	ip, r5
 800d49e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d4a2:	fb0c f702 	mul.w	r7, ip, r2
 800d4a6:	429f      	cmp	r7, r3
 800d4a8:	fa04 f400 	lsl.w	r4, r4, r0
 800d4ac:	d907      	bls.n	800d4be <__divdi3+0x1a6>
 800d4ae:	195b      	adds	r3, r3, r5
 800d4b0:	f102 30ff 	add.w	r0, r2, #4294967295
 800d4b4:	d274      	bcs.n	800d5a0 <__divdi3+0x288>
 800d4b6:	429f      	cmp	r7, r3
 800d4b8:	d972      	bls.n	800d5a0 <__divdi3+0x288>
 800d4ba:	3a02      	subs	r2, #2
 800d4bc:	442b      	add	r3, r5
 800d4be:	1bdf      	subs	r7, r3, r7
 800d4c0:	b289      	uxth	r1, r1
 800d4c2:	fbb7 f8fe 	udiv	r8, r7, lr
 800d4c6:	fb0e 7318 	mls	r3, lr, r8, r7
 800d4ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d4ce:	fb0c f708 	mul.w	r7, ip, r8
 800d4d2:	429f      	cmp	r7, r3
 800d4d4:	d908      	bls.n	800d4e8 <__divdi3+0x1d0>
 800d4d6:	195b      	adds	r3, r3, r5
 800d4d8:	f108 31ff 	add.w	r1, r8, #4294967295
 800d4dc:	d25c      	bcs.n	800d598 <__divdi3+0x280>
 800d4de:	429f      	cmp	r7, r3
 800d4e0:	d95a      	bls.n	800d598 <__divdi3+0x280>
 800d4e2:	f1a8 0802 	sub.w	r8, r8, #2
 800d4e6:	442b      	add	r3, r5
 800d4e8:	1bd8      	subs	r0, r3, r7
 800d4ea:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800d4ee:	e78e      	b.n	800d40e <__divdi3+0xf6>
 800d4f0:	f1c2 0320 	rsb	r3, r2, #32
 800d4f4:	fa2c f103 	lsr.w	r1, ip, r3
 800d4f8:	fa0e fe02 	lsl.w	lr, lr, r2
 800d4fc:	fa20 f703 	lsr.w	r7, r0, r3
 800d500:	ea41 0e0e 	orr.w	lr, r1, lr
 800d504:	fa08 f002 	lsl.w	r0, r8, r2
 800d508:	fa28 f103 	lsr.w	r1, r8, r3
 800d50c:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800d510:	4338      	orrs	r0, r7
 800d512:	fbb1 f8f5 	udiv	r8, r1, r5
 800d516:	0c03      	lsrs	r3, r0, #16
 800d518:	fb05 1118 	mls	r1, r5, r8, r1
 800d51c:	fa1f f78e 	uxth.w	r7, lr
 800d520:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800d524:	fb07 f308 	mul.w	r3, r7, r8
 800d528:	428b      	cmp	r3, r1
 800d52a:	fa0c fc02 	lsl.w	ip, ip, r2
 800d52e:	d909      	bls.n	800d544 <__divdi3+0x22c>
 800d530:	eb11 010e 	adds.w	r1, r1, lr
 800d534:	f108 39ff 	add.w	r9, r8, #4294967295
 800d538:	d230      	bcs.n	800d59c <__divdi3+0x284>
 800d53a:	428b      	cmp	r3, r1
 800d53c:	d92e      	bls.n	800d59c <__divdi3+0x284>
 800d53e:	f1a8 0802 	sub.w	r8, r8, #2
 800d542:	4471      	add	r1, lr
 800d544:	1ac9      	subs	r1, r1, r3
 800d546:	b280      	uxth	r0, r0
 800d548:	fbb1 f3f5 	udiv	r3, r1, r5
 800d54c:	fb05 1113 	mls	r1, r5, r3, r1
 800d550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800d554:	fb07 f703 	mul.w	r7, r7, r3
 800d558:	428f      	cmp	r7, r1
 800d55a:	d908      	bls.n	800d56e <__divdi3+0x256>
 800d55c:	eb11 010e 	adds.w	r1, r1, lr
 800d560:	f103 30ff 	add.w	r0, r3, #4294967295
 800d564:	d216      	bcs.n	800d594 <__divdi3+0x27c>
 800d566:	428f      	cmp	r7, r1
 800d568:	d914      	bls.n	800d594 <__divdi3+0x27c>
 800d56a:	3b02      	subs	r3, #2
 800d56c:	4471      	add	r1, lr
 800d56e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800d572:	1bc9      	subs	r1, r1, r7
 800d574:	fba3 890c 	umull	r8, r9, r3, ip
 800d578:	4549      	cmp	r1, r9
 800d57a:	d309      	bcc.n	800d590 <__divdi3+0x278>
 800d57c:	d005      	beq.n	800d58a <__divdi3+0x272>
 800d57e:	2200      	movs	r2, #0
 800d580:	e71d      	b.n	800d3be <__divdi3+0xa6>
 800d582:	4696      	mov	lr, r2
 800d584:	e6fe      	b.n	800d384 <__divdi3+0x6c>
 800d586:	4613      	mov	r3, r2
 800d588:	e711      	b.n	800d3ae <__divdi3+0x96>
 800d58a:	4094      	lsls	r4, r2
 800d58c:	4544      	cmp	r4, r8
 800d58e:	d2f6      	bcs.n	800d57e <__divdi3+0x266>
 800d590:	3b01      	subs	r3, #1
 800d592:	e7f4      	b.n	800d57e <__divdi3+0x266>
 800d594:	4603      	mov	r3, r0
 800d596:	e7ea      	b.n	800d56e <__divdi3+0x256>
 800d598:	4688      	mov	r8, r1
 800d59a:	e7a5      	b.n	800d4e8 <__divdi3+0x1d0>
 800d59c:	46c8      	mov	r8, r9
 800d59e:	e7d1      	b.n	800d544 <__divdi3+0x22c>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	e78c      	b.n	800d4be <__divdi3+0x1a6>
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	e70a      	b.n	800d3be <__divdi3+0xa6>
 800d5a8:	3b02      	subs	r3, #2
 800d5aa:	e757      	b.n	800d45c <__divdi3+0x144>
 800d5ac:	f1a8 0802 	sub.w	r8, r8, #2
 800d5b0:	442f      	add	r7, r5
 800d5b2:	e73f      	b.n	800d434 <__divdi3+0x11c>

0800d5b4 <__udivdi3>:
 800d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d144      	bne.n	800d646 <__udivdi3+0x92>
 800d5bc:	428a      	cmp	r2, r1
 800d5be:	4615      	mov	r5, r2
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	d94f      	bls.n	800d664 <__udivdi3+0xb0>
 800d5c4:	fab2 f782 	clz	r7, r2
 800d5c8:	460e      	mov	r6, r1
 800d5ca:	b14f      	cbz	r7, 800d5e0 <__udivdi3+0x2c>
 800d5cc:	f1c7 0320 	rsb	r3, r7, #32
 800d5d0:	40b9      	lsls	r1, r7
 800d5d2:	fa20 f603 	lsr.w	r6, r0, r3
 800d5d6:	fa02 f507 	lsl.w	r5, r2, r7
 800d5da:	430e      	orrs	r6, r1
 800d5dc:	fa00 f407 	lsl.w	r4, r0, r7
 800d5e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d5e4:	0c23      	lsrs	r3, r4, #16
 800d5e6:	fbb6 f0fe 	udiv	r0, r6, lr
 800d5ea:	b2af      	uxth	r7, r5
 800d5ec:	fb0e 6110 	mls	r1, lr, r0, r6
 800d5f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d5f4:	fb07 f100 	mul.w	r1, r7, r0
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	d909      	bls.n	800d610 <__udivdi3+0x5c>
 800d5fc:	195b      	adds	r3, r3, r5
 800d5fe:	f100 32ff 	add.w	r2, r0, #4294967295
 800d602:	f080 80ec 	bcs.w	800d7de <__udivdi3+0x22a>
 800d606:	4299      	cmp	r1, r3
 800d608:	f240 80e9 	bls.w	800d7de <__udivdi3+0x22a>
 800d60c:	3802      	subs	r0, #2
 800d60e:	442b      	add	r3, r5
 800d610:	1a5a      	subs	r2, r3, r1
 800d612:	b2a4      	uxth	r4, r4
 800d614:	fbb2 f3fe 	udiv	r3, r2, lr
 800d618:	fb0e 2213 	mls	r2, lr, r3, r2
 800d61c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800d620:	fb07 f703 	mul.w	r7, r7, r3
 800d624:	4297      	cmp	r7, r2
 800d626:	d908      	bls.n	800d63a <__udivdi3+0x86>
 800d628:	1952      	adds	r2, r2, r5
 800d62a:	f103 31ff 	add.w	r1, r3, #4294967295
 800d62e:	f080 80d8 	bcs.w	800d7e2 <__udivdi3+0x22e>
 800d632:	4297      	cmp	r7, r2
 800d634:	f240 80d5 	bls.w	800d7e2 <__udivdi3+0x22e>
 800d638:	3b02      	subs	r3, #2
 800d63a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800d63e:	2600      	movs	r6, #0
 800d640:	4631      	mov	r1, r6
 800d642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d646:	428b      	cmp	r3, r1
 800d648:	d847      	bhi.n	800d6da <__udivdi3+0x126>
 800d64a:	fab3 f683 	clz	r6, r3
 800d64e:	2e00      	cmp	r6, #0
 800d650:	d148      	bne.n	800d6e4 <__udivdi3+0x130>
 800d652:	428b      	cmp	r3, r1
 800d654:	d302      	bcc.n	800d65c <__udivdi3+0xa8>
 800d656:	4282      	cmp	r2, r0
 800d658:	f200 80cd 	bhi.w	800d7f6 <__udivdi3+0x242>
 800d65c:	2001      	movs	r0, #1
 800d65e:	4631      	mov	r1, r6
 800d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d664:	b912      	cbnz	r2, 800d66c <__udivdi3+0xb8>
 800d666:	2501      	movs	r5, #1
 800d668:	fbb5 f5f2 	udiv	r5, r5, r2
 800d66c:	fab5 f885 	clz	r8, r5
 800d670:	f1b8 0f00 	cmp.w	r8, #0
 800d674:	d177      	bne.n	800d766 <__udivdi3+0x1b2>
 800d676:	1b4a      	subs	r2, r1, r5
 800d678:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d67c:	b2af      	uxth	r7, r5
 800d67e:	2601      	movs	r6, #1
 800d680:	fbb2 f0fe 	udiv	r0, r2, lr
 800d684:	0c23      	lsrs	r3, r4, #16
 800d686:	fb0e 2110 	mls	r1, lr, r0, r2
 800d68a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800d68e:	fb07 f300 	mul.w	r3, r7, r0
 800d692:	428b      	cmp	r3, r1
 800d694:	d907      	bls.n	800d6a6 <__udivdi3+0xf2>
 800d696:	1949      	adds	r1, r1, r5
 800d698:	f100 32ff 	add.w	r2, r0, #4294967295
 800d69c:	d202      	bcs.n	800d6a4 <__udivdi3+0xf0>
 800d69e:	428b      	cmp	r3, r1
 800d6a0:	f200 80ba 	bhi.w	800d818 <__udivdi3+0x264>
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	1ac9      	subs	r1, r1, r3
 800d6a8:	b2a4      	uxth	r4, r4
 800d6aa:	fbb1 f3fe 	udiv	r3, r1, lr
 800d6ae:	fb0e 1113 	mls	r1, lr, r3, r1
 800d6b2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800d6b6:	fb07 f703 	mul.w	r7, r7, r3
 800d6ba:	42a7      	cmp	r7, r4
 800d6bc:	d908      	bls.n	800d6d0 <__udivdi3+0x11c>
 800d6be:	1964      	adds	r4, r4, r5
 800d6c0:	f103 32ff 	add.w	r2, r3, #4294967295
 800d6c4:	f080 808f 	bcs.w	800d7e6 <__udivdi3+0x232>
 800d6c8:	42a7      	cmp	r7, r4
 800d6ca:	f240 808c 	bls.w	800d7e6 <__udivdi3+0x232>
 800d6ce:	3b02      	subs	r3, #2
 800d6d0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6da:	2600      	movs	r6, #0
 800d6dc:	4630      	mov	r0, r6
 800d6de:	4631      	mov	r1, r6
 800d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e4:	f1c6 0420 	rsb	r4, r6, #32
 800d6e8:	fa22 f504 	lsr.w	r5, r2, r4
 800d6ec:	40b3      	lsls	r3, r6
 800d6ee:	432b      	orrs	r3, r5
 800d6f0:	fa20 fc04 	lsr.w	ip, r0, r4
 800d6f4:	fa01 f706 	lsl.w	r7, r1, r6
 800d6f8:	fa21 f504 	lsr.w	r5, r1, r4
 800d6fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d700:	ea4c 0707 	orr.w	r7, ip, r7
 800d704:	fbb5 f8fe 	udiv	r8, r5, lr
 800d708:	0c39      	lsrs	r1, r7, #16
 800d70a:	fb0e 5518 	mls	r5, lr, r8, r5
 800d70e:	fa1f fc83 	uxth.w	ip, r3
 800d712:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800d716:	fb0c f108 	mul.w	r1, ip, r8
 800d71a:	42a9      	cmp	r1, r5
 800d71c:	fa02 f206 	lsl.w	r2, r2, r6
 800d720:	d904      	bls.n	800d72c <__udivdi3+0x178>
 800d722:	18ed      	adds	r5, r5, r3
 800d724:	f108 34ff 	add.w	r4, r8, #4294967295
 800d728:	d367      	bcc.n	800d7fa <__udivdi3+0x246>
 800d72a:	46a0      	mov	r8, r4
 800d72c:	1a6d      	subs	r5, r5, r1
 800d72e:	b2bf      	uxth	r7, r7
 800d730:	fbb5 f4fe 	udiv	r4, r5, lr
 800d734:	fb0e 5514 	mls	r5, lr, r4, r5
 800d738:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800d73c:	fb0c fc04 	mul.w	ip, ip, r4
 800d740:	458c      	cmp	ip, r1
 800d742:	d904      	bls.n	800d74e <__udivdi3+0x19a>
 800d744:	18c9      	adds	r1, r1, r3
 800d746:	f104 35ff 	add.w	r5, r4, #4294967295
 800d74a:	d35c      	bcc.n	800d806 <__udivdi3+0x252>
 800d74c:	462c      	mov	r4, r5
 800d74e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800d752:	ebcc 0101 	rsb	r1, ip, r1
 800d756:	fba4 2302 	umull	r2, r3, r4, r2
 800d75a:	4299      	cmp	r1, r3
 800d75c:	d348      	bcc.n	800d7f0 <__udivdi3+0x23c>
 800d75e:	d044      	beq.n	800d7ea <__udivdi3+0x236>
 800d760:	4620      	mov	r0, r4
 800d762:	2600      	movs	r6, #0
 800d764:	e76c      	b.n	800d640 <__udivdi3+0x8c>
 800d766:	f1c8 0420 	rsb	r4, r8, #32
 800d76a:	fa01 f308 	lsl.w	r3, r1, r8
 800d76e:	fa05 f508 	lsl.w	r5, r5, r8
 800d772:	fa20 f704 	lsr.w	r7, r0, r4
 800d776:	40e1      	lsrs	r1, r4
 800d778:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d77c:	431f      	orrs	r7, r3
 800d77e:	fbb1 f6fe 	udiv	r6, r1, lr
 800d782:	0c3a      	lsrs	r2, r7, #16
 800d784:	fb0e 1116 	mls	r1, lr, r6, r1
 800d788:	fa1f fc85 	uxth.w	ip, r5
 800d78c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800d790:	fb0c f206 	mul.w	r2, ip, r6
 800d794:	429a      	cmp	r2, r3
 800d796:	fa00 f408 	lsl.w	r4, r0, r8
 800d79a:	d907      	bls.n	800d7ac <__udivdi3+0x1f8>
 800d79c:	195b      	adds	r3, r3, r5
 800d79e:	f106 31ff 	add.w	r1, r6, #4294967295
 800d7a2:	d237      	bcs.n	800d814 <__udivdi3+0x260>
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d935      	bls.n	800d814 <__udivdi3+0x260>
 800d7a8:	3e02      	subs	r6, #2
 800d7aa:	442b      	add	r3, r5
 800d7ac:	1a9b      	subs	r3, r3, r2
 800d7ae:	b2bf      	uxth	r7, r7
 800d7b0:	fbb3 f0fe 	udiv	r0, r3, lr
 800d7b4:	fb0e 3310 	mls	r3, lr, r0, r3
 800d7b8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d7bc:	fb0c f100 	mul.w	r1, ip, r0
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	d907      	bls.n	800d7d4 <__udivdi3+0x220>
 800d7c4:	195b      	adds	r3, r3, r5
 800d7c6:	f100 32ff 	add.w	r2, r0, #4294967295
 800d7ca:	d221      	bcs.n	800d810 <__udivdi3+0x25c>
 800d7cc:	4299      	cmp	r1, r3
 800d7ce:	d91f      	bls.n	800d810 <__udivdi3+0x25c>
 800d7d0:	3802      	subs	r0, #2
 800d7d2:	442b      	add	r3, r5
 800d7d4:	1a5a      	subs	r2, r3, r1
 800d7d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800d7da:	4667      	mov	r7, ip
 800d7dc:	e750      	b.n	800d680 <__udivdi3+0xcc>
 800d7de:	4610      	mov	r0, r2
 800d7e0:	e716      	b.n	800d610 <__udivdi3+0x5c>
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	e729      	b.n	800d63a <__udivdi3+0x86>
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	e772      	b.n	800d6d0 <__udivdi3+0x11c>
 800d7ea:	40b0      	lsls	r0, r6
 800d7ec:	4290      	cmp	r0, r2
 800d7ee:	d2b7      	bcs.n	800d760 <__udivdi3+0x1ac>
 800d7f0:	1e60      	subs	r0, r4, #1
 800d7f2:	2600      	movs	r6, #0
 800d7f4:	e724      	b.n	800d640 <__udivdi3+0x8c>
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	e722      	b.n	800d640 <__udivdi3+0x8c>
 800d7fa:	42a9      	cmp	r1, r5
 800d7fc:	d995      	bls.n	800d72a <__udivdi3+0x176>
 800d7fe:	f1a8 0802 	sub.w	r8, r8, #2
 800d802:	441d      	add	r5, r3
 800d804:	e792      	b.n	800d72c <__udivdi3+0x178>
 800d806:	458c      	cmp	ip, r1
 800d808:	d9a0      	bls.n	800d74c <__udivdi3+0x198>
 800d80a:	3c02      	subs	r4, #2
 800d80c:	4419      	add	r1, r3
 800d80e:	e79e      	b.n	800d74e <__udivdi3+0x19a>
 800d810:	4610      	mov	r0, r2
 800d812:	e7df      	b.n	800d7d4 <__udivdi3+0x220>
 800d814:	460e      	mov	r6, r1
 800d816:	e7c9      	b.n	800d7ac <__udivdi3+0x1f8>
 800d818:	3802      	subs	r0, #2
 800d81a:	4429      	add	r1, r5
 800d81c:	e743      	b.n	800d6a6 <__udivdi3+0xf2>
 800d81e:	bf00      	nop

0800d820 <calloc>:
 800d820:	460a      	mov	r2, r1
 800d822:	4903      	ldr	r1, [pc, #12]	; (800d830 <calloc+0x10>)
 800d824:	4603      	mov	r3, r0
 800d826:	6808      	ldr	r0, [r1, #0]
 800d828:	4619      	mov	r1, r3
 800d82a:	f000 b85a 	b.w	800d8e2 <_calloc_r>
 800d82e:	bf00      	nop
 800d830:	1ffed768 	.word	0x1ffed768

0800d834 <__errno>:
 800d834:	4b01      	ldr	r3, [pc, #4]	; (800d83c <__errno+0x8>)
 800d836:	6818      	ldr	r0, [r3, #0]
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	1ffed768 	.word	0x1ffed768

0800d840 <__libc_init_array>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	4b0e      	ldr	r3, [pc, #56]	; (800d87c <__libc_init_array+0x3c>)
 800d844:	4c0e      	ldr	r4, [pc, #56]	; (800d880 <__libc_init_array+0x40>)
 800d846:	1ae4      	subs	r4, r4, r3
 800d848:	10a4      	asrs	r4, r4, #2
 800d84a:	2500      	movs	r5, #0
 800d84c:	461e      	mov	r6, r3
 800d84e:	42a5      	cmp	r5, r4
 800d850:	d004      	beq.n	800d85c <__libc_init_array+0x1c>
 800d852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d856:	4798      	blx	r3
 800d858:	3501      	adds	r5, #1
 800d85a:	e7f8      	b.n	800d84e <__libc_init_array+0xe>
 800d85c:	f7f4 fdb2 	bl	80023c4 <_init>
 800d860:	4c08      	ldr	r4, [pc, #32]	; (800d884 <__libc_init_array+0x44>)
 800d862:	4b09      	ldr	r3, [pc, #36]	; (800d888 <__libc_init_array+0x48>)
 800d864:	1ae4      	subs	r4, r4, r3
 800d866:	10a4      	asrs	r4, r4, #2
 800d868:	2500      	movs	r5, #0
 800d86a:	461e      	mov	r6, r3
 800d86c:	42a5      	cmp	r5, r4
 800d86e:	d004      	beq.n	800d87a <__libc_init_array+0x3a>
 800d870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d874:	4798      	blx	r3
 800d876:	3501      	adds	r5, #1
 800d878:	e7f8      	b.n	800d86c <__libc_init_array+0x2c>
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	1ffed76c 	.word	0x1ffed76c
 800d880:	1ffed76c 	.word	0x1ffed76c
 800d884:	1ffed76c 	.word	0x1ffed76c
 800d888:	1ffed76c 	.word	0x1ffed76c

0800d88c <free>:
 800d88c:	4b02      	ldr	r3, [pc, #8]	; (800d898 <free+0xc>)
 800d88e:	4601      	mov	r1, r0
 800d890:	6818      	ldr	r0, [r3, #0]
 800d892:	f000 b835 	b.w	800d900 <_free_r>
 800d896:	bf00      	nop
 800d898:	1ffed768 	.word	0x1ffed768

0800d89c <memcmp>:
 800d89c:	b510      	push	{r4, lr}
 800d89e:	440a      	add	r2, r1
 800d8a0:	1e44      	subs	r4, r0, #1
 800d8a2:	4291      	cmp	r1, r2
 800d8a4:	d008      	beq.n	800d8b8 <memcmp+0x1c>
 800d8a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d8aa:	7808      	ldrb	r0, [r1, #0]
 800d8ac:	4283      	cmp	r3, r0
 800d8ae:	d001      	beq.n	800d8b4 <memcmp+0x18>
 800d8b0:	1a18      	subs	r0, r3, r0
 800d8b2:	bd10      	pop	{r4, pc}
 800d8b4:	3101      	adds	r1, #1
 800d8b6:	e7f4      	b.n	800d8a2 <memcmp+0x6>
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	bd10      	pop	{r4, pc}

0800d8bc <memcpy>:
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	1e43      	subs	r3, r0, #1
 800d8c0:	440a      	add	r2, r1
 800d8c2:	4291      	cmp	r1, r2
 800d8c4:	d004      	beq.n	800d8d0 <memcpy+0x14>
 800d8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8ce:	e7f8      	b.n	800d8c2 <memcpy+0x6>
 800d8d0:	bd10      	pop	{r4, pc}

0800d8d2 <memset>:
 800d8d2:	4402      	add	r2, r0
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d002      	beq.n	800d8e0 <memset+0xe>
 800d8da:	f803 1b01 	strb.w	r1, [r3], #1
 800d8de:	e7fa      	b.n	800d8d6 <memset+0x4>
 800d8e0:	4770      	bx	lr

0800d8e2 <_calloc_r>:
 800d8e2:	b538      	push	{r3, r4, r5, lr}
 800d8e4:	fb02 f401 	mul.w	r4, r2, r1
 800d8e8:	4621      	mov	r1, r4
 800d8ea:	f000 f84d 	bl	800d988 <_malloc_r>
 800d8ee:	4605      	mov	r5, r0
 800d8f0:	b118      	cbz	r0, 800d8fa <_calloc_r+0x18>
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	f7ff ffec 	bl	800d8d2 <memset>
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d900 <_free_r>:
 800d900:	b530      	push	{r4, r5, lr}
 800d902:	2900      	cmp	r1, #0
 800d904:	d03d      	beq.n	800d982 <_free_r+0x82>
 800d906:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800d90a:	1f0b      	subs	r3, r1, #4
 800d90c:	491d      	ldr	r1, [pc, #116]	; (800d984 <_free_r+0x84>)
 800d90e:	2a00      	cmp	r2, #0
 800d910:	bfb8      	it	lt
 800d912:	189b      	addlt	r3, r3, r2
 800d914:	680a      	ldr	r2, [r1, #0]
 800d916:	460c      	mov	r4, r1
 800d918:	b912      	cbnz	r2, 800d920 <_free_r+0x20>
 800d91a:	605a      	str	r2, [r3, #4]
 800d91c:	600b      	str	r3, [r1, #0]
 800d91e:	bd30      	pop	{r4, r5, pc}
 800d920:	4293      	cmp	r3, r2
 800d922:	d20d      	bcs.n	800d940 <_free_r+0x40>
 800d924:	6819      	ldr	r1, [r3, #0]
 800d926:	1858      	adds	r0, r3, r1
 800d928:	4290      	cmp	r0, r2
 800d92a:	bf01      	itttt	eq
 800d92c:	585a      	ldreq	r2, [r3, r1]
 800d92e:	1852      	addeq	r2, r2, r1
 800d930:	601a      	streq	r2, [r3, #0]
 800d932:	6842      	ldreq	r2, [r0, #4]
 800d934:	605a      	str	r2, [r3, #4]
 800d936:	6023      	str	r3, [r4, #0]
 800d938:	bd30      	pop	{r4, r5, pc}
 800d93a:	4299      	cmp	r1, r3
 800d93c:	d803      	bhi.n	800d946 <_free_r+0x46>
 800d93e:	460a      	mov	r2, r1
 800d940:	6851      	ldr	r1, [r2, #4]
 800d942:	2900      	cmp	r1, #0
 800d944:	d1f9      	bne.n	800d93a <_free_r+0x3a>
 800d946:	6814      	ldr	r4, [r2, #0]
 800d948:	1915      	adds	r5, r2, r4
 800d94a:	429d      	cmp	r5, r3
 800d94c:	d10a      	bne.n	800d964 <_free_r+0x64>
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4423      	add	r3, r4
 800d952:	18d0      	adds	r0, r2, r3
 800d954:	4288      	cmp	r0, r1
 800d956:	6013      	str	r3, [r2, #0]
 800d958:	d113      	bne.n	800d982 <_free_r+0x82>
 800d95a:	6808      	ldr	r0, [r1, #0]
 800d95c:	4403      	add	r3, r0
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	684b      	ldr	r3, [r1, #4]
 800d962:	e00d      	b.n	800d980 <_free_r+0x80>
 800d964:	d902      	bls.n	800d96c <_free_r+0x6c>
 800d966:	230c      	movs	r3, #12
 800d968:	6003      	str	r3, [r0, #0]
 800d96a:	bd30      	pop	{r4, r5, pc}
 800d96c:	681c      	ldr	r4, [r3, #0]
 800d96e:	1918      	adds	r0, r3, r4
 800d970:	4288      	cmp	r0, r1
 800d972:	bf04      	itt	eq
 800d974:	6808      	ldreq	r0, [r1, #0]
 800d976:	6849      	ldreq	r1, [r1, #4]
 800d978:	6059      	str	r1, [r3, #4]
 800d97a:	bf04      	itt	eq
 800d97c:	1900      	addeq	r0, r0, r4
 800d97e:	6018      	streq	r0, [r3, #0]
 800d980:	6053      	str	r3, [r2, #4]
 800d982:	bd30      	pop	{r4, r5, pc}
 800d984:	1fff1188 	.word	0x1fff1188

0800d988 <_malloc_r>:
 800d988:	b570      	push	{r4, r5, r6, lr}
 800d98a:	1ccc      	adds	r4, r1, #3
 800d98c:	f024 0403 	bic.w	r4, r4, #3
 800d990:	3408      	adds	r4, #8
 800d992:	2c0c      	cmp	r4, #12
 800d994:	bf38      	it	cc
 800d996:	240c      	movcc	r4, #12
 800d998:	2c00      	cmp	r4, #0
 800d99a:	4606      	mov	r6, r0
 800d99c:	da03      	bge.n	800d9a6 <_malloc_r+0x1e>
 800d99e:	230c      	movs	r3, #12
 800d9a0:	6033      	str	r3, [r6, #0]
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	bd70      	pop	{r4, r5, r6, pc}
 800d9a6:	428c      	cmp	r4, r1
 800d9a8:	d3f9      	bcc.n	800d99e <_malloc_r+0x16>
 800d9aa:	4a20      	ldr	r2, [pc, #128]	; (800da2c <_malloc_r+0xa4>)
 800d9ac:	6813      	ldr	r3, [r2, #0]
 800d9ae:	4610      	mov	r0, r2
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	b1a1      	cbz	r1, 800d9de <_malloc_r+0x56>
 800d9b4:	680a      	ldr	r2, [r1, #0]
 800d9b6:	1b12      	subs	r2, r2, r4
 800d9b8:	d40e      	bmi.n	800d9d8 <_malloc_r+0x50>
 800d9ba:	2a0b      	cmp	r2, #11
 800d9bc:	d903      	bls.n	800d9c6 <_malloc_r+0x3e>
 800d9be:	600a      	str	r2, [r1, #0]
 800d9c0:	188b      	adds	r3, r1, r2
 800d9c2:	508c      	str	r4, [r1, r2]
 800d9c4:	e01f      	b.n	800da06 <_malloc_r+0x7e>
 800d9c6:	428b      	cmp	r3, r1
 800d9c8:	bf0d      	iteet	eq
 800d9ca:	685a      	ldreq	r2, [r3, #4]
 800d9cc:	684a      	ldrne	r2, [r1, #4]
 800d9ce:	605a      	strne	r2, [r3, #4]
 800d9d0:	6002      	streq	r2, [r0, #0]
 800d9d2:	bf18      	it	ne
 800d9d4:	460b      	movne	r3, r1
 800d9d6:	e016      	b.n	800da06 <_malloc_r+0x7e>
 800d9d8:	460b      	mov	r3, r1
 800d9da:	6849      	ldr	r1, [r1, #4]
 800d9dc:	e7e9      	b.n	800d9b2 <_malloc_r+0x2a>
 800d9de:	4d14      	ldr	r5, [pc, #80]	; (800da30 <_malloc_r+0xa8>)
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	b91b      	cbnz	r3, 800d9ec <_malloc_r+0x64>
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f000 f825 	bl	800da34 <_sbrk_r>
 800d9ea:	6028      	str	r0, [r5, #0]
 800d9ec:	4630      	mov	r0, r6
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	f000 f820 	bl	800da34 <_sbrk_r>
 800d9f4:	1c42      	adds	r2, r0, #1
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	d0d1      	beq.n	800d99e <_malloc_r+0x16>
 800d9fa:	1cc5      	adds	r5, r0, #3
 800d9fc:	f025 0503 	bic.w	r5, r5, #3
 800da00:	4285      	cmp	r5, r0
 800da02:	d10a      	bne.n	800da1a <_malloc_r+0x92>
 800da04:	601c      	str	r4, [r3, #0]
 800da06:	f103 000b 	add.w	r0, r3, #11
 800da0a:	1d1a      	adds	r2, r3, #4
 800da0c:	f020 0007 	bic.w	r0, r0, #7
 800da10:	1a82      	subs	r2, r0, r2
 800da12:	d00a      	beq.n	800da2a <_malloc_r+0xa2>
 800da14:	4251      	negs	r1, r2
 800da16:	5099      	str	r1, [r3, r2]
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	4630      	mov	r0, r6
 800da1c:	1ae9      	subs	r1, r5, r3
 800da1e:	f000 f809 	bl	800da34 <_sbrk_r>
 800da22:	3001      	adds	r0, #1
 800da24:	d0bb      	beq.n	800d99e <_malloc_r+0x16>
 800da26:	462b      	mov	r3, r5
 800da28:	e7ec      	b.n	800da04 <_malloc_r+0x7c>
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	1fff1188 	.word	0x1fff1188
 800da30:	1fff1184 	.word	0x1fff1184

0800da34 <_sbrk_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	4c06      	ldr	r4, [pc, #24]	; (800da50 <_sbrk_r+0x1c>)
 800da38:	2300      	movs	r3, #0
 800da3a:	4605      	mov	r5, r0
 800da3c:	4608      	mov	r0, r1
 800da3e:	6023      	str	r3, [r4, #0]
 800da40:	f7f4 fca0 	bl	8002384 <_sbrk>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d102      	bne.n	800da4e <_sbrk_r+0x1a>
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	b103      	cbz	r3, 800da4e <_sbrk_r+0x1a>
 800da4c:	602b      	str	r3, [r5, #0]
 800da4e:	bd38      	pop	{r3, r4, r5, pc}
 800da50:	1fff1820 	.word	0x1fff1820

0800da54 <strcmp>:
 800da54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da5c:	2a01      	cmp	r2, #1
 800da5e:	bf28      	it	cs
 800da60:	429a      	cmpcs	r2, r3
 800da62:	d0f7      	beq.n	800da54 <strcmp>
 800da64:	1ad0      	subs	r0, r2, r3
 800da66:	4770      	bx	lr

0800da68 <strncmp>:
 800da68:	b570      	push	{r4, r5, r6, lr}
 800da6a:	b1aa      	cbz	r2, 800da98 <strncmp+0x30>
 800da6c:	1e45      	subs	r5, r0, #1
 800da6e:	3901      	subs	r1, #1
 800da70:	786b      	ldrb	r3, [r5, #1]
 800da72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800da76:	42a3      	cmp	r3, r4
 800da78:	f105 0601 	add.w	r6, r5, #1
 800da7c:	d106      	bne.n	800da8c <strncmp+0x24>
 800da7e:	f06f 0401 	mvn.w	r4, #1
 800da82:	1b64      	subs	r4, r4, r5
 800da84:	4414      	add	r4, r2
 800da86:	42e0      	cmn	r0, r4
 800da88:	d102      	bne.n	800da90 <strncmp+0x28>
 800da8a:	461c      	mov	r4, r3
 800da8c:	1b18      	subs	r0, r3, r4
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	4635      	mov	r5, r6
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1ec      	bne.n	800da70 <strncmp+0x8>
 800da96:	e7f8      	b.n	800da8a <strncmp+0x22>
 800da98:	4610      	mov	r0, r2
 800da9a:	bd70      	pop	{r4, r5, r6, pc}

0800da9c <CSWTCH.37>:
	...
 800daa4:	0002 0000 0002 0000 000c 0000 000c 0000     ................
 800dab4:	000c 0000 000c 0000 0008 0000 000a 0000     ................

0800dac4 <CSWTCH.38>:
 800dac4:	0003 0000 0003 0000 000c 0000 000c 0000     ................
 800dad4:	3000 0000 3000 0000 3000 0000 3000 0000     .0...0...0...0..
 800dae4:	0300 0000 0c00 0000                         ........

0800daec <CSWTCH.43>:
 800daec:	0003 0000 0003 0000 000c 0000 000c 0000     ................
 800dafc:	0030 0000 0030 0000 3000 0000 3000 0000     0...0....0...0..
 800db0c:	0300 0000 0c00 0000                         ........

0800db14 <CSWTCH.44>:
	...
 800db1c:	0002 0000 0002 0000 0004 0000 0004 0000     ................
 800db2c:	000c 0000 000c 0000 0008 0000 000a 0000     ................

0800db3c <Driver_USBD0>:
 800db3c:	0e15 0800 1475 0800 1191 0800 0e31 0800     ....u.......1...
 800db4c:	0e49 0800 0e61 0800 0f79 0800 11b5 0800     I...a...y.......
 800db5c:	1061 0800 0f91 0800 1641 0800 1435 0800     a.......A...5...
 800db6c:	1721 0800 101d 0800 1161 0800 1175 0800     !.......a...u...

0800db7c <product_string>:
 800db7c:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...

0800dbe4 <device_descriptor>:
 800dbe4:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 800dbf4:	0100 0000                                   ....

0800dbf8 <language_string>:
 800dbf8:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

0800dc60 <manufacturer_string>:
 800dc60:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 800dc70:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

0800dcc8 <CSWTCH.1>:
 800dcc8:	dbf8 0800 dc60 0800 db7c 0800               ....`...|...

0800dcd4 <CSWTCH.2>:
 800dcd4:	0004 0012 0010 0000                         ........

0800dcdc <configuration_descriptor>:
 800dcdc:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 800dcec:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 800dcfc:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 800dd0c:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....

0800dd1c <cunit_logger_config>:
 800dd1c:	dd4c 0800 3915 0800 523d 0800 5249 0800     L....9..=R..IR..
	...
 800dd40:	dd58 0800 0000 0400 0404 0000               X...........

0800dd4c <cunit_logger_channel_config>:
 800dd4c:	2580 0000 0808 1001 0000 0000               .%..........

0800dd58 <cunit_logger_tx_pin>:
 800dd58:	8200 4802 0005 0000 dd64 0800               ...H....d...

0800dd64 <cunit_logger_tx_pin_config>:
 800dd64:	0090 0000 0001 0000 0002 0000               ............

0800dd70 <cunit_logger_rx_pin_config>:
 800dd70:	0000 0000 0001 0000 0002 0000               ............

0800dd7c <scheduler_timer_intr>:
 800dd7c:	3d39 0100                                   9=..

0800dd80 <tick_timer_intr>:
 800dd80:	3f31 0100                                   1?..

0800dd84 <INTERRUPT_0>:
 800dd84:	3f3f 0100                                   ??..

0800dd88 <i2c_master_0_sda_pin_config>:
 800dd88:	00d0 0000 0001 0000 0000 0000               ............

0800dd94 <i2c_master_0_scl_pin_config>:
 800dd94:	00d0 0000 0001 0000 0000 0000               ............

0800dda0 <i2c_master_0_config>:
 800dda0:	ddcc 0800 4779 0800 4755 0800 4731 0800     ....yG..UG..1G..
 800ddb0:	4fdd 0800 4ffd 0800 5071 0800 50c5 0800     .O...O..qP...P..
 800ddc0:	501d 0800 0000 0000 5755 0000               .P......UW..

0800ddcc <i2c_master_0_channel_config>:
 800ddcc:	1a80 0006 0000 0000                         ........

0800ddd4 <e_eeprom_xmc4_fce>:
 800ddd4:	0020 5002 0700 0000 0000 0000                ..P........

0800dde0 <reset_pin>:
 800dde0:	8000 4802 0080 0000 0001 0000 0000 0000     ...H............
 800ddf0:	0006 0000                                   ....

0800ddf4 <vdd_pin>:
 800ddf4:	8200 4802 0080 0000 0001 0000 0000 0000     ...H............
 800de04:	0007 0000 0230 0101 0000 0001 0000 0000     ....0...........
 800de14:	0000 0001 0102 0101 6c50 7461 6f66 6d72     ........Platform
 800de24:	4220 6e69 6964 676e 0000 0000                Binding....

0800de30 <g_pctr_states_table>:
 800de30:	0400 0400 0201 ffff 0201 ffff ffff 0707     ................

0800de40 <g_optiga_unique_application_identifier>:
 800de40:	76d2 0000 4704 6e65 7541 6874 7041 6c70     .v...GenAuthAppl

0800de50 <aes_info>:
 800de50:	0002 0000 b4d1 0800 b4cd 0800 b4c9 0800     ................
 800de60:	b4b1 0800 b49d 0800                         ........

0800de68 <aes_192_ccm_info>:
 800de68:	082c 0000 00c0 0000 defc 0800 000c 0000     ,...............
 800de78:	0001 0000 0010 0000 debc 0800               ............

0800de84 <mbedtls_cipher_definitions>:
 800de84:	0002 0000 df8c 0800 0003 0000 df54 0800     ............T...
 800de94:	0004 0000 df70 0800 002b 0000 ded4 0800     ....p...+.......
 800dea4:	002c 0000 de68 0800 002d 0000 df38 0800     ,...h...-...8...
	...

0800debc <ccm_aes_info>:
 800debc:	0002 0000 0000 0000 b491 0800 b491 0800     ................
 800decc:	b479 0800 b465 0800                         y...e...

0800ded4 <aes_128_ccm_info>:
 800ded4:	082b 0000 0080 0000 df08 0800 000c 0000     +...............
 800dee4:	0001 0000 0010 0000 debc 0800 4541 2d53     ............AES-
 800def4:	3532 2d36 4343 004d 4541 2d53 3931 2d32     256-CCM.AES-192-
 800df04:	4343 004d 4541 2d53 3231 2d38 4343 004d     CCM.AES-128-CCM.
 800df14:	4541 2d53 3532 2d36 4345 0042 4541 2d53     AES-256-ECB.AES-
 800df24:	3931 2d32 4345 0042 4541 2d53 3231 2d38     192-ECB.AES-128-
 800df34:	4345 0042                                   ECB.

0800df38 <aes_256_ccm_info>:
 800df38:	082d 0000 0100 0000 def0 0800 000c 0000     -...............
 800df48:	0001 0000 0010 0000 debc 0800               ............

0800df54 <aes_192_ecb_info>:
 800df54:	0103 0000 00c0 0000 df20 0800 0000 0000     ........ .......
 800df64:	0000 0000 0010 0000 de50 0800               ........P...

0800df70 <aes_256_ecb_info>:
 800df70:	0104 0000 0100 0000 df14 0800 0000 0000     ................
 800df80:	0000 0000 0010 0000 de50 0800               ........P...

0800df8c <aes_128_ecb_info>:
 800df8c:	0102 0000 0080 0000 df2c 0800 0000 0000     ........,.......
 800df9c:	0000 0000 0010 0000 de50 0800               ........P...

0800dfa8 <mbedtls_sha224_info>:
 800dfa8:	0005 0000 dfe0 0800 001c 0000 0040 0000     ............@...
 800dfb8:	b8ad 0800 b8a9 0800 b8a5 0800 b895 0800     ................
 800dfc8:	b87d 0800 b869 0800 b865 0800 b861 0800     }...i...e...a...
 800dfd8:	4853 3241 3635 0000 4853 3241 3432 0000     SHA256..SHA224..

0800dfe8 <mbedtls_sha256_info>:
 800dfe8:	0006 0000 dfd8 0800 0020 0000 0040 0000     ........ ...@...
 800dff8:	b8b5 0800 b8a9 0800 b8a5 0800 b89d 0800     ................
 800e008:	b87d 0800 b869 0800 b865 0800 b861 0800     }...i...e...a...

0800e018 <K>:
 800e018:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 800e028:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 800e038:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 800e048:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 800e058:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 800e068:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 800e078:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 800e088:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 800e098:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 800e0a8:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 800e0b8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 800e0c8:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 800e0d8:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 800e0e8:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 800e0f8:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 800e108:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

0800e118 <platform_binding_shared_secret_metadata_final>:
 800e118:	1720 01c0 d001 e107 07fc 20fe 40e1 03d1      .......... .@..
 800e128:	fce1 d307 0001 01e8 0022 0000 6e55 6f6c     ........"...Unlo
 800e138:	6b63 0000 6553 4363 6d6f 0000 6f4c 6b63     ck..SecCom..Lock
 800e148:	0000 0000 6f43 6d6d 6e61 0064 6552 0071     ....Command.Req.

0800e158 <rsa_public_key_exponent>:
 800e158:	0100 0100                                   ....

0800e15c <rsa_public_key_modulus>:
 800e15c:	79d6 5278 1cfd 0166 6a20 7f4a 5424 c2f1     .yxR..f. jJ.$T..
 800e16c:	eb86 c51a c2ff 29eb 2ae6 3e8f f1ff 6292     .......).*.>...b
 800e17c:	20fd 8ceb a3cc 4e13 2815 e31d 1a0a 857b     . .....N.(....{.
 800e18c:	c416 69ea 756f 4360 8562 3c2b 4ab1 dfbf     ...iou`Cb.+<.J..
 800e19c:	33b5 6f00 f74d 3487 4ab9 07f3 84d6 4a3e     .3.oM..4.J....>J
 800e1ac:	169b 39dd 32fa aa7f 6a13 0ddb 4269 f416     ...9.2...j..iB..
 800e1bc:	ef63 a4d4 0eb2 d61e 1129 afff 72ac 3ef6     c.......)....r.>
 800e1cc:	db4c bc0d 0962 f6e7 44d7 1b10 b956 2142     L...b....D..V.B!
 800e1dc:	0100 0302 0004 0000 6544 696e 6465 6220     ........Denied b
 800e1ec:	2079 6f63 6c6f 6f64 6e77 002e 0000 0000     y cooldown......
	...
 800e204:	6f4c 6b63 6465 0000 0000 0000 0000 0000     Locked..........
	...
 800e224:	6f43 6d6d 6e61 2064 6572 7073 6e6f 6573     Command response
	...
 800e244:	6552 2071 7220 7365 6f70 736e 0065 0000     Req  response...
	...
 800e264:	6e55 6e6b 776f 206e 6572 7571 7365 0074     Unknown request.
	...
 800e284:	6f43 6c6f 6f64 6e77 6120 7463 7669 7461     Cooldown activat
 800e294:	6465 002e 0000 0000 0000 0000 0000 0000     ed..............
 800e2a4:	6552 7571 7365 2074 6564 696e 6465 002e     Request denied..
	...
 800e2c4:	0043 0000                                   C...
